<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0"
    xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Blog by Nushan Kodikara</title>
        <link>https://blog.nushankodikara.com/</link>
        <description>Recent content on Blog by Nushan Kodikara</description>
        <generator>Hugo -- gohugo.io</generator>
        <lastBuildDate>Thu, 16 Dec 2021 08:32:21 +0530</lastBuildDate>
    
	<atom:link href="https://blog.nushankodikara.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
<title>Let&#39;s Create a Free VPS Server</title>
<link>https://blog.nushankodikara.com/blog/lets-create-a-free-vps-server/</link>
<pubDate>Thu, 16 Dec 2021 08:32:21 +0530</pubDate>
      
      <guid>https://blog.nushankodikara.com/blog/lets-create-a-free-vps-server/</guid>
<description>&lt;p&gt;The process of creating a free VPS server is very simple. Some people overcomplicate the process and the ones who follow them will get frustrated. Let&amp;rsquo;s see how we can create a free VPS server in just a few steps, without complicating the process. If you got any issues while following the steps, please feel free to contact me through &lt;a href=&#34;https://t.me/+FtAyOh8JBWg4OGU1&#34;&gt;Telegram&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;step-1-creating-an-account-on-vps-provider&#34;&gt;Step 1: Creating An Account On VPS Provider&lt;/h2&gt;
&lt;p&gt;Today in this guide, we&amp;rsquo;re using a site called &lt;a href=&#34;https://hax.co.id/&#34;&gt;Hax.co.id&lt;/a&gt;. It&amp;rsquo;s a site that provides free VPS servers. Unfortunately, this site doesn&amp;rsquo;t provide any premium servers, in-case you needed to upgrade. So, if you need to create a premium server, you can use &lt;a href=&#34;https://www.digitalocean.com/&#34;&gt;DigitalOcean&lt;/a&gt;. Follow along the steps below to create an account on the site.&lt;/p&gt;
&lt;p&gt;Browse to the site &lt;a href=&#34;https://hax.co.id/&#34;&gt;https://hax.co.id/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/2021_12_16_P1.png&#34; alt=&#34;Homepage&#34;&gt;&lt;/p&gt;
&lt;p&gt;You will be greeted with this home page. If you&amp;rsquo;re a new user, you need to click on the button &lt;code&gt;Register&lt;/code&gt; to create an account. Remember, you need an Telegram account to create an account on this site. After clicking on the register button, you will be redirected to the registration page, where you&amp;rsquo;ll be asked for your telegram ID.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/2021_12_16_P2.0.png&#34; alt=&#34;Register&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here enter your telegram ID. If you don&amp;rsquo;t know your telegram ID, just go to the telegram app and search for @haxTG_bot.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/2021_12_16_P2.1.png&#34; alt=&#34;Telegram Search&#34;&gt;&lt;/p&gt;
&lt;p&gt;Click on the first result and you&amp;rsquo;ll get to the telegram bot page, tap on &lt;code&gt;start&lt;/code&gt; button and the bot will send you your telegram ID.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/2021_12_16_P2.3.png&#34; alt=&#34;Telegram Bot&#34;&gt;&lt;/p&gt;
&lt;p&gt;Enter Your Telegram ID in the form and click on the &lt;code&gt;Submit&lt;/code&gt; button. As soon as you tapped on the submit button, The bot will send you an Authentication Code. Copy this code and enter it in the next form, and click submit.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/2021_12_16_P2.4.png&#34; alt=&#34;Authentication Code&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/2021_12_16_P3.png&#34; alt=&#34;Registration Forum&#34;&gt;&lt;/p&gt;
&lt;p&gt;Congratulation! You have successfully registered on the site. Now, you can login to your account.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/2021_12_16_P4.png&#34; alt=&#34;Login&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;step-2-creating-a-vps-server&#34;&gt;Step 2: Creating A VPS Server&lt;/h2&gt;
&lt;p&gt;After logging in to the site, you&amp;rsquo;ll be greeted by the VPS information page. where you can see that you do not have a VPS server yet. Click on the &lt;code&gt;Create one here&lt;/code&gt; button to create a VPS server.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/2021_12_16_P5.png&#34; alt=&#34;Create VPS Server&#34;&gt;&lt;/p&gt;
&lt;p&gt;After clicking on the button, you&amp;rsquo;ll be redirected to the VPS creation page. Here you can setup your VPS server.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/2021_12_16_P6.png&#34; alt=&#34;VPS Creation&#34;&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s go through the forum to setup your VPS server.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First you need to select your Data Center. Select any data center from the dropdown menu.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Next you need to select your Operating system. I have choosed Ubuntu 20, Choose your system according to your needs. If you don&amp;rsquo;t know what is the best one for you, just go with Ubuntu 20.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Next you need to enter a SSH password. This password will be used when we connect to your VPS server through SSH. Remebmer to keep this password safe!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This site requires you to select the purpose of your VPS, select one according to your needs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tick all the tick boxes with license agreements and click on &lt;code&gt;Create VPS&lt;/code&gt; button to complete your VPS creation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/2021_12_16_P7.png&#34; alt=&#34;VPS Created!&#34;&gt;&lt;/p&gt;
&lt;p&gt;Congratulations! you have succesfully created your VPS server. Now, you can access your VPS server through SSH. But before that, you need to setup a domain name for easy access.&lt;/p&gt;
&lt;h2 id=&#34;step-3-creating-a-domain-name&#34;&gt;Step 3: Creating A Domain Name&lt;/h2&gt;
&lt;p&gt;I have written a guide on how to create your own free Top level domain using Freenom and how you can connect it to a free DNS service before. &lt;a href=&#34;https://www.nushankodikara.com/blog/free-top-level-domain-names-2020/&#34;&gt;goto This This Link&lt;/a&gt; And follow the steps to create and cofigure a domain name.&lt;/p&gt;
&lt;h2 id=&#34;step-4-configuring-the-dns-server&#34;&gt;Step 4: Configuring The DNS Server&lt;/h2&gt;
&lt;p&gt;After creating your domain name, you need to configure your DNS server. This is the place where you can add your VPS IP to your DNS server. First go to your VPS server&amp;rsquo;s &lt;a href=&#34;https://hax.co.id/vps-info/&#34;&gt;Information page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/2021_12_16_P8.png&#34; alt=&#34;VPS Information&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here you can see your IPV6 Address. Copy this IPV6 address and come to your DNS settings on netlify ( Configured in Step 3 ).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/2021_12_16_P9.png&#34; alt=&#34;DNS Settings&#34;&gt;&lt;/p&gt;
&lt;p&gt;Click on &lt;code&gt;Add new record&lt;/code&gt; button and enter the following details.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/2021_12_16_P10.png&#34; alt=&#34;DNS Record&#34;&gt;&lt;/p&gt;
&lt;p&gt;Your Record Type Must be &lt;code&gt;AAAA&lt;/code&gt; which stands for IPV6 aliases. in the Name tab enter &lt;code&gt;@&lt;/code&gt; symbol to indicate you&amp;rsquo;re using the root domain. In the Value tab enter your IPV6 address, which you copied from the server. And press save to save your record.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/2021_12_16_P11.png&#34; alt=&#34;DNS Record&#34;&gt;&lt;/p&gt;
&lt;p&gt;If you did it correctly you&amp;rsquo;ll be able to see your DNS record as in the above image.&lt;/p&gt;
&lt;h2 id=&#34;step-5-ssh-access&#34;&gt;Step 5: SSH Access&lt;/h2&gt;
&lt;p&gt;Now here comes the fun part. Connecting to your VPS server. Here you have 2 methods.&lt;/p&gt;
&lt;h3 id=&#34;method-1-web-base-terminal&#34;&gt;Method 1: Web Base Terminal&lt;/h3&gt;
&lt;p&gt;Go to your VPS server&amp;rsquo;s &lt;a href=&#34;https://hax.co.id/vps-info/&#34;&gt;Information page&lt;/a&gt; again. and click on the &lt;code&gt;Web Base Terminal&lt;/code&gt; link at the bottom of the information box.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/2021_12_16_P12.0.png&#34; alt=&#34;Web Base Terminal&#34;&gt;&lt;/p&gt;
&lt;p&gt;Then you&amp;rsquo;ll be redirected to the terminal page. Here first you need to enter your SSH password, which we created in step 2. Press on connect button and you&amp;rsquo;ll be connected to your VPS server.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/2021_12_16_P12.1.png&#34; alt=&#34;SSH Connected!&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;method-2-ssh-terminal-recommended&#34;&gt;Method 2: SSH Terminal (Recommended)&lt;/h3&gt;
&lt;p&gt;This method is same for all Windows, Mac And linux desktops as well as android terminals.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re in windows. open Command Prompt (CMD), If you&amp;rsquo;re in Linux or Mac, Open up a terminal window. If you&amp;rsquo;re using an android device you can download and use an app called &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.server.auditor.ssh.client&#34;&gt;Termius&lt;/a&gt;. And follow along!&lt;/p&gt;
&lt;p&gt;First start a CMD or Terminal window.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/2021_12_16_P12.3.png&#34; alt=&#34;Terminal&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now Enter the following Command And press Enter.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-terminal&#34; data-lang=&#34;terminal&#34;&gt;ssh root@&amp;lt;yourdomain&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here replace &lt;code&gt;&amp;lt;yourdomain&amp;gt;&lt;/code&gt; with the domain name you registered in step 3.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/2021_12_16_P13.png&#34; alt=&#34;SSH Command&#34;&gt;&lt;/p&gt;
&lt;p&gt;After pressing enter, if you followed all the above steps correctly, you should be able to see a prompt asking &lt;code&gt;Are you sure you want to continue connecting (yes/no/[fingerprint])?&lt;/code&gt;. You need to enter &lt;code&gt;yes&lt;/code&gt; and press enter button to continue.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/2021_12_16_P14.png&#34; alt=&#34;SSH Command&#34;&gt;&lt;/p&gt;
&lt;p&gt;Again you&amp;rsquo;ll be asked for the SSH password we created in step 2. Enter it and press enter. (Please note you won&amp;rsquo;t be able to see the password in the terminal window while entering it. It&amp;rsquo;s for security purposes.)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/2021_12_16_P15.png&#34; alt=&#34;SSH Command&#34;&gt;&lt;/p&gt;
&lt;p&gt;If you did everything correctly, you should be able to see your VPS server&amp;rsquo;s terminal.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/2021_12_16_P16.png&#34; alt=&#34;SSH Terminal&#34;&gt;&lt;/p&gt;
&lt;p&gt;Congratulations! You have successfully connected to your VPS server. Now, you can access your VPS server through SSH.&lt;/p&gt;
&lt;h2 id=&#34;step-6-updating-your-vps-server&#34;&gt;Step 6: Updating Your VPS Server&lt;/h2&gt;
&lt;p&gt;Technically you can do whatever you need right now. But I would recommend you to update your VPS server to the latest version. Follow along the guide to do so.&lt;/p&gt;
&lt;p&gt;First enter the command&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-terminal&#34; data-lang=&#34;terminal&#34;&gt;sudo apt-get update
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then press enter to start updating your repositories.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/2021_12_16_P17.png&#34; alt=&#34;Update Repositories&#34;&gt;&lt;/p&gt;
&lt;p&gt;It would take a minute or two to update your repositories. After updating your repositories, you need to upgrade your installed packages. to do so, enter the command&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-terminal&#34; data-lang=&#34;terminal&#34;&gt;sudo apt-get upgrade
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then press enter.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/2021_12_16_P18.png&#34; alt=&#34;Update Packages&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here you&amp;rsquo;ll be asked again to confirm your upgrade. Enter &lt;code&gt;y&lt;/code&gt; and press the enter button to allow the upgrade.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/2021_12_16_P19.png&#34; alt=&#34;Update Packages&#34;&gt;&lt;/p&gt;
&lt;p&gt;This will take a while to complete so stay tight. While upgrading your packages, you&amp;rsquo;ll see a prompt like this one.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/2021_12_16_P20.png&#34; alt=&#34;Update Packages&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here navigate with up and down arrow keys and select the option which say &lt;code&gt;keep the local version currently installed&lt;/code&gt;. Then press enter to confirm. Let the process run. Finally you&amp;rsquo;ll be able to see a done message.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/2021_12_16_P21.png&#34; alt=&#34;Update Packages&#34;&gt;&lt;/p&gt;
&lt;p&gt;Congratulations! You have successfully updated your VPS server.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll explore what we can do with such a server in the next article. Follow me on TikTok to get an quick update over the next few days.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>About Me</title>
<link>https://blog.nushankodikara.com/page/about/</link>
<pubDate>Wed, 15 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://blog.nushankodikara.com/page/about/</guid>
<description>&lt;p&gt;I am a software developer with a passion for creating applications that improves the lives of others. I have a strong background in web development and have worked with a wide range of technologies. I am currently working on a project that aims to improve the lives of people in Sri Lanka.&lt;/p&gt;
&lt;p&gt;With the current pandemic, as more and more people trying to get into the tech industry, my goal with this blog is to help them master the skills they need to be successful in the industry. I hope to be able to share my knowledge and experience with you.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Git Hub Pages for Web Hosting</title>
<link>https://blog.nushankodikara.com/blog/git-hub-pages-for-web-hosting/</link>
<pubDate>Wed, 12 Aug 2020 06:00:00 +0530</pubDate>
      
      <guid>https://blog.nushankodikara.com/blog/git-hub-pages-for-web-hosting/</guid>
<description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Github pages is one of the most used and in my opinion the best static hosting site available right now, It only has a free version and it&amp;rsquo;s all we need, let me show you how we can create and deploy a static website to github, and then how we can assign a custom domain to the site and enable SSL certificate in few minuets.&lt;/p&gt;
&lt;h2 id=&#34;starting-with-git-hub&#34;&gt;Starting With git-hub&lt;/h2&gt;
&lt;p&gt;First we need to goto github and login to your account. Then click on the new button to create a new repository then clone it to your machine using GitHub desktop application. Remember to keep the repo public to make it available to github pages.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200812_01.gif&#34; alt=&#34;Github Cloning&#34;&gt;&lt;/p&gt;
&lt;p&gt;Then you can open github desktop application and got the repository &amp;gt; code &amp;gt; open in github desktop to open it with the application, then clone it as usual.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200812_02.gif&#34; alt=&#34;Github Cloning&#34;&gt;&lt;/p&gt;
&lt;p&gt;After cloning the application, you can go to the directory and put your site files there, Here I&amp;rsquo;m creating a static website using Firebase to demonstrate this platform can be used to deploy your applications&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200812_03.gif&#34; alt=&#34;Github Cloning&#34;&gt;&lt;/p&gt;
&lt;p&gt;You can see what changes has been made in the desktop application or the visual studio application if you&amp;rsquo;re using it&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200812_04.png&#34; alt=&#34;Github Cloning&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200812_05.png&#34; alt=&#34;Github Cloning&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now I&amp;rsquo;m generating a new app in firebase in order to connect our application to a database, we discussed these in previous tutorials but here I&amp;rsquo;m doing it again.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200812_06.gif&#34; alt=&#34;Github Cloning&#34;&gt;&lt;/p&gt;
&lt;p&gt;As you can see I also added the firebase realtime database functionality after the initialization.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200812_07.png&#34; alt=&#34;Github Cloning&#34;&gt;&lt;/p&gt;
&lt;p&gt;This is a simple application without much complex codes, and here it&amp;rsquo;s in action in my localhost server. Also this is how my folder structure looks like.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200812_08.gif&#34; alt=&#34;Github Cloning&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200812_09.png&#34; alt=&#34;Github Cloning&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s push our site to github. In order to do this go to the main application and add summery to commit the update. After committing you can push the site with the push button.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200812_10.gif&#34; alt=&#34;Github Cloning&#34;&gt;&lt;/p&gt;
&lt;p&gt;After that you can see the repository has been updated with new documents we just pushed. Now go to the repository in github website and goto settings. here you can scroll down to github pages section and in the source select your branch (default is master) and the directory of your site, my site is in the root folder so I select it and click save. Then you can see a link appear on the top of the page section and that&amp;rsquo;s all for deployment. It won&amp;rsquo;t be updated asap so be patient with it. After few minutes you can see the site up and running&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200812_11.gif&#34; alt=&#34;Github Cloning&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200812_12.gif&#34; alt=&#34;Github Cloning&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;adding-a-custom-domain&#34;&gt;Adding a custom domain&lt;/h2&gt;
&lt;p&gt;Now let&amp;rsquo;s add a custom domain to our site. In order to do this, goto your name server and add a DNS record pointing to your main repository. it would be &lt;code&gt;&amp;lt;username&amp;gt;.github.io&lt;/code&gt; in my case It&amp;rsquo;s &lt;code&gt;nushankodikara.github.io&lt;/code&gt; and point it to www or whatever sub-domain you prefer. I&amp;rsquo;m using a domain from &lt;a href=&#34;https://blog.nushankodikara.com/post/free-top-level-domain-names-2020/&#34;&gt;This Guide&lt;/a&gt; Remember it could take 2-3 minutes to update. Then go to the github pages section under settings and enter the domain in custom domain section and save it. if everything went correctly, now you can see your site in your custom domain.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200812_13.gif&#34; alt=&#34;Github Cloning&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;enabling-ssl&#34;&gt;Enabling SSL&lt;/h2&gt;
&lt;p&gt;This is an important feature in 2020, SSL Certification is compulsory if you&amp;rsquo;re creating a commercial product. You can do this in a flip of a switch. Just tick the Enforce HTTPS tick and you&amp;rsquo;re pretty-much done!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200812_14.gif&#34; alt=&#34;Github Cloning&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200812_15.png&#34; alt=&#34;Github Cloning&#34;&gt;&lt;/p&gt;
&lt;p&gt;(You can see the Lock Pad with the URL)&lt;/p&gt;
&lt;p&gt;And That&amp;rsquo;s All!&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s That simple! And I use it for almost all of my projects. Believe or not, even I use this technique to host this website and I&amp;rsquo;m not paying a single penny on it! Considering security, no one can hack into your site unless they have your github passwords, so considering it that&amp;rsquo;s a big plus point! Hope you learn something new today, and wish you luck on you journey!&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Creating a Weather App Using Openweathermaps API</title>
<link>https://blog.nushankodikara.com/blog/creating-a-weather-app-using-openweathermaps/</link>
<pubDate>Tue, 11 Aug 2020 06:00:00 +0530</pubDate>
      
      <guid>https://blog.nushankodikara.com/blog/creating-a-weather-app-using-openweathermaps/</guid>
<description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;As I Promised, We&amp;rsquo;re doing advanced app examples today, to be specific, we&amp;rsquo;re creating a weather application using openweathermap API, owfont-regular, vivify for animation, font-awesome pack, progressbar.js for sun-timer , jquery.cookie, jquery-3.5.1 and apexcharts for weather details. We&amp;rsquo;re making this application responsible and I&amp;rsquo;ll link down the documentations off all the libraries we use, with them if you don&amp;rsquo;t understand the code, you can always copy and paste it and it would work fine without a problem at all!&lt;/p&gt;
&lt;p&gt;This application can be used as a website or you can create a hybrid app using cordova. Also remember to add location permission if you&amp;rsquo;re creating a hybrid app.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200811_01.gif&#34; alt=&#34;Weather Application&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;adding-hybrid-app-support&#34;&gt;Adding hybrid app support&lt;/h2&gt;
&lt;p&gt;If you&amp;rsquo;re using cordova with this code, run this command to add geo location support&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;cordova plugin add cordova-plugin-geolocation&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;library-documentations&#34;&gt;Library Documentations&lt;/h2&gt;
&lt;p&gt;Here you can read about each library I used, if you found something simpler than these, please let me know in the comment section.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://openweathermap.org/api&#34;&gt;https://openweathermap.org/api&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://websygen.github.io/owfont/&#34;&gt;https://websygen.github.io/owfont/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://vivify.mkcreative.cz/&#34;&gt;http://vivify.mkcreative.cz/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://fontawesome.com/&#34;&gt;https://fontawesome.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kimmobrunfeldt.github.io/progressbar.js/&#34;&gt;https://kimmobrunfeldt.github.io/progressbar.js/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://api.jquery.com/&#34;&gt;https://api.jquery.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://apexcharts.com/docs/installation/&#34;&gt;https://apexcharts.com/docs/installation/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Alright, If you study these libraries in advance, you can accurately understand what&amp;rsquo;s going on with the application. Also note I purchased font awesome pack and included it in here for free, so you can use it for anything you want! And let&amp;rsquo;s dive into the code! as always, you can download the project &lt;a href=&#34;https://blog.nushankodikara.com/zip/WesperWeather.rar&#34;&gt;From This Link&lt;/a&gt; also use WinRAR to unzip this project file.&lt;/p&gt;
&lt;h2 id=&#34;getting-an-api-key-from-openweathermaps&#34;&gt;Getting an API key from OpenWeatherMaps&lt;/h2&gt;
&lt;p&gt;First go to &lt;a href=&#34;https://openweathermap.org/api&#34;&gt;https://openweathermap.org/api&lt;/a&gt; and click subscribe on currentWeatherData api section. and click on get api key and sign up with your details and you&amp;rsquo;ll be presented with an api key, but it would take up-to 24h to activate it so be patient. I Did it so I&amp;rsquo;m logging in to my account.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200811_02.gif&#34; alt=&#34;Getting a new API&#34;&gt;&lt;/p&gt;
&lt;p&gt;Note: Replace the key variable in the index.js file to start fetching.&lt;/p&gt;
&lt;h2 id=&#34;lets-start-coding&#34;&gt;Let&amp;rsquo;s Start Coding&lt;/h2&gt;
&lt;p&gt;Alright with that preparation done already, use any code editor you like to alter with this application, I put some comments for you to understand the code better, I&amp;rsquo;ll explain if something big is going on.&lt;/p&gt;
&lt;p&gt;HTML code&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;lang&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;head&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;charset&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;UTF-8&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;viewport&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;content&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;title&lt;/span&gt;&amp;gt;Wesper.io&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;title&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;./css/style.css&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;./css/owfont-regular.min.css&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;./css/vivify.min.css&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;./fontawesome/css/all.min.css&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;preload&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;as&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;font&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;./fonts/owfont-regular.woff&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;font/woff2&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;crossorigin&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;anonymous&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;head&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!-- Splash screen at the first --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;splashScreen&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;white-space: nowrap;&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;img&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;flipInY&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;./img/logo.png&amp;#34;&lt;/span&gt; /&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h1&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mainTitle flipInX&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fad fa-eclipse-alt&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt; { Wesper.io }&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h1&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!-- All of the content goes here --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;splashCont&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;display: none;&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!-- Main Heading --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h1&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mainTitle&amp;#34;&lt;/span&gt;&amp;gt;{ Wesper.io }&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h1&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!-- Search Bar --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;search&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;placeholder&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Enter your search here...&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;searchBar&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;searchQuery()&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;searchButton&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fas fa-search&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!-- Main top card at --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;card redBG&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;table&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;padding: 20px;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;subTemp floatLeft&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;minTempC&amp;#34;&lt;/span&gt;&amp;gt;Min -&amp;amp;#730;C&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;padding: 20px;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;subTemp floatRight&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;maxTempC&amp;#34;&lt;/span&gt;&amp;gt;Max -&amp;amp;#730;C&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;colspan&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;subTemp&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;desTempC&amp;#34;&lt;/span&gt;&amp;gt;---&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;colspan&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mainTemp&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mainTempC&amp;#34;&lt;/span&gt;&amp;gt;-&amp;amp;#730;C&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mainIconC&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;owf owf-5x owf-731&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;colspan&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;subTemp&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;far fa-compass&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;locationC&amp;#34;&lt;/span&gt;&amp;gt;--&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;countryC&amp;#34;&lt;/span&gt;&amp;gt;--&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;colspan&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;nightDay()&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                &lt;span style=&#34;color:#50fa7b&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;color: white;float: left; padding-left: 20px; font-size: 35px;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fad fa-moon-stars&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;feelLike&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;feelTempC&amp;#34;&lt;/span&gt;&amp;gt;--&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;locateQuery()&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                &lt;span style=&#34;color:#50fa7b&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;color: white;float: right; padding-right: 20px; font-size: 35px;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fad fa-location&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;table&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!-- Sun Timer Card --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;card&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;table&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;colspan&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;subTitle&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sunTitle&amp;#34;&lt;/span&gt;&amp;gt;Sun Timer&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;colspan&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sunIcon&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fad fa-clouds-sun mainIcon&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;colspan&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;progress&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;faicon&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fad fa-sunrise&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;float: left;&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;faicon&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fad fa-sunset&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;float: right;&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;clock floatLeft&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sunRise&amp;#34;&lt;/span&gt;&amp;gt; --:-- &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;clock&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sunNow&amp;#34;&lt;/span&gt;&amp;gt; --:-- &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;clock floatRight&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sunSet&amp;#34;&lt;/span&gt;&amp;gt; --:-- &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;table&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!-- Daily Summery section --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;card&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;table&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;colspan&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;subTitle&amp;#34;&lt;/span&gt;&amp;gt;Summery Of Today&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;colspan&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fad fa-campfire mainIcon&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;colspan&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sqitem&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sqhead&amp;#34;&lt;/span&gt;&amp;gt;Main Forecast&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;br&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sqicon&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mainIC&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fad fa-tree-large&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;br&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sqbody&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mainFC&amp;#34;&lt;/span&gt;&amp;gt;-&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sqitem&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sqhead&amp;#34;&lt;/span&gt;&amp;gt;Dew Point&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;br&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sqicon&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fad fa-dewpoint&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;br&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sqbody&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;dewPointC&amp;#34;&lt;/span&gt;&amp;gt;0&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sqitem&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sqhead&amp;#34;&lt;/span&gt;&amp;gt;Humidity&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;br&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sqicon&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fad fa-humidity&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;br&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sqbody&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;humidityC&amp;#34;&lt;/span&gt;&amp;gt;0&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sqitem&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sqhead&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mainFC&amp;#34;&lt;/span&gt;&amp;gt;Presure&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;br&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sqicon&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fad fa-tire-pressure-warning&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;br&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sqbody&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;presureC&amp;#34;&lt;/span&gt;&amp;gt;0&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sqitem&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sqhead&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mainFC&amp;#34;&lt;/span&gt;&amp;gt;UV Index&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;br&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sqicon&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fad fa-sunglasses&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;br&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sqbody&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;uviC&amp;#34;&lt;/span&gt;&amp;gt;0&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sqitem&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sqhead&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mainFC&amp;#34;&lt;/span&gt;&amp;gt;Wind Speed&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;br&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sqicon&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fad fa-wind&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;br&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sqbody&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;windSC&amp;#34;&lt;/span&gt;&amp;gt;0 KM/H&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sqitem&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sqhead&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mainFC&amp;#34;&lt;/span&gt;&amp;gt;Wind Direction&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;br&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sqicon&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fad fa-compass&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;br&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sqbody&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;windDC&amp;#34;&lt;/span&gt;&amp;gt;0&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sqitem&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sqhead&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mainFC&amp;#34;&lt;/span&gt;&amp;gt;Rain&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;br&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sqicon&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fad fa-cloud-sun-rain&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;br&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sqbody&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;rainC&amp;#34;&lt;/span&gt;&amp;gt;0&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sqitem&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sqhead&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mainFC&amp;#34;&lt;/span&gt;&amp;gt;Snow&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;br&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sqicon&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fad fa-snowman&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;br&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sqbody&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;snowC&amp;#34;&lt;/span&gt;&amp;gt;0&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;colspan&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sqitem&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sqhead&amp;#34;&lt;/span&gt;&amp;gt;Cloudiness&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;br&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sqicon&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fad fa-clouds&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;br&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sqbody&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;cloudinessC&amp;#34;&lt;/span&gt;&amp;gt;0&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;table&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!-- 48 Hour Summery Tile --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;card sweetmorningBG&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;subTitle&amp;#34;&lt;/span&gt;&amp;gt;Summery Of 48 Hours&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;H48Table&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;table&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;H48Hou&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;text-align: center;&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;H48Ico&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;text-align: center;&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;H48Con&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;text-align: center;&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;H48Tem&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;text-align: center;&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;H48Row&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;text-align: center;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;H48Wdi&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;windDir&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;img&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;transform: rotate(-45deg);&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;winDirImgDark&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                    &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;./fontawesome/svgs/duotone/location-arrow.svg&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;table&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!-- 48 Hour Temperature --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;card yellowBG&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;overflow: auto; height: 450px;&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;subTitle&amp;#34;&lt;/span&gt;&amp;gt;48h Temperature&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;br&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;chart&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;display: inline-block; width: 100%;&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!-- 7Day Summery --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;card riverBG&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;subTitle&amp;#34;&lt;/span&gt;&amp;gt;Summery Of 7 Days&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;D7Table&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;table&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;D7Day&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;text-align: center;&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;D7Ico&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;text-align: center;&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;D7Con&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;text-align: center;&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;D7Tem&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;text-align: center;&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;D7Row&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;text-align: center;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;D7Wdi&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;windDir&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;img&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;transform: rotate(-45deg);&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;winDirImg&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                    &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;./fontawesome/svgs/duotone/location-arrow.svg&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;table&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!-- Social Icons and the footer --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;footer&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;socialIcons&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;table&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://www.facebook.com/nushan.kodikara.7&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;color: gray;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                    &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fab fa-facebook-square&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://www.instagram.com/____nushan_/&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;color: gray;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                    &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fab fa-instagram-square&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://twitter.com/kodikara_nushan&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;color: gray;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                    &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fab fa-twitter-square&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://www.snapchat.com/add/nushankod&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;color: gray;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                    &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fab fa-snapchat-square&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;colspan&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;attribution&amp;#34;&lt;/span&gt;&amp;gt;Copyright 2020 Nushan Kodikara. All Rights Reserved. Powered By
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                Openweathermaps.&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;table&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;footer&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;./js/apexcharts.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;./js/jquery-3.5.1.min.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;./js/jquery.cookie.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;./js/progressbar.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;./js/index.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I Downloaded all of the above libraries and added it in the project file, so don&amp;rsquo;t forget to get it if you&amp;rsquo;re doing it with me, or link up CDN from the documentations.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scss&#34; data-lang=&#34;scss&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;scroll-behavior&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; smooth;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rgb&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;56&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;56&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;56&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;background-color&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; floralwhite;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;text-align&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; center;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;font-family&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; monospace;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;.card&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;90&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;vw&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;border-radius&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;padding-top&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;padding-bottom&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;margin-top&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;display&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; inline-block;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;.fullWidth&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;90&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;vw&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;.redBG&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;background-image&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;linear-gradient&lt;/span&gt;(to right bottom&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#eb3349&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#ee3f47&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#f04946&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#f25344&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#f45c43&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rgb&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;56&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;56&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;56&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;.blueBG&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;background-image&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;linear-gradient&lt;/span&gt;(to right bottom&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#2193b0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#37a3bf&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#4ab3ce&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#5cc4de&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#6dd5ed&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rgb&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;56&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;56&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;56&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;.greenBG&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;background-image&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;linear-gradient&lt;/span&gt;(to right bottom&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#56ab2f&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#6bb83c&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#80c549&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#94d356&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#a8e063&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rgb&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;56&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;56&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;56&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;.yellowBG&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;background-image&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;linear-gradient&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;109&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;.6&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;deg&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rgba&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;255&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;207&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;84&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#bd93f9&#34;&gt;11&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;.2&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rgba&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;255&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;158&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;27&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#bd93f9&#34;&gt;91&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;.1&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rgb&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;56&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;56&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;56&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;.roseBG&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;background-image&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;radial-gradient&lt;/span&gt;(circle farthest-corner at &lt;span style=&#34;color:#bd93f9&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;.4&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;.5&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rgba&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;251&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;32&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;86&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rgba&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;135&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;35&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#bd93f9&#34;&gt;90&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; floralwhite;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;.riverBG&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;background-image&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;linear-gradient&lt;/span&gt;(to right bottom&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#43cea2&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#00b5b3&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#0099bb&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#007ab4&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#185a9d&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; floralwhite;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;.sweetmorningBG&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;background-image&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;linear-gradient&lt;/span&gt;(to right bottom&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#ff5f6d&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#ff7a65&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#ff9362&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#ffac66&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#ffc371&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rgb&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;56&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;56&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;56&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;table&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;position&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; relative;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;height&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;table&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;height&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;65&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;.mainTemp&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rgb&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;56&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;56&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;56&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;font-size&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;80&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;font-weight&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; bold;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;.subTemp&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;font-size&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; floralwhite;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;.feelLike&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;font-size&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; floralwhite;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;.mainTitle&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;font-size&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;40&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#progress {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;90&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;position&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; relative;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;display&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; inline-block;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;.subTitle&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;font-size&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;28&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;font-family&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; monospace;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;font-weight&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; bolder;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;.subTitle2&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;font-size&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;font-weight&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; bold;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;.faicon&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;font-size&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;.clock&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;font-size&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;padding&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;margin&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;border-radius&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;border&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; solid &lt;span style=&#34;color:#50fa7b&#34;&gt;rgb&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;56&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;56&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;56&lt;/span&gt;) &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;.floatLeft&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;float&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; left;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;.floatRight&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;float&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; right;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;.sqitem&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;height&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;padding&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;border-radius&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;border&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; solid &lt;span style=&#34;color:#bd93f9&#34;&gt;#e0e0e0&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;71&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;background-color&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#e0e0e0&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;9&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;d&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;.sqitem&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;.sqhead&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;font-size&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;font-family&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; monospace;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;.sqitem&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;.sqbody&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;font-size&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;25&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;font-family&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; monospace;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rgba&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;47&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;79&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;79&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;.384&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;.sqitem&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;.sqicon&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;font-size&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;60&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;.mainIcon&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;font-size&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;90&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;padding&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#D7Table {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;overflow&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; auto;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#D7Table &lt;span style=&#34;color:#ff79c6&#34;&gt;table&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1800&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#D7Table &lt;span style=&#34;color:#ff79c6&#34;&gt;table&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;text-align&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; left;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#D7Table &lt;span style=&#34;color:#ff79c6&#34;&gt;table&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;.windDir&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;font-size&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;90&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;.winDirImg&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;filter&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;invert&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;65&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;.winDirImgDark&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;filter&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;invert&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;65&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#H48Table {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;overflow&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; auto;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#H48Table &lt;span style=&#34;color:#ff79c6&#34;&gt;table&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;12500&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#H48Table &lt;span style=&#34;color:#ff79c6&#34;&gt;table&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;text-align&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; left;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#H48Table &lt;span style=&#34;color:#ff79c6&#34;&gt;table&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;.search&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;90&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;vw&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;margin&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; auto;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#searchBar {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;background&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; none;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;border-bottom&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt; solid white;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;border-top&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; none;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;border-left&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; none;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;border-right&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; none;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;vw&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;height&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;30&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#searchBar:focus {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;outline&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; none;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;border-bottom&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt; solid white;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; white;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#searchButton {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;vw&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;height&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;background&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; none;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;border&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; none;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#searchButton:focus {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;outline&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; none;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#searchButton &lt;span style=&#34;color:#50fa7b&#34;&gt;.fas&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; white;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;font-size&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;em&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;footer&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;height&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;padding&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;.socialIcons&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;font-size&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;35&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;.attribution&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;font-family&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; monospace;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;font-size&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;-webkit-touch-callout&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; none;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;-webkit-user-select&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; none;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;-khtml-user-select&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; none;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;-moz-user-select&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; none;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;-ms-user-select&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; none;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;user-select&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; none;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;text-transform&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; capitalize;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;::-webkit-scrollbar {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;@media&lt;/span&gt; screen &lt;span style=&#34;color:#ff79c6&#34;&gt;and&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;or&lt;/span&gt;ientation&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;portrait) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    #splashScreen &lt;span style=&#34;color:#ff79c6&#34;&gt;img&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;padding-top&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;vh&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;60&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;vw&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;@media&lt;/span&gt; screen &lt;span style=&#34;color:#ff79c6&#34;&gt;and&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;or&lt;/span&gt;ientation&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;landscape) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    #splashScreen &lt;span style=&#34;color:#ff79c6&#34;&gt;img&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;padding-top&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;vh&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;height&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;40&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;vh&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#chart {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; black;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I&amp;rsquo;m not explaining this one, SCSS is easy to understand and if you can&amp;rsquo;t go check out my scss course.&lt;/p&gt;
&lt;p&gt;Javascript&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; storage &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;window&lt;/span&gt;.localStorage;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; key &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;key&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// Add your openweathermaps key here
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Loading Animation and day-night theme checker
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;$(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;.card&amp;#39;&lt;/span&gt;).addClass(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;popInBottom duration-2000&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;i&amp;#39;&lt;/span&gt;).addClass(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;pulsate duration-2000 infinite icon&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(storage.getItem(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;dayNightS&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;?&lt;/span&gt; setLight()&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; setDark();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Checking for previous searched location from localStorage
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;$(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;).ready(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    setTimeout(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        (storage.getItem(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;preLocation&amp;#34;&lt;/span&gt;)) &lt;span style=&#34;color:#ff79c6&#34;&gt;?&lt;/span&gt; locationSearch(storage.getItem(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;preLocation&amp;#34;&lt;/span&gt;))&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; locateQuery();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }, &lt;span style=&#34;color:#bd93f9&#34;&gt;3000&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// night theme toggle
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; nightDay() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    (storage.getItem(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;dayNightS&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;?&lt;/span&gt; setDark()&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; setLight();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Setting night theme
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; setDark() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;body&amp;#39;&lt;/span&gt;).css({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;color&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;floralwhite&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;background-color&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;black&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;.sqitem&amp;#39;&lt;/span&gt;).css({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;border&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;solid #2e2e2e71 2px&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;background-color&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#5a5a5a9d&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;.sqitem .sqbody&amp;#39;&lt;/span&gt;).css({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;color&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;rgba(182, 182, 182, 0.4)&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#searchBar&amp;#39;&lt;/span&gt;).css({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;color&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;floralwhite&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;border-bottom&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;1px solid white&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#searchBar:focus&amp;#39;&lt;/span&gt;).css({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;border-bottom&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;1px solid white&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#searchButton .fas&amp;#39;&lt;/span&gt;).css({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;color&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;white&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// Setting theme variable
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    storage.setItem(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;dayNightS&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// setting day theme
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; setLight() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;body&amp;#39;&lt;/span&gt;).css({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;background-color&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;floralwhite&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;color&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;rgb(56, 56, 56)&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;.sqitem&amp;#39;&lt;/span&gt;).css({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;border&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;solid #e0e0e071 2px&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;background-color&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#e0e0e09d&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;.sqitem .sqbody&amp;#39;&lt;/span&gt;).css({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;color&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;rgba(47, 79, 79, 0.384)&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#searchBar&amp;#39;&lt;/span&gt;).css({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;color&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;rgb(56, 56, 56)&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;border-bottom&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;1px solid rgb(56, 56, 56)&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#searchBar:focus&amp;#39;&lt;/span&gt;).css({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;border-bottom&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;1px solid rgb(56, 56, 56)&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#searchButton .fas&amp;#39;&lt;/span&gt;).css({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;color&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;rgb(56, 56, 56)&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// Setting theme variable
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    storage.setItem(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;dayNightS&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;//Sun Bar initialization and setup
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; sunTimer(pres) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;#progress&amp;#34;&lt;/span&gt;).html(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; bar &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; ProgressBar.SemiCircle(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;#progress&amp;#34;&lt;/span&gt;, {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        strokeWidth&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        easing&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;easeInOut&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        duration&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1400&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        color&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#FFEA82&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        trailColor&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#2f4f4f&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        trailWidth&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        svgStyle&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    bar.animate(pres);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Clearing out previous results
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;sunTimer(&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Search initialization
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; searchQuery() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    locationSearch($(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#searchBar&amp;#39;&lt;/span&gt;).val())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Locate using GPS
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; locateQuery() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    navigator.geolocation.getCurrentPosition(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (position) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        fetch(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;https://api.openweathermap.org/data/2.5/weather?lon=&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; position.coords.longitude &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;amp;lat=&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; position.coords.latitude &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;amp;appid=&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; key)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            .then(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (resp) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; resp.json()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            .then(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (data) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (data.cod &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;404&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;City Not Found&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                } &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    geoSearch(data.coord.lat, data.coord.lon, data);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            .&lt;span style=&#34;color:#ff79c6&#34;&gt;catch&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (error) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Something Went Wrong 1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; error)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (error) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        locationSearch(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Bandarawela&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// locate using search term
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; locationSearch(city) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    fetch(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;https://api.openweathermap.org/data/2.5/weather?q=&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; city &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;amp;appid=&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; key)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .then(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (resp) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; resp.json()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .then(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (data) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (data.cod &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;404&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;City Not Found&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            } &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                geoSearch(data.coord.lat, data.coord.lon, data);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .&lt;span style=&#34;color:#ff79c6&#34;&gt;catch&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Search Using GPS
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; geoSearch(lat, lon, dataO) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    storage.setItem(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;preLocation&amp;#34;&lt;/span&gt;, dataO.name)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// Returning Data from Openweathermap API
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    fetch(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;https://api.openweathermap.org/data/2.5/onecall?lat=&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; lat &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;amp;lon=&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; lon &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;amp;units=metric&amp;amp;appid=&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; key)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .then(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (resp) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; resp.json()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .then(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (data) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            drawWeather(data, dataO);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        .&lt;span style=&#34;color:#ff79c6&#34;&gt;catch&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Adding values to the application
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; drawWeather(data, dataO) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;//Main Card
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#minTempC&amp;#39;&lt;/span&gt;).html(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Min &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Math&lt;/span&gt;.round(data.daily[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;].temp.min) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;amp;#730;C&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#desTempC&amp;#39;&lt;/span&gt;).html(data.current.weather[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;].description)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#maxTempC&amp;#39;&lt;/span&gt;).html(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Max &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Math&lt;/span&gt;.round(data.daily[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;].temp.max) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;amp;#730;C&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#mainTempC&amp;#39;&lt;/span&gt;).html(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Math&lt;/span&gt;.round(data.hourly[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;].temp) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;amp;#730;C&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    drawIcon(dataO)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#locationC&amp;#39;&lt;/span&gt;).html(dataO.name)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#countryC&amp;#39;&lt;/span&gt;).html(dataO.sys.country)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#feelTempC&amp;#39;&lt;/span&gt;).html(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Feels like &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Math&lt;/span&gt;.round(data.current.feels_like) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;amp;#730;C&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;//SunTime Card
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    calSunTime(dataO.sys.sunrise, dataO.sys.sunset)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;//SummeryOfToday Card
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#mainFC&amp;#39;&lt;/span&gt;).html(data.daily[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;].weather[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;].main)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#dewPointC&amp;#39;&lt;/span&gt;).html(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Math&lt;/span&gt;.round(data.daily[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;].dew_point) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;amp;#730;C&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#humidityC&amp;#39;&lt;/span&gt;).html(data.daily[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;].humidity &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;%&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#presureC&amp;#39;&lt;/span&gt;).html(data.daily[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;].pressure &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;HPa&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#uviC&amp;#39;&lt;/span&gt;).html(data.daily[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;].uvi)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#windSC&amp;#39;&lt;/span&gt;).html(data.daily[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;].wind_speed &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;KM/H&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#windDC&amp;#39;&lt;/span&gt;).html(data.daily[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;].wind_deg &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;amp;#730;&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#rainC&amp;#39;&lt;/span&gt;).html(data.daily[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;].rain &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mm&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#snowC&amp;#39;&lt;/span&gt;).html((data.daily[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;].snow) &lt;span style=&#34;color:#ff79c6&#34;&gt;?&lt;/span&gt; data.daily[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;].snow &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mm&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mm&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#cloudinessC&amp;#39;&lt;/span&gt;).html(data.daily[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;].clouds &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;%&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;//48HSummery Card
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    Hour48Filler(data)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;//Day7Summery Card
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    Day7Filler(data)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;//Remove Splash
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;#splashScreen&amp;#34;&lt;/span&gt;).hide()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;#splashCont&amp;#34;&lt;/span&gt;).show()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Adding Items data
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; drawIcon(d) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; hours &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Date&lt;/span&gt;().getHours();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; hours &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; (hours &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;24&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;24&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; mid &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;-d&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (hours &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (hours &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;12&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        mid &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;-n&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; lastClass &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#mainIconC&amp;#39;&lt;/span&gt;).attr(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;class&amp;#39;&lt;/span&gt;).split(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt;).pop();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#mainIconC&amp;#39;&lt;/span&gt;).removeClass(lastClass);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#mainIconC&amp;#39;&lt;/span&gt;).addClass(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;owf-&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; d.weather[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;].id &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; mid)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Unix server stamp time to local time
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; UnixToTime(unix_timestamp) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; date &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Date&lt;/span&gt;(unix_timestamp &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1000&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; hours &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; date.getHours();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; minutes &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; date.getMinutes();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; formattedTime &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; hours.substr(&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;:&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; minutes.substr(&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; formattedTime;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Calculating sun timer bar
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; calSunTime(sunin, sunout) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sunnow &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Date&lt;/span&gt;().getTime() &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1000&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; sunin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#sunRise&amp;#39;&lt;/span&gt;).html(UnixToTime(sunin))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#sunNow&amp;#39;&lt;/span&gt;).html(UnixToTime(sunnow &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; sunin))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#sunSet&amp;#39;&lt;/span&gt;).html(UnixToTime(sunout))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sunout &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; sunout &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; sunin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    sunpre &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; sunnow &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; sunout
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (sunnow &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; sunout) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;#sunTitle&amp;#34;&lt;/span&gt;).html(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Rise And Shine&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        sunTimer(sunpre)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#sunIcon&amp;#39;&lt;/span&gt;).html(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;lt;i class=&amp;#34;fad fa-clouds-sun mainIcon pulsate infinite duration-2000&amp;#34;&amp;gt;&amp;lt;/i&amp;gt;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;#sunTitle&amp;#34;&lt;/span&gt;).html(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Sun Is Sleeping&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        sunTimer(&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#sunIcon&amp;#39;&lt;/span&gt;).html(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;lt;i class=&amp;#34;fad fa-clouds-moon mainIcon pulsate infinite duration-2000&amp;#34;&amp;gt;&amp;lt;/i&amp;gt;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Filling 7 Day card
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; Day7Filler(data) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    D7Day &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    D7Ico &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    D7Con &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    D7Tem &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    D7Row &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    D7Wdi &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;7&lt;/span&gt;; i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        D7Day.push(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;lt;td&amp;gt; &amp;lt;span &amp;gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; dayReturn(data.daily[(i)].dt) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;lt;/span&amp;gt; &amp;lt;/td&amp;gt;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        D7Ico.push(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;lt;td&amp;gt; &amp;lt;i class=&amp;#34;owf owf-5x owf-&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; data.daily[(i)].weather[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;].id &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#34;&amp;gt;&amp;lt;/i&amp;gt; &amp;lt;/td&amp;gt;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        D7Con.push(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;lt;td&amp;gt; &amp;lt;span class=&amp;#34;subCondition&amp;#34; &amp;gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; data.daily[(i)].weather[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;].description &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;lt;/span&amp;gt; &amp;lt;/td&amp;gt;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        D7Tem.push(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;lt;td&amp;gt; &amp;lt;i class=&amp;#34;fad fa-temperature-frigid&amp;#34;&amp;gt;&amp;lt;/i&amp;gt; &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Math&lt;/span&gt;.round(data.daily[(i)].temp.min) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;amp;#730;C - &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Math&lt;/span&gt;.round(data.daily[(i)].temp.max) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;amp;#730;C &amp;lt;/td&amp;gt;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        D7Row.push(&lt;span style=&#34;color:#f1fa8c&#34;&gt;`
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;        &amp;lt;td style=&amp;#34;padding: 30px;&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;            &amp;lt;span&amp;gt;&amp;lt;i class=&amp;#34; fad fa-clouds&amp;#34;&amp;gt;&amp;lt;/i&amp;gt; Clouds&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;#34;floatRight&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;                id=&amp;#34;clo1&amp;#34;&amp;gt;`&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Math&lt;/span&gt;.round(data.daily[(i)].clouds) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;`%&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;            &amp;lt;span&amp;gt;&amp;lt;i class=&amp;#34;fad fa-cloud-sun-rain&amp;#34;&amp;gt;&amp;lt;/i&amp;gt; Rain&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;#34;floatRight&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;                id=&amp;#34;rai1&amp;#34;&amp;gt;`&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Math&lt;/span&gt;.round(data.daily[(i)].rain) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;`mm&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;            &amp;lt;span&amp;gt;&amp;lt;i class=&amp;#34;fad fa-tire-pressure-warning &amp;#34;&amp;gt;&amp;lt;/i&amp;gt; Pressure&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;#34;floatRight&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;                id=&amp;#34;rai1&amp;#34;&amp;gt;`&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Math&lt;/span&gt;.round(data.daily[(i)].pressure) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;`HPa&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;            &amp;lt;span&amp;gt;&amp;lt;i class=&amp;#34;fad fa-sunglasses&amp;#34;&amp;gt;&amp;lt;/i&amp;gt; UV Index&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;#34;floatRight&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;                id=&amp;#34;uvi1&amp;#34;&amp;gt;`&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Math&lt;/span&gt;.round(data.daily[(i)].uvi) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;`&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;            &amp;lt;span&amp;gt;&amp;lt;i class=&amp;#34;fad fa-sunrise&amp;#34;&amp;gt;&amp;lt;/i&amp;gt; Sun Rise&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;#34;floatRight&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;                id=&amp;#34;uvi1&amp;#34;&amp;gt;`&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; UnixToTime(data.daily[(i)].sunrise) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;`&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;            &amp;lt;span&amp;gt;&amp;lt;i class=&amp;#34;fad fa-sunset&amp;#34;&amp;gt;&amp;lt;/i&amp;gt; Sun Set&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;#34;floatRight&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;                id=&amp;#34;uvi1&amp;#34;&amp;gt;`&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; UnixToTime(data.daily[(i)].sunset) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;`&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;            &amp;lt;span&amp;gt;&amp;lt;i class=&amp;#34;fad fa-dewpoint&amp;#34;&amp;gt;&amp;lt;/i&amp;gt; Dew Point&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;#34;floatRight&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;                id=&amp;#34;dew1&amp;#34;&amp;gt;`&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Math&lt;/span&gt;.round(data.daily[(i)].dew_point) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;`&amp;amp;#730;C&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;            &amp;lt;span&amp;gt;&amp;lt;i class=&amp;#34;fad fa-humidity&amp;#34;&amp;gt;&amp;lt;/i&amp;gt; Humidity&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;#34;floatRight&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;                id=&amp;#34;hum1&amp;#34;&amp;gt;`&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Math&lt;/span&gt;.round(data.daily[(i)].humidity) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;`%&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;            &amp;lt;span&amp;gt;&amp;lt;i class=&amp;#34;fad fa-wind&amp;#34;&amp;gt;&amp;lt;/i&amp;gt; Wind Speed&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;#34;floatRight&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;                id=&amp;#34;wis1&amp;#34;&amp;gt;`&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; data.daily[(i)].wind_speed &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;`KM/H&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;            &amp;lt;span&amp;gt;&amp;lt;i class=&amp;#34;fad fa-compass&amp;#34;&amp;gt;&amp;lt;/i&amp;gt; Wind Direction&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;#34;floatRight&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;                id=&amp;#34;wid1&amp;#34;&amp;gt;`&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; data.daily[(i)].wind_deg &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;`&amp;amp;#730;&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;        &amp;lt;/td&amp;gt;`&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        D7Wdi.push(&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&amp;lt;td&amp;gt;&amp;lt;span class=&amp;#34;windDir&amp;#34;&amp;gt;&amp;lt;img style=&amp;#34;transform: rotate(`&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; (data.daily[(i)].wind_deg &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;45&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;`deg);&amp;#34; class=&amp;#34;winDirImg&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;        src=&amp;#34;./fontawesome/svgs/duotone/location-arrow.svg&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/td&amp;gt;`&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#D7Day&amp;#39;&lt;/span&gt;).html(D7Day.join(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#D7Ico&amp;#39;&lt;/span&gt;).html(D7Ico.join(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#D7Con&amp;#39;&lt;/span&gt;).html(D7Con.join(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#D7Tem&amp;#39;&lt;/span&gt;).html(D7Tem.join(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#D7Row&amp;#39;&lt;/span&gt;).html(D7Row.join(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#D7Wdi&amp;#39;&lt;/span&gt;).html(D7Wdi.join(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// 48Hour forecast
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; Hour48Filler(data) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    H48Hou &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    H48Ico &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    H48Con &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    H48Tem &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    H48Row &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    H48Wdi &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;47&lt;/span&gt;; i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        H48Hou.push(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;lt;td&amp;gt; &amp;lt;span &amp;gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; UnixToTime(data.hourly[(i)].dt) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;lt;/span&amp;gt; &amp;lt;/td&amp;gt;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        H48Ico.push(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;lt;td&amp;gt; &amp;lt;i class=&amp;#34;owf owf-5x owf-&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; data.hourly[(i)].weather[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;].id &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#34;&amp;gt;&amp;lt;/i&amp;gt; &amp;lt;/td&amp;gt;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        H48Con.push(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;lt;td&amp;gt; &amp;lt;span class=&amp;#34;subCondition&amp;#34; &amp;gt;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; data.hourly[(i)].weather[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;].description &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;lt;/span&amp;gt; &amp;lt;/td&amp;gt;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        H48Tem.push(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;lt;td&amp;gt; &amp;lt;i class=&amp;#34;fad fa-temperature-frigid&amp;#34;&amp;gt;&amp;lt;/i&amp;gt; &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Math&lt;/span&gt;.round(data.hourly[(i)].temp) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;amp;#730;C &amp;lt;/td&amp;gt;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        H48Row.push(&lt;span style=&#34;color:#f1fa8c&#34;&gt;`
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;        &amp;lt;td style=&amp;#34;padding: 30px;&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;            &amp;lt;span&amp;gt;&amp;lt;i class=&amp;#34; fad fa-clouds&amp;#34;&amp;gt;&amp;lt;/i&amp;gt; Clouds&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;#34;floatRight&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;                id=&amp;#34;clo1&amp;#34;&amp;gt;`&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Math&lt;/span&gt;.round(data.hourly[(i)].clouds) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;`%&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;                `&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; rainCheck(data, i) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;`
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;            &amp;lt;span&amp;gt;&amp;lt;i class=&amp;#34;fad fa-tire-pressure-warning &amp;#34;&amp;gt;&amp;lt;/i&amp;gt; Pressure&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;#34;floatRight&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;                id=&amp;#34;rai1&amp;#34;&amp;gt;`&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Math&lt;/span&gt;.round(data.hourly[(i)].pressure) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;`HPa&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;            &amp;lt;span&amp;gt;&amp;lt;i class=&amp;#34;fad fa-dewpoint&amp;#34;&amp;gt;&amp;lt;/i&amp;gt; Dew Point&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;#34;floatRight&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;                id=&amp;#34;dew1&amp;#34;&amp;gt;`&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Math&lt;/span&gt;.round(data.hourly[(i)].dew_point) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;`&amp;amp;#730;C&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;            &amp;lt;span&amp;gt;&amp;lt;i class=&amp;#34;fad fa-humidity&amp;#34;&amp;gt;&amp;lt;/i&amp;gt; Humidity&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;#34;floatRight&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;                id=&amp;#34;hum1&amp;#34;&amp;gt;`&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Math&lt;/span&gt;.round(data.hourly[(i)].humidity) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;`%&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;            &amp;lt;span&amp;gt;&amp;lt;i class=&amp;#34;fad fa-wind&amp;#34;&amp;gt;&amp;lt;/i&amp;gt; Wind Speed&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;#34;floatRight&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;                id=&amp;#34;wis1&amp;#34;&amp;gt;`&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; data.hourly[(i)].wind_speed &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;`KM/H&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;            &amp;lt;span&amp;gt;&amp;lt;i class=&amp;#34;fad fa-compass&amp;#34;&amp;gt;&amp;lt;/i&amp;gt; Wind Direction&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;#34;floatRight&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;                id=&amp;#34;wid1&amp;#34;&amp;gt;`&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; data.hourly[(i)].wind_deg &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;`&amp;amp;#730;&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;        &amp;lt;/td&amp;gt;`&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        H48Wdi.push(&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&amp;lt;td&amp;gt;&amp;lt;span class=&amp;#34;windDir&amp;#34;&amp;gt;&amp;lt;img style=&amp;#34;transform: rotate(`&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; (data.hourly[(i)].wind_deg &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;45&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;`deg);&amp;#34; class=&amp;#34;winDirImgDark&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;        src=&amp;#34;./fontawesome/svgs/duotone/location-arrow.svg&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/td&amp;gt;`&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    renderTempChart(data)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#H48Hou&amp;#39;&lt;/span&gt;).html(H48Hou.join(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#H48Ico&amp;#39;&lt;/span&gt;).html(H48Ico.join(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#H48Con&amp;#39;&lt;/span&gt;).html(H48Con.join(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#H48Tem&amp;#39;&lt;/span&gt;).html(H48Tem.join(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#H48Row&amp;#39;&lt;/span&gt;).html(H48Row.join(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#H48Wdi&amp;#39;&lt;/span&gt;).html(H48Wdi.join(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Temperature tile
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; renderTempChart(data) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    temp &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cato &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    rain &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;47&lt;/span&gt;; i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        temp.push(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Math&lt;/span&gt;.round(data.hourly[(i)].temp))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        rain.push(rainReturn(data, i))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        cato.push(UnixToTime(data.hourly[(i)].dt))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; options &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        series&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; [{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Temperature (&amp;amp;#730;C)&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            data&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; temp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }, {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Rain (mm)&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            data&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; rain
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        chart&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            height&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;400&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            type&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;area&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        dataLabels&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            enabled&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        stroke&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            curve&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;smooth&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        xaxis&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            categories&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; cato
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        tooltip&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            x&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                format&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;HH:mm&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; chart &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; ApexCharts(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.querySelector(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;#chart&amp;#34;&lt;/span&gt;), options);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#chart&amp;#39;&lt;/span&gt;).html(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    chart.render();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Return rain data
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; rainReturn(data, index) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;typeof&lt;/span&gt; data.hourly[(index)].rain &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;undefined&amp;#34;&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Math&lt;/span&gt;.round(data.hourly[(i)].rain[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;1h&amp;#39;&lt;/span&gt;])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Return rain data
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; rainCheck(data, index) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;typeof&lt;/span&gt; data.hourly[(index)].rain &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;undefined&amp;#34;&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;`&amp;lt;span&amp;gt;&amp;lt;i class=&amp;#34;fad fa-cloud-sun-rain&amp;#34;&amp;gt;&amp;lt;/i&amp;gt; Rain&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;#34;floatRight&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;        id=&amp;#34;rai1&amp;#34;&amp;gt;`&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Math&lt;/span&gt;.round(data.hourly[(i)].rain[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;1h&amp;#39;&lt;/span&gt;]) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;`mm&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;`&amp;lt;span&amp;gt;&amp;lt;i class=&amp;#34;fad fa-cloud-sun-rain&amp;#34;&amp;gt;&amp;lt;/i&amp;gt; Rain&amp;lt;/span&amp;gt;&amp;lt;span class=&amp;#34;floatRight&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;        id=&amp;#34;rai1&amp;#34;&amp;gt; 0mm&amp;lt;/span&amp;gt;&amp;lt;br&amp;gt;`&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Return the day of the week using servertimestamp
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; dayReturn(timestamp) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    days &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Sunday&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Monday&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Tuesday&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Wednesday&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Thursday&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Friday&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Saturday&amp;#39;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    date &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Date&lt;/span&gt;(timestamp &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1000&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; (days[date.getDay()])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Alright! It&amp;rsquo;s the fun part, replace the value of key variable at the top and wolah! you have a working weather app!&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s not that hard to do these kinds of applications, but if you aren&amp;rsquo;t familiar with the fetching apis and that sort of stuffs, you&amp;rsquo;ll be in a uncomfortable situation. But overall the functionality is much complicated so go easy on it. I know this isn&amp;rsquo;t the cleanest code in the world, But it works!&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Secure Your JavaScript Files</title>
<link>https://blog.nushankodikara.com/blog/secure-your-javascript-files/</link>
<pubDate>Mon, 10 Aug 2020 06:00:00 +0530</pubDate>
      
      <guid>https://blog.nushankodikara.com/blog/secure-your-javascript-files/</guid>
<description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s be real, with firebase and all these knowledge, we should protect our JS files, They can&amp;rsquo;t be wide open for a smart ass to get there and mess around with the code or so, Yeah I know the firebase provides a much secure system in the security side but the code has to be secure too! To day let&amp;rsquo;s discuss on that, let&amp;rsquo;s explore what we can do to Protect our JS files.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.unsplash.com/photo-1555949963-ff9fe0c870eb?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1350&amp;amp;q=80&#34; alt=&#34;Security&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;my-steps&#34;&gt;My Steps&lt;/h2&gt;
&lt;p&gt;I Usually use 5 steps of protection in my personal projects,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Trust No one!&lt;/li&gt;
&lt;li&gt;Minification and Obfuscation&lt;/li&gt;
&lt;li&gt;Lint your code&lt;/li&gt;
&lt;li&gt;Strict mode&lt;/li&gt;
&lt;li&gt;Brake-down The code&lt;/li&gt;
&lt;li&gt;Simple and elegant&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;first-step-trust-no-one&#34;&gt;First Step, Trust No one&lt;/h2&gt;
&lt;p&gt;One super important technique to avoid JavaScript vulnerabilities is to have a good validation architecture in place.&lt;/p&gt;
&lt;p&gt;May it be the data coming from users. Or may it be the data coming from your servers. Always validate the data before it enters the application.&lt;/p&gt;
&lt;p&gt;In the case of user input forms- validate each and every field. Sql injections and XSS are dramatically increasing these days. So, make sure you validate each and every field on the form before you save the data to the server.&lt;/p&gt;
&lt;p&gt;Even when the data is saved on the servers, do not trust them. Always sanitize the data coming from the servers.&lt;/p&gt;
&lt;p&gt;If yours is a node based application have a look at validator.js. It’s something you should start using right away.&lt;/p&gt;
&lt;h2 id=&#34;minification-and-obfuscation&#34;&gt;Minification and Obfuscation&lt;/h2&gt;
&lt;p&gt;Another way of securing your data is minifying and obfuscating the code. What minification is it simply makes the whole code in to a single line and remove extra white-spaces. We discussed about this techniques in the past and I&amp;rsquo;m not explaining them in detail again. you can visit it &lt;a href=&#34;https://blog.nushankodikara.com/post/web-code-minification/&#34;&gt;HERE&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Then Obfuscation. As the Wikipedia says Obfuscation is ❝In software development, obfuscation is the deliberate act of creating source or machine code that is difficult for humans to understand. Like obfuscation in natural language, it may use needlessly roundabout expressions to compose statements. Programmers may deliberately obfuscate code to conceal its purpose (security through obscurity) or its logic or implicit values embedded in it, primarily, in order to prevent tampering, deter reverse engineering, or even to create a puzzle or recreational challenge for someone reading the source code. This can be done manually or by using an automated tool, the latter being the preferred technique in industry.❞&lt;/p&gt;
&lt;p&gt;In simple words, It makes the code nearly impossible to read and modify. A De-obfuscator can return the code back to the original form, but not simple as it says, so only highly skilled penetrators would be able to kick something like that.&lt;/p&gt;
&lt;p&gt;Tools for minification&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.willpeavy.com/tools/minifier/&#34;&gt;https://www.willpeavy.com/tools/minifier/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jscompress.com/&#34;&gt;https://jscompress.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://javascript-minifier.com/&#34;&gt;http://javascript-minifier.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://refresh-sf.com/&#34;&gt;http://refresh-sf.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tools for obfuscation&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://obfuscator.io/&#34;&gt;https://obfuscator.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://javascriptobfuscator.com/&#34;&gt;https://javascriptobfuscator.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mishoo/UglifyJS&#34;&gt;https://github.com/mishoo/UglifyJS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;lint-your-code&#34;&gt;Lint your code&lt;/h2&gt;
&lt;p&gt;This is a process which you can analyze and scan for suspicious code snippets on your JS files. It&amp;rsquo;s much needed when you&amp;rsquo;re working with a dynamic code base. Otherwise no one can hack into a stone. So if you&amp;rsquo;re using or working with any kind of dynamic code base, don&amp;rsquo;t forget to check out these tools&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://eslint.org/&#34;&gt;http://eslint.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jshint.com/&#34;&gt;http://jshint.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jslint.com/&#34;&gt;http://www.jslint.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;use-strict-mode&#34;&gt;Use Strict mode&lt;/h2&gt;
&lt;p&gt;Modern JS has a mode called Strict mode. Where the JS files get to a highly strict mode as it says, only using a simple code. This would prevent others from injecting codes into the codebase and it could save you from 90% of the attacks you can encounter with. We discussed this with the JS fundamental course which you can visit &lt;a href=&#34;https://blog.nushankodikara.com/post/js-for-modern-web-development/&#34;&gt;HERE&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;brake-down-the-code&#34;&gt;Brake-Down the code&lt;/h2&gt;
&lt;p&gt;This is something I personally use and this could make reverse engineering very confusing. I usually brake-down my codes in various parts and put different parts in like 5 or 6 js files to only be combined when it&amp;rsquo;s running. I Even brake down strings and all of the variables, so if someone going to reverse engineer my codes, They would be in serious troubles on figuring out which are which.&lt;/p&gt;
&lt;h2 id=&#34;simple-and-elegant&#34;&gt;Simple and elegant&lt;/h2&gt;
&lt;p&gt;Always use simple codes, This can make your code easy for you to understand and prevent mistakes which could occur due to human nature of forgetting what we&amp;rsquo;re doing or so. And here, this is against my previous point? No absolutely not! Being Simple is something and Being Advanced or messy is something else, You can be simple and messy, what I prefer in codes.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This could be a small post considering my previous attempts. But this is something you must do before publishing your codes. for more security based information, join our whatsapp and telegram groups using the links above. and if you&amp;rsquo;re wandering I never used these in my source codes, dumb-ass you! If I did so, How could you understand the code!&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Creating a Messaging App With Firebase</title>
<link>https://blog.nushankodikara.com/blog/creating-a-messaging-app-with-firebase/</link>
<pubDate>Sun, 09 Aug 2020 06:00:00 +0530</pubDate>
      
      <guid>https://blog.nushankodikara.com/blog/creating-a-messaging-app-with-firebase/</guid>
<description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Now we have covered firebase realtime and firestore databases, Authentication, Hosting and analytics, We can create a simple chat/messaging application within 15-minuets or less! Aren&amp;rsquo;t you sure of that? Let&amp;rsquo;s get started!&lt;/p&gt;
&lt;h2 id=&#34;background-and-environment&#34;&gt;Background and Environment&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m using what we did in firebase realtime database, authentication and hosting for this project. So if you didn&amp;rsquo;t saw them already, go ahead now. let&amp;rsquo;s explore the code and as always &lt;a href=&#34;https://blog.nushankodikara.com/zip/FirebaseAssetsPack3.zip&#34;&gt;HERE&lt;/a&gt; you can download the completed project file. Also you can visit the project live for sometime on &lt;a href=&#34;https://tecinpactdemonstration.gq/&#34;&gt;https://tecinpactdemonstration.gq/&lt;/a&gt; and If the link isn&amp;rsquo;t not working, just download and host the file yourself!&lt;/p&gt;
&lt;p&gt;HTML File&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;lang&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;head&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;charset&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;UTF-8&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;viewport&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;content&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;./style.css&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;text/css&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://cdn.firebase.com/libs/firebaseui/3.5.2/firebaseui.css&amp;#34;&lt;/span&gt; /&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;//cdnjs.cloudflare.com/ajax/libs/emojify.js/1.1.0/css/basic/emojify.min.css&amp;#34;&lt;/span&gt; /&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;title&lt;/span&gt;&amp;gt;Chat Room&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;title&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;head&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!-- Heading Section --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;headline&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h1&lt;/span&gt;&amp;gt;Public Chat Room Demo&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h1&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;submit&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;SignOut&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;signOut(); return false&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sout&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;button&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!-- Login Button --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;login&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;submit&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;button&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Login With Google&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;googleLogin();return false&amp;#34;&lt;/span&gt; /&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!-- Messages would be added here --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;chatbody&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;messagebox&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;messagebox&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!-- Sending bar --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sendmessage&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;form&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onsubmit&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sendMsg();return false&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;maxlength&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;256&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt; /&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;submit&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;button&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Send&amp;#34;&lt;/span&gt; /&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;form&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!-- Adding JQuery for extra Functionality --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://code.jquery.com/jquery-3.5.1.min.js&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;integrity&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;crossorigin&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;anonymous&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!-- Firebase App (the core Firebase SDK) is always required and must be listed first --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://www.gstatic.com/firebasejs/7.17.1/firebase-app.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!-- If you enabled Analytics in your project, add the Firebase SDK for Analytics --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://www.gstatic.com/firebasejs/7.17.1/firebase-analytics.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!-- Add Firebase products that you want to use --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://www.gstatic.com/firebasejs/7.17.1/firebase-auth.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://www.gstatic.com/firebasejs/7.17.1/firebase-database.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;// Your web app&amp;#39;s Firebase configuration
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; firebaseConfig &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            apiKey&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;AIzaSyDOMUpm4WNldKOVuQCeizCTZAUdSRLqAeU&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            authDomain&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;tecinpact-demo.firebaseapp.com&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            databaseURL&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://tecinpact-demo.firebaseio.com&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            projectId&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;tecinpact-demo&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            storageBucket&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;tecinpact-demo.appspot.com&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            messagingSenderId&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;977048224763&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            appId&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;1:977048224763:web:b5e6053c4ced9116b8c15e&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            measurementId&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;G-DM6KKVPWRR&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;// Initialize Firebase
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        firebase.initializeApp(firebaseConfig);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        firebase.analytics();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!-- Adding emoji support (Optional) --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;//cdnjs.cloudflare.com/ajax/libs/emojify.js/1.1.0/js/emojify.min.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;./app.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;SCSS File&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scss&#34; data-lang=&#34;scss&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$background&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt; :&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;linear-gradient&lt;/span&gt;(to right top&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#041f3d&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#002a45&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#00354b&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#00404f&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#004a51&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#035959&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#14675e&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#2a7661&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#428d69&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#5fa46f&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#81bb72&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#a7d175&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$myMessage&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt; :&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#041F3D&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$button&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#52A874&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;font-family&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; monospace;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;height&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;background&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$background&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;position&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; fixed;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;height&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;vh&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;vw&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;top&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;left&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; white;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;.content&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;.headline&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;position&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; fixed;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;top&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;left&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;height&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;60&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;display&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; grid;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;place-items&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; center;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;.sendmessage&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;position&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; fixed;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;bottom&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;left&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;height&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;80&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;display&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; grid;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;place-items&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; center;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ff79c6&#34;&gt;form&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;max-width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;400&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    #message {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;68&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;border-radius&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;500&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;padding&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;outline&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; none;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;border&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; none;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;.button&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;.chatbody&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;position&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; fixed;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;top&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;110&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;bottom&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;80&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;left&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;transform&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;translate&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;max-width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;400&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;padding&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;background-color&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; white;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;border-radius&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;40&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;overflow-y&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; auto;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;display&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; flex;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;flex-wrap&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; wrap;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;justify-content&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; center;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;.messagebox&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;.card&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;flex&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;300&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;margin&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rgb&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;24&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;24&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;24&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;background-color&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rgb&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;202&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;202&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;202&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;max-width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;360&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;padding&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;border-radius&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#50fa7b&#34;&gt;word-break&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; break-all;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#50fa7b&#34;&gt;text-align&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; left;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;.mcard&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;text-align&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; right;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#ff79c6&#34;&gt;@extend&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;.card&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; white;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;background-color&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$myMessage&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;.login&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;position&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; fixed;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;top&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;110&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;bottom&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;80&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;left&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;transform&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;translate&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;max-width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;400&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;padding&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;background-color&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; white;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;border-radius&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;40&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;overflow-y&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; auto;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;display&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; grid;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;place-items&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; center;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;.button&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;background-color&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$button&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;padding&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;border-radius&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;500&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;outline&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; none;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;border&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; none;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;JS File&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// This makes easier to hide and show chat window based on login status
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; chatview &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Login Provider
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; provider &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; firebase.auth.GoogleAuthProvider();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Show and hide Chat window and others based on login status
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;chattoggle &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; () =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (chatview &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.chatbody&amp;#34;&lt;/span&gt;).css(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;display&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;flex&amp;#34;&lt;/span&gt;).hide().fadeIn();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.login&amp;#34;&lt;/span&gt;).css(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;display&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;grid&amp;#34;&lt;/span&gt;).hide().fadeOut();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.sendmessage&amp;#34;&lt;/span&gt;).css(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;display&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;grid&amp;#34;&lt;/span&gt;).hide().fadeIn();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;#sout&amp;#34;&lt;/span&gt;).fadeIn();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        chatview &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.chatbody&amp;#34;&lt;/span&gt;).css(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;display&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;flex&amp;#34;&lt;/span&gt;).hide().fadeOut();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.login&amp;#34;&lt;/span&gt;).css(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;display&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;grid&amp;#34;&lt;/span&gt;).hide().fadeIn();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.sendmessage&amp;#34;&lt;/span&gt;).css(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;display&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;grid&amp;#34;&lt;/span&gt;).hide().fadeOut();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;#sout&amp;#34;&lt;/span&gt;).fadeOut();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        chatview &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Initializing First Run
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;chattoggle();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Login With Google when pressed the button
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;googleLogin &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; () =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    firebase.auth().signInWithPopup(provider).then(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (result) {}).&lt;span style=&#34;color:#ff79c6&#34;&gt;catch&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (error) {});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Send messages
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;sendMsg &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; () =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    message &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#message&amp;#39;&lt;/span&gt;).val()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#message&amp;#39;&lt;/span&gt;).val(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (message) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        sendData(message, username)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Defining username
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; username;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Authentication listener , this triggers when auth state changed
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;firebase.auth().onAuthStateChanged(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (user) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (user) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        chattoggle();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        loadData();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        username &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; user.displayName
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// A Sign out function
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;signOut &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; () =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    firebase.auth().signOut().then(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        chattoggle();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }).&lt;span style=&#34;color:#ff79c6&#34;&gt;catch&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (error) {});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Pushes data to the database
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;sendData &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; (message, author) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; newPostRef &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; firebase.database().ref(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;messageList1&amp;#39;&lt;/span&gt;).push();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    newPostRef.set({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        msg&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; message,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        aut&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; author
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Loads data from the database realtime
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;loadData &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; () =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; msgList &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; firebase.database().ref(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;messageList1&amp;#39;&lt;/span&gt;).limitToLast(&lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;); &lt;span style=&#34;color:#6272a4&#34;&gt;// Only loading last 20 messages for performance and network optimization
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    msgList.on(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (snapshot) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; html &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; []
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        snapshot.forEach(element =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#6272a4&#34;&gt;// I Have a strategy to minimize latency, First putting everything we need to add to our HTML Document to a array and finally appending the whole array to the document at once
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (username &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; element.val()[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;aut&amp;#39;&lt;/span&gt;]) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                html.push(&lt;span style=&#34;color:#f1fa8c&#34;&gt;`
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;            &amp;lt;div class=&amp;#34;mcard&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;                &amp;lt;b&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;purge(element.val()[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;aut&amp;#39;&lt;/span&gt;])&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;lt;/b&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;                &amp;lt;p&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;purge(element.val()[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;msg&amp;#39;&lt;/span&gt;])&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;lt;/p&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;            &amp;lt;/div&amp;gt;`&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            } &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                html.push(&lt;span style=&#34;color:#f1fa8c&#34;&gt;`
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;            &amp;lt;div class=&amp;#34;card&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;                &amp;lt;b&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;purge(element.val()[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;aut&amp;#39;&lt;/span&gt;])&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;lt;/b&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;                &amp;lt;p&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;purge(element.val()[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;msg&amp;#39;&lt;/span&gt;])&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;lt;/p&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;            &amp;lt;/div&amp;gt;`&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.messagebox&amp;#34;&lt;/span&gt;).html(html.join(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;messagebox&amp;#39;&lt;/span&gt;).scrollIntoView(&lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// This is a little security feature to make it fool proof And prevent cross site scripting. Also adding a limit to the purge.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;purge &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; (string) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; newStr &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; (string).replace(&lt;span style=&#34;color:#f1fa8c&#34;&gt;/&amp;lt;|&amp;gt;/g&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;).substring(&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;256&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; (newStr)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And That&amp;rsquo;s The complete project. Side note, We&amp;rsquo;re doing something more advanced in the future.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200809_01.gif&#34; alt=&#34;Application Demonstration&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s a simple project to polish up your skills, but if you&amp;rsquo;re a beginner with firebase, It&amp;rsquo;s a great simple project to kick start your abilities. I Made the project with comments in it so it&amp;rsquo;s easier to understand other than explaining it later.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Firebase Hosting and Analytics</title>
<link>https://blog.nushankodikara.com/blog/firebase-hosting-and-analytics/</link>
<pubDate>Sat, 08 Aug 2020 06:00:00 +0530</pubDate>
      
      <guid>https://blog.nushankodikara.com/blog/firebase-hosting-and-analytics/</guid>
<description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;We can use firebase as a hosting service, Firebase Hosting provides fast and secure hosting for your web app, static and dynamic content, and microservices, Also Firebase Hosting is production-grade web content hosting for developers, With a single command, you can quickly deploy web apps and serve both static and dynamic content to a global CDN (content delivery network), You can also pair Firebase Hosting with Cloud Functions or Cloud Run to build and host microservices on Firebase.&lt;/p&gt;
&lt;h2 id=&#34;how-does-it-work&#34;&gt;How does it work&lt;/h2&gt;
&lt;p&gt;Firebase Hosting is built for the modern web developer. Websites and apps are more powerful than ever with the rise of front-end JavaScript frameworks like Angular and static generator tools like Jekyll. Whether you are deploying a simple app landing page or a complex Progressive Web App (PWA), Hosting gives you the infrastructure, features, and tooling tailored to deploying and managing websites and apps.&lt;/p&gt;
&lt;p&gt;Using the Firebase CLI, you deploy files from local directories on your computer to your Hosting server. Beyond serving static content, you can use Cloud Functions for Firebase or Cloud Run to serve dynamic content and host microservices on your sites. All content is served over an SSL connection from the closest edge server on our global CDN.&lt;/p&gt;
&lt;p&gt;Firebase Hosting has lightweight hosting configuration options for you to build sophisticated PWAs. You can easily rewrite URLs for client-side routing or set up custom headers.&lt;/p&gt;
&lt;p&gt;For serving your content, Firebase offers several domain and subdomain options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;By default, every Firebase project has free subdomains on the web.app and firebaseapp.com domains. These two sites serve the same deployed content and configuration.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can create multiple sites if you have related sites and apps that serve different content but still share the same Firebase project resources (for example if you have a blog, admin panel, and public app).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can connect your own domain name to a Firebase-hosted site.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Firebase automatically provisions SSL certificates for all your domains so that all your content is served securely.&lt;/p&gt;
&lt;h2 id=&#34;what-is-firebase-hosting&#34;&gt;What is Firebase Hosting&lt;/h2&gt;
&lt;p&gt;Firebase Hosting is a fully-managed hosting service for static and dynamic content as well as microservices. The service is backed by SSD storage and a global CDN (content delivery network). Zero-configuration SSL is built into Firebase Hosting, so content is always delivered securely.&lt;/p&gt;
&lt;h2 id=&#34;what-can-you-host&#34;&gt;What can you host&lt;/h2&gt;
&lt;h2 id=&#34;build-then-host-your-microservices-api-and-forms&#34;&gt;Build then host your microservices, API, and forms&lt;/h2&gt;
&lt;p&gt;Pair Firebase Hosting with Cloud Functions to build microservices using the Express.js framework. This pairing allows you to host your microservices and APIs on Firebase. In addition, you can use a deep integration with Cloud Firestore to build very powerful forms and web apps which can update data in real time.&lt;/p&gt;
&lt;h2 id=&#34;host-your-single-page-web-apps-marketing-websites-and-static-and-dynamic-assets&#34;&gt;Host your single-page web apps, marketing websites, and static and dynamic assets&lt;/h2&gt;
&lt;p&gt;Benefit from Firebase Hosting&amp;rsquo;s unique optimization for serving single-page web apps and static websites. Delivery of static assets (HTML, CSS, JavaScript, fonts, etc.) is powered by our SSD backend storage and a global CDN with edge locations across all major locations in the world. You can even cache your dynamic content on the global CDN. All sites hosted by Firebase also get a free SSL certificate, so your content is always delivered securely.&lt;/p&gt;
&lt;h2 id=&#34;add-a-custom-domain-or-a-subdomain&#34;&gt;Add a custom domain (or a subdomain)&lt;/h2&gt;
&lt;p&gt;With Firebase Hosting, you&amp;rsquo;re automatically given a Firebase sub-domain, but you can choose to serve your content on a custom domain (like example.com or myrealtimeapp.example.com). Firebase Hosting provisions an SSL certificate for each of your domains and serves your content over a global CDN.&lt;/p&gt;
&lt;h2 id=&#34;keep-all-your-sites-in-one-place&#34;&gt;Keep all your sites in one place&lt;/h2&gt;
&lt;p&gt;Firebase Hosting supports multiple sites in a single Firebase project. Each site hosts its own collection of content, has its own hosting configuration, and can have one or more associated domains. Since the sites are all in the same Firebase project, all the sites can access the other Firebase resources of the project.&lt;/p&gt;
&lt;p&gt;You can use multiple sites in a Firebase project to keep related sites together (for example your single-page app, blog, and marketing website).&lt;/p&gt;
&lt;h2 id=&#34;automate-continuous-deployment-with-cloud-build&#34;&gt;Automate continuous deployment with Cloud Build&lt;/h2&gt;
&lt;p&gt;Firebase Hosting partnered with Cloud Build offers a DevOps-ready solution for automating a continuous deployment workflow for your static and dynamic content as well as for your microservices.&lt;/p&gt;
&lt;p&gt;After you configure these tools, you can deploy your web app to Firebase Hosting by simply checking in your code to your git repository.&lt;/p&gt;
&lt;h2 id=&#34;restrict-access-and-counter-a-ddos-attack-for-your-web-apps&#34;&gt;Restrict access and counter a DDoS attack for your web apps&lt;/h2&gt;
&lt;p&gt;Using the power of Express.js middleware, you can build custom logic into serving your microservices, APIs, and other HTTP endpoints. For example, with just a few lines of code, you can integrate popular Node.js middleware offerings to build additional security layers, like access management by IP or protection from denial-of-service (DDoS) attacks.&lt;/p&gt;
&lt;h2 id=&#34;customize-everything&#34;&gt;Customize everything&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Error pages — Return a neatly fully customized 404 page from your web app.&lt;/li&gt;
&lt;li&gt;Rewrites — Customize which endpoints serve what traffic, and even display the same content from multiple URLs.&lt;/li&gt;
&lt;li&gt;Headers — Want to access cookies? Use custom headers!&lt;/li&gt;
&lt;li&gt;Caching and CDN behavior — Control how your web app is cached across the CDN through custom headers.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;deploy-to-firebase-from-various-web-based-ides&#34;&gt;Deploy to Firebase from various web-based IDEs&lt;/h2&gt;
&lt;p&gt;Firebase Hosting is integrated with various web-based IDEs so that you can deploy to Firebase Hosting directly from within &lt;a href=&#34;https://stackblitz.com/&#34;&gt;StackBlitz&lt;/a&gt; and &lt;a href=&#34;https://glitch.com/&#34;&gt;Glitch&lt;/a&gt;, two web-based IDEs.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://firebase.google.com/docs/hosting/images/hosting-deploy-stackblitz.gif&#34; alt=&#34;StackBlitz&#34;&gt;
&lt;img src=&#34;https://firebase.google.com/docs/hosting/images/hosting-deploy-glitch.gif&#34; alt=&#34;Glitch&#34;&gt;&lt;/p&gt;
&lt;p&gt;These IDEs automatically detect when you&amp;rsquo;re creating a Firebase app and allow you to deploy to Firebase Hosting with the click of a button, without ever leaving the IDE!&lt;/p&gt;
&lt;h2 id=&#34;build-deep-integrations-with-other-firebase-services&#34;&gt;Build deep integrations with other Firebase services&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://firebase.google.com/docs/hosting/images/friendlychat-web-codelab.png&#34; alt=&#34;FriendlyChat web codelab&#34;&gt;&lt;/p&gt;
&lt;p&gt;Firebase Hosting works out-of-the-box with Firebase services, including Cloud Functions, Authentication, Realtime Database, Cloud Firestore, and Cloud Messaging. You can build powerful microservices and web apps using these complementary Firebase services.&lt;/p&gt;
&lt;p&gt;Try out our FriendlyChat web codelab to learn how Hosting pairs with these Firebase services.&lt;/p&gt;
&lt;h2 id=&#34;create-a-custom-deployment-workflow-using-rest-api-and-our-nodejs-modules&#34;&gt;Create a custom deployment workflow using REST API and our Node.js modules&lt;/h2&gt;
&lt;p&gt;Firebase Hosting supports a REST API for advanced developers to build custom workflows, like deploying through a JavaScript app.&lt;/p&gt;
&lt;p&gt;We also have a Node.js module which you can import into your Node.js apps to build advanced functionality.&lt;/p&gt;
&lt;h2 id=&#34;get-started-with-firebase-hosting&#34;&gt;Get started with Firebase Hosting&lt;/h2&gt;
&lt;p&gt;Firebase Hosting gives you a fast, secure, and reliable way to host your app&amp;rsquo;s static assets (HTML, CSS, JavaScript, media files, etc.) as well as to serve dynamic content and host microservices.&lt;/p&gt;
&lt;p&gt;Our production-grade hosting is backed by a global content delivery network (CDN). Hosting serves your content over SSL, by default, and can be used with your own custom domain or on your project&amp;rsquo;s free subdomains on web.app and firebaseapp.com.&lt;/p&gt;
&lt;h2 id=&#34;before-you-begin&#34;&gt;Before you begin&lt;/h2&gt;
&lt;p&gt;Before you can set up Firebase Hosting, you need to create a Firebase project. We did this already in our previous guides, If you didn&amp;rsquo;t checked those out, Go ahead.&lt;/p&gt;
&lt;h2 id=&#34;step-1-install-the-firebase-cli&#34;&gt;Step 1: Install the Firebase CLI&lt;/h2&gt;
&lt;p&gt;Visit the Firebase CLI documentation on &lt;a href=&#34;https://firebase.google.com/docs/cli&#34;&gt;https://firebase.google.com/docs/cli&lt;/a&gt; to learn how to install the CLI or update to its latest version. or install node js and run the command&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;npm install &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;g firebase&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;tools
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;step-2-initialize-your-project&#34;&gt;Step 2: Initialize your project&lt;/h2&gt;
&lt;p&gt;To connect your local project to your Firebase project, run the following command from the root of your local project directory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;firebase init
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;During project initialization, from the Firebase CLI prompts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Select to set up Hosting.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you want to set up other Firebase products for your project, refer to their documentation for setup information. Note that you can always run firebase init later to set up more Firebase products.&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Select a Firebase project to connect to your local project directory.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The selected Firebase project is your &amp;ldquo;default&amp;rdquo; Firebase project for your local project directory. To connect additional Firebase projects to your local project directory, set up project aliases.&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Specify a directory to use as your public root directory.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This directory contains all your publicly served static files, including your index.html file and any other assets that you want to deploy to Firebase Hosting.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The default for the public root directory is called public.&lt;/li&gt;
&lt;li&gt;You can specify your public root directory now or you can specify it later in your firebase.json configuration file.&lt;/li&gt;
&lt;li&gt;If you select the default and don&amp;rsquo;t already have a directory called public, Firebase creates it for you.&lt;/li&gt;
&lt;li&gt;If you don&amp;rsquo;t already have a valid index.html file or 404.html file in your public root directory, Firebase creates them for you.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Choose a configuration for your site.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you select to make a one-page app, then Firebase automatically adds rewrite configurations for you.&lt;/p&gt;
&lt;p&gt;At the end of initialization, Firebase automatically creates and adds two files to the root of your local app directory:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A firebase.json configuration file that lists your project configuration. Learn more about this file on the configure hosting behavior page.&lt;/li&gt;
&lt;li&gt;A .firebaserc file that stores your project aliases.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;step-3-deploy-to-your-site&#34;&gt;Step 3: Deploy to your site&lt;/h2&gt;
&lt;p&gt;To deploy to your site, run the following command from the root of your local project directory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;firebase deploy
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command deploys a release to your Firebase project&amp;rsquo;s default Hosting sites:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PROJECT_ID.web.app&lt;/li&gt;
&lt;li&gt;PROJECT_ID.firebaseapp.com&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Learn more about deploys and even locally testing your site.&lt;/p&gt;
&lt;h2 id=&#34;test-locally-then-deploy-to-your-site&#34;&gt;Test locally then deploy to your site&lt;/h2&gt;
&lt;p&gt;You can view and test your site locally, even emulate your HTTPS functions, before deploying your site to production.&lt;/p&gt;
&lt;h2 id=&#34;get-started&#34;&gt;Get started&lt;/h2&gt;
&lt;p&gt;Complete the steps listed on the Hosting Get Started page, which include installing the Firebase CLI and connecting your local project to your Firebase project.&lt;/p&gt;
&lt;h2 id=&#34;serve-and-test-your-firebase-project-locally-optional&#34;&gt;Serve and test your Firebase project locally (optional)&lt;/h2&gt;
&lt;p&gt;You can view and test your Firebase project on locally hosted URLs before deploying to production. If you only want to test select features, you can use a comma-separated list in a flag on the firebase serve command.&lt;/p&gt;
&lt;p&gt;Run the following command from the root of your local project directory if you want to do either of the following tasks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;View the static content for your Firebase-hosted app.&lt;/li&gt;
&lt;li&gt;Use Cloud Functions to generate dynamic content for Firebase Hosting and you want to use your production (deployed) HTTP functions to emulate Hosting on a local URL.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;firebase serve &lt;span style=&#34;color:#ff79c6&#34;&gt;--&lt;/span&gt;only hosting
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;emulate-your-project-using-local-http-functions&#34;&gt;Emulate your project using local HTTP functions&lt;/h2&gt;
&lt;p&gt;Run any of the following commands from your project directory to emulate your project using local HTTP functions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To emulate HTTP functions and hosting for testing on local URLs, use either of the following commands:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;firebase serve
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;firebase serve &lt;span style=&#34;color:#ff79c6&#34;&gt;--&lt;/span&gt;only functions,hosting &lt;span style=&#34;color:#6272a4&#34;&gt;// uses a flag
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;To emulate HTTP functions only, use the following command:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;firebase serve &lt;span style=&#34;color:#ff79c6&#34;&gt;--&lt;/span&gt;only functions
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;test-from-other-local-devices&#34;&gt;Test from other local devices&lt;/h2&gt;
&lt;p&gt;By default, firebase serve only responds to requests from localhost. This means that you&amp;rsquo;ll be able to access your hosted content from your computer&amp;rsquo;s web browser but not from other devices on your network. If you&amp;rsquo;d like to test from other local devices, use the &amp;ndash;host flag, like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;firebase serve &lt;span style=&#34;color:#ff79c6&#34;&gt;--&lt;/span&gt;host &lt;span style=&#34;color:#bd93f9&#34;&gt;0.0&lt;/span&gt;.&lt;span style=&#34;color:#bd93f9&#34;&gt;0.0&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// accepts requests to any host
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;deploy-to-your-site&#34;&gt;Deploy to your site&lt;/h2&gt;
&lt;p&gt;To deploy to your site, run the following command from the root of your local project directory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;firebase deploy
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This command deploys a release to the following sites:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Your Firebase project&amp;rsquo;s default Hosting sites, PROJECT_ID.web.app and PROJECT_ID.firebaseapp.com&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Any custom domains that you&amp;rsquo;ve connected to your Hosting site.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can optionally add a comment to a deploy. This comment will display with the other deployment information on your project&amp;rsquo;s Hosting page. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;firebase deploy &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;m &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Deploying the best new feature ever.&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;deploys-for-projects-with-multiple-sites&#34;&gt;Deploys for projects with multiple sites&lt;/h2&gt;
&lt;p&gt;If you&amp;rsquo;ve added additional sites to your Firebase project, use the following command to deploy to one of those sites:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;firebase deploy &lt;span style=&#34;color:#ff79c6&#34;&gt;--&lt;/span&gt;only hosting&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;TARGET_NAME
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The TARGET_NAME parameter is the unique identifier that you specified for the additional Hosting site during its setup.&lt;/p&gt;
&lt;h2 id=&#34;add-predeploy-and-postdeploy-scripted-tasks&#34;&gt;Add predeploy and postdeploy scripted tasks&lt;/h2&gt;
&lt;p&gt;You can optionally connect shell scripts to the firebase deploy command to perform predeploy or postdeploy tasks. For example, a postdeploy hook could notify administrators of new site content deploys. Refer to the Firebase CLI documentation for more details.&lt;/p&gt;
&lt;h2 id=&#34;caching-deployed-content&#34;&gt;Caching deployed content&lt;/h2&gt;
&lt;p&gt;When a request is made for static content, Firebase Hosting automatically caches the content on the CDN. If you redeploy your site&amp;rsquo;s content, Firebase automatically clears all your cached static content across the CDN so that new requests receive your new content.&lt;/p&gt;
&lt;p&gt;Note that you can configure the caching of dynamic content.&lt;/p&gt;
&lt;h2 id=&#34;serving-over-https&#34;&gt;Serving over HTTPS&lt;/h2&gt;
&lt;p&gt;Firebase Hosting is SSL-only, meaning that content is only served over HTTPS.
As you&amp;rsquo;re developing your application, make sure that all external resources that are not hosted on Firebase Hosting are loaded over SSL (HTTPS), including any external scripts. Most browsers do not allow users to load &amp;ldquo;mixed content&amp;rdquo; (SSL and non-SSL traffic).&lt;/p&gt;
&lt;h2 id=&#34;share-project-resources-across-multiple-sites&#34;&gt;Share project resources across multiple sites&lt;/h2&gt;
&lt;p&gt;You can set up one or more Firebase Hosting sites in a single Firebase project. Since the sites are all in the same Firebase project, all the sites can access the other Firebase resources of the project.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each site has its own hosting configuration.&lt;/li&gt;
&lt;li&gt;Each site hosts its own collection of content.&lt;/li&gt;
&lt;li&gt;Each site can have one or more associated domains.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By setting up multiple Hosting sites within the same Firebase project, you can more easily share Firebase resources between related sites and apps. For example, if you set up your blog, admin panel, and public app as individual sites in the same Firebase project, they can all share the same Firebase Authentication user database, while also having their own unique domains or content.&lt;/p&gt;
&lt;h2 id=&#34;step-1-update-your-firebase-cli-version&#34;&gt;Step 1: Update your Firebase CLI version&lt;/h2&gt;
&lt;p&gt;Access the most current Firebase Hosting features by updating to the latest version of the Firebase CLI.&lt;/p&gt;
&lt;h2 id=&#34;step-2-add-additional-sites&#34;&gt;Step 2: Add additional sites&lt;/h2&gt;
&lt;p&gt;Add additional sites to a Firebase project directly from your Firebase Hosting page. To each site, you can also optionally add custom domains to serve the same content and configuration to multiple URLs.&lt;/p&gt;
&lt;h2 id=&#34;delete-a-secondary-site&#34;&gt;Delete a secondary site&lt;/h2&gt;
&lt;p&gt;Delete unwanted sites directly from your Firebase Hosting page. Note that you cannot delete the default site, which has the same site name as your Firebase project ID.&lt;/p&gt;
&lt;h2 id=&#34;step-3-set-up-deploy-targets-for-your-sites&#34;&gt;Step 3: Set up deploy targets for your sites&lt;/h2&gt;
&lt;p&gt;When you have multiple sites and you run Firebase CLI deploy commands, the CLI needs a way to communicate which settings should be deployed to each site. With deploy targets you can uniquely identify a specific site by its target name in your firebase.json configuration file and in your Firebase CLI commands for testing or deploying to your sites.&lt;/p&gt;
&lt;p&gt;To create a deploy target and apply a target name to a Hosting site, run the following CLI command from the root of your project directory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;firebase target&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;apply hosting TARGET_NAME RESOURCE_NAME
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Where the parameters are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TARGET_NAME — a unique identifier (that you&amp;rsquo;ve defined yourself) for the Hosting site that you&amp;rsquo;re deploying to&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RESOURCE_NAME — the name of the Hosting site as listed in your Firebase project&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, if you&amp;rsquo;ve created two sites (myapp-blog and myapp-app) in your Firebase project, you could apply a unique target name to each site (blog and app, respectively) by running the following commands:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;firebase target&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;apply hosting blog myapp&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;blog
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;firebase target&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;apply hosting app myapp&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;app
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The settings for deploy targets are stored in the .firebaserc file in your project directory, so you only need to set up deploy targets one time per project.&lt;/p&gt;
&lt;h2 id=&#34;step-4-define-the-hosting-configuration-for-each-site&#34;&gt;Step 4: Define the hosting configuration for each site&lt;/h2&gt;
&lt;p&gt;Use a site&amp;rsquo;s applied target name when you&amp;rsquo;re defining its hosting configuration in your firebase.json file.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If your firebase.json file defines the configuration for multiple sites, use an array format:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;hosting&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; [ {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;target&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;blog&amp;#34;&lt;/span&gt;,  &lt;span style=&#34;color:#6272a4&#34;&gt;// &amp;#34;blog&amp;#34; is the applied target name for the Hosting site &amp;#34;myapp-blog&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;public&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;blog/dist&amp;#34;&lt;/span&gt;,  &lt;span style=&#34;color:#6272a4&#34;&gt;// contents of this folder are deployed to the site &amp;#34;myapp-blog&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#6272a4&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;target&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;app&amp;#34;&lt;/span&gt;,  &lt;span style=&#34;color:#6272a4&#34;&gt;// &amp;#34;app&amp;#34; is the applied target name for the Hosting site &amp;#34;myapp-app&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;public&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;app/dist&amp;#34;&lt;/span&gt;,  &lt;span style=&#34;color:#6272a4&#34;&gt;// contents of this folder are deployed to the site &amp;#34;myapp-app&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#6272a4&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;rewrites&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; [...]  &lt;span style=&#34;color:#6272a4&#34;&gt;// You can define specific Hosting configurations for each site
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;If your firebase.json file defines the configuration for only one site, it&amp;rsquo;s not necessary to use an array format:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;hosting&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;target&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;blog&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;public&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;dist&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#6272a4&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;rewrites&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; [...]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;step-5-deploy-to-your-sites-or-serve-locally&#34;&gt;Step 5: Deploy to your sites or serve locally&lt;/h2&gt;
&lt;p&gt;Run any of the following commands from the root of your project directory.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Command&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;firebase deploy&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Creates a release of all deployable resources in your project directory&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;firebase deploy &amp;ndash;only hosting:TARGET_NAME&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Creates a release of only the resources for the specified Hosting target&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;firebase serve&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Serves your Firebase project locally&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;firebase serve &amp;ndash;only hosting:TARGET_NAME&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Serves locally only the resources for the specified Hosting target&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;connect-a-custom-domain&#34;&gt;Connect a custom domain&lt;/h2&gt;
&lt;p&gt;You don&amp;rsquo;t have to give up your unique, brand-centric domain names with Firebase Hosting. You can use a custom domain (like example.com or app.example.com) instead of a Firebase-generated domain for your Firebase-hosted site.&lt;/p&gt;
&lt;p&gt;Firebase Hosting provisions an SSL certificate, signed by Let&amp;rsquo;s Encrypt, for each of your domains and serves your content over a global CDN.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://firebase.google.com/docs/hosting/images/custom-domain.png&#34;&gt;CustomDomains&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The rest of this document walks you through these steps to connect your custom domain.&lt;/p&gt;
&lt;h2 id=&#34;set-up-your-domain-for-hosting&#34;&gt;Set up your domain for Hosting&lt;/h2&gt;
&lt;p&gt;Make sure that you&amp;rsquo;ve completed the &amp;ldquo;Get Started&amp;rdquo; wizard from your project&amp;rsquo;s Firebase Hosting page so that you have a Firebase Hosting site in your Firebase project.&lt;/p&gt;
&lt;h2 id=&#34;step-1-add-domain&#34;&gt;Step 1: Add domain&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;From your project&amp;rsquo;s Hosting page, enter the wizard for connecting a custom domain:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;If you have only one Hosting site, click Connect domain.&lt;/li&gt;
&lt;li&gt;If you have more than one Hosting site, click View for the desired site, then click Connect domain.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;
&lt;p&gt;Enter the custom domain name that you&amp;rsquo;d like to connect to your Hosting site.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;(Optional) Check the box to redirect all requests on the custom domain to a second specified domain (such that example.com and &lt;a href=&#34;https://www.example.com&#34;&gt;www.example.com&lt;/a&gt; redirect to the same content).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click Continue to initiate the validation process.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;step-2-verify-domain-ownership&#34;&gt;Step 2: Verify domain ownership&lt;/h2&gt;
&lt;p&gt;If requested in the Connect Domain setup wizard, verify your apex domain.&lt;/p&gt;
&lt;p&gt;These steps ensure that your domain is not already linked with a Firebase project and that you own the specified domain.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;In your domain provider&amp;rsquo;s site, locate the DNS management page.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add and save a new record with the following inputs:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Type: Add a TXT record.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Firebase Hosting requires that you keep this TXT record continually present in your DNS settings to prove your ownership of the domain and to authorize Firebase to assign and renew SSL certificates for your site.&lt;/p&gt;
&lt;p&gt;Your domain provider may list this term as &amp;ldquo;Record Type&amp;rdquo;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Host: Enter your apex domain key.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Proving your ownership of an apex domain, or root domain, proves your ownership of all its subdomains.&lt;/p&gt;
&lt;p&gt;Your domain provider may list this term as &amp;ldquo;Host Name&amp;rdquo;, &amp;ldquo;Name&amp;rdquo;, or &amp;ldquo;Domain&amp;rdquo;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Value: Copy the unique verification value into the field.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Firebase Hosting checks for this value to prove your domain ownership.&lt;/p&gt;
&lt;p&gt;Your domain provider may list this term as &amp;ldquo;Data&amp;rdquo;.&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Allow up to 24 hours for propagation of your updated TXT records, then click Verify.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note that you may click Cancel to safely close the Connect Domain window and reopen at a later time. This does not affect the propagation time, but you will be prompted to re-enter your domain name when you reopen the window.&lt;/p&gt;
&lt;p&gt;After ample propagation time, clicking Verify in the Connect Domain window of the Firebase console allows you to begin the SSL certificate provisioning process.&lt;/p&gt;
&lt;p&gt;In most cases, propagation of your records and verification of your domain will happen within a few hours, depending on your domain provider. Refer to your domain provider&amp;rsquo;s documentation for detailed instructions for adding TXT records and propagation times.&lt;/p&gt;
&lt;p&gt;If clicking Verify prompts an error message, your records have not propagated or your values may be incorrect.&lt;/p&gt;
&lt;h2 id=&#34;step-3-go-live&#34;&gt;Step 3: Go live&lt;/h2&gt;
&lt;p&gt;In the Connect Domain window of the Firebase console, select Quick Setup for a new site or Advanced Setup if you already have a site running on another hosting provider and need a zero-downtime migration.&lt;/p&gt;
&lt;h2 id=&#34;quick-setup&#34;&gt;Quick Setup&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Return to your domain name provider&amp;rsquo;s DNS management site to create DNS A records pointing your page to Firebase Hosting. Add and save records with the following inputs:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Type: Add two DNS A records.&lt;/li&gt;
&lt;li&gt;Host: Enter your custom domain key for both records.
The host you indicate is the domain on which you want to serve content; this domain can be an apex domain or subdomain.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Your domain provider may list this term as &amp;ldquo;Host Name&amp;rdquo;, &amp;ldquo;Name&amp;rdquo;, or &amp;ldquo;Domain&amp;rdquo;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Value: Assign one value to each DNS A record to point your domain to the specified IP addresses.
Your domain provider may list this term as &amp;ldquo;Data&amp;rdquo;, &amp;ldquo;Points To&amp;rdquo;, &amp;ldquo;Content&amp;rdquo;, &amp;ldquo;Address&amp;rdquo;, or &amp;ldquo;IP Address&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Allow time for your SSL certificate to be provisioned. This may take up to 24 hours after you point your A records to Firebase Hosting. In most cases, propagation of your records and provisioning of your SSL cerificate will happen within a few hours, depending on your domain provider.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;advanced-setup&#34;&gt;Advanced Setup&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;The Connect Domain window of the Firebase console will request that you provide a token to migrate your existing site. You only need to complete one of the following to provide the token:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Update DNS TXT records: Visit your domain provider&amp;rsquo;s DNS management site. Add a TXT record with your domain key and the provided value.&lt;/li&gt;
&lt;li&gt;Allow up to 24 hours for propagation of your TXT records.
Upload a file to an existing site: Upload the token onto your existing site at the specified URL and verify its existence.
This page must be served over HTTPS and doesn&amp;rsquo;t have to be valid or secure. The encrypted token is only valid for one try. If migration fails, a new token will be generated for your records.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Allow time for your SSL certificate to be provisioned. This may take up to 24 hours. In most cases, propagation of your records and provisioning of your SSL certificate will happen within a few hours, depending on your domain provider.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After your SSL certificate is provisioned, return to your DNS provider&amp;rsquo;s DNS management site to add DNS A records pointing your page to Firebase Hosting. Add and save records with the following inputs:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Type: Add two DNS A records.&lt;/li&gt;
&lt;li&gt;Host: Enter your custom domain key for both records.
The host you indicate is the domain on which you want to serve content; this domain can be an apex domain or subdomain.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Your domain provider may list this term as &amp;ldquo;Host name&amp;rdquo;, &amp;ldquo;Name&amp;rdquo;, or &amp;ldquo;Domain&amp;rdquo;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Value: Assign one value to each DNS A record to point your domain to the specified IP addresses.
Your domain provider may list this term as &amp;ldquo;Data&amp;rdquo;, &amp;ldquo;Points To&amp;rdquo;, &amp;ldquo;Content&amp;rdquo;, &amp;ldquo;Address&amp;rdquo;, or &amp;ldquo;IP Address&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;wait-for-ssl-certificate-provisioning&#34;&gt;Wait for SSL certificate provisioning&lt;/h2&gt;
&lt;p&gt;After we verify domain ownership, we provision an SSL certificate for your domain and deploy it across our global CDN within 24 hours after you point your DNS A records to Firebase Hosting.&lt;/p&gt;
&lt;p&gt;Your domain will be listed as one of the Subject Alternative Names (SAN) in the FirebaseApp SSL certificate. You can view this certificate using the browser&amp;rsquo;s security tools. While the domain is provisioning, you might see an invalid certificate that does not include your domain name. This is a normal part of the process and will resolve after your domain&amp;rsquo;s certificate is available.&lt;/p&gt;
&lt;p&gt;For Advanced Setup users, your website will be hosted by your previous hosting provider until the setup status in your project&amp;rsquo;s Firebase Hosting page updates to Connected.&lt;/p&gt;
&lt;h2 id=&#34;your-custom-domain-key&#34;&gt;Your custom domain key&lt;/h2&gt;
&lt;p&gt;When adding or editing DNS records, different domain providers expect you to enter different inputs for the Host field within their DNS management sites. We&amp;rsquo;ve compiled common inputs from popular providers below. Refer to your domain provider&amp;rsquo;s documentation for detailed instructions.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Domain type&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Custom domain key&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Apex domain&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Common inputs include: @ The apex domain name (for example, example.com), Leaving the Host field blank&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Subdomain&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Common inputs include: The full subdomain name (for example, app.example.com), Only the subdomain portion (for example, app only, and leaving out .example.com) ,Only www for the subdomain of &lt;a href=&#34;https://www.example.com&#34;&gt;www.example.com&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;lets-do-a-demo&#34;&gt;Let&amp;rsquo;s do a demo&lt;/h2&gt;
&lt;p&gt;Now we know the basics of the firebase hosting, Let&amp;rsquo;s deploy a testing site to Our Firebase Project.&lt;/p&gt;
&lt;p&gt;First I&amp;rsquo;m installing the tool set using npm&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200808_01.gif&#34; alt=&#34;Installing Firebase&#34;&gt;&lt;/p&gt;
&lt;p&gt;Then start a terminal in the project folder and Login to firebase CLI if you haven&amp;rsquo;t already.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200808_02.gif&#34; alt=&#34;Login To Firebase&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now Run the initialization command &lt;code&gt;firebase init&lt;/code&gt; And select hosting from the service menu using space bar and select your project using enter.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200808_03.gif&#34; alt=&#34;Initializing Firebase&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now you should have these folders in your directory.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200808_04.png&#34; alt=&#34;Project Directory&#34;&gt;&lt;/p&gt;
&lt;p&gt;I Created a simple Web page for demonstrate the hosting process.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200808_05.png&#34; alt=&#34;Project Directory&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200808_06.png&#34; alt=&#34;Project Directory&#34;&gt;&lt;/p&gt;
&lt;p&gt;And now let&amp;rsquo;s run our project locally for testing.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200808_07.gif&#34; alt=&#34;Initializing Firebase&#34;&gt;&lt;/p&gt;
&lt;p&gt;After testing with the server, Let&amp;rsquo;s Deploy!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200808_08.gif&#34; alt=&#34;Initializing Firebase&#34;&gt;&lt;/p&gt;
&lt;p&gt;And Wolah! It&amp;rsquo;s deployed and hosted on &lt;a href=&#34;https://tecinpact-demo.web.app&#34;&gt;https://tecinpact-demo.web.app&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200808_09.png&#34; alt=&#34;Project Directory&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now Let&amp;rsquo;s Connect a custom domain for the project. Here I&amp;rsquo;m using a free Domain from &lt;a href=&#34;https://blog.nushankodikara.com/post/free-top-level-domain-names-2020/&#34;&gt;This Guide&lt;/a&gt; . for this demonstration the Domain will be tecinpactdemonstration.gq so let&amp;rsquo;s add it to the firebase project.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200808_11.png&#34; alt=&#34;Project Directory&#34;&gt;&lt;/p&gt;
&lt;p&gt;Go-to Firebase Console and go-to the hosting tab.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200808_12.png&#34; alt=&#34;Project Directory&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200808_13.png&#34; alt=&#34;Project Directory&#34;&gt;&lt;/p&gt;
&lt;p&gt;Click on add domain button and Enter the Domain name with the subdomain (optionally the sub domain) And Click continue&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200808_14.png&#34; alt=&#34;Project Directory&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here you can see the verification DNS Records. Go-to your domain provider and add these records and click verify.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200808_15.png&#34; alt=&#34;Project Directory&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200808_16.png&#34; alt=&#34;Project Directory&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200808_17.png&#34; alt=&#34;Project Directory&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here you have the actual DNS Records to redirect users to the site. Add those too. And click finish&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200808_18.png&#34; alt=&#34;Project Directory&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200808_19.png&#34; alt=&#34;Project Directory&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200808_20.png&#34; alt=&#34;Project Directory&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200808_21.png&#34; alt=&#34;Project Directory&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200808_22.png&#34; alt=&#34;Project Directory&#34;&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m also adding the www subdomain for my project, I Can add it easily by clicking the add button from the notification. or copy the details from my page.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200808_23.gif&#34; alt=&#34;Project Directory&#34;&gt;&lt;/p&gt;
&lt;p&gt;And finally you should see the pending status. Here you can see Firebase is generating A Secure Certificate for the domain. This could take a while and it&amp;rsquo;s totally automated.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200808_24.png&#34; alt=&#34;Project Directory&#34;&gt;&lt;/p&gt;
&lt;p&gt;After few hours you can see the SSL certificate has beed delivered and there&amp;rsquo;s a padlock next to your URL. Also in the console, the status would be &lt;code&gt;connected&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200808_25.png&#34; alt=&#34;Project Directory&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200808_26.png&#34; alt=&#34;Project Directory&#34;&gt;&lt;/p&gt;
&lt;p&gt;And you are a master in Firebase Hosting! If you made some changes, just deploy and you&amp;rsquo;re good to go!&lt;/p&gt;
&lt;h2 id=&#34;firebase-analytics&#34;&gt;Firebase Analytics&lt;/h2&gt;
&lt;p&gt;Google Analytics is a free app measurement solution that provides insight on app usage and user engagement.&lt;/p&gt;
&lt;p&gt;At the heart of Firebase is Google Analytics, a free and unlimited analytics solution. Analytics integrates across Firebase features and provides you with unlimited reporting for up to 500 distinct events that you can define using the Firebase SDK. Analytics reports help you understand clearly how your users behave, which enables you to make informed decisions regarding app marketing and performance optimizations.&lt;/p&gt;
&lt;h2 id=&#34;how-does-it-work-actually&#34;&gt;How does it work actually&lt;/h2&gt;
&lt;p&gt;Google Analytics helps you understand how people use your web, iOS, or Android app. The SDK automatically captures a number of events and user properties and also allows you to define your own custom events to measure the things that uniquely matter to your business. Once the data is captured, it&amp;rsquo;s available in a dashboard through the Firebase console. This dashboard provides detailed insights about your data — from summary data such as active users and demographics, to more detailed data such as identifying your most purchased items.&lt;/p&gt;
&lt;p&gt;Analytics also integrates with a number of other Firebase features. For example, it automatically logs events that correspond to notification messages sent via the Notifications composer and provides reporting on the impact of each campaign.&lt;/p&gt;
&lt;p&gt;Analytics helps you understand how your users behave, so you can make informed decisions about how to market your app. See the performance of your campaigns across organic and paid channels to understand which methods are most effective at driving high-value users. If you need to perform custom analysis or join your data with other sources you can link your Analytics data to BigQuery, which allows for more complex analysis like querying large data sets and joining multiple data sources.&lt;/p&gt;
&lt;h2 id=&#34;lets-implement-analytics&#34;&gt;Let&amp;rsquo;s Implement Analytics&lt;/h2&gt;
&lt;p&gt;Now, what do we need to see our application data usage in a single dashboards? We are web developers. And we can add a single line of code to get all these benefits! That&amp;rsquo;s the beauty of the modern web development with BaaS services.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!--&lt;/span&gt; If you enabled Analytics &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; your project, add the Firebase SDK &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; Analytics &lt;span style=&#34;color:#ff79c6&#34;&gt;--&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;script src&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;/__/firebase/7.17.1/firebase-analytics.js&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;/script&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s it for Analytics. Go to the dashboard and your reports would get generated!&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;You can have a download bandwidth of 10GB/month free and expansion isn&amp;rsquo;t that expensive. You can host any kind of static site using This technique, but we can get more benefits by using Firebase as a hosting service while using other firebase tools BECAUSE, these services are provided by a single supplier and when we using more and more of their services, They can ensure the maximum security and pin point accurate analytics for us.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Firebase Authentication</title>
<link>https://blog.nushankodikara.com/blog/firebase-authentication/</link>
<pubDate>Fri, 07 Aug 2020 06:00:00 +0530</pubDate>
      
      <guid>https://blog.nushankodikara.com/blog/firebase-authentication/</guid>
<description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s use firebase for user authentication, you don&amp;rsquo;t need to setup custom authentications, app apis and other stupid things anymore, we have firebase on our back and few lines of codes can make the programs more efficient and more secure! today I&amp;rsquo;m only focusing Email, Google and Anonymous authentications mainly. you can browse firebase docs for more information on how to setup other authentications in advanced.&lt;/p&gt;
&lt;h2 id=&#34;firebase-authentication&#34;&gt;Firebase Authentication&lt;/h2&gt;
&lt;p&gt;Most apps need to know the identity of a user. Knowing a user&amp;rsquo;s identity allows an app to securely save user data in the cloud and provide the same personalized experience across all of the user&amp;rsquo;s devices.
Firebase Authentication provides backend services, easy-to-use SDKs, and ready-made UI libraries to authenticate users to your app. It supports authentication using passwords, phone numbers, popular federated identity providers like Google, Facebook and Twitter, and more.&lt;/p&gt;
&lt;p&gt;Firebase Authentication integrates tightly with other Firebase services, and it leverages industry standards like OAuth 2.0 and OpenID Connect, so it can be easily integrated with your custom backend.&lt;/p&gt;
&lt;h2 id=&#34;users-in-firebase-projects&#34;&gt;Users in Firebase Projects&lt;/h2&gt;
&lt;p&gt;The Firebase user object represents a user account that has signed up for an app in your project. Apps usually have many registered users, and every app in a project shares a user database.&lt;/p&gt;
&lt;p&gt;User instances are independent from Firebase Authentication instances, so you can have several references to different users within the same context and still call any of their methods.&lt;/p&gt;
&lt;h2 id=&#34;user-properties&#34;&gt;User properties&lt;/h2&gt;
&lt;p&gt;Firebase users have a fixed set of basic properties—a unique ID, a primary email address, a name and a photo URL—stored in the project&amp;rsquo;s user database, that can be updated by the user (iOS, Android, web). You cannot add other properties to the user object directly; instead, you can store the additional properties in any other storage services, like Google Cloud Firestore.&lt;/p&gt;
&lt;p&gt;The first time a user signs up to your app, the user&amp;rsquo;s profile data is populated using the available information:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If the user signed up with an email address and password, only the primary email address property is populated&lt;/li&gt;
&lt;li&gt;If the user signed up with a federated identity provider, such as Google or Facebook, the account information made available by the provider is used to populate the user&amp;rsquo;s profile&lt;/li&gt;
&lt;li&gt;If the user signed up with your custom auth system, you must explicitly add the information you want to the user&amp;rsquo;s profile&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once a user account has been created, you can reload the user&amp;rsquo;s information to incorporate any changes the user might have made on another device.&lt;/p&gt;
&lt;h2 id=&#34;sign-in-providers&#34;&gt;Sign-in providers&lt;/h2&gt;
&lt;p&gt;You can sign in users to your apps using several methods: email address and password, federated identity providers, and your custom auth system. You can associate more than one sign-in method with a user: for example, a user can sign in to the same account using an email address and a password, or using Google Sign-In.&lt;/p&gt;
&lt;p&gt;User instances keeps track of every provider linked to the user. This allows you to update empty profile&amp;rsquo;s properties using the information given by a provider. See Managing Users (iOS, Android, web).&lt;/p&gt;
&lt;h2 id=&#34;the-current-user&#34;&gt;The current user&lt;/h2&gt;
&lt;p&gt;When a user signs up or signs in, that user becomes the current user of the Auth instance. The instance persists the user&amp;rsquo;s state, so that refreshing the page (in a browser) or restarting the application doesn&amp;rsquo;t lose the user&amp;rsquo;s information.&lt;/p&gt;
&lt;p&gt;When the user signs out, the Auth instance stops keeping a reference to the user object and no longer persists its state; there is no current user. However, the user instance continues to be completely functional: if you keep a reference to it, you can still access and update the user&amp;rsquo;s data.&lt;/p&gt;
&lt;h2 id=&#34;the-user-lifecycle&#34;&gt;The user lifecycle&lt;/h2&gt;
&lt;p&gt;The recommended way to track the current state of the Auth instance is by using listeners (also called &amp;ldquo;observers&amp;rdquo; in JavaScript). An Auth listener gets notified any time something relevant happens to the Auth object. See Managing Users (iOS, Android, web).&lt;/p&gt;
&lt;p&gt;An Auth listener gets notified in the following situations:&lt;/p&gt;
&lt;p&gt;The Auth object finishes initializing and a user was already signed in from a previous session, or has been redirected from an identity provider&amp;rsquo;s sign-in flow&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A user signs in (the current user is set)&lt;/li&gt;
&lt;li&gt;A user signs out (the current user becomes null)&lt;/li&gt;
&lt;li&gt;The current user&amp;rsquo;s access token is refreshed. This case can happen in the following conditions:&lt;/li&gt;
&lt;li&gt;The access token expires: this is a common situation. The refresh token is used to get a new valid set of tokens.&lt;/li&gt;
&lt;li&gt;The user changes their password: Firebase issues new access and refresh tokens and renders the old tokens expired. This automatically expires the user&amp;rsquo;s token and/or signs out the user on every device, for security reasons.&lt;/li&gt;
&lt;li&gt;The user re-authenticates: some actions require that the user&amp;rsquo;s credentials are recently issued; such actions include deleting an account, setting a primary email address, and changing a password. Instead of signing out the user and then signing in the user again, get new credentials from the user, and pass the new credentials to the re-authenticate method of the user object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;easily-add-sign-in-to-your-web-app-with-firebaseui&#34;&gt;Easily add sign-in to your Web app with FirebaseUI&lt;/h2&gt;
&lt;p&gt;FirebaseUI is a library built on top of the Firebase Authentication SDK that provides drop-in UI flows for use in your app. FirebaseUI provides the following benefits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Multiple Providers - sign-in flows for email/password, email link, phone authentication, Google, Facebook, Twitter and GitHub sign-in.&lt;/li&gt;
&lt;li&gt;Account Linking - flows to safely link user accounts across identity providers.&lt;/li&gt;
&lt;li&gt;Customization - override CSS styles of FirebaseUI to match your app requirements. Also, because FirebaseUI is open source, you can fork the project and customize it exactly to your needs.&lt;/li&gt;
&lt;li&gt;Localized UI - internationalization for over 40 languages.&lt;/li&gt;
&lt;li&gt;Upgrading anonymous users - ability to upgrade anonymous users through sign-in/sign-up. For more information, visit the Upgrading anonymous users section.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;before-you-begin&#34;&gt;Before you begin&lt;/h2&gt;
&lt;p&gt;Add Firebase Authentication to your web application.&lt;/p&gt;
&lt;p&gt;Include the following script and CSS file in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag of your page, below the initialization snippet from the Firebase Console:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;script src&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://cdn.firebase.com/libs/firebaseui/3.5.2/firebaseui.js&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;/script&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;link type&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;text/css&amp;#34;&lt;/span&gt; rel&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt; href&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://cdn.firebase.com/libs/firebaseui/3.5.2/firebaseui.css&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;initialize-firebaseui&#34;&gt;Initialize FirebaseUI&lt;/h2&gt;
&lt;p&gt;After importing the SDK, initialize the Auth UI.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Initialize the FirebaseUI Widget using Firebase.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; ui &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; firebaseui.auth.AuthUI(firebase.auth());
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;set-up-sign-in-methods&#34;&gt;Set up sign-in methods&lt;/h2&gt;
&lt;p&gt;Before you can use Firebase to sign in users, you must enable and configure the sign-in methods you want to support.&lt;/p&gt;
&lt;h2 id=&#34;email-address-and-password&#34;&gt;Email address and password&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;In the Firebase console, open the Authentication section and enable email and password authentication.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the email provider ID to the list of FirebaseUI signInOptions.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ui.start(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#firebaseui-auth-container&amp;#39;&lt;/span&gt;, {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  signInOptions&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    firebase.auth.EmailAuthProvider.PROVIDER_ID
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// Other config options...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Optional: The EmailAuthProvider can be configured to require the user to enter a display name (defaults to true).&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ui.start(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;#firebaseui-auth-container&amp;#39;&lt;/span&gt;, {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  signInOptions&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      provider&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; firebase.auth.EmailAuthProvider.PROVIDER_ID,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      requireDisplayName&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;authenticate-with-firebase-anonymously-using-javascript&#34;&gt;Authenticate with Firebase Anonymously Using JavaScript&lt;/h2&gt;
&lt;p&gt;You can use Firebase Authentication to create and use temporary anonymous accounts to authenticate with Firebase. These temporary anonymous accounts can be used to allow users who haven&amp;rsquo;t yet signed up to your app to work with data protected by security rules. If an anonymous user decides to sign up to your app, you can link their sign-in credentials to the anonymous account so that they can continue to work with their protected data in future sessions.&lt;/p&gt;
&lt;h2 id=&#34;before-you--begin&#34;&gt;Before you  begin&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Add Firebase to your JavaScript project.&lt;/li&gt;
&lt;li&gt;If you haven&amp;rsquo;t yet connected your app to your Firebase project, do so from the Firebase console.&lt;/li&gt;
&lt;li&gt;Enable anonymous auth:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;In the Firebase console, open the Auth section.&lt;/li&gt;
&lt;li&gt;On the Sign-in Methods page, enable the Anonymous sign-in method.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;authenticate-with-firebase-anonymously&#34;&gt;Authenticate with Firebase anonymously&lt;/h2&gt;
&lt;p&gt;When a signed-out user uses an app feature that requires authentication with Firebase, sign in the user anonymously by completing the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Call the signInAnonymously method:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;firebase.auth().signInAnonymously().&lt;span style=&#34;color:#ff79c6&#34;&gt;catch&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(error) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// Handle Errors here.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; errorCode &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; error.code;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; errorMessage &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; error.message;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is also where you can catch and handle errors. For a list of error codes have a look at the Auth Reference Docs.&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;If the signInAnonymously method completes without error, the observer registered in the onAuthStateChanged will trigger and you can get the anonymous user&amp;rsquo;s account data from the User object:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;firebase.auth().onAuthStateChanged(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(user) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (user) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// User is signed in.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; isAnonymous &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; user.isAnonymous;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; uid &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; user.uid;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  } &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// User is signed out.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Also you can use this to check authentication state.&lt;/p&gt;
&lt;h2 id=&#34;convert-an-anonymous-account-to-a-permanent-account&#34;&gt;Convert an anonymous account to a permanent account&lt;/h2&gt;
&lt;p&gt;When an anonymous user signs up to your app, you might want to allow them to continue their work with their new account—for example, you might want to make the items the user added to their shopping cart before they signed up available in their new account&amp;rsquo;s shopping cart. To do so, complete the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;When the user signs up, complete the sign-in flow for the user&amp;rsquo;s authentication provider up to, but not including, calling one of the Auth.signInWith methods. For example, get the user&amp;rsquo;s Google ID token, Facebook access token, or email address and password.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Get an AuthCredential for the new authentication provider:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Google Sign-In&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; credential &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; firebase.auth.GoogleAuthProvider.credential(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    googleUser.getAuthResponse().id_token);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Email-password sign-in&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; credential &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; firebase.auth.EmailAuthProvider.credential(email, password);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Pass the AuthCredential object to the sign-in user&amp;rsquo;s link method:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;auth.currentUser.linkWithCredential(credential)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .then(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(usercred) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; usercred.user;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Anonymous account successfully upgraded&amp;#34;&lt;/span&gt;, user);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }).&lt;span style=&#34;color:#ff79c6&#34;&gt;catch&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(error) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Error upgrading anonymous account&amp;#34;&lt;/span&gt;, error);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  });
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If the call to link succeeds, the user&amp;rsquo;s new account can access the anonymous account&amp;rsquo;s Firebase data.&lt;/p&gt;
&lt;h2 id=&#34;authenticate-using-google-sign-in-with-javascript&#34;&gt;Authenticate Using Google Sign-In with JavaScript&lt;/h2&gt;
&lt;p&gt;You can let your users authenticate with Firebase using their Google Accounts by integrating Google Sign-In into your app. You can integrate Google Sign-In either by using the Firebase SDK to carry out the sign-in flow, or by carrying out the Google Sign-In flow manually and passing the resulting ID token to Firebase.&lt;/p&gt;
&lt;h2 id=&#34;before-you---begin&#34;&gt;Before you   begin&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Add Firebase to your JavaScript project.&lt;/li&gt;
&lt;li&gt;Enable Google Sign-In in the Firebase console:&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;In the Firebase console, open the Auth section.&lt;/li&gt;
&lt;li&gt;On the Sign in method tab, enable the Google sign-in method and click Save.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;handle-the-sign-in-flow-with-the-firebase-sdk&#34;&gt;Handle the sign-in flow with the Firebase SDK&lt;/h2&gt;
&lt;p&gt;If you are building a web app, the easiest way to authenticate your users with Firebase using their Google Accounts is to handle the sign-in flow with the Firebase JavaScript SDK. (If you want to authenticate a user in Node.js or other non-browser environment, you must handle the sign-in flow manually.)&lt;/p&gt;
&lt;p&gt;To handle the sign-in flow with the Firebase JavaScript SDK, follow these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create an instance of the Google provider object:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; provider &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; firebase.auth.GoogleAuthProvider();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Optional: Specify additional OAuth 2.0 scopes that you want to request from the authentication provider. To add a scope, call addScope. For example:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;provider.addScope(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;https://www.googleapis.com/auth/contacts.readonly&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;See the authentication provider documentation.
Optional: To localize the provider&amp;rsquo;s OAuth flow to the user&amp;rsquo;s preferred language without explicitly passing the relevant custom OAuth parameters, update the language code on the Auth instance before starting the OAuth flow. For example:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;firebase.auth().languageCode &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;pt&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// To apply the default browser preference instead of explicitly setting it.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// firebase.auth().useDeviceLanguage();
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Optional: Specify additional custom OAuth provider parameters that you want to send with the OAuth request. To add a custom parameter, call setCustomParameters on the initialized provider with an object containing the key as specified by the OAuth provider documentation and the corresponding value. For example:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;provider.setCustomParameters({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;login_hint&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;user@example.com&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Reserved required OAuth parameters are not allowed and will be ignored. See the authentication provider reference for more details.&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Authenticate with Firebase using the Google provider object. You can prompt your users to sign in with their Google Accounts either by opening a pop-up window or by redirecting to the sign-in page. The redirect method is preferred on mobile devices.
To sign in with a pop-up window, call signInWithPopup:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;firebase.auth().signInWithPopup(provider).then(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(result) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// This gives you a Google Access Token. You can use it to access the Google API.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; token &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; result.credential.accessToken;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// The signed-in user info.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; result.user;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;}).&lt;span style=&#34;color:#ff79c6&#34;&gt;catch&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(error) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// Handle Errors here.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; errorCode &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; error.code;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; errorMessage &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; error.message;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// The email of the user&amp;#39;s account used.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; email &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; error.email;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// The firebase.auth.AuthCredential type that was used.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; credential &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; error.credential;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Also notice that you can retrieve the Google provider&amp;rsquo;s OAuth token which can be used to fetch additional data using the Google APIs.
This is also where you can catch and handle errors. For a list of error codes have a look at the Auth Reference Docs.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To sign in by redirecting to the sign-in page, call signInWithRedirect:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;firebase.auth().signInWithRedirect(provider);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then, you can also retrieve the Google provider&amp;rsquo;s OAuth token by calling getRedirectResult when your page loads:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;firebase.auth().getRedirectResult().then(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(result) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (result.credential) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// This gives you a Google Access Token. You can use it to access the Google API.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; token &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; result.credential.accessToken;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// The signed-in user info.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; result.user;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}).&lt;span style=&#34;color:#ff79c6&#34;&gt;catch&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(error) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// Handle Errors here.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; errorCode &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; error.code;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; errorMessage &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; error.message;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// The email of the user&amp;#39;s account used.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; email &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; error.email;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// The firebase.auth.AuthCredential type that was used.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; credential &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; error.credential;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is also where you can catch and handle errors. For a list of error codes have a look at the Auth Reference Docs. You can find all of the providers here.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200807_01.gif&#34; alt=&#34;Authentication Providers&#34;&gt;&lt;/p&gt;
&lt;p&gt;Alright! Now we know how we can authenticate with firebase, Now, Let&amp;rsquo;s explore how we can secure our Firestore and Realtime databases.&lt;/p&gt;
&lt;h2 id=&#34;signing-out&#34;&gt;Signing Out&lt;/h2&gt;
&lt;p&gt;We all need a sign out button and it&amp;rsquo;s very simple, just use this code.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;firebase.auth().signOut().then(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// Sign-out successful.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;}).&lt;span style=&#34;color:#ff79c6&#34;&gt;catch&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(error) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// An error happened.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;understand-firebase-realtime-database-rules&#34;&gt;Understand Firebase Realtime Database Rules&lt;/h2&gt;
&lt;p&gt;Firebase Realtime Database Rules determine who has read and write access to your database, how your data is structured, and what indexes exist. These rules live on the Firebase servers and are enforced automatically at all times. Every read and write request will only be completed if your rules allow it. By default, your rules do not allow anyone access to your database. This is to protect your database from abuse until you have time to customize your rules or set up authentication.&lt;/p&gt;
&lt;p&gt;Realtime Database Rules have a JavaScript-like syntax and come in four types:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Rule&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Types&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;.read&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Describes if and when data is allowed to be read by users.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;.write&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Describes if and when data is allowed to be written.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;.validate&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Defines what a correctly formatted value will look like, whether it has child attributes, and the data type.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;.indexOn&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies a child to index to support ordering and querying.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;realtime-database-security-overview&#34;&gt;Realtime Database security overview&lt;/h2&gt;
&lt;p&gt;The Firebase Realtime Database provides a full set of tools for managing the security of your app. These tools make it easy to authenticate your users, enforce user permissions, and validate inputs.&lt;/p&gt;
&lt;p&gt;Firebase-powered apps run more client-side code than those with many other technology stacks. Therefore, the way we approach security may be a bit different than you&amp;rsquo;re used to.&lt;/p&gt;
&lt;h2 id=&#34;authentication&#34;&gt;Authentication&lt;/h2&gt;
&lt;p&gt;A common first step in securing your app is identifying your users. This process is called authentication. You can use Firebase Authentication to have users to sign in to your app. Firebase Authentication includes drop-in support for common authentication methods like Google and Facebook, as well as email and password login, anonymous login, and more.&lt;/p&gt;
&lt;p&gt;User identity is an important security concept. Different users have different data, and sometimes they have different capabilities. For example, in a chat application, each message is associated with the user that created it. Users may also be able to delete their own messages, but not messages posted by other users.&lt;/p&gt;
&lt;h2 id=&#34;authorization&#34;&gt;Authorization&lt;/h2&gt;
&lt;p&gt;Identifying your user is only part of security. Once you know who they are, you need a way to control their access to data in your database. Realtime Database Rules allow you to control access for each user. For example, here&amp;rsquo;s a set of security rules that allows anyone to read the path /foo/, but no one to write to it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;rules&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.read&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.write&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;.read and .write rules cascade, so this ruleset grants read access to any data at path /foo/ as well as any deeper paths such as /foo/bar/baz. Note that .read and .write rules shallower in the database override deeper rules, so read access to /foo/bar/baz would still be granted in this example even if a rule at the path /foo/bar/baz evaluated to false.&lt;/p&gt;
&lt;p&gt;The Realtime Database Rules include built-in variables and functions that allow you to refer to other paths, server-side timestamps, authentication information, and more. Here&amp;rsquo;s an example of a rule that grants write access for authenticated users to &lt;code&gt;/users/&amp;lt;uid&amp;gt;/&lt;/code&gt;, where &lt;code&gt;&amp;lt;uid&amp;gt;&lt;/code&gt; is the ID of the user obtained through Firebase Authentication.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;rules&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;users&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;$uid&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.write&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;$uid === auth.uid&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;data-validation&#34;&gt;Data validation&lt;/h2&gt;
&lt;p&gt;The Firebase Realtime Database is schemaless. This makes it easy to change things as you develop, but once your app is ready to distribute, it&amp;rsquo;s important for data to stay consistent. The rules language includes a .validate rule which allows you to apply validation logic using the same expressions used for .read and .write rules. The only difference is that validation rules do not cascade, so all relevant validation rules must evaluate to true in order for the write to be allowed.&lt;/p&gt;
&lt;p&gt;These rule enforce that data written to /foo/ must be a string less than 100 characters:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;rules&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.validate&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;newData.isString() &amp;amp;&amp;amp; newData.val().length &amp;lt; 100&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Validation rules have access to all of the same built-in functions and variables as .read and .write rules. You can use these to create validation rules that are aware of data elsewhere in your database, your user&amp;rsquo;s identity, server time, and much more.&lt;/p&gt;
&lt;h2 id=&#34;defining-database-indexes&#34;&gt;Defining database indexes&lt;/h2&gt;
&lt;p&gt;The Firebase Realtime Database allows ordering and querying data. For small data sizes, the database supports ad hoc querying, so indexes are generally not required during development. Before launching your app though, it is important to specify indexes for any queries you have to ensure they continue to work as your app grows.&lt;/p&gt;
&lt;p&gt;Indexes are specified using the .indexOn rule. Here is an example index declaration that would index the height and length fields for a list of dinosaurs:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;rules&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;dinosaurs&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.indexOn&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; [&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;height&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;length&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;get-started-with-cloud-firestore-security-rules&#34;&gt;Get started with Cloud Firestore Security Rules&lt;/h2&gt;
&lt;p&gt;With Cloud Firestore Security Rules, you can focus on building a great user experience without having to manage infrastructure or write server-side authentication and authorization code.&lt;/p&gt;
&lt;p&gt;Security rules provide access control and data validation in a simple yet expressive format. To build user-based and role-based access systems that keep your users&amp;rsquo; data safe, you need to use Firebase Authentication with Cloud Firestore Security Rules.&lt;/p&gt;
&lt;h2 id=&#34;security-rules-version-2&#34;&gt;Security rules version 2&lt;/h2&gt;
&lt;p&gt;As of May 2019, version 2 of the Cloud Firestore security rules is now available. Version 2 of the rules changes the behavior of recursive wildcards {name=**}. You must use version 2 if you plan to use collection group queries. You must opt-in to version 2 by making rules_version = &amp;lsquo;2&amp;rsquo;; the first line in your security rules:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rules_version &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;service cloud.firestore {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  match &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;databases&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;{database}&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;documents {
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;writing-rules&#34;&gt;Writing rules&lt;/h2&gt;
&lt;p&gt;All Cloud Firestore Security Rules consist of match statements, which identify documents in your database, and allow expressions, which control access to those documents:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;service cloud.firestore {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  match &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;databases&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;{database}&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;documents {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    match &lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;lt;&lt;/span&gt;some_path&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;/ {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      allow read, write&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;some_condition&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Every database request from a Cloud Firestore mobile/web client library is evaluated against your security rules before reading or writing any data. If the rules deny access to any of the specified document paths, the entire request fails.&lt;/p&gt;
&lt;p&gt;Below are some examples of basic rule sets. While these rules are valid, they are not recommended for production applications:&lt;/p&gt;
&lt;h3 id=&#34;auth-required&#34;&gt;Auth Required&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Allow read/write access on all documents to any user signed in to the application
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;service cloud.firestore {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  match &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;databases&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;{database}&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;documents {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    match &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;{&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=**&lt;/span&gt;} {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      allow read, write&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; request.auth &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;deny-all&#34;&gt;Deny all&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Deny read/write access to all users under any conditions
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;service cloud.firestore {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  match &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;databases&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;{database}&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;documents {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    match &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;{&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=**&lt;/span&gt;} {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      allow read, write&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;allow-all&#34;&gt;Allow All&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Allow read/write access to all users under any conditions
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Warning: **NEVER** use this rule set in production; it allows
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// anyone to overwrite your entire database.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;service cloud.firestore {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  match &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;databases&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;{database}&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;documents {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    match &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;{&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=**&lt;/span&gt;} {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      allow read, write&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The {document=**} path used in the examples above matches any document in the entire database. Continue on to the guide for structuring security rules to learn how to match specific data paths and work with hierarchical data.&lt;/p&gt;
&lt;h2 id=&#34;testing-rules&#34;&gt;Testing rules&lt;/h2&gt;
&lt;p&gt;Cloud Firestore provides a rules simulator that you can use to test your ruleset. You can access the simulator from the Rules tab in the Cloud Firestore section of the Firebase console.&lt;/p&gt;
&lt;p&gt;The rules simulator lets you simulate authenticated and unauthenticated reads, writes, and deletes. When you simulate an authenticated request, you can build and preview authentication tokens from various providers. Simulated requests run against the ruleset in your editor, not your currently deployed ruleset.&lt;/p&gt;
&lt;h2 id=&#34;deploying-rules&#34;&gt;Deploying rules&lt;/h2&gt;
&lt;p&gt;Before you can start using Cloud Firestore from your mobile app, you will need to deploy security rules. You can deploy rules in the Firebase console or using the Firebase CLI.&lt;/p&gt;
&lt;p&gt;Updates to Cloud Firestore Security Rules can take up to a minute to affect new queries and listeners. However, it can take up to 10 minutes to fully propagate the changes and affect any active listeners.&lt;/p&gt;
&lt;h2 id=&#34;use-the-firebase-console&#34;&gt;Use the Firebase console&lt;/h2&gt;
&lt;p&gt;To set up and deploy your first set of rules, open the Rules tab in the Cloud Firestore section of the Firebase console.&lt;/p&gt;
&lt;p&gt;Write your rules in the online editor, then click Publish.&lt;/p&gt;
&lt;p&gt;And That&amp;rsquo;s what we need to know about! Use these wisely and you&amp;rsquo;ll end-up with a super cool project overall!&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Firebase is a complete BaaS Solution for modern web developers. It also supports so many platforms but we&amp;rsquo;re considering web SDKs for now.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Firebase Cloud Firestore</title>
<link>https://blog.nushankodikara.com/blog/firebase-cloud-firestore/</link>
<pubDate>Thu, 06 Aug 2020 06:00:00 +0530</pubDate>
      
      <guid>https://blog.nushankodikara.com/blog/firebase-cloud-firestore/</guid>
<description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Use our flexible, scalable NoSQL cloud database to store and sync data for client- and server-side development.&lt;/p&gt;
&lt;p&gt;Cloud Firestore is a flexible, scalable database for mobile, web, and server development from Firebase and Google Cloud Platform, Like Firebase Realtime Database, it keeps your data in sync across client apps through realtime listeners and offers offline support for mobile and web so you can build responsive apps that work regardless of network latency or Internet connectivity, Cloud Firestore also offers seamless integration with other Firebase and Google Cloud Platform products, including Cloud Functions.&lt;/p&gt;
&lt;h2 id=&#34;key-capabilities&#34;&gt;Key capabilities&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;capability&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Flexibility&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;The Cloud Firestore data model supports flexible, hierarchical data structures. Store your data in documents, organized into collections. Documents can contain complex nested objects in addition to subcollections.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Expressive querying&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;In Cloud Firestore, you can use queries to retrieve individual, specific documents or to retrieve all the documents in a collection that match your query parameters. Your queries can include multiple, chained filters and combine filtering and sorting. They&amp;rsquo;re also indexed by default, so query performance is proportional to the size of your result set, not your data set.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Realtime updates&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Like Realtime Database, Cloud Firestore uses data synchronization to update data on any connected device. However, it&amp;rsquo;s also designed to make simple, one-time fetch queries efficiently.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Offline support&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Cloud Firestore caches data that your app is actively using, so the app can write, read, listen to, and query data even if the device is offline. When the device comes back online, Cloud Firestore synchronizes any local changes back to Cloud Firestore.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Designed to scale&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Cloud Firestore brings you the best of Google Cloud Platform&amp;rsquo;s powerful infrastructure: automatic multi-region data replication, strong consistency guarantees, atomic batch operations, and real transaction support. We&amp;rsquo;ve designed Cloud Firestore to handle the toughest database workloads from the world&amp;rsquo;s biggest apps.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;how-does-it-work&#34;&gt;How does it work&lt;/h2&gt;
&lt;p&gt;Cloud Firestore is a cloud-hosted, NoSQL database that your iOS, Android, and web apps can access directly via native SDKs. Cloud Firestore is also available in native Node.js, Java, Python, Unity, C++ and Go SDKs, in addition to REST and RPC APIs.&lt;/p&gt;
&lt;p&gt;Following Cloud Firestore&amp;rsquo;s NoSQL data model, you store data in documents that contain fields mapping to values. These documents are stored in collections, which are containers for your documents that you can use to organize your data and build queries. Documents support many different data types, from simple strings and numbers, to complex, nested objects. You can also create subcollections within documents and build hierarchical data structures that scale as your database grows. The Cloud Firestore data model supports whatever data structure works best for your app.&lt;/p&gt;
&lt;p&gt;Additionally, querying in Cloud Firestore is expressive, efficient, and flexible. Create shallow queries to retrieve data at the document level without needing to retrieve the entire collection, or any nested subcollections. Add sorting, filtering, and limits to your queries or cursors to paginate your results. To keep data in your apps current, without retrieving your entire database each time an update happens, add realtime listeners. Adding realtime listeners to your app notifies you with a data snapshot whenever the data your client apps are listening to changes, retrieving only the new changes.&lt;/p&gt;
&lt;p&gt;Protect access to your data in Cloud Firestore with Firebase Authentication and Cloud Firestore Security Rules for Android, iOS, and JavaScript, or Identity and Access Management (IAM) for server-side languages.&lt;/p&gt;
&lt;h2 id=&#34;get-started-with-cloud-firestore&#34;&gt;Get started with Cloud Firestore&lt;/h2&gt;
&lt;p&gt;This quickstart shows you how to set up Cloud Firestore, add data, then view the data you just added in the Firebase console.&lt;/p&gt;
&lt;h2 id=&#34;create-a-cloud-firestore-database&#34;&gt;Create a Cloud Firestore database&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;If you haven&amp;rsquo;t already, create a Firebase project: In the Firebase console, click Add project, then follow the on-screen instructions to create a Firebase project or to add Firebase services to an existing GCP project.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Navigate to the Database section of the Firebase console. You&amp;rsquo;ll be prompted to select an existing Firebase project. Follow the database creation workflow.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select a starting mode for your Cloud Firestore Security Rules:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;test-mode&#34;&gt;Test mode&lt;/h3&gt;
&lt;p&gt;Good for getting started with the mobile and web client libraries, but allows anyone to read and overwrite your data. After testing, make sure to review the Secure your data section.&lt;/p&gt;
&lt;p&gt;To get started with the web, iOS, or Android SDK, select test mode.&lt;/p&gt;
&lt;h3 id=&#34;locked-mode&#34;&gt;Locked mode&lt;/h3&gt;
&lt;p&gt;Denies all reads and writes from mobile and web clients. Your authenticated application servers (C#, Go, Java, Node.js, PHP, Python, or Ruby) can still access your database.&lt;/p&gt;
&lt;p&gt;To get started with the C#, Go, Java, Node.js, PHP, Python, or Ruby server client library, select locked mode.&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Select a location for your database.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This location setting is your project&amp;rsquo;s default Google Cloud Platform (GCP) resource location. Note that this location will be used for GCP services in your project that require a location setting, specifically, your default Cloud Storage bucket and your App Engine app (which is required if you use Cloud Scheduler).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you aren&amp;rsquo;t able to select a location, then your project already has a default GCP resource location. It was set either during project creation or when setting up another service that requires a location setting.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Click Done.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I&amp;rsquo;m skipping the first step because we did it in the previous post. And continuing from there, It&amp;rsquo;s not much harder just create a new project.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200806_01.gif&#34; alt=&#34;Creating Database&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;set-up-your-development-environment&#34;&gt;Set up your development environment&lt;/h2&gt;
&lt;p&gt;Add the required dependencies and client libraries to your app. In this case, we need firestore library and the app initialization library.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Follow the instructions to add Firebase to your Web app.&lt;/li&gt;
&lt;li&gt;Add the Firebase and Cloud Firestore libraries to your app:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;script src&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://www.gstatic.com/firebasejs/7.17.1/firebase-app.js&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;/script&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;script src&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://www.gstatic.com/firebasejs/7.17.1/firebase-firestore.js&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;/script&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now Let&amp;rsquo;s Initialize the app with our database. To do this, You have to add the initialization code from your console.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200806_02.gif&#34; alt=&#34;Initializing App&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;add-data&#34;&gt;Add data&lt;/h2&gt;
&lt;p&gt;Cloud Firestore stores data in Documents, which are stored in Collections. Cloud Firestore creates collections and documents implicitly the first time you add data to the document. You do not need to explicitly create collections or documents.&lt;/p&gt;
&lt;p&gt;Create a new collection and a document using the following example code.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;db.collection(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;users&amp;#34;&lt;/span&gt;).add({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    first&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Ada&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    last&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Lovelace&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    born&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1815&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.then(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(docRef) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Document written with ID: &amp;#34;&lt;/span&gt;, docRef.id);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.&lt;span style=&#34;color:#ff79c6&#34;&gt;catch&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(error) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    console.error(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Error adding document: &amp;#34;&lt;/span&gt;, error);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now add another document to the users collection. Notice that this document includes a key-value pair (middle name) that does not appear in the first document. Documents in a collection can contain different sets of information.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Add a second document with a generated ID.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;db.collection(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;users&amp;#34;&lt;/span&gt;).add({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    first&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Alan&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    middle&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Mathison&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    last&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Turing&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    born&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1912&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.then(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(docRef) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Document written with ID: &amp;#34;&lt;/span&gt;, docRef.id);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.&lt;span style=&#34;color:#ff79c6&#34;&gt;catch&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(error) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    console.error(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Error adding document: &amp;#34;&lt;/span&gt;, error);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;read-data&#34;&gt;Read data&lt;/h2&gt;
&lt;p&gt;To quickly verify that you&amp;rsquo;ve added data to Cloud Firestore, use the data viewer in the Firebase console.&lt;/p&gt;
&lt;p&gt;You can also use the &amp;ldquo;get&amp;rdquo; method to retrieve the entire collection.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;db.collection(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;users&amp;#34;&lt;/span&gt;).get().then((querySnapshot) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    querySnapshot.forEach((doc) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;doc.id&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt; =&amp;gt; &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;doc.data()&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;secure-your-data&#34;&gt;Secure your data&lt;/h2&gt;
&lt;p&gt;If you&amp;rsquo;re using the Web, Android, or iOS SDK, use Firebase Authentication and Cloud Firestore Security Rules to secure your data in Cloud Firestore.&lt;/p&gt;
&lt;p&gt;Here are some basic rule sets you can use to get started. You can modify your security rules in the Rules tab of the console. (We&amp;rsquo;re Discussing Security in detail on another day!)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Allow read/write access on all documents to any user signed in to the application
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;service cloud.firestore {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  match &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;databases&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;{database}&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;documents {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    match &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;{&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=**&lt;/span&gt;} {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      allow read, write&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; request.auth &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you&amp;rsquo;re using one of the server SDKs, use Identity and Access Management (IAM) to secure your data in Cloud Firestore.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s dive deeper into the above topics.&lt;/p&gt;
&lt;h2 id=&#34;adding-data-explanation&#34;&gt;Adding Data Explanation&lt;/h2&gt;
&lt;p&gt;There are several ways to write data to Cloud Firestore:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Set the data of a document within a collection, explicitly specifying a document identifier.&lt;/li&gt;
&lt;li&gt;Add a new document to a collection. In this case, Cloud Firestore automatically generates the document identifier.&lt;/li&gt;
&lt;li&gt;Create an empty document with an automatically generated identifier, and assign data to it later.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This guide explains how to use the set, add, or update individual documents in Cloud Firestore. If you want to write data in bulk, see Transactions and Batched Writes.&lt;/p&gt;
&lt;h2 id=&#34;set-a-document&#34;&gt;Set a document&lt;/h2&gt;
&lt;p&gt;To create or overwrite a single document, use the set() method:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Add a new document in collection &amp;#34;cities&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;db.collection(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;cities&amp;#34;&lt;/span&gt;).doc(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;LA&amp;#34;&lt;/span&gt;).set({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Los Angeles&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    state&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;CA&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    country&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;USA&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.then(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Document successfully written!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.&lt;span style=&#34;color:#ff79c6&#34;&gt;catch&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(error) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    console.error(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Error writing document: &amp;#34;&lt;/span&gt;, error);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If the document does not exist, it will be created. If the document does exist, its contents will be overwritten with the newly provided data, unless you specify that the data should be merged into the existing document, as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; cityRef &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; db.collection(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;cities&amp;#39;&lt;/span&gt;).doc(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;BJ&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; setWithMerge &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; cityRef.set({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    capital&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}, { merge&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt; });
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you&amp;rsquo;re not sure whether the document exists, pass the option to merge the new data with any existing document to avoid overwriting entire documents.&lt;/p&gt;
&lt;h2 id=&#34;data-types&#34;&gt;Data types&lt;/h2&gt;
&lt;p&gt;Cloud Firestore lets you write a variety of data types inside a document, including strings, booleans, numbers, dates, null, and nested arrays and objects. Cloud Firestore always stores numbers as doubles, regardless of what type of number you use in your code.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; docData &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    stringExample&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Hello world!&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    booleanExample&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    numberExample&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3.14159265&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    dateExample&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; firebase.firestore.Timestamp.fromDate(&lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Date&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;December 10, 1815&amp;#34;&lt;/span&gt;)),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    arrayExample&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; [&lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    nullExample&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    objectExample&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        a&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        b&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            nested&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;db.collection(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;).doc(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;one&amp;#34;&lt;/span&gt;).set(docData).then(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Document successfully written!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;custom-objects&#34;&gt;Custom objects&lt;/h2&gt;
&lt;p&gt;Using Map or Dictionary objects to represent your documents is often not very convenient, so Cloud Firestore supports writing documents with custom classes. Cloud Firestore converts the objects to supported data types.&lt;/p&gt;
&lt;p&gt;Using custom classes, you could rewrite the initial example as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; City {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    constructor (name, state, country ) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; name;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.state &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; state;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.country &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; country;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    toString() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.name &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.state &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.country;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// Firestore data converter
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  cityConverter &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      toFirestore&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(city) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; city.name,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              state&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; city.state,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              country&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; city.country
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      fromFirestore&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(snapshot, options){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; snapshot.data(options);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; City(data.name, data.state, data.country)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Set with cityConverter
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;db.collection(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;cities&amp;#34;&lt;/span&gt;).doc(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;LA&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .withConverter(cityConverter)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .set(&lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; City(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Los Angeles&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;CA&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;USA&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;add-a-document&#34;&gt;Add a document&lt;/h2&gt;
&lt;p&gt;When you use set() to create a document, you must specify an ID for the document to create. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;db.collection(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;cities&amp;#34;&lt;/span&gt;).doc(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;new-city-id&amp;#34;&lt;/span&gt;).set(data);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But sometimes there isn&amp;rsquo;t a meaningful ID for the document, and it&amp;rsquo;s more convenient to let Cloud Firestore auto-generate an ID for you. You can do this by calling add():&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Add a new document with a generated id.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;db.collection(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;cities&amp;#34;&lt;/span&gt;).add({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Tokyo&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    country&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Japan&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.then(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(docRef) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Document written with ID: &amp;#34;&lt;/span&gt;, docRef.id);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.&lt;span style=&#34;color:#ff79c6&#34;&gt;catch&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(error) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    console.error(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Error adding document: &amp;#34;&lt;/span&gt;, error);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In some cases, it can be useful to create a document reference with an auto-generated ID, then use the reference later. For this use case, you can call doc():&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Add a new document with a generated id.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; newCityRef &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; db.collection(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;cities&amp;#34;&lt;/span&gt;).doc();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// later...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;newCityRef.set(data);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Behind the scenes, .add(&amp;hellip;) and .doc().set(&amp;hellip;) are completely equivalent, so you can use whichever is more convenient.&lt;/p&gt;
&lt;h2 id=&#34;update-a-document&#34;&gt;Update a document&lt;/h2&gt;
&lt;p&gt;To update some fields of a document without overwriting the entire document, use the update() method:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; washingtonRef &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; db.collection(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;cities&amp;#34;&lt;/span&gt;).doc(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;DC&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Set the &amp;#34;capital&amp;#34; field of the city &amp;#39;DC&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; washingtonRef.update({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    capital&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.then(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Document successfully updated!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.&lt;span style=&#34;color:#ff79c6&#34;&gt;catch&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(error) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// The document probably doesn&amp;#39;t exist.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    console.error(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Error updating document: &amp;#34;&lt;/span&gt;, error);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;server-timestamp&#34;&gt;Server Timestamp&lt;/h2&gt;
&lt;p&gt;You can set a field in your document to a server timestamp which tracks when the server receives the update.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; docRef &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; db.collection(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;objects&amp;#39;&lt;/span&gt;).doc(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;some-id&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Update the timestamp field with the value from the server
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; updateTimestamp &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; docRef.update({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    timestamp&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; firebase.firestore.FieldValue.serverTimestamp()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;update-fields-in-nested-objects&#34;&gt;Update fields in nested objects&lt;/h2&gt;
&lt;p&gt;If your document contains nested objects, you can use &amp;ldquo;dot notation&amp;rdquo; to reference nested fields within the document when you call update():&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Create an initial document to update.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; frankDocRef &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; db.collection(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;users&amp;#34;&lt;/span&gt;).doc(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;frank&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;frankDocRef.set({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Frank&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    favorites&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; { food&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Pizza&amp;#34;&lt;/span&gt;, color&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Blue&amp;#34;&lt;/span&gt;, subject&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;recess&amp;#34;&lt;/span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    age&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;12&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// To update age and favorite color:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;db.collection(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;users&amp;#34;&lt;/span&gt;).doc(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;frank&amp;#34;&lt;/span&gt;).update({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;age&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;13&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;favorites.color&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Red&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.then(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Document successfully updated!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Dot notation allows you to update a single nested field without overwriting other nested field. If you update a nested field without dot notation, you will overwrite the entire map field, for example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Create our initial doc
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;db.collection(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;users&amp;#34;&lt;/span&gt;).doc(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;frank&amp;#34;&lt;/span&gt;).set({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Frank&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  favorites&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    food&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Pizza&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    color&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Blue&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    subject&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Recess&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  age&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;12&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}).then(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Frank created&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Update the doc without using dot notation.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Notice the map value for favorites.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;db.collection(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;users&amp;#34;&lt;/span&gt;).doc(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;frank&amp;#34;&lt;/span&gt;).update({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  favorites&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    food&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Ice Cream&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}).then(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Frank food updated&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;Ending State, favorite.color and favorite.subject are no longer present:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/users
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;    /frank
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;        {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;            name: &amp;#34;Frank&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;            favorites: {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;                food: &amp;#34;Ice Cream&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;            },
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;            age: 12
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;update-elements-in-an-array&#34;&gt;Update elements in an array&lt;/h2&gt;
&lt;p&gt;If your document contains an array field, you can use arrayUnion() and arrayRemove() to add and remove elements. arrayUnion() adds elements to an array but only elements not already present. arrayRemove() removes all instances of each given element.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; washingtonRef &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; db.collection(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;cities&amp;#34;&lt;/span&gt;).doc(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;DC&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Atomically add a new region to the &amp;#34;regions&amp;#34; array field.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;washingtonRef.update({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    regions&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; firebase.firestore.FieldValue.arrayUnion(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;greater_virginia&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Atomically remove a region from the &amp;#34;regions&amp;#34; array field.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;washingtonRef.update({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    regions&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; firebase.firestore.FieldValue.arrayRemove(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;east_coast&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;increment-a-numeric-value&#34;&gt;Increment a numeric value&lt;/h2&gt;
&lt;p&gt;You can increment or decrement a numeric field value as shown in the following example. An increment operation increases or decreases the current value of a field by the given amount. If the field does not exist or if the current field value is not a numeric value, the operation sets the field to the given value.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; washingtonRef &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; db.collection(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;cities&amp;#39;&lt;/span&gt;).doc(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;DC&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Atomically increment the population of the city by 50.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;washingtonRef.update({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    population&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; firebase.firestore.FieldValue.increment(&lt;span style=&#34;color:#bd93f9&#34;&gt;50&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Increment operations are useful for implementing counters, but keep in mind that you can update a single document only once per second.&lt;/p&gt;
&lt;h2 id=&#34;delete-data-from-cloud-firestore&#34;&gt;Delete data from Cloud Firestore&lt;/h2&gt;
&lt;p&gt;The following examples demonstrate how to delete documents, fields, and collections.&lt;/p&gt;
&lt;h2 id=&#34;delete-documents&#34;&gt;Delete documents&lt;/h2&gt;
&lt;p&gt;To delete a document, use the delete() method:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;db.collection(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;cities&amp;#34;&lt;/span&gt;).doc(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;DC&amp;#34;&lt;/span&gt;).&lt;span style=&#34;color:#ff79c6&#34;&gt;delete&lt;/span&gt;().then(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Document successfully deleted!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}).&lt;span style=&#34;color:#ff79c6&#34;&gt;catch&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(error) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    console.error(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Error removing document: &amp;#34;&lt;/span&gt;, error);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When you delete a document, Cloud Firestore does not automatically delete the documents within its subcollections. You can still access the subcollection documents by reference. For example, you can access the document at path /mycoll/mydoc/mysubcoll/mysubdoc even if you delete the ancestor document at /mycoll/mydoc.&lt;/p&gt;
&lt;p&gt;Non-existent ancestor documents appear in the console, but they do not appear in query results and snapshots.&lt;/p&gt;
&lt;p&gt;If you want to delete a document and all the documents within its subcollections, you must do so manually. For more information, see Delete Collections.&lt;/p&gt;
&lt;h2 id=&#34;delete-fields&#34;&gt;Delete fields&lt;/h2&gt;
&lt;p&gt;To delete specific fields from a document, use the FieldValue.delete() method when you update a document:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; cityRef &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; db.collection(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;cities&amp;#39;&lt;/span&gt;).doc(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;BJ&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Remove the &amp;#39;capital&amp;#39; field from the document
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; removeCapital &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; cityRef.update({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    capital&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; firebase.firestore.FieldValue.&lt;span style=&#34;color:#ff79c6&#34;&gt;delete&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;delete-collections&#34;&gt;Delete collections&lt;/h3&gt;
&lt;p&gt;To delete an entire collection or subcollection in Cloud Firestore, retrieve all the documents within the collection or subcollection and delete them. If you have larger collections, you may want to delete the documents in smaller batches to avoid out-of-memory errors. Repeat the process until you&amp;rsquo;ve deleted the entire collection or subcollection.&lt;/p&gt;
&lt;p&gt;Deleting a collection requires coordinating an unbounded number of individual delete requests. If you need to delete entire collections, do so only from a trusted server environment. While it is possible to delete a collection from a mobile/web client, doing so has negative security and performance implications.&lt;/p&gt;
&lt;p&gt;The snippets below are somewhat simplified and do not deal with error handling, security, deleting subcollections, or maximizing performance. To learn more about one recommended approach to deleting collections in production, see Deleting Collections and Subcollections.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Deleting collections from a Web client is not recommended.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;get-data-with-cloud-firestore&#34;&gt;Get data with Cloud Firestore&lt;/h2&gt;
&lt;p&gt;There are two ways to retrieve data stored in Cloud Firestore. Either of these methods can be used with documents, collections of documents, or the results of queries:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Call a method to get the data.&lt;/li&gt;
&lt;li&gt;Set a listener to receive data-change events.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When you set a listener, Cloud Firestore sends your listener an initial snapshot of the data, and then another snapshot each time the document changes.&lt;/p&gt;
&lt;h2 id=&#34;example-data&#34;&gt;Example data&lt;/h2&gt;
&lt;p&gt;To get started, write some data about cities so we can look at different ways to read it back:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; citiesRef &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; db.collection(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;cities&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;citiesRef.doc(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;SF&amp;#34;&lt;/span&gt;).set({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;San Francisco&amp;#34;&lt;/span&gt;, state&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;CA&amp;#34;&lt;/span&gt;, country&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;USA&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    capital&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;, population&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;860000&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    regions&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; [&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;west_coast&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;norcal&amp;#34;&lt;/span&gt;] });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;citiesRef.doc(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;LA&amp;#34;&lt;/span&gt;).set({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Los Angeles&amp;#34;&lt;/span&gt;, state&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;CA&amp;#34;&lt;/span&gt;, country&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;USA&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    capital&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;, population&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3900000&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    regions&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; [&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;west_coast&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;socal&amp;#34;&lt;/span&gt;] });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;citiesRef.doc(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;DC&amp;#34;&lt;/span&gt;).set({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Washington, D.C.&amp;#34;&lt;/span&gt;, state&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;, country&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;USA&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    capital&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;, population&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;680000&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    regions&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; [&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;east_coast&amp;#34;&lt;/span&gt;] });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;citiesRef.doc(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;TOK&amp;#34;&lt;/span&gt;).set({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Tokyo&amp;#34;&lt;/span&gt;, state&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;, country&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Japan&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    capital&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;, population&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;9000000&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    regions&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; [&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;kanto&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;honshu&amp;#34;&lt;/span&gt;] });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;citiesRef.doc(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;BJ&amp;#34;&lt;/span&gt;).set({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Beijing&amp;#34;&lt;/span&gt;, state&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;, country&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;China&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    capital&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;, population&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;21500000&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    regions&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; [&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;jingjinji&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;hebei&amp;#34;&lt;/span&gt;] });
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;get-a-document&#34;&gt;Get a document&lt;/h2&gt;
&lt;p&gt;The following example shows how to retrieve the contents of a single document using get():&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; docRef &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; db.collection(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;cities&amp;#34;&lt;/span&gt;).doc(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;SF&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docRef.get().then(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(doc) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (doc.exists) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Document data:&amp;#34;&lt;/span&gt;, doc.data());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;// doc.data() will be undefined in this case
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;No such document!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}).&lt;span style=&#34;color:#ff79c6&#34;&gt;catch&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(error) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Error getting document:&amp;#34;&lt;/span&gt;, error);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;source-options&#34;&gt;Source Options&lt;/h2&gt;
&lt;p&gt;For platforms with offline support, you can set the source option to control how a get call uses the offline cache.&lt;/p&gt;
&lt;p&gt;By default, a get call will attempt to fetch the latest document snapshot from your database. On platforms with offline support, the client library will use the offline cache if the network is unavailable or if the request times out.&lt;/p&gt;
&lt;p&gt;You can specify the source option in a get() call to change the default behavior. You can fetch from only the database and ignore the offline cache, or you can fetch from only the offline cache. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; docRef &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; db.collection(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;cities&amp;#34;&lt;/span&gt;).doc(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;SF&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Valid options for source are &amp;#39;server&amp;#39;, &amp;#39;cache&amp;#39;, or
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// &amp;#39;default&amp;#39;. See https://firebase.google.com/docs/reference/js/firebase.firestore.GetOptions
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// for more information.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; getOptions &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    source&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;cache&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Get a document, forcing the SDK to fetch from the offline cache.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;docRef.get(getOptions).then(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(doc) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// Document was found in the cache. If no cached document exists,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// an error will be returned to the &amp;#39;catch&amp;#39; block below.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Cached document data:&amp;#34;&lt;/span&gt;, doc.data());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}).&lt;span style=&#34;color:#ff79c6&#34;&gt;catch&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(error) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Error getting cached document:&amp;#34;&lt;/span&gt;, error);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;custom--objects&#34;&gt;Custom  objects&lt;/h2&gt;
&lt;p&gt;The previous example retrieved the contents of the document as a map, but in some languages it&amp;rsquo;s often more convenient to use a custom object type. In Add Data, you defined a City class that you used to define each city. You can turn your document back into a City object:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; City {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    constructor (name, state, country ) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; name;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.state &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; state;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.country &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; country;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    toString() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.name &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.state &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;, &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.country;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// Firestore data converter
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  cityConverter &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      toFirestore&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(city) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; city.name,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              state&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; city.state,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              country&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; city.country
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      fromFirestore&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(snapshot, options){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; data &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; snapshot.data(options);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; City(data.name, data.state, data.country)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;db.collection(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;cities&amp;#34;&lt;/span&gt;).doc(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;LA&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .withConverter(cityConverter)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .get().then(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(doc) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (doc.exists){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#6272a4&#34;&gt;// Convert to City object
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;      city &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; doc.data();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#6272a4&#34;&gt;// Use a City instance method
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;      console.log(city.toString());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;No such document!&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }}).&lt;span style=&#34;color:#ff79c6&#34;&gt;catch&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(error) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Error getting document:&amp;#34;&lt;/span&gt;, error)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;get-multiple-documents-from-a-collection&#34;&gt;Get multiple documents from a collection&lt;/h2&gt;
&lt;p&gt;You can also retrieve multiple documents with one request by querying documents in a collection. For example, you can use where() to query for all of the documents that meet a certain condition, then use get() to retrieve the results:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;db.collection(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;cities&amp;#34;&lt;/span&gt;).where(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;capital&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;==&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .get()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .then(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(querySnapshot) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        querySnapshot.forEach(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(doc) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#6272a4&#34;&gt;// doc.data() is never undefined for query doc snapshots
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;            console.log(doc.id, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34; =&amp;gt; &amp;#34;&lt;/span&gt;, doc.data());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .&lt;span style=&#34;color:#ff79c6&#34;&gt;catch&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(error) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Error getting documents: &amp;#34;&lt;/span&gt;, error);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;By default, Cloud Firestore retrieves all documents that satisfy the query in ascending order by document ID, but you can order and limit the data returned.&lt;/p&gt;
&lt;h2 id=&#34;get-all-documents-in-a-collection&#34;&gt;Get all documents in a collection&lt;/h2&gt;
&lt;p&gt;In addition, you can retrieve all documents in a collection by omitting the where() filter entirely:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;db.collection(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;cities&amp;#34;&lt;/span&gt;).get().then(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(querySnapshot) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    querySnapshot.forEach(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(doc) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;// doc.data() is never undefined for query doc snapshots
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        console.log(doc.id, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34; =&amp;gt; &amp;#34;&lt;/span&gt;, doc.data());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;get-multiple-documents-from-a-collection-group&#34;&gt;Get multiple documents from a collection group&lt;/h2&gt;
&lt;p&gt;A collection group consists of all collections with the same ID. For example, if each document in your cities collection has a subcollection called landmarks, all of the landmarks subcollections belong to the same collection group. By default, queries retrieve results from a single collection in your database. Use a collection group query to retrieve results from a collection group instead of from a single collection.&lt;/p&gt;
&lt;h2 id=&#34;list-subcollections-of-a-document&#34;&gt;List subcollections of a document&lt;/h2&gt;
&lt;p&gt;The getCollections() method of the Cloud Firestore server client libraries lists all subcollections of a document reference.&lt;/p&gt;
&lt;p&gt;Retrieving a list of collections is not possible with the mobile/web client libraries. You should only look up collection names as part of administrative tasks in trusted server environments. If you find that you need this capability in the mobile/web client libraries, consider restructuring your data so that subcollection names are predictable.&lt;/p&gt;
&lt;h2 id=&#34;get-realtime-updates-with-cloud-firestore&#34;&gt;Get realtime updates with Cloud Firestore&lt;/h2&gt;
&lt;p&gt;You can listen to a document with the onSnapshot() method. An initial call using the callback you provide creates a document snapshot immediately with the current contents of the single document. Then, each time the contents change, another call updates the document snapshot.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;db.collection(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;cities&amp;#34;&lt;/span&gt;).doc(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;SF&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .onSnapshot(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(doc) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Current data: &amp;#34;&lt;/span&gt;, doc.data());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;events-for-local-changes&#34;&gt;Events for local changes&lt;/h2&gt;
&lt;p&gt;Local writes in your app will invoke snapshot listeners immediately. This is because of an important feature called &amp;ldquo;latency compensation.&amp;rdquo; When you perform a write, your listeners will be notified with the new data before the data is sent to the backend.&lt;/p&gt;
&lt;p&gt;Retrieved documents have a metadata.hasPendingWrites property that indicates whether the document has local changes that haven&amp;rsquo;t been written to the backend yet. You can use this property to determine the source of events received by your snapshot listener:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;db.collection(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;cities&amp;#34;&lt;/span&gt;).doc(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;SF&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .onSnapshot(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(doc) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; source &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; doc.metadata.hasPendingWrites &lt;span style=&#34;color:#ff79c6&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Local&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Server&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        console.log(source, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34; data: &amp;#34;&lt;/span&gt;, doc.data());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;events-for-metadata-changes&#34;&gt;Events for metadata changes&lt;/h2&gt;
&lt;p&gt;When listening for changes to a document, collection, or query, you can pass options to control the granularity of events that your listener will receive.&lt;/p&gt;
&lt;p&gt;By default, listeners are not notified of changes that only affect metadata. Consider what happens when your app writes a new document:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A change event is immediately fired with the new data. The document has not yet been written to the backend so the &amp;ldquo;pending writes&amp;rdquo; flag is true.&lt;/li&gt;
&lt;li&gt;The document is written to the backend.&lt;/li&gt;
&lt;li&gt;The backend notifies the client of the successful write. There is no change to the document data, but there is a metadata change because the &amp;ldquo;pending writes&amp;rdquo; flag is now false.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you want to receive snapshot events when the document or query metadata changes, pass a listen options object when attaching your listener:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;db.collection(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;cities&amp;#34;&lt;/span&gt;).doc(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;SF&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .onSnapshot({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;// Listen for document metadata changes
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        includeMetadataChanges&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(doc) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;listen-to-multiple-documents-in-a-collection&#34;&gt;Listen to multiple documents in a collection&lt;/h2&gt;
&lt;p&gt;As with documents, you can use onSnapshot() instead of get() to listen to the results of a query. This creates a query snapshot. For example, to listen to the documents with state CA:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;db.collection(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;cities&amp;#34;&lt;/span&gt;).where(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;state&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;==&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;CA&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .onSnapshot(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(querySnapshot) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; cities &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; [];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        querySnapshot.forEach(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(doc) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            cities.push(doc.data().name);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Current cities in CA: &amp;#34;&lt;/span&gt;, cities.join(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;, &amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The snapshot handler will receive a new query snapshot every time the query results change (that is, when a document is added, removed, or modified).&lt;/p&gt;
&lt;h2 id=&#34;view-changes-between-snapshots&#34;&gt;View changes between snapshots&lt;/h2&gt;
&lt;p&gt;It is often useful to see the actual changes to query results between query snapshots, instead of simply using the entire query snapshot. For example, you may want to maintain a cache as individual documents are added, removed, and modified.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;db.collection(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;cities&amp;#34;&lt;/span&gt;).where(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;state&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;==&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;CA&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .onSnapshot(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(snapshot) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        snapshot.docChanges().forEach(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(change) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (change.type &lt;span style=&#34;color:#ff79c6&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;added&amp;#34;&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;New city: &amp;#34;&lt;/span&gt;, change.doc.data());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (change.type &lt;span style=&#34;color:#ff79c6&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;modified&amp;#34;&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Modified city: &amp;#34;&lt;/span&gt;, change.doc.data());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (change.type &lt;span style=&#34;color:#ff79c6&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;removed&amp;#34;&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                console.log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Removed city: &amp;#34;&lt;/span&gt;, change.doc.data());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The initial state can come from the server directly, or from a local cache. If there is state available in a local cache, the query snapshot will be initially populated with the cached data, then updated with the server&amp;rsquo;s data when the client has caught up with the server&amp;rsquo;s state.&lt;/p&gt;
&lt;h2 id=&#34;detach-a-listener&#34;&gt;Detach a listener&lt;/h2&gt;
&lt;p&gt;When you are no longer interested in listening to your data, you must detach your listener so that your event callbacks stop getting called. This allows the client to stop using bandwidth to receive updates. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; unsubscribe &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; db.collection(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;cities&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .onSnapshot(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (){
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#6272a4&#34;&gt;// Respond to data
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#6272a4&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Later ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Stop listening to changes
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;unsubscribe();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;handle-listen-errors&#34;&gt;Handle listen errors&lt;/h2&gt;
&lt;p&gt;A listen may occasionally fail — for example, due to security permissions, or if you tried to listen on an invalid query. (Learn more about valid and invalid queries.) To handle these failures, you can provide an error callback when you attach your snapshot listener. After an error, the listener will not receive any more events, and there is no need to detach your listener.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;db.collection(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;cities&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .onSnapshot(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(snapshot) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;//...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    }, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(error) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;//...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And That&amp;rsquo;s what we need for the basics! We&amp;rsquo;ll preform advanced quarries and so many things later!&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Here, we hav another great firebase solution from the firebase. This is not the full guide, because we need authentication for further details, I&amp;rsquo;m ending this basic guide here, After we discuss about the authentication in advanced, We can proceed with Firebase Firestore!&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Firebase Realtime Database</title>
<link>https://blog.nushankodikara.com/blog/firebase-realtime-database/</link>
<pubDate>Wed, 05 Aug 2020 06:00:00 +0530</pubDate>
      
      <guid>https://blog.nushankodikara.com/blog/firebase-realtime-database/</guid>
<description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Okay, Let&amp;rsquo;s do some database actions, But without SQL or any of those table based old style databases, We&amp;rsquo;re learning how to use Firebase Realtime database with a web application, but also the codes are the same for mobile applications, so it won&amp;rsquo;t make much difference at all, And in the end of this series, After we covered Authentication, We&amp;rsquo;re creating a fully fledged Chat application and maybe a social media application to test our knowledge.&lt;/p&gt;
&lt;h2 id=&#34;environmental-setup&#34;&gt;Environmental Setup&lt;/h2&gt;
&lt;p&gt;First you need to have a firebase project settled up, We&amp;rsquo;re starting the firebase database section without any security rules at first, then we&amp;rsquo;re doing it with rules. First, let&amp;rsquo;s explore the possibilities of Firebase Database&lt;/p&gt;
&lt;p&gt;Key capabilities&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Capability&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Realtime&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Instead of typical HTTP requests, the Firebase Realtime Database uses data synchronization—every time data changes, any connected device receives that update within milliseconds. Provide collaborative and immersive experiences without thinking about networking code.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Offline&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Firebase apps remain responsive even when offline because the Firebase Realtime Database SDK persists your data to disk. Once connectivity is reestablished, the client device receives any changes it missed, synchronizing it with the current server state.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Accessible from Client Devices&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;The Firebase Realtime Database can be accessed directly from a mobile device or web browser; there’s no need for an application server. Security and data validation are available through the Firebase Realtime Database Security Rules, expression-based rules that are executed when data is read or written.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Scale across multiple databases&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;With Firebase Realtime Database on the Blaze pricing plan, you can support your app&amp;rsquo;s data needs at scale by splitting your data across multiple database instances in the same Firebase project. Streamline authentication with Firebase Authentication on your project and authenticate users across your database instances. Control access to the data in each database with custom Firebase Realtime Database Rules for each database instance.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;how-does-it-work&#34;&gt;How does it work&lt;/h2&gt;
&lt;p&gt;The Firebase Realtime Database lets you build rich, collaborative applications by allowing secure access to the database directly from client-side code. Data is persisted locally, and even while offline, realtime events continue to fire, giving the end user a responsive experience. When the device regains connection, the Realtime Database synchronizes the local data changes with the remote updates that occurred while the client was offline, merging any conflicts automatically.&lt;/p&gt;
&lt;p&gt;The Realtime Database provides a flexible, expression-based rules language, called Firebase Realtime Database Security Rules, to define how your data should be structured and when data can be read from or written to. When integrated with Firebase Authentication, developers can define who has access to what data, and how they can access it.&lt;/p&gt;
&lt;p&gt;The Realtime Database is a NoSQL database and as such has different optimizations and functionality compared to a relational database. The Realtime Database API is designed to only allow operations that can be executed quickly. This enables you to build a great realtime experience that can serve millions of users without compromising on responsiveness. Because of this, it is important to think about how users need to access your data and then structure it accordingly.&lt;/p&gt;
&lt;h2 id=&#34;choose-a-database-cloud-firestore-or-realtime-database&#34;&gt;Choose a Database: Cloud Firestore or Realtime Database&lt;/h2&gt;
&lt;p&gt;Firebase offers two cloud-based, client-accessible database solutions that support realtime data syncing:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Cloud Firestore&lt;/strong&gt; is Firebase&amp;rsquo;s newest database for app development. It builds on the successes of the Realtime Database with a new, more intuitive data model. Cloud Firestore also features richer, faster queries and scales further than the Realtime Database.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Realtime Database&lt;/strong&gt; is Firebase&amp;rsquo;s original database. It&amp;rsquo;s an efficient, low-latency solution for apps that require synced states across clients in realtime.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We&amp;rsquo;re looking into the Realtime Database solution Today. It&amp;rsquo;s a key:value paired database solution with directories and easy operations. We need a clear data modal before starting a project of two reasons.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Firebase Realtime database doesn&amp;rsquo;t have a pre-defined Data structure&lt;/li&gt;
&lt;li&gt;Security Purposes (We&amp;rsquo;ll Discuss later)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Also Realtime database Stores data as one large JSON tree.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Simple data is very easy to store.&lt;/li&gt;
&lt;li&gt;Complex, hierarchical data is harder to organize at scale.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Otherhand in Cloud Firestore
Stores data as collections of documents.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Simple data is easy to store in documents, which are very similar to JSON.&lt;/li&gt;
&lt;li&gt;Complex, hierarchical data is easier to organize at scale, using subcollections within documents.&lt;/li&gt;
&lt;li&gt;Requires less denormalization and data flattening.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Keep that in mind for a bit. And again, We&amp;rsquo;re using the web SDK for this project with Javascript because we&amp;rsquo;re doing JAMStack development from here on. It&amp;rsquo;s the same for all of the SDKs so don&amp;rsquo;t get panicked.&lt;/p&gt;
&lt;h2 id=&#34;installation--setup-in-javascript&#34;&gt;Installation &amp;amp; Setup in JavaScript&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m creating a simple html document with HTML, CSS and JS also linking them all, as always you can download the project &lt;a href=&#34;https://blog.nushankodikara.com/zip/FirebaseAssestPack1.zip&#34;&gt;HERE&lt;/a&gt;. Also if you&amp;rsquo;re using Visual Studio code as I do, Go ahead and install &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=jsayol.firebase-explorer&#34;&gt;Firebase Explorer Extension&lt;/a&gt; To view your project right in VSCode (It Helps Allot!).&lt;/p&gt;
&lt;p&gt;The Firebase Realtime Database is a cloud-hosted database. Data is stored as JSON and synchronized in realtime to every connected client. When you build cross-platform apps with our Android, iOS, and JavaScript SDKs, all of your clients share one Realtime Database instance and automatically receive updates with the newest data.&lt;/p&gt;
&lt;h3 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s add firebase to our project. in order to do this, you have to implement links to these files in your HTML page. These versions could be changed so go to this site &lt;a href=&#34;https://firebase.google.com/docs/web/setup&#34;&gt;https://firebase.google.com/docs/web/setup&lt;/a&gt; to get the latest&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!-- This is the main JS file to implement Firebase --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://www.gstatic.com/firebasejs/7.17.1/firebase-app.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!-- Now you can add any modular firebase services in this case Realtime Database --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://www.gstatic.com/firebasejs/7.17.1/firebase-database.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It&amp;rsquo;s simple as that!. And now that out to the way, we have to initialize your Firebase project. To do this you have to goto &lt;a href=&#34;https://console.firebase.google.com/&#34;&gt;https://console.firebase.google.com/&lt;/a&gt; And create a new project.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200805_01.gif&#34; alt=&#34;Creating a firebase project&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now you have to add the initialization code from the project. Doing this is simple, go to your project and copy the web SDK code And put in right below the Firebase implementation service. This code is okay to be exposed and you can add security rules to make sure no one&amp;rsquo;s going to peek into your database in unwanted ways.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200805_02.gif&#34; alt=&#34;Creating a firebase project&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200805_03.gif&#34; alt=&#34;Creating a firebase project&#34;&gt;&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re using the firebase explorer plugin, now you can see the database in the left hand corner of your VSCode editor. This is a nice addition for quick exploration.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200805_04.gif&#34; alt=&#34;Creating a firebase project&#34;&gt;&lt;/p&gt;
&lt;p&gt;Alright Now Let&amp;rsquo;s make a demo application and Start working out! I&amp;rsquo;m creating a quick HTML document and adding a text input bar to it along with a button, so I can get data from the element and write it to the database! Before that, Let&amp;rsquo;s explore how the data stored in this database type.&lt;/p&gt;
&lt;h2 id=&#34;structure-your-database&#34;&gt;Structure Your Database&lt;/h2&gt;
&lt;p&gt;This guide covers some of the key concepts in data architecture and best practices for structuring the JSON data in your Firebase Realtime Database.&lt;/p&gt;
&lt;p&gt;Building a properly structured database requires quite a bit of forethought. Most importantly, you need to plan for how data is going to be saved and later retrieved to make that process as easy as possible.&lt;/p&gt;
&lt;h3 id=&#34;how-data-is-structured-its-a-json-tree&#34;&gt;How data is structured: it&amp;rsquo;s a JSON tree&lt;/h3&gt;
&lt;p&gt;All Firebase Realtime Database data is stored as JSON objects. You can think of the database as a cloud-hosted JSON tree. Unlike a SQL database, there are no tables or records. When you add data to the JSON tree, it becomes a node in the existing JSON structure with an associated key. You can provide your own keys, such as user IDs or semantic names, or they can be provided for you using &lt;code&gt;push()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For example, consider a chat application that allows users to store a basic profile and contact list. A typical user profile is located at a path, such as /users/$uid. The user alovelace might have a database entry that looks something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;users&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;alovelace&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Ada Lovelace&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;contacts&amp;#34;&lt;/span&gt;: { &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;ghopper&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;ghopper&amp;#34;&lt;/span&gt;: { ... },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;eclarke&amp;#34;&lt;/span&gt;: { ... }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Although the database uses a JSON tree, data stored in the database can be represented as certain native types that correspond to available JSON types to help you write more maintainable code.&lt;/p&gt;
&lt;h2 id=&#34;read-and-write-data-on-the-web&#34;&gt;Read and Write Data on the Web&lt;/h2&gt;
&lt;p&gt;Alright Before starting, Let&amp;rsquo;s go to the firebase and remove security from security rules. In order to do this, we have to set read and write permission to true. So anyone can read and write from the database.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200805_05.gif&#34; alt=&#34;Creating a firebase project&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;get-a-database-reference&#34;&gt;Get a database reference&lt;/h2&gt;
&lt;p&gt;To read or write data from the database, you need an instance of firebase.database.Reference, in order to do this we use the following code in our main JS file, I like to make this into a constant variable,&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; database &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; firebase.database();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we can use this database variable to do anything with our Database, Let&amp;rsquo;s start with basic operations.&lt;/p&gt;
&lt;h2 id=&#34;basic-writing-operation&#34;&gt;Basic Writing Operation&lt;/h2&gt;
&lt;p&gt;For basic write operations, you can use &lt;code&gt;set()&lt;/code&gt; to save data to a specified reference, replacing any existing data at that path. For example a social blogging application might add a user with &lt;code&gt;set()&lt;/code&gt; as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;writeUserData &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; (userId, name, email, imageUrl) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  firebase.database().ref(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;users/&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; userId).set({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    username&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; name,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    email&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; email,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    profile_picture &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; imageUrl
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This function passes 4 variables, userID, name, email and imageUrl to the firebase database reference set function, and from there it&amp;rsquo;s writing to &lt;code&gt;users/*UserID&lt;/code&gt; directory where the UserID is the user&amp;rsquo;s unique ID, and setting username variable to padded name, email variable to passed email and profile picture to the passed URL. you can use &lt;code&gt;database&lt;/code&gt; variable instead of &lt;code&gt;firebase.database()&lt;/code&gt;, however I like to set the whole reference point into a constant variable so I just have to use the set function on it.&lt;/p&gt;
&lt;p&gt;But with this set function, if there are data in that specific location it would be overwritten.&lt;/p&gt;
&lt;h2 id=&#34;listen-for-value-events-basic-read-operations&#34;&gt;Listen for value events (Basic Read Operations)&lt;/h2&gt;
&lt;p&gt;To read data at a path and listen for changes, use the &lt;code&gt;on()&lt;/code&gt; or &lt;code&gt;once()&lt;/code&gt; methods of &lt;code&gt;firebase.database.Reference&lt;/code&gt; to observe events. As is says, &lt;code&gt;once()&lt;/code&gt; is for reading data only once, and &lt;code&gt;on()&lt;/code&gt; is to listen for data in realtime.&lt;/p&gt;
&lt;p&gt;now let&amp;rsquo;s see how we can listen to data in realtime&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; starCountRef &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; firebase.database().ref(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;posts/&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; postId &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;/starCount&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;starCountRef.on(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(snapshot) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  updateStarCount(postElement, snapshot.val());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now with his piece of code, It&amp;rsquo;s listening to the &lt;code&gt;post/*postID/starCount&lt;/code&gt; in realtime, and the postID is dynamic as you can see. From this code the SDK is always listening to the starCount of the specific post and once it&amp;rsquo;s been updated, Fires the updateStarCount() function every time with the updated value of the &lt;code&gt;post/*postID/starCount&lt;/code&gt; directory. It&amp;rsquo;s that simple to use. ah also the value can be retrieved using &lt;code&gt;snapshot.val()&lt;/code&gt; function. Data would be returned as a string.&lt;/p&gt;
&lt;p&gt;now let&amp;rsquo;s read the data once. It&amp;rsquo;s the same as the above function, But it&amp;rsquo;s only firing the function, when we define the variable, or you can use it to manually fetch data from the database.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; userId &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; firebase.auth().currentUser.uid;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; firebase.database().ref(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;/users/&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; userId).once(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;).then(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(snapshot) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; username &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; (snapshot.val() &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; snapshot.val().username) &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Anonymous&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Consider this piece of code as a snippet from a function to get the username from a user. here, first we set the authentication reference to userID variable. then using &lt;code&gt;once()&lt;/code&gt; function, we&amp;rsquo;re retrieving data from &lt;code&gt;/users/*userID/&lt;/code&gt; path, then what is that on the returning section you may ask, it&amp;rsquo;s checking for is there any has been returned, this is false if you&amp;rsquo;re using Anonymous authentication, and we&amp;rsquo;re discussing about authentication in a while so be patient. And if the function returns a value, we&amp;rsquo;re using it as the username, otherwise we&amp;rsquo;re putting Anonymous as the username.&lt;/p&gt;
&lt;h2 id=&#34;updating-or-deleting-data&#34;&gt;Updating or deleting data&lt;/h2&gt;
&lt;h3 id=&#34;update-specific-fields&#34;&gt;Update specific fields&lt;/h3&gt;
&lt;p&gt;To simultaneously write to specific children of a node without overwriting other child nodes, use the &lt;code&gt;update()&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;When calling &lt;code&gt;update()&lt;/code&gt;, you can update lower-level child values by specifying a path for the key. If data is stored in multiple locations to scale better, you can update all instances of that data using data fan-out.&lt;/p&gt;
&lt;p&gt;For example, a social blogging app might create a post and simultaneously update it to the recent activity feed and the posting user&amp;rsquo;s activity feed using code like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;writeNewPost &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; (uid, username, picture, title, body) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// A post entry.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; postData &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    author&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; username,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    uid&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; uid,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    body&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; body,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    title&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; title,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    starCount&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    authorPic&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; picture
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// Get a key for a new Post.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; newPostKey &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; firebase.database().ref().child(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;posts&amp;#39;&lt;/span&gt;).push().key;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// Write the new post&amp;#39;s data simultaneously in the posts list and the user&amp;#39;s post list.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; updates &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  updates[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;/posts/&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; newPostKey] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; postData;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  updates[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;/user-posts/&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; uid &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; newPostKey] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; postData;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; firebase.database().ref().update(updates);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let me explain what this does. we have the &lt;code&gt;writeNewPost()&lt;/code&gt; function passing uid, username, picture, title and body variables and assigning them to an array in postData. you can get a unique key for a data set using the &lt;code&gt;push()&lt;/code&gt; function and we&amp;rsquo;re going to update two directories simultaneously. You can see the update array has two directories with the same dataset, &lt;code&gt;/post/*newPostKey&lt;/code&gt; and &lt;code&gt;/user-posts/uid/newpostkey/&lt;/code&gt; are getting updated the same time, This can be an example of think like facebook or instagram managing a bigger feed and personal feed with same post data. (There are more efficent ways to do this)&lt;/p&gt;
&lt;p&gt;Using these paths, you can perform simultaneous updates to multiple locations in the JSON tree with a single call to update(), such as how this example creates the new post in both locations. Simultaneous updates made this way are atomic: either all updates succeed or all updates fail.&lt;/p&gt;
&lt;h2 id=&#34;add-a-completion-callback&#34;&gt;Add a Completion Callback&lt;/h2&gt;
&lt;p&gt;If you want to know when your data has been committed, you can add a completion callback. Both set() and update() take an optional completion callback that is called when the write has been committed to the database. If the call was unsuccessful, the callback is passed an error object indicating why the failure occurred.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;firebase.database().ref(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;users/&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; userId).set({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    username&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; name,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    email&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; email,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    profile_picture &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; imageUrl
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(error) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (error) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#6272a4&#34;&gt;// The write failed...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    } &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#6272a4&#34;&gt;// Data saved successfully!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;delete-data&#34;&gt;Delete data&lt;/h2&gt;
&lt;p&gt;The simplest way to delete data is to call remove() on a reference to the location of that data.&lt;/p&gt;
&lt;p&gt;You can also delete by specifying null as the value for another write operation such as set() or update(). You can use this technique with update() to delete multiple children in a single API call.&lt;/p&gt;
&lt;h2 id=&#34;receive-a-promise&#34;&gt;Receive a Promise&lt;/h2&gt;
&lt;p&gt;To know when your data is committed to the Firebase Realtime Database server, you can use a Promise. Both set() and update() can return a Promise you can use to know when the write is committed to the database.&lt;/p&gt;
&lt;h2 id=&#34;detach-listeners&#34;&gt;Detach listeners&lt;/h2&gt;
&lt;p&gt;Callbacks are removed by calling the off() method on your Firebase database reference.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;firebase.database().ref(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;users/&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; userId).off()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can remove a single listener by passing it as a parameter to off(). Calling off() on the location with no arguments removes all listeners at that location.&lt;/p&gt;
&lt;p&gt;Calling off() on a parent listener does not automatically remove listeners registered on its child nodes; off() must also be called on any child listeners to remove the callback.&lt;/p&gt;
&lt;h2 id=&#34;save-data-as-transactions&#34;&gt;Save data as transactions&lt;/h2&gt;
&lt;p&gt;When working with data that could be corrupted by concurrent modifications, such as incremental counters, you can use a transaction operation. You can give this operation an update function and an optional completion callback. The update function takes the current state of the data as an argument and returns the new desired state you would like to write. If another client writes to the location before your new value is successfully written, your update function is called again with the new current value, and the write is retried.&lt;/p&gt;
&lt;p&gt;For instance, in the example social blogging app, you could allow users to star and unstar posts and keep track of how many stars a post has received as follows:&lt;/p&gt;
&lt;p&gt;function toggleStar(postRef, uid) {
postRef.transaction(function(post) {
if (post) {
if (post.stars &amp;amp;&amp;amp; post.stars[uid]) {
post.starCount&amp;ndash;;
post.stars[uid] = null;
} else {
post.starCount++;
if (!post.stars) {
post.stars = {};
}
post.stars[uid] = true;
}
}
return post;
});
}&lt;/p&gt;
&lt;p&gt;Using a transaction prevents star counts from being incorrect if multiple users star the same post at the same time or the client had stale data. If the transaction is rejected, the server returns the current value to the client, which runs the transaction again with the updated value. This repeats until the transaction is accepted or you abort the transaction.&lt;/p&gt;
&lt;h2 id=&#34;write-data-offline&#34;&gt;Write data offline&lt;/h2&gt;
&lt;p&gt;If a client loses its network connection, your app will continue functioning correctly.&lt;/p&gt;
&lt;p&gt;Every client connected to a Firebase database maintains its own internal version of any active data. When data is written, it&amp;rsquo;s written to this local version first. The Firebase client then synchronizes that data with the remote database servers and with other clients on a &amp;ldquo;best-effort&amp;rdquo; basis.&lt;/p&gt;
&lt;p&gt;As a result, all writes to the database trigger local events immediately, before any data is written to the server. This means your app remains responsive regardless of network latency or connectivity.&lt;/p&gt;
&lt;p&gt;Once connectivity is reestablished, your app receives the appropriate set of events so that the client syncs with the current server state, without having to write any custom code.&lt;/p&gt;
&lt;h2 id=&#34;work-with-lists-of-data-on-the-web&#34;&gt;Work with Lists of Data on the Web&lt;/h2&gt;
&lt;p&gt;Here we&amp;rsquo;re discussing about how to manage data lists, for an instance, imagine of a chat in a chat application, it&amp;rsquo;s a list of messages, of facebook&amp;rsquo;s post data, it&amp;rsquo;s a list of posts etc etc&amp;hellip;&lt;/p&gt;
&lt;h3 id=&#34;get-a-reference-of-the-database&#34;&gt;Get a reference of the database&lt;/h3&gt;
&lt;p&gt;To read or write data from the database, you need an instance of firebase.database.Reference:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Get a reference to the database service
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; database &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; firebase.database();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;reading-and-writing-lists&#34;&gt;Reading and writing lists&lt;/h3&gt;
&lt;h4 id=&#34;append-to-a-list-of-data&#34;&gt;Append to a list of data&lt;/h4&gt;
&lt;p&gt;Use the &lt;code&gt;push()&lt;/code&gt; method to append data to a list in multiuser applications. The push() method generates a unique key every time a new child is added to the specified Firebase reference. By using these auto-generated keys for each new element in the list, several clients can add children to the same location at the same time without write conflicts. The unique key generated by push() is based on a timestamp, so list items are automatically ordered chronologically.&lt;/p&gt;
&lt;p&gt;You can use the reference to the new data returned by the push() method to get the value of the child&amp;rsquo;s auto-generated key or set data for the child. The .key property of a push() reference contains the auto-generated key.&lt;/p&gt;
&lt;p&gt;You can use these auto-generated keys to simplify flattening your data structure. For more information, see the data fan-out example.&lt;/p&gt;
&lt;p&gt;For example, push() could be used to add a new post to a list of posts in a social application:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Create a new post reference with an auto-generated id
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; newPostRef &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; postListRef.push();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;newPostRef.set({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;listen-for-child-events&#34;&gt;Listen for child events&lt;/h3&gt;
&lt;p&gt;Child events are triggered in response to specific operations that happen to the children of a node from an operation such as a new child added through the push() method or a child being updated through the update() method.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Event&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Typical usage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;child_added&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Retrieve lists of items or listen for additions to a list of items. This event is triggered once for each existing child and then again every time a new child is added to the specified path. The listener is passed a snapshot containing the new child&amp;rsquo;s data.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;child_changed&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Listen for changes to the items in a list. This event is triggered any time a child node is modified. This includes any modifications to descendants of the child node. The snapshot passed to the event listener contains the updated data for the child.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;child_removed&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Listen for items being removed from a list. This event is triggered when an immediate child is removed.The snapshot passed to the callback block contains the data for the removed child.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;child_moved&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Listen for changes to the order of items in an ordered list. child_moved events always follow the child_changed event that caused the item&amp;rsquo;s order to change (based on your current order-by method).&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Each of these together can be useful for listening to changes to a specific node in a database. For example, a social blogging app might use these methods together to monitor activity in the comments of a post, as shown below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; commentsRef &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; firebase.database().ref(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;post-comments/&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; postId);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;commentsRef.on(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;child_added&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(data) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  addCommentElement(postElement, data.key, data.val().text, data.val().author);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;commentsRef.on(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;child_changed&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(data) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  setCommentValues(postElement, data.key, data.val().text, data.val().author);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;commentsRef.on(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;child_removed&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(data) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  deleteComment(postElement, data.key);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;listen-for-value-events&#34;&gt;Listen for value events&lt;/h3&gt;
&lt;p&gt;While listening for child events is the recommended way to read lists of data, there are situations listening for value events on a list reference is useful.&lt;/p&gt;
&lt;p&gt;Attaching a value observer to a list of data will return the entire list of data as a single snapshot which you can then loop over to access individual children.&lt;/p&gt;
&lt;p&gt;Even when there is only a single match for the query, the snapshot is still a list; it just contains a single item. To access the item, you need to loop over the result:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ref.once(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(snapshot) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  snapshot.forEach(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(childSnapshot) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; childKey &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; childSnapshot.key;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; childData &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; childSnapshot.val();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This pattern can be useful when you want to fetch all children of a list in a single operation, rather than listening for additional child added events.&lt;/p&gt;
&lt;h3 id=&#34;sorting-and-filtering-data&#34;&gt;Sorting and filtering data&lt;/h3&gt;
&lt;p&gt;You can use the Realtime Database Query class to retrieve data sorted by key, by value, or by value of a child. You can also filter the sorted result to a specific number of results or a range of keys or values.&lt;/p&gt;
&lt;h3 id=&#34;sort-data&#34;&gt;Sort data&lt;/h3&gt;
&lt;p&gt;To retrieve sorted data, start by specifying one of the order-by methods to determine how results are ordered:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Method&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Usage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;orderByChild()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Order results by the value of a specified child key or nested child path.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;orderByKey()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Order results by child keys.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;orderByValue()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Order results by child values.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;You can only use one order-by method at a time. Calling an order-by method multiple times in the same query throws an error.&lt;/p&gt;
&lt;p&gt;The following example demonstrates how you could retrieve a list of a user&amp;rsquo;s top posts sorted by their star count:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; myUserId &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; firebase.auth().currentUser.uid;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; topUserPostsRef &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; firebase.database().ref(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;user-posts/&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; myUserId).orderByChild(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;starCount&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This defines a query that when combined with a child listener synchronizes the client with the user&amp;rsquo;s posts from the path in the database based on their user ID, ordered by the number of stars each post has received. This technique of using IDs as index keys is called data fan out, you can read more about it in Structure Your Database.&lt;/p&gt;
&lt;p&gt;The call to the &lt;code&gt;orderByChild()&lt;/code&gt; method specifies the child key to order the results by. In this case, posts are sorted by the value of their respective &amp;ldquo;starCount&amp;rdquo; child. Queries can also be ordered by nested children, in case you have data that looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;posts&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ts-functions&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;metrics&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;views&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1200000&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;likes&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;251000&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;shares&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1200&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Why you should use TypeScript for writing Cloud Functions&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;author&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Doug&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;android-arch-3&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;metrics&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;views&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;900000&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;likes&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;117000&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;shares&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;144&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Using Android Architecture Components with Firebase Realtime Database (Part 3)&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;author&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Doug&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this case, we can order our list elements by values nested under the metrics key by specifying the relative path to the nested child in our orderByChild() call.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; mostViewedPosts &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; firebase.database().ref(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;posts&amp;#39;&lt;/span&gt;).orderByChild(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;metrics/views&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For more information on how other data types are ordered, see How query data is ordered.&lt;/p&gt;
&lt;h3 id=&#34;filtering-data&#34;&gt;Filtering data&lt;/h3&gt;
&lt;p&gt;To filter data, you can combine any of the limit or range methods with an order-by method when constructing a query.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Method&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Usage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;limitToFirst()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sets the maximum number of items to return from the beginning of the ordered list of results.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;limitToLast()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sets the maximum number of items to return from the end of the ordered list of results.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;startAt()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Return items greater than or equal to the specified key or value, depending on the order-by method chosen.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;endAt()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Return items less than or equal to the specified key or value, depending on the order-by method chosen.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;equalTo()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Return items equal to the specified key or value, depending on the order-by method chosen.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Unlike the order-by methods, you can combine multiple limit or range functions. For example, you can combine the startAt() and endAt() methods to limit the results to a specified range of values.&lt;/p&gt;
&lt;h3 id=&#34;limit-the-number-of-results&#34;&gt;Limit the number of results&lt;/h3&gt;
&lt;p&gt;You can use the limitToFirst() and limitToLast() methods to set a maximum number of children to be synced for a given event. For example, if you use limitToFirst() to set a limit of 100, you initially only receive up to 100 child_added events. If you have fewer than 100 items stored in your Firebase database, a child_added event fires for each item.&lt;/p&gt;
&lt;p&gt;As items change, you receive child_added events for items that enter the query and child_removed events for items that drop out of it so that the total number stays at 100.&lt;/p&gt;
&lt;p&gt;The following example demonstrates how example blogging app defines a query to retrieve a list of the 100 most recent posts by all users:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; recentPostsRef &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; firebase.database().ref(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;posts&amp;#39;&lt;/span&gt;).limitToLast(&lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This example only defines a query, to actually synchronize data it needs to have an attached listener.&lt;/p&gt;
&lt;h3 id=&#34;filter-by-key-or-value&#34;&gt;Filter by key or value&lt;/h3&gt;
&lt;p&gt;You can use startAt(), endAt(), and equalTo() to choose arbitrary starting, ending, and equivalence points for queries. This can be useful for paginating data or finding items with children that have a specific value.&lt;/p&gt;
&lt;h3 id=&#34;how-query-data-is-ordered&#34;&gt;How query data is ordered&lt;/h3&gt;
&lt;p&gt;This section explains how data is sorted by each of the order-by methods in the Query class.&lt;/p&gt;
&lt;h4 id=&#34;orderbychild&#34;&gt;orderByChild&lt;/h4&gt;
&lt;p&gt;When using orderByChild(), data that contains the specified child key is ordered as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Children with a null value for the specified child key come first.&lt;/li&gt;
&lt;li&gt;Children with a value of false for the specified child key come next. If multiple children have a value of false, they are sorted lexicographically by key.&lt;/li&gt;
&lt;li&gt;Children with a value of true for the specified child key come next. If multiple children have a value of true, they are sorted lexicographically by key.&lt;/li&gt;
&lt;li&gt;Children with a numeric value come next, sorted in ascending order. If multiple children have the same numerical value for the specified child node, they are sorted by key.&lt;/li&gt;
&lt;li&gt;Strings come after numbers and are sorted lexicographically in ascending order. If multiple children have the same value for the specified child node, they are ordered lexicographically by key.&lt;/li&gt;
&lt;li&gt;Objects come last and are sorted lexicographically by key in ascending order.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;orderbykey&#34;&gt;orderByKey&lt;/h4&gt;
&lt;p&gt;When using orderByKey() to sort your data, data is returned in ascending order by key.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Children with a key that can be parsed as a 32-bit integer come first, sorted in ascending order.&lt;/li&gt;
&lt;li&gt;Children with a string value as their key come next, sorted lexicographically in ascending order.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;orderbyvalue&#34;&gt;orderByValue&lt;/h4&gt;
&lt;p&gt;When using orderByValue(), children are ordered by their value. The ordering criteria are the same as in orderByChild(), except the value of the node is used instead of the value of a specified child key.&lt;/p&gt;
&lt;h4 id=&#34;detach-listeners-for-lists&#34;&gt;Detach listeners for lists&lt;/h4&gt;
&lt;p&gt;Callbacks are removed by calling the off() method on your Firebase database reference.&lt;/p&gt;
&lt;p&gt;You can remove a single listener by passing it as a parameter to off(). Calling off() on the location with no arguments removes all listeners at that location.&lt;/p&gt;
&lt;p&gt;Calling off() on a parent listener does not automatically remove listeners registered on its child nodes; off() must also be called on any child listeners to remove the callback.&lt;/p&gt;
&lt;h2 id=&#34;so-lets-put-our-knowledge-to-the-test&#34;&gt;So let&amp;rsquo;s put our knowledge to the test&lt;/h2&gt;
&lt;p&gt;We can create a simple application of a public grocery list. to demonstrate the usage of firebase realtime database. This is the simplest as it can gets with all the functionalities. So let&amp;rsquo;s see how I did it&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200805_06.gif&#34; alt=&#34;Grocery list&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;lang&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;head&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;charset&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;UTF-8&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;viewport&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;content&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;style.css&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;title&lt;/span&gt;&amp;gt;Firebase Demo - Realtime Database&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;title&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;head&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!-- Nothing Advanced But I Always Use a Content Section for Content --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h1&lt;/span&gt;&amp;gt;-------------------------------------&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h1&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h2&lt;/span&gt;&amp;gt;Simple Grocery List&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h2&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h1&lt;/span&gt;&amp;gt;-------------------------------------&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h1&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!-- A Simple Form to add items--&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;form&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h4&lt;/span&gt;&amp;gt;Items&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h4&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Grocery&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Grocery&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;placeholder&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Item&amp;#34;&lt;/span&gt; /&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h4&lt;/span&gt;&amp;gt;Quantity&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h4&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;number&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;QTY&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;QTY&amp;#34;&lt;/span&gt; /&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;postData();return false&amp;#34;&lt;/span&gt;&amp;gt;Add item&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;form&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h1&lt;/span&gt;&amp;gt;-------------------------------------&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h1&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h2&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Grocery List
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h2&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!-- This would hold our Data and data would be added Programmatically--&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;table&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;table&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;table&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h1&lt;/span&gt;&amp;gt;-------------------------------------&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h1&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h2&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Completed List
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h2&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!-- This would hold our Data and data would be added Programmatically--&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;table&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;table2&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;table&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!-- This is the main JS file to implement Firebase --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://www.gstatic.com/firebasejs/7.17.1/firebase-app.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!-- Now you can add any modular firebase services in this case Realtime Database --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://www.gstatic.com/firebasejs/7.17.1/firebase-database.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!-- TODO: Add SDKs for Firebase products that you want to use
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;     https://firebase.google.com/docs/web/setup#available-libraries --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://www.gstatic.com/firebasejs/7.17.1/firebase-analytics.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;// Your web app&amp;#39;s Firebase configuration Should Be added Here
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; firebaseConfig &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            apiKey&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;AIzaSyDOMUpm4WNldKOVuQCeizCTZAUdSRLqAeU&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            authDomain&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;tecinpact-demo.firebaseapp.com&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            databaseURL&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://tecinpact-demo.firebaseio.com&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            projectId&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;tecinpact-demo&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            storageBucket&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;tecinpact-demo.appspot.com&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            messagingSenderId&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;977048224763&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            appId&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;1:977048224763:web:4891159dda17b97eb8c15e&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            measurementId&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;G-RZPCV71CCZ&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;// Initialize Firebase
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;        firebase.initializeApp(firebaseConfig);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        firebase.analytics();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;app.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I Added comments Explaining the HTML code and it&amp;rsquo;s self explainatory.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scss&#34; data-lang=&#34;scss&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;font-family&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; monospace;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;.content&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;display&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; grid;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;place-items&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; center;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;form&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;@extend&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;.content&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;padding&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;35&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;margin&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;table&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;max-width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;350&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;text-align&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; left;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/* A Simple Function to push new data */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;postData &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; () =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; gitem &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Grocery&amp;#34;&lt;/span&gt;).value
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; gqty &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;QTY&amp;#34;&lt;/span&gt;).value
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;/* Resetting Input Boxes after submission */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Grocery&amp;#34;&lt;/span&gt;).value &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;QTY&amp;#34;&lt;/span&gt;).value &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;/* Pushing data to the Database&amp;#39;s GroceryList Directory */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; newItem &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; firebase.database().ref(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;/GroceryList/&amp;#39;&lt;/span&gt;).push();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    newItem.set({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        item&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; gitem,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        qty&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; gqty
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/* Listner to get data from the Database As soon as it&amp;#39;s added */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; items &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; firebase.database().ref(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;GroceryList/&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;items.on(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (recivedItems) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;/* Appends data to an array and then we can set the whole array to the table */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; htmlArray &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;Items&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;QTY&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;Got It?&amp;lt;/th&amp;gt;&amp;lt;/tr&amp;gt;`&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    recivedItems.forEach(item =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;/* Formatting Received Data */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        htmlArray.push(&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;item.val()[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;item&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;item.val()[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;qty&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;button onclick=&amp;#34;removedList(&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;item.key&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;)&amp;#34;&amp;gt;✔️&amp;lt;/button&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;`&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;/* Setting Data to table */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;table&amp;#39;&lt;/span&gt;).innerHTML &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; htmlArray.join(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/* Adding data to another list when completed */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;removedList &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; (id) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; item &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; firebase.database().ref(&lt;span style=&#34;color:#f1fa8c&#34;&gt;`GroceryList/&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;id&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    item.on(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (snapshot) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;/* Getting data and submitting it to Removed List */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; newCompletedItem &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; firebase.database().ref(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;/GroceryRemovedList/&amp;#39;&lt;/span&gt;).push();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        newCompletedItem.set(snapshot.val());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;/* Removing from the first list */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    removeEntity(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;GroceryList&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;id&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/* Listner for the completed List */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; ritems &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; firebase.database().ref(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;GroceryRemovedList/&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ritems.on(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (recivedItems) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; htmlArray &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;Items&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;QTY&amp;lt;/th&amp;gt;&amp;lt;th&amp;gt;Remove It?&amp;lt;/th&amp;gt;&amp;lt;/tr&amp;gt;`&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    recivedItems.forEach(item =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        htmlArray.push(&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&amp;lt;tr&amp;gt;&amp;lt;td style=&amp;#34;text-decoration: line-through;&amp;#34;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;item.val()[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;item&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;item.val()[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;qty&amp;#34;&lt;/span&gt;]&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;lt;/td&amp;gt;&amp;lt;td&amp;gt;&amp;lt;button onclick=&amp;#34;removeEntity(&amp;#39;GroceryRemovedList&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;item.key&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;)&amp;#34;&amp;gt;❌&amp;lt;/button&amp;gt;&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;`&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;table2&amp;#39;&lt;/span&gt;).innerHTML &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; htmlArray.join(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/* This can delete items from the database */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;removeEntity &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; (list, id) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    firebase.database().ref(&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;list&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;id&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;).remove()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Well well well, Here we are at the end of another guide, Firebase realtime database is suitable for many applications, after most of these guides have been overed, We&amp;rsquo;re going to make some sample applications to demonstrate the usages of the applications. So stay tuned and don&amp;rsquo;t be shy to ask anything you get doubts on, You are here to learn, so take the advantage.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Getting Started With Firebase</title>
<link>https://blog.nushankodikara.com/blog/getting-started-with-firebase/</link>
<pubDate>Wed, 05 Aug 2020 05:00:00 +0530</pubDate>
      
      <guid>https://blog.nushankodikara.com/blog/getting-started-with-firebase/</guid>
<description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This is a different post from what I did before, Today I&amp;rsquo;m introducing you to a technology, It&amp;rsquo;s a BaaS from google which stands for Backend As A Service and that&amp;rsquo;s weird in many ways, First It is not what you would expect out of a traditional site and Here I only speak about Modern development So Let&amp;rsquo;s get started with this new technology and make our Lives Easier!&lt;/p&gt;
&lt;h2 id=&#34;what-is-firebase&#34;&gt;What Is Firebase&lt;/h2&gt;
&lt;p&gt;Firebase is a platform for creating mobile and web applications developed by Google. It was originally an independent company founded in 2011. In 2014, Google acquired the platform and it is now their flagship offering for app development. Considering google, They are the biggest tech company in earth by now. (Yeah we have more planets and there are aliens, I have proofs and Let&amp;rsquo;s not talk about it ever again) So as an Earth being, if a service gets delivered by google, That&amp;rsquo;s a pot of gold. Let&amp;rsquo;s explore what we can do with firebase shall we?&lt;/p&gt;
&lt;h2 id=&#34;firebase-products&#34;&gt;Firebase Products&lt;/h2&gt;
&lt;p&gt;Before getting in to what are the benefits, Let&amp;rsquo;s Explore what Firebase offers Us in advance. you can check this link &lt;a href=&#34;https://firebase.google.com/docs&#34;&gt;https://firebase.google.com/docs&lt;/a&gt; for more details.&lt;/p&gt;
&lt;p&gt;For Building your app&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cloud Firestore&lt;/li&gt;
&lt;li&gt;Firebase ML&lt;/li&gt;
&lt;li&gt;Cloud Functions&lt;/li&gt;
&lt;li&gt;Authentication&lt;/li&gt;
&lt;li&gt;Hosting&lt;/li&gt;
&lt;li&gt;Cloud Storage&lt;/li&gt;
&lt;li&gt;Realtime Database&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Improve app quality&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Crashlytics&lt;/li&gt;
&lt;li&gt;App Distribution&lt;/li&gt;
&lt;li&gt;Performance Monitoring&lt;/li&gt;
&lt;li&gt;Test Lab&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Grow your business&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Analytics&lt;/li&gt;
&lt;li&gt;Extensions&lt;/li&gt;
&lt;li&gt;Predictions&lt;/li&gt;
&lt;li&gt;Firebase A/B Testing&lt;/li&gt;
&lt;li&gt;Cloud Messaging&lt;/li&gt;
&lt;li&gt;In-App Messaging&lt;/li&gt;
&lt;li&gt;Remote Config&lt;/li&gt;
&lt;li&gt;Dynamic Links&lt;/li&gt;
&lt;li&gt;App Indexing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now let me introduce you, what are these and Let&amp;rsquo;s get to know firebase a bit better.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn-media-1.freecodecamp.org/images/0*CPTNvq87xG-sUGdx.png&#34; alt=&#34;Firebase&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;cloud-firestore&#34;&gt;Cloud Firestore&lt;/h2&gt;
&lt;p&gt;Cloud Firestore is a flexible, scalable database for mobile, web, and server development from Firebase and Google Cloud Platform. Like Firebase Realtime Database, it keeps your data in sync across client apps through realtime listeners and offers offline support for mobile and web so you can build responsive apps that work regardless of network latency or Internet connectivity. Cloud Firestore also offers seamless integration with other Firebase and Google Cloud Platform products, including Cloud Functions.&lt;/p&gt;
&lt;h2 id=&#34;firebase-ml&#34;&gt;Firebase ML&lt;/h2&gt;
&lt;p&gt;Firebase Machine Learning is a mobile SDK that brings Google&amp;rsquo;s machine learning expertise to Android and iOS apps in a powerful yet easy-to-use package. Whether you&amp;rsquo;re new or experienced in machine learning, you can implement the functionality you need in just a few lines of code. There&amp;rsquo;s no need to have deep knowledge of neural networks or model optimization to get started. On the other hand, if you are an experienced ML developer, Firebase ML provides convenient APIs that help you use your custom TensorFlow Lite models in your mobile apps.&lt;/p&gt;
&lt;h2 id=&#34;cloud-functions&#34;&gt;Cloud Functions&lt;/h2&gt;
&lt;p&gt;Cloud Functions for Firebase is a serverless framework that lets you automatically run backend code in response to events triggered by Firebase features and HTTPS requests. Your JavaScript or TypeScript code is stored in Google&amp;rsquo;s cloud and runs in a managed environment. There&amp;rsquo;s no need to manage and scale your own servers.&lt;/p&gt;
&lt;h2 id=&#34;firebase-authentication&#34;&gt;Firebase Authentication&lt;/h2&gt;
&lt;p&gt;Most apps need to know the identity of a user. Knowing a user&amp;rsquo;s identity allows an app to securely save user data in the cloud and provide the same personalized experience across all of the user&amp;rsquo;s devices. Firebase Authentication provides backend services, easy-to-use SDKs, and ready-made UI libraries to authenticate users to your app. It supports authentication using passwords, phone numbers, popular federated identity providers like Google, Facebook and Twitter, and more. Firebase Authentication integrates tightly with other Firebase services, and it leverages industry standards like OAuth 2.0 and OpenID Connect, so it can be easily integrated with your custom backend.&lt;/p&gt;
&lt;h2 id=&#34;firebase-hosting&#34;&gt;Firebase Hosting&lt;/h2&gt;
&lt;p&gt;Firebase Hosting provides fast and secure hosting for your web app, static and dynamic content, and microservices. Firebase Hosting is production-grade web content hosting for developers. With a single command, you can quickly deploy web apps and serve both static and dynamic content to a global CDN (content delivery network). You can also pair Firebase Hosting with Cloud Functions or Cloud Run to build and host microservices on Firebase.&lt;/p&gt;
&lt;h2 id=&#34;cloud-storage&#34;&gt;Cloud Storage&lt;/h2&gt;
&lt;p&gt;Cloud Storage is built for app developers who need to store and serve user-generated content, such as photos or videos. Cloud Storage for Firebase is a powerful, simple, and cost-effective object storage service built for Google scale. The Firebase SDKs for Cloud Storage add Google security to file uploads and downloads for your Firebase apps, regardless of network quality. You can use our SDKs to store images, audio, video, or other user-generated content. On the server, you can use Google Cloud Storage, to access the same files.&lt;/p&gt;
&lt;h2 id=&#34;firebase-realtime-database&#34;&gt;Firebase Realtime Database&lt;/h2&gt;
&lt;p&gt;Store and sync data with our NoSQL cloud database. Data is synced across all clients in realtime, and remains available when your app goes offline. The Firebase Realtime Database is a cloud-hosted database. Data is stored as JSON and synchronized in realtime to every connected client. When you build cross-platform apps with our iOS, Android, and JavaScript SDKs, all of your clients share one Realtime Database instance and automatically receive updates with the newest data.&lt;/p&gt;
&lt;h2 id=&#34;firebase-crashlytics&#34;&gt;Firebase Crashlytics&lt;/h2&gt;
&lt;p&gt;Get clear, actionable insight into app issues with this powerful crash reporting solution for iOS, Android, and Unity. Firebase Crashlytics is a lightweight, realtime crash reporter that helps you track, prioritize, and fix stability issues that erode your app quality. Crashlytics saves you troubleshooting time by intelligently grouping crashes and highlighting the circumstances that lead up to them. Find out if a particular crash is impacting a lot of users. Get alerts when an issue suddenly increases in severity. Figure out which lines of code are causing crashes.&lt;/p&gt;
&lt;h2 id=&#34;firebase-app-distribution&#34;&gt;Firebase App Distribution&lt;/h2&gt;
&lt;p&gt;Firebase App Distribution makes distributing your apps to trusted testers painless. By getting your apps onto testers&amp;rsquo; devices quickly, you can get feedback early and often. And if you use Crashlytics in your apps, you’ll automatically get stability metrics for all your builds, so you know when you’re ready to ship.&lt;/p&gt;
&lt;h2 id=&#34;firebase-performance-monitoring&#34;&gt;Firebase Performance Monitoring&lt;/h2&gt;
&lt;p&gt;Gain insight into your app&amp;rsquo;s performance issues. Firebase Performance Monitoring is a service that helps you to gain insight into the performance characteristics of your iOS, Android, and web apps. You use the Performance Monitoring SDK to collect performance data from your app, then review and analyze that data in the Firebase console. Performance Monitoring helps you to understand where and when the performance of your app can be improved so that you can use that information to fix performance issues.&lt;/p&gt;
&lt;h2 id=&#34;firebase-test-lab&#34;&gt;Firebase Test Lab&lt;/h2&gt;
&lt;p&gt;Test your app on devices hosted in a Google data center. Firebase Test Lab is a cloud-based app-testing infrastructure. With one operation, you can test your Android or iOS app across a wide variety of devices and device configurations, and see the results—including logs, videos, and screenshots—in the Firebase console.&lt;/p&gt;
&lt;h2 id=&#34;google-analytics&#34;&gt;Google Analytics&lt;/h2&gt;
&lt;p&gt;Google Analytics is a free app measurement solution that provides insight on app usage and user engagement. At the heart of Firebase is Google Analytics, a free and unlimited analytics solution. Analytics integrates across Firebase features and provides you with unlimited reporting for up to 500 distinct events that you can define using the Firebase SDK. Analytics reports help you understand clearly how your users behave, which enables you to make informed decisions regarding app marketing and performance optimizations.&lt;/p&gt;
&lt;h2 id=&#34;firebase-extensions&#34;&gt;Firebase Extensions&lt;/h2&gt;
&lt;p&gt;Firebase Extensions help you deploy functionality to your app quickly with pre-packaged solutions. Once installed, a Firebase Extension performs a specific task or set of tasks in response to HTTPS requests or to triggering events from other Firebase products, like Cloud Firestore or Firebase Cloud Messaging.&lt;/p&gt;
&lt;h2 id=&#34;firebase-predictions&#34;&gt;Firebase Predictions&lt;/h2&gt;
&lt;p&gt;Firebase Predictions applies machine learning to your analytics data to create dynamic user segments based on your users&amp;rsquo; predicted behavior. These predictions are automatically available for use with Firebase Remote Config, the Notifications composer, Firebase In-App Messaging, and A/B Testing. You can also export your app&amp;rsquo;s Predictions data to BigQuery for further analysis or to push to third party tools. When you use Predictions with Remote Config, you can increase conversions by providing a custom experience based on each of your users&amp;rsquo; anticipated needs. You can also use Predictions with the Notifications composer to deliver one-time messages or recurring campaigns. For example, you can automatically send a notification to users who are predicted to stop using your app. With A/B Testing, you can compare the effectiveness between different the Notifications composer campaigns, or use Remote Config to test the result of different ways of customizing the in-app experience for users in a predicted segment.&lt;/p&gt;
&lt;h2 id=&#34;firebase-ab-testing&#34;&gt;Firebase A/B Testing&lt;/h2&gt;
&lt;p&gt;Powered by Google Optimize, Firebase A/B Testing helps you optimize your app experience by making it easy to run, analyze, and scale product and marketing experiments. It gives you the power to test changes to your app’s UI, features, or engagement campaigns to see if they actually move the needle on your key metrics (like revenue and retention) before you roll them out widely. A/B Testing works with FCM so you can test different marketing messages, and with Remote Config so you can test changes within your app.&lt;/p&gt;
&lt;h2 id=&#34;firebase-cloud-messaging&#34;&gt;Firebase Cloud Messaging&lt;/h2&gt;
&lt;p&gt;Firebase Cloud Messaging (FCM) is a cross-platform messaging solution that lets you reliably send messages at no cost. Using FCM, you can notify a client app that new email or other data is available to sync. You can send notification messages to drive user re-engagement and retention. For use cases such as instant messaging, a message can transfer a payload of up to 4KB to a client app. Using deprecated Google Cloud Messaging APIs? Learn more about how to migrate to FCM.&lt;/p&gt;
&lt;h2 id=&#34;firebase-in-app-messaging&#34;&gt;Firebase In-App Messaging&lt;/h2&gt;
&lt;p&gt;Engage active app users with contextual messages. Firebase In-App Messaging helps you engage your app&amp;rsquo;s active users by sending them targeted, contextual messages that encourage them to use key app features. For example, you could send an in-app message to get users to subscribe, watch a video, complete a level, or buy an item. You can customize messages as cards, banners, modals, or images, and set up triggers so that they appear exactly when they&amp;rsquo;d benefit your users most. Use Firebase In-App Messaging to encourage exploration and discovery: highlight a sale or coupon in your ecommerce app, give clues or tips in your game, or prompt a like or share in your social media app.&lt;/p&gt;
&lt;h2 id=&#34;firebase-remote-config&#34;&gt;Firebase Remote Config&lt;/h2&gt;
&lt;p&gt;Change the behavior and appearance of your app without publishing an app update, at no cost, for unlimited daily active users. Firebase Remote Config is a cloud service that lets you change the behavior and appearance of your app without requiring users to download an app update. When using Remote Config, you create in-app default values that control the behavior and appearance of your app. Then, you can later use the Firebase console or the Remote Config backend APIs to override in-app default values for all app users or for segments of your user base. Your app controls when updates are applied, and it can frequently check for updates and apply them with a negligible impact on performance.&lt;/p&gt;
&lt;h2 id=&#34;firebase-dynamic-links&#34;&gt;Firebase Dynamic Links&lt;/h2&gt;
&lt;p&gt;Firebase Dynamic Links are links that work the way you want, on multiple platforms, and whether or not your app is already installed. With Dynamic Links, your users get the best available experience for the platform they open your link on. If a user opens a Dynamic Link on iOS or Android, they can be taken directly to the linked content in your native app. If a user opens the same Dynamic Link in a desktop browser, they can be taken to the equivalent content on your website. In addition, Dynamic Links work across app installs: if a user opens a Dynamic Link on iOS or Android and doesn&amp;rsquo;t have your app installed, the user can be prompted to install it; then, after installation, your app starts and can access the link.&lt;/p&gt;
&lt;h2 id=&#34;firebase-app-indexing&#34;&gt;Firebase App Indexing&lt;/h2&gt;
&lt;p&gt;Firebase App Indexing gets your app into Google Search. If users have your app installed, they can launch your app and go directly to the content they&amp;rsquo;re searching for. App Indexing reengages your app users by helping them find public content right on their device, even offering query autocompletions to help them more quickly find what they need. If users don’t yet have your app, relevant queries trigger an install card for your app in Search results.&lt;/p&gt;
&lt;p&gt;And That&amp;rsquo;s It! That&amp;rsquo;s all we get for a free quota which updates every month! and believe it or not these are the cheapest services you can get right now!&lt;/p&gt;
&lt;h2 id=&#34;how-should-i-start&#34;&gt;How Should I Start&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;re considering Firebase with Javascript. So in this guide series we&amp;rsquo;re considering more and more web apps and hybrid mobile apps to develop. And you also need some basic knowledge on &lt;a href=&#34;https://blog.nushankodikara.com/post/html-for-modern-web-development/&#34;&gt;HTML&lt;/a&gt;, &lt;a href=&#34;https://blog.nushankodikara.com/post/css-for-modern-web-development/&#34;&gt;CSS&lt;/a&gt;, &lt;a href=&#34;https://blog.nushankodikara.com/post/scss-for-modern-web-development/&#34;&gt;SCSS&lt;/a&gt;, &lt;a href=&#34;https://blog.nushankodikara.com/post/js-for-modern-web-development/&#34;&gt;JS part 1&lt;/a&gt; and &lt;a href=&#34;https://blog.nushankodikara.com/content/post/js-for-modern-web-development-2/&#34;&gt;JS part 2&lt;/a&gt; After that we can get into this series. This isn&amp;rsquo;t hard but you have to keep your focus high.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Firebase is a set of services ( A Collection of services ) which can make your life easier. I Use firebase personally in my projects whenever I can and It made my life so much easier. From today on we&amp;rsquo;re discussing how we can use these services. So stay Tuned!&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Playstore Publishing Guide 101</title>
<link>https://blog.nushankodikara.com/blog/publishing-guide-for-playstore/</link>
<pubDate>Tue, 04 Aug 2020 06:00:00 +0530</pubDate>
      
      <guid>https://blog.nushankodikara.com/blog/publishing-guide-for-playstore/</guid>
<description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Playstore is the king of all appstores in the world right now, It hold&amp;rsquo;s a market share of 75% around the globe and google single handedly offers the best tools for Android developers as none other, We already discussed how we can create android applications using Cordova as a hybrid app platform and today, We&amp;rsquo;re uploading our newly signed apk file to the playstore from our own account.&lt;/p&gt;
&lt;h2 id=&#34;preparation&#34;&gt;Preparation&lt;/h2&gt;
&lt;p&gt;The ingredients for this recipe&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Playstore Account&lt;/li&gt;
&lt;li&gt;Signed APK File&lt;/li&gt;
&lt;li&gt;512px x 512px icon file (PNG)&lt;/li&gt;
&lt;li&gt;1024px x 500px banner file (PNG)&lt;/li&gt;
&lt;li&gt;Short description of the APK&lt;/li&gt;
&lt;li&gt;Long description of the APK&lt;/li&gt;
&lt;li&gt;2 or more Screenshots in 16:9 ratio (landscape or portrait)&lt;/li&gt;
&lt;li&gt;Optionally Screen shots from 7 inch and 10 inch devices&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Before gathering these, I have to tell you that you need to pay 25$ for google in order to get a new playstore console account. And you can get one from &lt;a href=&#34;https://play.google.com/apps/publish/signup&#34;&gt;https://play.google.com/apps/publish/signup&lt;/a&gt; This link. Always remember, use your Generic information on this account, Don&amp;rsquo;t fake it.&lt;/p&gt;
&lt;h2 id=&#34;lets-start-then&#34;&gt;Let&amp;rsquo;s Start Then?&lt;/h2&gt;
&lt;p&gt;And One thing before start. Google has released a new play console and today we&amp;rsquo;re exploring it. It&amp;rsquo;s still in the beta phrase ( Today is 4-Aug-2020 ) and could be changed in the future. But they wont do anything big, so the process would be the same. And also there are more options to explore.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s Start Shall we, you have to login to your play console account from &lt;a href=&#34;https://play.google.com/console&#34;&gt;https://play.google.com/console&lt;/a&gt; This URL by now, If it&amp;rsquo;s changed in the future, just google for google play console and you&amp;rsquo;ll get the link to it.&lt;/p&gt;
&lt;p&gt;I made an app out of our Yesterday&amp;rsquo;s post about bio section (Network hub) and I&amp;rsquo;m uploading it now With you. Also I made some quick arts for Screenshot, Icon and banner. Let&amp;rsquo;s start the project.&lt;/p&gt;
&lt;h2 id=&#34;first-things-first&#34;&gt;First Thing&amp;rsquo;s First&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s login to the console, Goto &lt;a href=&#34;https://play.google.com/console&#34;&gt;https://play.google.com/console&lt;/a&gt; after you paid the one-time payment and created the account, And select your developer account from the list.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200804_01.png&#34; alt=&#34;Log in&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200804_02.png&#34; alt=&#34;Log in&#34;&gt;&lt;/p&gt;
&lt;p&gt;Then Let me show you my account, I have 5 published apps and noticed there&amp;rsquo;s a Create app button top right to the screen? Yes that&amp;rsquo;s what we need. Click it and You&amp;rsquo;ll Greet up with a form to fill, Fillup with your Application data and click create app&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200804_03.png&#34; alt=&#34;Log in&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200804_04.gif&#34; alt=&#34;Log in&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200804_05.png&#34; alt=&#34;Log in&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now Let&amp;rsquo;s get in to the Dashboard. The new play console have a step-by-step guide for you. So It&amp;rsquo;s soo easy and soo much better than the OLD play console. I Ran into a habit of mine and got stucked during the guide (I&amp;rsquo;ll tell you when) and Because I can&amp;rsquo;t upload the same app twice, I decided to continue the guide, that&amp;rsquo;s not a big thing or so but keep noted.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200804_06.png&#34; alt=&#34;Log in&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now you loaded the dashboard, Scroll down to the initialization section and expand the list by clicking on view task dropdown.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200804_07.png&#34; alt=&#34;Log in&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200804_08.png&#34; alt=&#34;Log in&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now Click on our first task, I&amp;rsquo;m doing it with you so if you got stucked, come back to the guide. Our first task is &lt;code&gt;App access&lt;/code&gt; settings. Here we are letting the playstore know wether our app has anything to do with special access permissions. For my application, I don&amp;rsquo;t need any special access so I&amp;rsquo;m selecting the first option and saving. Remember you have to go to the dashboard manually after saving it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200804_09.png&#34; alt=&#34;Log in&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200804_10.png&#34; alt=&#34;Log in&#34;&gt;&lt;/p&gt;
&lt;p&gt;Alright! Let&amp;rsquo;s go to the second task &lt;code&gt;Ads&lt;/code&gt;. This will let the playstore know wether you&amp;rsquo;re displaying ads on your application or not. And this will show a &lt;code&gt;contains ads&lt;/code&gt; label within the playstore. I don&amp;rsquo;t have any ads on my application so I&amp;rsquo;m not selecting it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200804_11.png&#34; alt=&#34;Log in&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200804_12.png&#34; alt=&#34;Log in&#34;&gt;&lt;/p&gt;
&lt;p&gt;Third Step! We&amp;rsquo;re rocking through this right now, Okay now &lt;code&gt;Content rating&lt;/code&gt; This will give you a badge with what age groups are suitable to use your application (That 12+ 18+ 3+ etc&amp;hellip;). It&amp;rsquo;s also an easy to manage option and answer to their questions with precise, otherwise your application would get rejected. Also I&amp;rsquo;m attaching a gif on how I did it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200804_13.png&#34; alt=&#34;Log in&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200804_14.png&#34; alt=&#34;Log in&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200804_15.gif&#34; alt=&#34;Log in&#34;&gt;&lt;/p&gt;
&lt;p&gt;Fourth Step, &lt;code&gt;Target Audience&lt;/code&gt;, This is a hit or miss section. I always choose 18 and over because it&amp;rsquo;ll make the app review process run faster. and also if you&amp;rsquo;re designing this app for children, Google have some policies and don&amp;rsquo;t forget to check them here in google&amp;rsquo;s designed for families program &lt;a href=&#34;https://support.google.com/googleplay/android-developer/answer/7018303?hl=en&#34;&gt;https://support.google.com/googleplay/android-developer/answer/7018303?hl=en&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200804_16.png&#34; alt=&#34;Log in&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200804_17.gif&#34; alt=&#34;Log in&#34;&gt;&lt;/p&gt;
&lt;p&gt;Fifth Step, &lt;code&gt;Select an app category and provide contact details&lt;/code&gt; This is pretty much self explanatory and also not that hard to proceed. And pro, let google do external marketing, It&amp;rsquo;ll make the app available on pretty much every apk store for download! (if you prefer)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200804_18.png&#34; alt=&#34;Log in&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200804_19.gif&#34; alt=&#34;Log in&#34;&gt;&lt;/p&gt;
&lt;p&gt;Sixth Step (Very Important) &lt;code&gt;Store Listing&lt;/code&gt;. Hope you have all of your ingredients nearby, because we&amp;rsquo;re going to use them here. They&amp;rsquo;ll ask you for all of those here, and upload everything, make it perfect. This is what the user sees before they installs their application, so be aware of it. I lost the uploading process but here you go with the final product. I filled everything and you can see for yourself.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200804_20.png&#34; alt=&#34;Log in&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200804_21.gif&#34; alt=&#34;Log in&#34;&gt;&lt;/p&gt;
&lt;p&gt;Alright guys, this is where I get messed up. Old console trained us to go directly to the production setting in the first place so I did it. Don&amp;rsquo;t do it if you&amp;rsquo;re doing this along. go to the end of the dashboard and you&amp;rsquo;ll see there Publish your app on google play steps, how ever we&amp;rsquo;re getting there so don&amp;rsquo;t be worried.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200804_22.png&#34; alt=&#34;Log in&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200804_23.png&#34; alt=&#34;Log in&#34;&gt;&lt;/p&gt;
&lt;p&gt;Anyways you have to get to this production track in the 2nd step of Publish your app on google play section. and Follow up from here. Notice a create a release section? Yeah you have to click it. After that click on the continue button, upload your APK, set a Release name and Release note then save it. After that you have something else to do, so go to the dashboard. Here, when I realized I got messed up, I got panicked and in the last gif you can clearly see it. Just trust me, save it and go to the dashboard.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200804_24.png&#34; alt=&#34;Log in&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200804_25.gif&#34; alt=&#34;Log in&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200804_26.png&#34; alt=&#34;Log in&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200804_27.gif&#34; alt=&#34;Log in&#34;&gt;&lt;/p&gt;
&lt;p&gt;Alright In the dashboard, Notice the Select countries and regions step? head there and you have to complete it, here you can control which countries can download your application, It&amp;rsquo;s much useful when releasing regional softwares or so. Here I&amp;rsquo;m adding every country available to add.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200804_28.png&#34; alt=&#34;Log in&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200804_29.png&#34; alt=&#34;Log in&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200804_30.png&#34; alt=&#34;Log in&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200804_31.png&#34; alt=&#34;Log in&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200804_32.png&#34; alt=&#34;Log in&#34;&gt;&lt;/p&gt;
&lt;p&gt;Final Step! get to the dashboard again, And here you can see the final step, &lt;code&gt;Review and Rollout The release&lt;/code&gt; section. Head in there, Because I had messed up my flow, I can edit this draft I uploaded and continue from there, yours may get different but steps are the same. And finally you can add the application on review by review release button.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200804_33.png&#34; alt=&#34;Log in&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200804_34.png&#34; alt=&#34;Log in&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200804_35.gif&#34; alt=&#34;Log in&#34;&gt;&lt;/p&gt;
&lt;p&gt;And finally It&amp;rsquo;s under review! Playstore employees manually tests each application and guess what, These days it could get up-to 24 hours for them to review your applications, so Be patient. But anyhow if it&amp;rsquo;s taking more than 24 hours, You have clearly messed up somewhere and usually it&amp;rsquo;ll get rejected. So review your content ratings, target audience and so on. Hope you learn something today and wish you luck on your journey.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll post a link to the application &lt;a href=&#34;https://play.google.com/store/apps/details?id=tk.tecinpact.bio&#34;&gt;HERE&lt;/a&gt; when it get released.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Google play store is the biggest mobile store in earth. Knowing to release applications there is a skill these days, It could get complicated within seconds. so watch for it and Good luck.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Creating a Network Hub for Social Medias</title>
<link>https://blog.nushankodikara.com/blog/creating-a-network-hub-of-socialmedias/</link>
<pubDate>Mon, 03 Aug 2020 06:00:00 +0530</pubDate>
      
      <guid>https://blog.nushankodikara.com/blog/creating-a-network-hub-of-socialmedias/</guid>
<description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;We all see the new instagram bio link apps are getting popular and popular day by day, and They are just a simple lines of HTML and CSS even without no JS! And I totally think I can re-create this bio link page with HTML and CSS and add some JS to the taste and also add some dynamic functionalities you can use. Today we&amp;rsquo;re discussing about how I made &lt;a href=&#34;https://bio.tecinpact.tk&#34;&gt;https://bio.tecinpact.tk&lt;/a&gt; or in other words, Our Network HUB.&lt;/p&gt;
&lt;h2 id=&#34;i-never-saw-it&#34;&gt;I Never saw it&lt;/h2&gt;
&lt;p&gt;In case you didn&amp;rsquo;t saw it before, let me show you a quick overview of what I did there, I added all of my Social links with some description and because I&amp;rsquo;m a mainstream developer, I added something that would be cool. A RSS Feed, Dynamically Updating from my site and this is it!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200803_01.gif&#34; alt=&#34;BIO SECTION&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;lets-start-shall-we&#34;&gt;Let&amp;rsquo;s Start Shall we&lt;/h2&gt;
&lt;p&gt;Because I made this in a hurry, I used two commonly used libraries from the internet to make my life easier, Bootstrap 4 and JQuery 3, If you aren&amp;rsquo;t comfortable with these, check their official documents, Otherwise, Just copy my codes and you&amp;rsquo;ll be good to go! As usual &lt;a href=&#34;https://blog.nushankodikara.com/zip/TecinpactBio.zip&#34;&gt;HERE&lt;/a&gt; is the link to download the documents directly. Let&amp;rsquo;s Start with HTML First, This is a single page setup so the index.html file would be&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;lang&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;head&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;charset&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;http-equiv&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;X-UA-Compatible&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;content&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;IE=edge&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;viewport&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;content&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;width=device-width, initial-scale=1&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;integrity&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;crossorigin&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;anonymous&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;css/style.css&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;shortcut icon&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;./img/internet-b.png&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;image/x-icon&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;title&lt;/span&gt;&amp;gt;Bio Section&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;title&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;head&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;preloader&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;lds-facebook&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h1&lt;/span&gt;&amp;gt;Loading Bio Section&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h1&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;jumbotron&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;img&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://www.tecinpact.tk/images/profile.jpg&amp;#34;&lt;/span&gt; /&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h1&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;display-4&amp;#34;&lt;/span&gt;&amp;gt;Tecinpact &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;badge badge-dark&amp;#34;&lt;/span&gt;&amp;gt;Bio&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h1&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;lead&amp;#34;&lt;/span&gt;&amp;gt;Here you can navigate through all of our sites and groups easily and safely&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;button&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;viewQP()&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;btn btn-warning&amp;#34;&lt;/span&gt;&amp;gt;Show / Hide Quick Posts&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;links&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert alert-primary&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;role&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;media&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;img&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;img/internet.png&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;align-self-center mr-3&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;alt&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;media-body&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h5&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mt-0&amp;#34;&lt;/span&gt;&amp;gt;Main Website&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h5&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;Here&amp;#39;s our main blog site, we update content daily and Hope you&amp;#39;ll learn something new! Don&amp;#39;t
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            forget to let us know your feelings in the comment section.&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;hr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://www.tecinpact.tk&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert-link&amp;#34;&lt;/span&gt;&amp;gt;Visit Site&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert alert-secondary&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;role&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;media&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;img&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;img/facebook.png&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;align-self-center mr-3&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;alt&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;media-body&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h5&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mt-0&amp;#34;&lt;/span&gt;&amp;gt;Facebook Page&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h5&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;Yes! We have a facebook page and it&amp;#39;s also updating with the site. would be glad if you can
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            show some love.&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;hr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://www.facebook.com/tecinpact&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert-link&amp;#34;&lt;/span&gt;&amp;gt;Goto FB Page&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert alert-success&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;role&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;media&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;img&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;img/telegram.png&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;align-self-center mr-3&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;alt&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;media-body&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h5&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mt-0&amp;#34;&lt;/span&gt;&amp;gt;Telegram Group&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h5&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;We have an amazing community here in Telegram, Everyone&amp;#39;s friendly and so helpful. Ask
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            anything you get a doubt about and within minutes, Someone will reply with a super helpful
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            answer!&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;hr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://t.me/tecinpact&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert-link&amp;#34;&lt;/span&gt;&amp;gt;Join Group&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert alert-warning&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;role&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;media&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;img&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;img/playstore.png&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;align-self-center mr-3&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;alt&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;media-body&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h5&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mt-0&amp;#34;&lt;/span&gt;&amp;gt;Android App&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h5&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;Hey! We have a new android app on the playstore! It&amp;#39;s great if you can go and check it out!
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;hr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://play.google.com/store/apps/details?id=tk.tecinpact.app&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert-link&amp;#34;&lt;/span&gt;&amp;gt;Install application&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert alert-danger&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;role&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;media&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;img&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;img/instagram.png&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;align-self-center mr-3&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;alt&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;media-body&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h5&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mt-0&amp;#34;&lt;/span&gt;&amp;gt;Instagram Account&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h5&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;I Don&amp;#39;t know how, But we developed a huge community on instagram and growing, Don&amp;#39;t forget to
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            join us and you&amp;#39;ll learn something new for sure! and also I&amp;#39;m updating stories hourly.&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;hr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://instagram.com/tecinpact&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert-link&amp;#34;&lt;/span&gt;&amp;gt;Follow Us&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert alert-warning&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;role&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;media&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;img&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;img/whatsapp.png&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;align-self-center mr-3&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;alt&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;media-body&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h5&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mt-0&amp;#34;&lt;/span&gt;&amp;gt;Whatsapp&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h5&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;We always face different problems to solve and sometimes, we get stuck. Ask me anything via
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            whatsapp so I can reply you within minutes.&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;hr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://wa.me/94769477743&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert-link&amp;#34;&lt;/span&gt;&amp;gt;Send A Message&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert alert-info&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;role&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;media&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;img&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;img/twitter.png&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;align-self-center mr-3&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;alt&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;media-body&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h5&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mt-0&amp;#34;&lt;/span&gt;&amp;gt;Twitter&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h5&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;We also have a twitter account! if you&amp;#39;re clever enough, You can probably get notification
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            through SMS to your phone.&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;hr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://twitter.com/tecinpact&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert-link&amp;#34;&lt;/span&gt;&amp;gt;Follow Us&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert alert-dark&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;role&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;media&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;img&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;img/gmail.png&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;align-self-center mr-3&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;alt&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;media-body&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h5&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mt-0&amp;#34;&lt;/span&gt;&amp;gt;E-Mail&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h5&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;Hope you have an official inquiry to discuss with us. we always have an email account for
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            these kinds of work.&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;hr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mailto:tecinpactagencies@gmail.com&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert-link&amp;#34;&lt;/span&gt;&amp;gt;Send Us An Email&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;quickPosts&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;copyright&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Copyright 2020 Tecinpact. All Rights Reserved.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://code.jquery.com/jquery-3.5.1.slim.min.js&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;integrity&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;crossorigin&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;anonymous&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;integrity&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;crossorigin&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;anonymous&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/js/bootstrap.min.js&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;integrity&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sha384-OgVRvuATP1z7JjHLkuOU7Xw704+h835Lr+6QL9UvYjZE3Ipu6Tp75j7Bh/kR0JKI&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;crossorigin&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;anonymous&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://code.jquery.com/jquery-3.5.1.min.js&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;integrity&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;crossorigin&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;anonymous&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;js/app.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The infrastructure of this document isn&amp;rsquo;t that hard, First we&amp;rsquo;re using two sections for preloader and content, and the content is loading secretly in the background while the preloader runs an animation. Then in the content section, I Divide the document again into four main sections, First I have a jumbotron (A Section with a bigger heading and a description sometimes also have an image) Then the main link section, quick posts section and finally the copyright line. Here the link section and quick post section hides and un-hides according to the needs. Let&amp;rsquo;s explore the SCSS page now&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scss&#34; data-lang=&#34;scss&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;user-select&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; none;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;.content&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;display&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; none;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;.jumbotron&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;background&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;url(../img/background.png)&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;background-position&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; center;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;background-size&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; cover;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;display&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; grid;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;place-items&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; center;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;img&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;200&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;border-radius&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;h1&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;animation&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; coloranimation &lt;span style=&#34;color:#bd93f9&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;s&lt;/span&gt; infinite;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ff79c6&#34;&gt;@keyframes&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;coloranimation&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#ff79c6&#34;&gt;0&lt;/span&gt;% {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;background-color&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#845EC2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#ff79c6&#34;&gt;20&lt;/span&gt;% {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;background-color&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#D65DB1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#ff79c6&#34;&gt;40&lt;/span&gt;% {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;background-color&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#FF6F91&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#ff79c6&#34;&gt;60&lt;/span&gt;% {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;background-color&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#FF9671&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#ff79c6&#34;&gt;80&lt;/span&gt;% {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;background-color&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#FFC75F&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#ff79c6&#34;&gt;100&lt;/span&gt;% {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;background-color&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#845EC2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;.links&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;padding&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;display&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; grid;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;place-items&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; center;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;.alert&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;max-width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;600&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;.media&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ff79c6&#34;&gt;img&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;.quickPosts&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;padding&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;display&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; grid;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;place-items&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; center;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;.alert&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;max-width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;600&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;.media&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ff79c6&#34;&gt;img&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;.copyright&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;text-align&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; center;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;padding&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;.preloader&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;display&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; grid;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;place-items&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; center;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;position&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; fixed;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;height&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;left&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;top&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;.lds-facebook&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;display&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; inline-block;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;position&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; relative;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;80&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;height&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;80&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;.lds-facebook&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;display&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; inline-block;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;position&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; absolute;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;left&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;background&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#000&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;animation&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; lds-facebook &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;.2&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;s&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;cubic-bezier&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;.5&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;.5&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;) infinite;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;.lds-facebook&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;:nth-child&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;left&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;animation-delay&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;.24&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;s&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;.lds-facebook&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;:nth-child&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;left&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;32&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;animation-delay&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;.12&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;s&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;.lds-facebook&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;:nth-child&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;left&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;56&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;animation-delay&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;@keyframes&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;lds-facebook&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;0&lt;/span&gt;% {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;top&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;height&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;64&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;50&lt;/span&gt;%&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;100&lt;/span&gt;% {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;top&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;24&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;height&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;32&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Firstly, I Made all sections un-selectable using a SCSS trick, and then I start the content section of scss, here I hide it at the beginning to load elements silently and adding some minor tweaks to how the elements appear and then in the preload section, I add the animations for the loading bar. And that&amp;rsquo;s pretty simple. Let&amp;rsquo;s see what we did to the JS section.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;loadComplete &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; () =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.preloader&amp;#34;&lt;/span&gt;).fadeOut(&lt;span style=&#34;color:#bd93f9&#34;&gt;500&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.quickPosts&amp;#34;&lt;/span&gt;).fadeOut(&lt;span style=&#34;color:#bd93f9&#34;&gt;500&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.content&amp;#34;&lt;/span&gt;).fadeIn(&lt;span style=&#34;color:#bd93f9&#34;&gt;500&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;window&lt;/span&gt;).on(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;load&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    setTimeout(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        loadComplete()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }, &lt;span style=&#34;color:#bd93f9&#34;&gt;3000&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; xml &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;lt;h1&amp;gt;Loading Data Please Wait&amp;lt;/h1&amp;gt;&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.quickPosts&amp;#34;&lt;/span&gt;).html(xml.join(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; colors &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert-primary&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert-secondary&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert-success&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert-danger&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert-warning&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert-info&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert-dark&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; prev &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; newn &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;getnumber &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; () =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    newn &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; getRandomInt(&lt;span style=&#34;color:#bd93f9&#34;&gt;6&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;while&lt;/span&gt; (newn &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; prev) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        newn &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; getRandomInt(&lt;span style=&#34;color:#bd93f9&#34;&gt;6&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    prev &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; newn
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; newn
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; getRandomInt(max) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Math&lt;/span&gt;.floor(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Math&lt;/span&gt;.random() &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Math&lt;/span&gt;.floor(max));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;loadData &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; () =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $.get(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;https://www.tecinpact.tk/index.xml&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (data) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        xml &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;lt;h1&amp;gt;Quick Post View&amp;lt;/h1&amp;gt;&amp;lt;br&amp;gt;&amp;#34;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $(data).find(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;item&amp;#34;&lt;/span&gt;).each(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () { &lt;span style=&#34;color:#6272a4&#34;&gt;// or &amp;#34;item&amp;#34; or whatever suits your feed
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; el &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; $(&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; retstring &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;`
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;            &amp;lt;div class=&amp;#34;alert &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;colors[getnumber()]&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34; role=&amp;#34;alert&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;            &amp;lt;div class=&amp;#34;media&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;                &amp;lt;img src=&amp;#34;img/folder.png&amp;#34; width=&amp;#34;20%&amp;#34; class=&amp;#34;align-self-center mr-3&amp;#34; alt=&amp;#34;...&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;                &amp;lt;div class=&amp;#34;media-body&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;                    &amp;lt;h5 class=&amp;#34;mt-0&amp;#34;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;el.find(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;).text()&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;lt;/h5&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;                    &amp;lt;small&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;el.find(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;pubDate&amp;#34;&lt;/span&gt;).text()&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;lt;/small&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;                    &amp;lt;p&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;el.find(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;).text()&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;lt;/p&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;                    &amp;lt;hr&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;                    &amp;lt;a href=&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;el.find(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;link&amp;#39;&lt;/span&gt;).text()&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34; class=&amp;#34;alert-link&amp;#34;&amp;gt;Visit Post&amp;lt;/a&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;                &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;            &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;        &amp;lt;/div&amp;gt;`&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            xml.push(retstring)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.quickPosts&amp;#34;&lt;/span&gt;).html(xml.join(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; QP &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;viewQP &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; () =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    setTimeout(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        loadData();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }, &lt;span style=&#34;color:#bd93f9&#34;&gt;2000&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (QP &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.links&amp;#34;&lt;/span&gt;).fadeOut(&lt;span style=&#34;color:#bd93f9&#34;&gt;500&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.quickPosts&amp;#34;&lt;/span&gt;).fadeIn(&lt;span style=&#34;color:#bd93f9&#34;&gt;500&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        QP &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.links&amp;#34;&lt;/span&gt;).fadeIn(&lt;span style=&#34;color:#bd93f9&#34;&gt;500&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.quickPosts&amp;#34;&lt;/span&gt;).fadeOut(&lt;span style=&#34;color:#bd93f9&#34;&gt;500&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        QP &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;loadData()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;At the beginning as usual, I defined the function to remove the preloader, here also I&amp;rsquo;m hiding the quickpost section to show only the content page. Then, I added a event listener to trigger the function I explained above, after the page loads completely. and The next code part is the same, if you saw my guide on how I made the tecinpact application. so I&amp;rsquo;m not explaining the mechanic in detail. however I added a simple function to get a random number form 0 to 6 when it ran, to get a randomly picked color for the posts, also here, I added a simple logic to prevent the function from giving me the same number twice in a row. and also the loadData function is as the same from the previous guide and View QP is as the same as the function which I used to show a feed in my app.&lt;/p&gt;
&lt;p&gt;And here you go! that&amp;rsquo;s all it needs to create a bio section (A Network hub), you can skip the feed part if you don&amp;rsquo;t use RSS in your project and use github Pages, Netlify or Heroku to host this site for no cost at all!&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;As a developer, my opinion is we don&amp;rsquo;t have to depend on others every single time, there are times which we can do something better than someone else, and in that process, maybe we would be able to create something more appealing to the user. Who Knows! what could be better.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Let&#39;s Create a Mobile App for TECINPACT</title>
<link>https://blog.nushankodikara.com/blog/creating-an-app-for-tecinpact/</link>
<pubDate>Sun, 02 Aug 2020 06:00:00 +0530</pubDate>
      
      <guid>https://blog.nushankodikara.com/blog/creating-an-app-for-tecinpact/</guid>
<description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Today we&amp;rsquo;re creating an app for our agency using Hybrid technology which we discussed in &lt;a href=&#34;https://blog.nushankodikara.com/post/creating-mobile-apps-with-cordova/&#34;&gt;THIS ARTICLE&lt;/a&gt;, And if you didn&amp;rsquo;t checked it out, Go ahead and try now, I&amp;rsquo;m only showing you the codes I used here And also This is an demo on how to use the technology, Then we&amp;rsquo;re publishing it on playstore Tomorrow! How cool is that? started as a web developer and now you&amp;rsquo;re an official mobile developer. Let&amp;rsquo;s get started.&lt;/p&gt;
&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;
&lt;p&gt;Read the previous article and get a feel for it, now you should have,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;created the project&lt;/li&gt;
&lt;li&gt;added android plugin&lt;/li&gt;
&lt;li&gt;added multidex&lt;/li&gt;
&lt;li&gt;configured an Icon&lt;/li&gt;
&lt;li&gt;added android key and build.json&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you did these things, Let&amp;rsquo;s get started with the coding. Now first you have to configure your config.xml file. let me show you what I did. This is how my config.xml file looks like.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;?xml version=&amp;#39;1.0&amp;#39; encoding=&amp;#39;utf-8&amp;#39;?&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;widget&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;tk.tecinpact.app&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;version=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;1.1.0&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;xmlns=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;http://www.w3.org/ns/widgets&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;xmlns:cdv=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;http://cordova.apache.org/ns/1.0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Tecinpact&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;description&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Tecinpact Official Application
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;author&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;email=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;nushankodi@gmail.com&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://tecinpact.tk&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Nushan Kodikara
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/author&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;content&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;index.html&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;plugin&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;cordova-plugin-whitelist&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;spec=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;access&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;origin=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;allow-intent&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;http://*/*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;allow-intent&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://*/*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;allow-intent&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;tel:*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;allow-intent&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sms:*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;allow-intent&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mailto:*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;allow-intent&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;geo:*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;icon&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;./res/icon.png&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;platform&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;android&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;allow-intent&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;market:*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/platform&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;platform&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ios&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;allow-intent&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;itms:*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;allow-intent&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;itms-apps:*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/platform&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/widget&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notice some differences? Yeah I added package name to widget id and version is the version number, you have to increase the version number every time you release an update. Then in the name tags, I added my app name also a description and then in author tags, I filled every thing with my personal details. Also notice I added an Icon before platform tags.&lt;/p&gt;
&lt;p&gt;Now that out to the way, delete everything in the WWW folder and add your responsive web design to this folder. This is where your main code lives. and notice the &lt;code&gt;&amp;lt;content src=&amp;quot;index.html&amp;quot; /&amp;gt;&lt;/code&gt; in the config.xml It&amp;rsquo;s the main file of the www folder. I keep it as index.html and this is what my index.html looks like&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;lang&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;head&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;style.css&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;./font-awesome-4.7.0/css/font-awesome.min.css&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://fonts.googleapis.com/css2?family=Aclonica&amp;amp;display=swap&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;title&lt;/span&gt;&amp;gt;SCSS Demo&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;title&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;head&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;preloader&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;loading&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h1&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;loadingText&amp;#34;&lt;/span&gt;&amp;gt;Loading Please Wait&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h1&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;body&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;nav&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;list&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;butotnFunction()&amp;#34;&lt;/span&gt;&amp;gt;About&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h4&lt;/span&gt;&amp;gt;Digital Guideline Of 21st Century&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h4&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;br&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h1&lt;/span&gt;&amp;gt;TECINPACT&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h1&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;window.location.replace(&amp;#39;https://www.tecinpact.tk&amp;#39;);&amp;#34;&lt;/span&gt;&amp;gt;Visit Website&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;showFeed()&amp;#34;&lt;/span&gt;&amp;gt;View Posts&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;footer&amp;#34;&lt;/span&gt;&amp;gt;Tecinpact © 2020 All Rights Reserved.&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;wrapper&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;modal&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;close&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;butotnFunction()&amp;#34;&lt;/span&gt;&amp;gt;X&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;close&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;header&lt;/span&gt;&amp;gt;# Tecinpact&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;header&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;main&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        TECINPACT is a Digital Guide Book to navigate through the 21st century cyber space in a safe and
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        cheap
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        manner. As we can get most of the products and services we’re paying for pennies, my vision here
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        is
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        to
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        support the non-geeks and starters to start their Cyber career with a boost.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;main&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;footer&lt;/span&gt;&amp;gt;Copyright 2020 Tecinpact&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;footer&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;table&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;facebook&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;window.location.replace(&amp;#39;https://www.facebook.com/tecinpact&amp;#39;);&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://www.facebook.com/tecinpact&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fa fa-facebook&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;twitter&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;window.location.replace(&amp;#39;https://www.twitter.com/tecinpact&amp;#39;);&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://www.twitter.com/tecinpact&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fa fa-twitter&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;instagram&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;window.location.replace(&amp;#39;https://www.instagram.com/tecinpact&amp;#39;);&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://www.instagram.com/tecinpact&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fa fa-instagram&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;whatsapp&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;window.location.replace(&amp;#39;https://wa.me/94769477743&amp;#39;);&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://wa.me/94769477743&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fa fa-whatsapp&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;window.location.replace(&amp;#39;mailto:tecinpactagencies@gmail.com&amp;#39;);&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mailto:tecinpactagencies@gmail.com&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fa fa-envelope&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;telegram&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;window.location.replace(&amp;#39;https://t.me/tecinpact&amp;#39;);&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://t.me/tecinpact&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fa fa-telegram&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;table&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;feed&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;back&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;showFeed()&amp;#34;&lt;/span&gt;&amp;gt;Go Back&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;textBox&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;./jquery-3.5.1.min.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;./index.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here in the head tags, I linked my main css, a fontawesome pack and a custom font from google to make it fancy or so. and my document has 2 sections divided with div tags called preloader and content. Preloader is where the loading animation lives, I animate it with a CSS code section. and the content section. Is this looks familiar? Yes it should be! We made this template in the &lt;a href=&#34;https://blog.nushankodikara.com/post/simple-beautiful-modal/&#34;&gt;JS CSS modal&lt;/a&gt; tutorial! and oh boy it came in handy isn&amp;rsquo;t it. And for something new, I added a new button and a div with a ID of feed, this is where I grab My website&amp;rsquo;s rss feed and convert it to html. so you can see it as new posts and when I update my app, You&amp;rsquo;ll be able to see it instantly here! also because xml is a small file, it would cost you arround 5-10kb per session and that&amp;rsquo;s like nothing these days! My logic here is to hide unwanted sections and show only one section at a time, so it would look like a native app with smooth animations. I&amp;rsquo;ll explain it in the future.&lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s see the SCSS code, If you don&amp;rsquo;t know what scss is, I have a tutorial for it too and go and study it &lt;a href=&#34;https://blog.nushankodikara.com/post/scss-for-modern-web-development&#34;&gt;HERE&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scss&#34; data-lang=&#34;scss&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$background&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt; :&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;url(background.jpg)&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$buttons&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt; :&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;linear-gradient&lt;/span&gt;(to right top&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#191d3c&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#151831&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#121425&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#0e0d1b&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#05050f&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$modal&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt; :&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;linear-gradient&lt;/span&gt;(to right top&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#532527&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#401d29&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#2c1826&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#19121d&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#05050f&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$fonts&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt; :&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Aclonica&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sans-serif&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;monospace;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$dark&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt; :&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#1f1e2f&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$mode&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt; :&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#111E6C&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$lite&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt; :&lt;/span&gt; white;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;height&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;position&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; fixed;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;user-select&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; none;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;font-family&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$fonts&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;background&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;linear-gradient&lt;/span&gt;(&lt;span style=&#34;color:#50fa7b&#34;&gt;rgba&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;.5&lt;/span&gt;)&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rgba&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;.5&lt;/span&gt;))&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$background&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;background-color&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#282d53&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;background-repeat&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; no-repeat;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;background-size&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; cover;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;background-position&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; center;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$lite&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;box-sizing&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; border-box;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;.preloader&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;display&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; grid;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;place-items&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; center;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;height&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;position&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; fixed;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;top&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;left&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;.loading&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;display&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; flex;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;justify-content&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; center;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;rem&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;height&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;rem&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;margin&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;rem&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;.3&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;rem&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;background&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; white;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;border-radius&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;animation&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;.9&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;s&lt;/span&gt; bounce infinite alternate;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;:nth-child&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;animation-delay&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;.3&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;s&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&lt;/span&gt;:nth-child&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;animation-delay&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;.6&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;s&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;@keyframes&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;bounce&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ff79c6&#34;&gt;to&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;opacity&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;.3&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;transform&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;translate3d&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;rem&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;.content&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;display&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; none;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;.feed&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;.textBox&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;position&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; fixed;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;overflow-y&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; auto;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;top&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;left&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;height&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;80&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;background-color&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rgba&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;.8&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;padding&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;margin&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;border-radius&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;.link&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; skyblue;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;font-size&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; large;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;text-decoration&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; none;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;.back&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;position&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; fixed;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;left&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;transform&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;translate&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;z-index&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;padding&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;border-radius&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;500&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;background-image&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$buttons&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;transition-timing-function&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; linear;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;transition-duration&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;.1&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;s&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;border&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; solid &lt;span style=&#34;color:#bd93f9&#34;&gt;#14162b&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;.back&lt;/span&gt;:hover {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;padding&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;55&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;border&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; solid &lt;span style=&#34;color:#bd93f9&#34;&gt;#ffffff&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;.body&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ff79c6&#34;&gt;table&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;position&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; fixed;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;bottom&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;80&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;left&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;justify-content&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; center;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;text-align&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; center;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#50fa7b&#34;&gt;padding&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#50fa7b&#34;&gt;border-radius&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;500&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                &lt;span style=&#34;color:#50fa7b&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; white;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                &lt;span style=&#34;color:#50fa7b&#34;&gt;font-size&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;.5&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;em&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                &lt;span style=&#34;color:#50fa7b&#34;&gt;text-decoration&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; none;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                &lt;span style=&#34;color:#50fa7b&#34;&gt;margin&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;.facebook&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#50fa7b&#34;&gt;background-color&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#3b5998&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#50fa7b&#34;&gt;border&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; solid &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#3b5998&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;.twitter&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#50fa7b&#34;&gt;background-color&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#00acee&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#50fa7b&#34;&gt;border&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; solid &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#00acee&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;.instagram&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#50fa7b&#34;&gt;background-color&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#ee0077&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#50fa7b&#34;&gt;border&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; solid &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#ee0077&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;.whatsapp&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#50fa7b&#34;&gt;background-color&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#075E54&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#50fa7b&#34;&gt;border&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; solid &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#075E54&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;.email&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#50fa7b&#34;&gt;background-color&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#aaaaaa&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#50fa7b&#34;&gt;border&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; solid &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#aaaaaa&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;.telegram&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#50fa7b&#34;&gt;background-color&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#0088CC&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#50fa7b&#34;&gt;border&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; solid &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#0088CC&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;:hover {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#50fa7b&#34;&gt;background-color&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; black;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#50fa7b&#34;&gt;transition-timing-function&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; linear;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#50fa7b&#34;&gt;transition-duration&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;.1&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;s&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#50fa7b&#34;&gt;border&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; solid &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt; yellow;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                                &lt;span style=&#34;color:#50fa7b&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; yellow;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;.nav&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;position&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; absolute;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;top&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;left&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;font-size&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;.list&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;text-align&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; center;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;margin-top&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#50fa7b&#34;&gt;text-align&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; center;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#50fa7b&#34;&gt;padding&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;14&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#50fa7b&#34;&gt;text-decoration&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; none;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#50fa7b&#34;&gt;font-size&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#50fa7b&#34;&gt;padding&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;60&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#50fa7b&#34;&gt;background-image&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$buttons&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#50fa7b&#34;&gt;border&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; solid &lt;span style=&#34;color:#bd93f9&#34;&gt;#14162b&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#50fa7b&#34;&gt;border-radius&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;500&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#50fa7b&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; white;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;:hover {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#50fa7b&#34;&gt;transition-timing-function&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; linear;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#50fa7b&#34;&gt;transition-duration&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;.1&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;s&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#50fa7b&#34;&gt;border&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; solid &lt;span style=&#34;color:#50fa7b&#34;&gt;rgb&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;255&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;255&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;255&lt;/span&gt;) &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;.content&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;display&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; grid;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;place-items&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; center;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;position&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; absolute;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;top&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;25&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#ff79c6&#34;&gt;h4&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;font-size&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;em&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;margin&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#ff79c6&#34;&gt;h1&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;font-size&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;em&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;margin&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;font-family&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$fonts&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;padding&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;95&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;margin&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;border-radius&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;500&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;outline&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; none;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;border&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; none;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;font-size&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; large;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; white;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;background-image&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$buttons&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;transition-timing-function&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; linear;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;transition-duration&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;.1&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;s&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;border&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; solid &lt;span style=&#34;color:#bd93f9&#34;&gt;#14162b&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;:hover {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;padding&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;105&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;border&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; solid &lt;span style=&#34;color:#bd93f9&#34;&gt;#ffffff&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;.footer&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;position&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; fixed;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;bottom&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;left&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;text-align&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; center;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;margin&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;.wrapper&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;position&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; fixed;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;z-index&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;height&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;top&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;left&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;display&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; grid;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;place-items&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; center;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;background-color&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rgba&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;.8&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;.modal&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#ff79c6&#34;&gt;close&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#50fa7b&#34;&gt;position&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; absolute;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#50fa7b&#34;&gt;top&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#50fa7b&#34;&gt;right&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#50fa7b&#34;&gt;font-size&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#50fa7b&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; red;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#50fa7b&#34;&gt;padding&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#ff79c6&#34;&gt;header&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#50fa7b&#34;&gt;margin-bottom&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#50fa7b&#34;&gt;font-size&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;.5&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;em&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#ff79c6&#34;&gt;main&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#50fa7b&#34;&gt;font-size&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;em&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#ff79c6&#34;&gt;footer&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                            &lt;span style=&#34;color:#50fa7b&#34;&gt;font-size&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;.5&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;em&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;max-width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;350&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;height&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;350&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;border-radius&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;background-image&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$modal&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;padding&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;text-align&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; center;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;display&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; grid;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &lt;span style=&#34;color:#50fa7b&#34;&gt;grid-template-rows&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; auto &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;fr&lt;/span&gt; auto;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This code isn&amp;rsquo;t hard, anyone can understand this with my CSS and SCSS guides because they are different from what you find in the other sites. and Also I used tricks from my single line css tricks guide. Those are the things that would get hard and I already explained almost everything in other guides so I&amp;rsquo;m not going to do it here.&lt;/p&gt;
&lt;p&gt;This is where the fun begins, Let&amp;rsquo;s see how I did the JS code. Here, I used a library called JQuery and I didn&amp;rsquo;t covered it yet, I&amp;rsquo;ll do it in the near future however, but the code is easy to understand and I explained JQuery a bit in one of my previous guides.&lt;/p&gt;
&lt;p&gt;Also don&amp;rsquo;t consider the animation part for now, we&amp;rsquo;re doing a full css animation guide in the future, let me know would you like to see it sooner or later in the comments bellow.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.wrapper&amp;#34;&lt;/span&gt;).css({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    display&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.feed&amp;#34;&lt;/span&gt;).fadeOut(&lt;span style=&#34;color:#bd93f9&#34;&gt;500&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; modalStat &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; feed &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; xml &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;lt;h1&amp;gt;Data Loading&amp;lt;br&amp;gt;Please Check Your Internet Connection&amp;lt;br&amp;gt;&amp;lt;span onclick=&amp;#39;loadData()&amp;#39; style = &amp;#39;color:#0088CC;&amp;#39; &amp;gt;Reload&amp;lt;/span&amp;gt;&amp;lt;/h1 &amp;gt; &amp;#34;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.textBox&amp;#34;&lt;/span&gt;).html(xml.join(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;butotnFunction &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; () =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (modalStat &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.wrapper&amp;#34;&lt;/span&gt;).fadeIn(&lt;span style=&#34;color:#bd93f9&#34;&gt;500&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        modalStat &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.wrapper&amp;#34;&lt;/span&gt;).fadeOut(&lt;span style=&#34;color:#bd93f9&#34;&gt;500&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        modalStat &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;showFeed &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; () =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (feed &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.body&amp;#34;&lt;/span&gt;).fadeOut(&lt;span style=&#34;color:#bd93f9&#34;&gt;500&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.feed&amp;#34;&lt;/span&gt;).fadeIn(&lt;span style=&#34;color:#bd93f9&#34;&gt;500&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        feed &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.body&amp;#34;&lt;/span&gt;).fadeIn(&lt;span style=&#34;color:#bd93f9&#34;&gt;500&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.feed&amp;#34;&lt;/span&gt;).fadeOut(&lt;span style=&#34;color:#bd93f9&#34;&gt;500&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        feed &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;loadComplete &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; () =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.preloader&amp;#34;&lt;/span&gt;).fadeOut(&lt;span style=&#34;color:#bd93f9&#34;&gt;500&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.content&amp;#34;&lt;/span&gt;).fadeIn(&lt;span style=&#34;color:#bd93f9&#34;&gt;500&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;loadData &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; () =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $.get(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;https://www.tecinpact.tk/index.xml&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (data) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        xml &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;lt;h1&amp;gt;Latest Posts With Summaries&amp;lt;/h1&amp;gt;&amp;#34;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $(data).find(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;item&amp;#34;&lt;/span&gt;).each(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () { &lt;span style=&#34;color:#6272a4&#34;&gt;// or &amp;#34;item&amp;#34; or whatever suits your feed
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; el &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; $(&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; retstring &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;`&amp;lt;div class=&amp;#39;card&amp;#39; &amp;gt;------------------------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;        &amp;lt;br&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;        &amp;lt;h1&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;el.find(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;).text()&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;lt;/h1&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;        &amp;lt;br&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;        &amp;lt;small&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;el.find(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;pubDate&amp;#34;&lt;/span&gt;).text()&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;lt;/small&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;        &amp;lt;br&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;        &amp;lt;p&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;el.find(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;).text()&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;lt;br&amp;gt;&amp;lt;a class=&amp;#34;link&amp;#34; href=&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;el.find(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;link&amp;#39;&lt;/span&gt;).text()&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;gt;Read More&amp;gt;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;        &amp;lt;/div&amp;gt;`&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            xml.push(retstring)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.textBox&amp;#34;&lt;/span&gt;).html(xml.join(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;).ready(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    setTimeout(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; () {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        loadComplete();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }, &lt;span style=&#34;color:#bd93f9&#34;&gt;3000&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.addEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;deviceready&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (event) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.addEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;backbutton&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; (e) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.feed&amp;#34;&lt;/span&gt;).fadeOut(&lt;span style=&#34;color:#bd93f9&#34;&gt;500&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.body&amp;#34;&lt;/span&gt;).fadeIn(&lt;span style=&#34;color:#bd93f9&#34;&gt;500&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.wrapper&amp;#34;&lt;/span&gt;).fadeOut(&lt;span style=&#34;color:#bd93f9&#34;&gt;500&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    })
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}, &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;loadData()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s see what&amp;rsquo;s this does. Here first I&amp;rsquo;m selecting the div with the class of wrapper and hiding it using css with JQuery, then I&amp;rsquo;m doing the same thing to the feed but I used a function called fadeOut with it and it&amp;rsquo;s fading out for 500 milliseconds, Then I&amp;rsquo;m creating 3 variables, modalstat to check wether the modal is showing or not, feed to check wether the feed is showing or not and xml to hold data from the site and I set it a value at the beginning with a message so if something got wrong with the connection, the message would show up and there&amp;rsquo;s a button to refresh the process too!&lt;/p&gt;
&lt;p&gt;Then for the functions, I first made this butotnFunction which I miss spelled (But works anyways) for modal to show if hidden and hide if shown. it&amp;rsquo;s checking the variable and if it&amp;rsquo;s 1, modal will hide and if it&amp;rsquo;s 0, modal will show up. also it sets the values to the opposite of the condition they&amp;rsquo;re checking. This is the same for the showFeed function too, but here it&amp;rsquo;s hiding body section while showing itself and vice versa.&lt;/p&gt;
&lt;p&gt;Then I have a function called loadComplete, it hides the preloader and shows the content, we&amp;rsquo;re firing this function with a eventhandler lately.&lt;/p&gt;
&lt;p&gt;Then we have loadData function. it&amp;rsquo;s the brain behind the dynamic feed of the application. this function fetches the rss feed from my site and phrases it for certain tags and looping through them to get out the content. this is pretty much universal for every feed, so don&amp;rsquo;t mind it. then I add those values to the xml array and in the end, I&amp;rsquo;m rendering it in the div with the class of textBox.&lt;/p&gt;
&lt;p&gt;Now we have the event handler which runs when the document loaded. in it I put a delay function of 3 seconds ( 3000 milliseconds ), this delay is for the post processing and after that we fire our loadComplete function.&lt;/p&gt;
&lt;p&gt;Then I have a event handler from cordova to handle backbutton events. this would close modal or get you out of the feed when backing up.&lt;/p&gt;
&lt;p&gt;And guys that&amp;rsquo;s it for the application and that&amp;rsquo;s all we have to put to create a supper simple app!&lt;/p&gt;
&lt;p&gt;Now you have to run&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cordova build android &lt;span style=&#34;color:#ff79c6&#34;&gt;--&lt;/span&gt;release
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;to create the application, and Wolah! that&amp;rsquo;s our application!&lt;/p&gt;
&lt;p&gt;Let me show you some screenshots!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200802_01.jpg&#34; alt=&#34;Screenshot 1&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200802_02.jpg&#34; alt=&#34;Screenshot 2&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200802_03.jpg&#34; alt=&#34;Screenshot 3&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200802_04.jpg&#34; alt=&#34;Screenshot 4&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This is how I crate almost every app I develop, and remember, with cordova plugins, you can achieve more advanced functionality and for a simple process as this, This is the future guys!&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Let&#39;s Create Mobile Apps With Cordova</title>
<link>https://blog.nushankodikara.com/blog/creating-mobile-apps-with-cordova/</link>
<pubDate>Sat, 01 Aug 2020 06:00:00 +0530</pubDate>
      
      <guid>https://blog.nushankodikara.com/blog/creating-mobile-apps-with-cordova/</guid>
<description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Mobile app development is a cool thing, and most of us use android studio or swift in order to create mobile apps for Android and IOS devices, But what if I tell you that now you can create mobile apps for android and IOS with a single code base and It&amp;rsquo;s working with HTML CSS and JS? Yeah that&amp;rsquo;s true, with node.js now we&amp;rsquo;re able to create mobile apps using platforms such as Cordova.&lt;/p&gt;
&lt;h2 id=&#34;what-is-cordova&#34;&gt;What is Cordova&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://images.prismic.io/ionicframeworkcom/3d6dfd9bd31653194a051e7a2b859d0890a1554e_article---what-is-cordova-phone-gap.png?auto=compress,format&#34; alt=&#34;Cordova&#34;&gt;&lt;/p&gt;
&lt;p&gt;Apache Cordova is an open-source mobile development framework. It allows you to use standard web technologies - HTML5, CSS3, and JavaScript for cross-platform development. Applications execute within wrappers targeted to each platform, and rely on standards-compliant API bindings to access each device&amp;rsquo;s capabilities such as sensors, data, network status, etc.&lt;/p&gt;
&lt;h2 id=&#34;architecture&#34;&gt;Architecture&lt;/h2&gt;
&lt;p&gt;There are several components to a Cordova application. The following diagram shows a high-level view of the Cordova application architecture.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cordova.apache.org/static/img/guide/cordovaapparchitecture.png&#34; alt=&#34;Cordova Architecture&#34;&gt;&lt;/p&gt;
&lt;p&gt;Pretty cool isn&amp;rsquo;t it? Let&amp;rsquo;s go on. Today, we&amp;rsquo;re considering on Android app development using a Windows PC, also you can convert this code base to IOS, Windows, Mac, Linux and any platform you think of.&lt;/p&gt;
&lt;h2 id=&#34;setting-up-the-environment&#34;&gt;Setting up the environment&lt;/h2&gt;
&lt;p&gt;In order to develop android apps, You need to have android Studio installed, If you didn&amp;rsquo;t installed it you can download android studio from &lt;a href=&#34;https://developer.android.com/studio&#34;&gt;https://developer.android.com/studio&lt;/a&gt; And also the core, You need node.js to installed in your system, you can download and install the latest LTS or Current version from &lt;a href=&#34;https://nodejs.org/en/download&#34;&gt;https://nodejs.org/en/download&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Now you have to setup Android SDKs, currently you need to install Android SDK28 in order to create android apps, This could change, if it&amp;rsquo;s changed you&amp;rsquo;ll get an error when compiling with the version you need, so stay focused on it. You can check and install Android SDKs from android Studio application as this. Don&amp;rsquo;t worry this supports from Android 4.4 upwards.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200801_01.gif&#34; alt=&#34;Showing Android SDK&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now after that, We need to install cordova on our system. You need to install node.js, if you didn&amp;rsquo;t did it, go ahead and do it now, and come to the terminal with administrator access and enter the command&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  npm install -g cordova
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;And after that, Let&amp;rsquo;s Create our first project and add android platform to begin with.&lt;/p&gt;
&lt;h2 id=&#34;creating-our-first-project&#34;&gt;Creating Our First Project&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s now start creating our first project, It isn&amp;rsquo;t hard or so, let&amp;rsquo;s get right in to the process. First you need to have a terminal in your working directory, and in there you need to use the command&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  cordova create &amp;lt;path&amp;gt; &amp;lt;package-name&amp;gt; &amp;lt;app-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;To create the app directory, for an example you can use&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  cordova create tecinpact com.tecinpactdev.app Tecinpact
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;from this command, we&amp;rsquo;re creating an app called Tecinpact with the package name of com.tecinpactdev.app in the path called tecinpact. and we have to get into this folder using the CD command, and it&amp;rsquo;s&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  cd &amp;lt;path&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;within this example&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  cd tecinpact
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now let&amp;rsquo;s add the android platform to the project using platform add command&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  cordova platform add &amp;lt;platform&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;in this case&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  cordova platform add android
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;and We&amp;rsquo;re officially done for now. you can run the app using&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  cordova run &amp;lt;platform&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;in this case&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  cordova run android
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;And remember, to run the application, you have to connect your Android device and enable Android Debugging bridge by,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open the Settings app.&lt;/li&gt;
&lt;li&gt;Select System.&lt;/li&gt;
&lt;li&gt;Scroll to the bottom and select About phone.&lt;/li&gt;
&lt;li&gt;Scroll to the bottom and tap Build number 7 times.&lt;/li&gt;
&lt;li&gt;Return to the previous screen to find Developer options near the bottom.&lt;/li&gt;
&lt;li&gt;Scroll down and enable USB debugging.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Guys! I have something odd to say here, While I&amp;rsquo;m preparing this post, my PC crashed and got into a boot loop suddenly! I had no idea how to do anything with it so I clean installed windows Just now, I posted some stories on instagram explaining the situation and I Usually backup my work while doing it, It saved my life and you also must check out cloud storages and I hava an article about it &lt;a href=&#34;https://blog.nushankodikara.com/post/storage-free-cloud-life-2020/&#34;&gt;HERE&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;And I&amp;rsquo;m installing Everything using choco once again&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200801_02.png&#34; alt=&#34;Installing Android Studio&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now that out to the way, Let&amp;rsquo;s continue with the guide. Where were we, Okay we made and ran our First cordova application and I was about to show you how I do it, Let me show you.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200801_03.gif&#34; alt=&#34;Showing Android SDK&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;multidex&#34;&gt;Multidex&lt;/h2&gt;
&lt;p&gt;Now, If you don&amp;rsquo;t know what multidex is, it allows android apps to have over 64k functions and you&amp;rsquo;ll hit that threshold as soo as installing some plugins and doing some work, so I usually install multidex at the begining of the project, to do this you can use the following command.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  cordova plugin add cordova-plugin-enable-multidex
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is a must! so do it as soon as posible. After this you&amp;rsquo;re done with the initial setup. Now let&amp;rsquo;s see how we can create apps using cordova.&lt;/p&gt;
&lt;h2 id=&#34;folder-structure&#34;&gt;Folder Structure&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200801_04.png&#34; alt=&#34;Cordova Folder Structure&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here we only need to discuss about few files,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;config.xml&lt;/li&gt;
&lt;li&gt;www&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;configxml&#34;&gt;config.xml&lt;/h3&gt;
&lt;p&gt;For this project I have a config file like this and I&amp;rsquo;m pretty sure yours also looks like this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;?xml version=&amp;#39;1.0&amp;#39; encoding=&amp;#39;utf-8&amp;#39;?&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;widget&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;com.tecinpact.app&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;version=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;1.0.0&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;xmlns=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;http://www.w3.org/ns/widgets&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;xmlns:cdv=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;http://cordova.apache.org/ns/1.0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Tecinpact&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;description&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        A sample Apache Cordova application that responds to the deviceready event.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;author&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;email=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;dev@cordova.apache.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;http://cordova.io&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Apache Cordova Team
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/author&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;content&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;index.html&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;plugin&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;cordova-plugin-whitelist&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;spec=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;access&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;origin=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;allow-intent&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;http://*/*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;allow-intent&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://*/*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;allow-intent&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;tel:*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;allow-intent&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sms:*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;allow-intent&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mailto:*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;allow-intent&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;geo:*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;platform&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;android&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;allow-intent&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;market:*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/platform&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;platform&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ios&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;allow-intent&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;itms:*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;allow-intent&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;itms-apps:*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/platform&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/widget&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now here, This is the file that controls our application, this is our meta data file, you can change the package name, application name and many more things by tweaking this file, later in this tutorial, we&amp;rsquo;re explaining how we can do things by tweaking this file. For now, don&amp;rsquo;t be afraid to modify and tweak it BUT DO NOT REMOVE ANYTHING WITHOUT KNOWING WHAT IT DOES. And that&amp;rsquo;s a warning.&lt;/p&gt;
&lt;p&gt;Let me introduce each element to you. Name tags holds the application name, description tag holds a description of the app, author tag as others author details. content must be pointed to the main HTML file and that&amp;rsquo;s what you need for now, and there should be a self closing icon tag pointing to a icon file with src attribute and that&amp;rsquo;s all you need to know in the base level. if non of these made sense to you, go check out my Web Development series &lt;a href=&#34;https://blog.nushankodikara.com/post/html-for-modern-web-development/&#34;&gt;HTML&lt;/a&gt;, &lt;a href=&#34;https://blog.nushankodikara.com/post/css-for-modern-web-development/&#34;&gt;CSS&lt;/a&gt;, &lt;a href=&#34;https://blog.nushankodikara.com/post/scss-for-modern-web-development/&#34;&gt;SCSS&lt;/a&gt;, &lt;a href=&#34;https://blog.nushankodikara.com/post/js-for-modern-web-development/&#34;&gt;JS part 1&lt;/a&gt; and &lt;a href=&#34;https://blog.nushankodikara.com/content/post/js-for-modern-web-development-2/&#34;&gt;JS part 2&lt;/a&gt; First and then come to this section.&lt;/p&gt;
&lt;h3 id=&#34;www-directory&#34;&gt;www Directory&lt;/h3&gt;
&lt;p&gt;Now the www directory is where we create our hybrid app. Hybrid means you can create your application out of HTML CSS and JS and compile it into a native app, using some sort of a magic. Magics are not real and they are illusions, so the trick behind the sleave is, Cordova has a separate stable web view activity which can run the HTML file internally. The end user won&amp;rsquo;t feel a difference and if you&amp;rsquo;re careful enough, We can make this app looks way way better. Now you can find these even in the cordova documentation page, but let me show you what you cannot find in the documentation and what I really use in my workflow. BTW go and modify the content in the www folder and create your mobile app there with HTML CSS and JS and I&amp;rsquo;ll do it in the next guide. For now I&amp;rsquo;m using the default pages.&lt;/p&gt;
&lt;h2 id=&#34;setting-up-an-icon&#34;&gt;Setting up an Icon&lt;/h2&gt;
&lt;p&gt;This isn&amp;rsquo;t a hard one you need to create a res folder and add your icon in there, also after that you just need to add a single line of code to the config file and you&amp;rsquo;re pretty much good to go. Here&amp;rsquo;s how I do it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200801_05.gif&#34; alt=&#34;Adding Icon To the Folder&#34;&gt;&lt;/p&gt;
&lt;p&gt;And That out to the way we need to map the icon to the config file. How can we do that? Simple, Just add this line of code to your config file&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;icon&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;./res/demoIcon.png&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And That&amp;rsquo;s it. After that the whole XML config file should look like this. You have to rename the demoIcon.png part to your icon name and you&amp;rsquo;re done.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;?xml version=&amp;#39;1.0&amp;#39; encoding=&amp;#39;utf-8&amp;#39;?&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;widget&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;com.tecinpact.app&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;version=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;1.0.0&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;xmlns=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;http://www.w3.org/ns/widgets&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;xmlns:cdv=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;http://cordova.apache.org/ns/1.0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Tecinpact&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;description&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        A sample Apache Cordova application that responds to the deviceready event.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;author&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;email=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;dev@cordova.apache.org&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;http://cordova.io&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Apache Cordova Team
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/author&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;content&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;index.html&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;plugin&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;cordova-plugin-whitelist&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;spec=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;access&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;origin=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;allow-intent&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;http://*/*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;allow-intent&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://*/*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;allow-intent&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;tel:*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;allow-intent&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sms:*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;allow-intent&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mailto:*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;allow-intent&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;geo:*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;icon&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;./res/demoIcon.png&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;platform&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;android&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;allow-intent&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;market:*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/platform&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;platform&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ios&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;allow-intent&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;itms:*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;allow-intent&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;itms-apps:*&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/platform&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/widget&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Alright now there&amp;rsquo;s something called signing your app when developing android apps, and to do that, you have to develop your application into a apk file and do a complex thing called Zip aligning. Lucky for us, I Found a way which a handful of members know of, you can automatically sign Cordova apps with a build.json file and That&amp;rsquo;s the easiest as it gets. But before that, you have to create a key for your app. In order to do this you have to follow up the usual procedure of obtaining a key. You can learn how to get a keystore key for android from &lt;a href=&#34;https://www.youtube.com/watch?v=HNbtFTtq-8o&#34;&gt;THIS VIDEO&lt;/a&gt;, You don&amp;rsquo;t have to follow the whole guide, Just generate the .keystore file and you&amp;rsquo;re good to go. Now you have to create a new file called build.json&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200801_06.png&#34; alt=&#34;Cordova Folder Structure&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here you can see I created a build.json file and copied my mykey.keystore file. Now in the json file, I you have to add these lines&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;android&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;debug&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;keystore&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mykey.keystore&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;storePassword&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;alias&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alias name&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;keystoreType&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;release&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;keystore&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mykey.keystore&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;storePassword&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;alias&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alias name&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt; : &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;#34;keystoreType&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here you have to change mykey.keystore to your keystore file, enter your storepassword to the password, alias name to that section and alias password in password section. You are writing these when creating the keystore file and DO NOT LOSE THIS FILE, if you did so you won&amp;rsquo;t be able to update your app in the future. Now we&amp;rsquo;re officially done with the process and we only have to Build the app itself. Before that, Let&amp;rsquo;s summarize what we did for now&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Created a Cordova Project&lt;/li&gt;
&lt;li&gt;Added Android Platform&lt;/li&gt;
&lt;li&gt;Added Icon File&lt;/li&gt;
&lt;li&gt;Added HTML Documents in www directory&lt;/li&gt;
&lt;li&gt;Added Keystore and build files&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And Disclaimer, If you&amp;rsquo;re an absolute beginner, You have to setup environments for each pieces of software you need, I&amp;rsquo;m only showing this step for windows users because mac users can install AndroidStudio, Java and get Gradle tools and you&amp;rsquo;re going to need one more step and I&amp;rsquo;ll show it, Linux users, you have to figure it out, You&amp;rsquo;re using linux because you know somewhat about developments and you have to know how other programs use environmental variables and also install everything without overriding other applications. If that&amp;rsquo;s complicated for you, yes that&amp;rsquo;s totally complicated in linux. Use a windows OS Instead. Let&amp;rsquo;s Setup Our Environments&lt;/p&gt;
&lt;h2 id=&#34;environmental-variables&#34;&gt;Environmental Variables&lt;/h2&gt;
&lt;p&gt;You have to download Java SE Development Kit And Gradle Bundle Links Would Be &lt;a href=&#34;https://gradle.org/install&#34;&gt;https://gradle.org/install&lt;/a&gt; for gradle and &lt;a href=&#34;https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html&#34;&gt;https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html&lt;/a&gt; for Java. Good news mac users. you can use brew to install the gradle and the command is&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ brew install gradle
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And Windows users, Download these Files and Install Java if you didn&amp;rsquo;t already. Then also download and Extract Gradle bundle to C: Drive. You have to add your Application paths. In this step, We&amp;rsquo;re setting up ANDROID_SDK_ROOT, JAVA_HOME and path variables. Follow my steps&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Right Click This PC &amp;gt; Properties&lt;/li&gt;
&lt;li&gt;Click on Advanced System Settings&lt;/li&gt;
&lt;li&gt;Click on Environmental Variables&lt;/li&gt;
&lt;li&gt;Click new under user variables and add ANDROID_SDK_ROOT path&lt;/li&gt;
&lt;li&gt;Click new under user variables and add JAVA_HOME path&lt;/li&gt;
&lt;li&gt;double click on path variable and add gradle path, java path, android sdk tools path and android sdk platform tools path&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200801_07.gif&#34; alt=&#34;Environmental Variables Structure&#34;&gt;&lt;/p&gt;
&lt;p&gt;now we&amp;rsquo;re ready to build the application. fire up the terminal window and type the command to build our signed APK&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cordova build android
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you did everything correctly, By now you should see a window like this and Your APK file should be build in&lt;/p&gt;
&lt;p&gt;..\platforms\android\app\build\outputs\apk\debug&lt;/p&gt;
&lt;p&gt;Folder. to create a release version you can use&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cordova build android -release
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And that command would output an apk file in&lt;/p&gt;
&lt;p&gt;..\platforms\android\app\build\outputs\apk\release&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200801_08.png&#34; alt=&#34;Cordova Folder Structure&#34;&gt;&lt;/p&gt;
&lt;p&gt;This is what you get if everything went correctly, In the terminal. And wolah! You are officially made an android app that can be published to mobile stores. Also you can install this apk to your mobile by sending it in any way you prefer.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Here, we successfully created an android app and it&amp;rsquo;s simple as it. environmental setup is the most advanced step in this whole process and if you ran into an issue which you can&amp;rsquo;t figure out what to do, just contact me or post down below in the comment section. Tomorrow we&amp;rsquo;re creating an app for Tecinpact and On monday, We&amp;rsquo;re Publishing it to the play store!&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Best Ways to Modern Web Hosting</title>
<link>https://blog.nushankodikara.com/blog/best-ways-to-modern-web-hosting/</link>
<pubDate>Fri, 31 Jul 2020 06:00:00 +0530</pubDate>
      
      <guid>https://blog.nushankodikara.com/blog/best-ways-to-modern-web-hosting/</guid>
<description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Welcome to the world of modern web hosting, now why modern you ask, If you followed our course of modern web development, by now you should know it&amp;rsquo;s different from the typical web development process and here Today I&amp;rsquo;m showing you the free and paid web hosting platforms I use for my projects in a daily basis. My favorite is Netlify, before you ask, and this is only an introduction guide to what we&amp;rsquo;re going to explore in the near future. Let&amp;rsquo;s get into the list&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.unsplash.com/photo-1499951360447-b19be8fe80f5?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1350&amp;amp;q=80&#34; alt=&#34;Just A PC&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Heroku&lt;/li&gt;
&lt;li&gt;Netlify&lt;/li&gt;
&lt;li&gt;Github Pages&lt;/li&gt;
&lt;li&gt;Infinity free&lt;/li&gt;
&lt;li&gt;Vercel&lt;/li&gt;
&lt;li&gt;Free Hosting&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;1-heroku-httpswwwherokucom&#34;&gt;#1 Heroku &lt;a href=&#34;https://www.heroku.com&#34;&gt;https://www.heroku.com&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://nejcribic.com/content/assets/heroku-logo.png&#34; alt=&#34;Heroku&#34;&gt;&lt;/p&gt;
&lt;p&gt;Heroku is a cloud platform as a service supporting several programming languages. One of the first cloud platforms, Heroku has been in development since June 2007, when it supported only the Ruby programming language, but now supports Java, Node.js, Scala, Clojure, Python, PHP, and Go. Now with these stack, We&amp;rsquo;ll use Node.js in the future. Now Why it&amp;rsquo;s the #1? It&amp;rsquo;s free tire makes it one of the best out there.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unlimited Bandwidth&lt;/li&gt;
&lt;li&gt;Unlimited Sites&lt;/li&gt;
&lt;li&gt;550-1,000 dyno hours per month&lt;/li&gt;
&lt;li&gt;Deploy with Git and Docker&lt;/li&gt;
&lt;li&gt;Custom domains&lt;/li&gt;
&lt;li&gt;Container orchestration&lt;/li&gt;
&lt;li&gt;Automatic OS patching&lt;/li&gt;
&lt;li&gt;Sleeps after 30 mins of inactivity, otherwise always on depending on your remaining monthly free dyno hours.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-netlify-my-personal-favorite-httpswwwnetlifycom&#34;&gt;#2 Netlify (My Personal Favorite) &lt;a href=&#34;https://www.netlify.com&#34;&gt;https://www.netlify.com&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://i.ytimg.com/vi/eOKLccIYcBc/maxresdefault.jpg&#34; alt=&#34;Netlify&#34;&gt;&lt;/p&gt;
&lt;p&gt;Netlify is a San Francisco-based cloud computing company that offers hosting and serverless backend services for web applications and static websites.&lt;/p&gt;
&lt;p&gt;Its features include continuous deployment from Git across Netlify Edge, the company&amp;rsquo;s global application delivery network infrastructure, serverless form handling, support for AWS Lambda functions, and full integration with Let&amp;rsquo;s Encrypt. It provides both free and paid plans. And their workflow got my heart.&lt;/p&gt;
&lt;p&gt;Netlify customers include Google, Facebook, Verizon, NBC, Samsung, Nike, Cisco, Atlassian, LiveChat, Unilever, TriNet, Loblaw, Wieden+Kennedy, HashiCorp, Vue.js, Citrix, Peloton, Kubernetes, Lodash, Smashing Magazine, and Sequoia Capital. Their free tire contains&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;100GB Bandwidth&lt;/li&gt;
&lt;li&gt;Unlimited Storage&lt;/li&gt;
&lt;li&gt;Automated builds from Git&lt;/li&gt;
&lt;li&gt;Deploy to global Edge network&lt;/li&gt;
&lt;li&gt;Site previews for every push&lt;/li&gt;
&lt;li&gt;Instant rollbacks to any version&lt;/li&gt;
&lt;li&gt;Deploy static assets &amp;amp; dynamic serverless functions&lt;/li&gt;
&lt;li&gt;Domain Manager&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-github-pages-httpspagesgithubcom&#34;&gt;#3 Github Pages &lt;a href=&#34;https://pages.github.com&#34;&gt;https://pages.github.com&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://i.ytimg.com/vi/2MsN8gpT6jY/maxresdefault.jpg&#34; alt=&#34;Github Pages&#34;&gt;&lt;/p&gt;
&lt;p&gt;GitHub Pages is a static site hosting service that takes HTML, CSS, and JavaScript files straight from a repository on GitHub, optionally runs the files through a build process, and publishes a website. Here you can also connect a custom domain and that&amp;rsquo;s pretty much all you can do with it. But how ever, you&amp;rsquo;ll get unlimited storage bandwidth and many more features with it.&lt;/p&gt;
&lt;h2 id=&#34;4-infinity-free-httpsinfinityfreenet&#34;&gt;#4 Infinity free &lt;a href=&#34;https://infinityfree.net&#34;&gt;https://infinityfree.net&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://dt2sdf0db8zob.cloudfront.net/wp-content/uploads/2019/08/AwesomeScreenshot-infinityfree-net-2019-08-18_8_28.png&#34; alt=&#34;Infinity Free&#34;&gt;&lt;/p&gt;
&lt;p&gt;I Still don&amp;rsquo;t believe the fact that this is real, but it is. This site offers completely free web-hosting without support and anyways who needs support? we are developers so we can manage it anyways, let&amp;rsquo;s explore the options this service offers us.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unlimited Disk Space&lt;/li&gt;
&lt;li&gt;Unlimited Bandwidth&lt;/li&gt;
&lt;li&gt;Unlimited Hosted Domains&lt;/li&gt;
&lt;li&gt;No E-mail Accounts&lt;/li&gt;
&lt;li&gt;1 FTP Account&lt;/li&gt;
&lt;li&gt;Limited Server Power&lt;/li&gt;
&lt;li&gt;50,000 Daily Hits&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;5-vercel-httpsvercelcom&#34;&gt;#5 Vercel &lt;a href=&#34;https://vercel.com&#34;&gt;https://vercel.com&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://miro.medium.com/max/938/1*Rv6kW7EnWmShq7DKEb9-_A@2x.jpeg&#34; alt=&#34;Vercel&#34;&gt;&lt;/p&gt;
&lt;p&gt;This is also a service like netlify and as they say Vercel is the best place to deploy any frontend app. Start by deploying with zero configuration to our global edge network. Scale dynamically to millions of pages without breaking a sweat. They also have a cool free tire and let&amp;rsquo;s explore.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTPS-enabled Custom Domains&lt;/li&gt;
&lt;li&gt;Continuous Deployment with Git&lt;/li&gt;
&lt;li&gt;High-performance Edge Network&lt;/li&gt;
&lt;li&gt;Unlimited Websites &amp;amp; APIs&lt;/li&gt;
&lt;li&gt;Serverless Functions in Node.js, Go, and more&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also You Can Deploy from&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GitHub personal accounts&lt;/li&gt;
&lt;li&gt;GitLab personal accounts&lt;/li&gt;
&lt;li&gt;Bitbucket personal accounts&lt;/li&gt;
&lt;li&gt;Command-Line Interface&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;6-free-hosting-httpswwwfreehostingcom&#34;&gt;#6 Free Hosting &lt;a href=&#34;https://www.freehosting.com&#34;&gt;https://www.freehosting.com&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://media.geeksforgeeks.org/wp-content/cdn-uploads/20200409224837/7-Best-Sites-For-Free-Web-Hosting.png&#34; alt=&#34;Free Hosting&#34;&gt;&lt;/p&gt;
&lt;p&gt;FreeHosting.com offers you what other free web hosting services out there simply cannot. We give you the full range of tools and resources you need for creating all kinds of websites. Free hosting package is perfectly suitable for lightweight websites like Wordpress blog, Internet forum, or website built with our Site Builder. On average, free account can serve roughly 30000 daily visitors of PHP-based website, or virtually unlimited visitors of pure HTML website. We do not limit availability of your website – it will be online 24 hours a day.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;100% free hosting for lifetime&lt;/li&gt;
&lt;li&gt;Hosting for your own domain name&lt;/li&gt;
&lt;li&gt;Unmetered bandwidth&lt;/li&gt;
&lt;li&gt;Linux / Apache / PHP / MySQL&lt;/li&gt;
&lt;li&gt;One-time billed addons&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;difference&#34;&gt;Difference&lt;/h2&gt;
&lt;p&gt;That would be like a Heaven for most of the developers I know, But they all have a secret to control traffic and so, I listed them in the descending order of the limitation. According to my calculations, #1 can handle more users daily than the #5 option but still #5 option can handle 30,000 Daily users and that&amp;rsquo;s a huge amount and you won&amp;rsquo;t need to pay a single dollar to get these options. So why do we pay for more hosting?&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s be real, These are unlikely but real, Try for yourself and see the difference. I love these services and currently I&amp;rsquo;m using Netlify as I said, And hope you&amp;rsquo;ll use them too. Also This is an introduction for a post I&amp;rsquo;m planning to the future so stay tuned for that.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>How Antivirus Softwares Damage Our Hard Drives</title>
<link>https://blog.nushankodikara.com/blog/how-antivirus-softwares-damage-our-hard-drives/</link>
<pubDate>Thu, 30 Jul 2020 06:00:00 +0530</pubDate>
      
      <guid>https://blog.nushankodikara.com/blog/how-antivirus-softwares-damage-our-hard-drives/</guid>
<description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This post is a theory I tested and got some decent results, you can&amp;rsquo;t find any evidence about is this a thing, because the anti-virus industry is a huge pile of money and if someone speaks against it, they quickly take it down and then no one can see this. But from time to time, there are articles surfacing with the same issue and again the somehow takes it down for no reason. This is a major flaw but here&amp;rsquo;s what I do to get around the situation&lt;/p&gt;
&lt;p&gt;Hard Drives are also prone to damage due to sudden shock or accidental drops. On average, a hard disk has a life of 3-5 years. However, a hard disk may fail anytime due to various logical errors and physical damage caused by human errors, hardware failure, &lt;strong&gt;virus infection&lt;/strong&gt;, &lt;strong&gt;improper drive use&lt;/strong&gt;, power surge, moisture, overheating, &lt;strong&gt;bad sectors&lt;/strong&gt;, etc.&lt;/p&gt;
&lt;h2 id=&#34;how-virus-infections-lead-to-hard-drive-failure&#34;&gt;How Virus infections Lead to Hard drive failure&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://unsplash.com/photos/1qL31aacAPA/download?force=true&amp;amp;w=1920&#34; alt=&#34;Hard Disk&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s my point and this is where the problem begins, Virus infections can lead to hard drive failure because of a single reason, They make the hard drive usage go higher and higher to a point the mechanical head of the hard disk goes unable to write and read data properly, and because Hard drives are a mechanical masterpiece, It could go wrong badly when it reach it&amp;rsquo;s maximum stages. Imagine what could go wrong when the disk spins at it&amp;rsquo;s maximum and the head of the disk got stucked due to overloaded operations and maybe a sudden power outage? That&amp;rsquo;s even horrible to think of&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://unsplash.com/photos/hvBHiIe6dMw/download?force=true&amp;amp;w=1920&#34; alt=&#34;SSD Drive&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now What about SSD? is it safe? no that&amp;rsquo;s the next thing, SSDs can&amp;rsquo;t hold as much as Hard disks, Yes they don&amp;rsquo;t have mechanical drives and they can be thrown at a wall and get in a perfect condition, but silicon chips can corrupt data when it under it&amp;rsquo;s maximum condition and few worms can reach that maximum values in no time, remember we&amp;rsquo;re discussing about a situation we have some viruses on us. SSDs are enlarged SD cards in it&amp;rsquo;s simplest form, How many of SD cards got corrupted during your time? and that is the future of your SSD too.&lt;/p&gt;
&lt;h2 id=&#34;improper-driver-usage&#34;&gt;Improper driver usage&lt;/h2&gt;
&lt;p&gt;Improper driver usage occurs when we don&amp;rsquo;t defragmentate our drives, files can be spread across the drive and it could lead to improper load on the driver head, I&amp;rsquo;m mentioning on the mechanical level, and it could go 100 to 0 in no time. which means you must defrag your drives once a month or so, And what about SSDs? they have the same issue but SSDs manage this head issue in a clever way, they usually keeps everything organized but due to extended usage, this could also happen in SSDs. But SSDs can&amp;rsquo;t be defragmented because with that kind of a usage, it&amp;rsquo;ll probably die within few weeks.&lt;/p&gt;
&lt;h2 id=&#34;arent-rams-facing-this-problem&#34;&gt;Aren&amp;rsquo;t RAMS facing this problem?&lt;/h2&gt;
&lt;p&gt;I Know if you&amp;rsquo;re a critical thinker and if you know about computers, this is the next thing that come to your mind, RAMs have a clever way to overcome this problem, they usually Allocate a space to a program when it&amp;rsquo;s loading and they have multiple buses to read several parts at once and also they delete everything in them when you turned your PC off. But if you&amp;rsquo;re a extended user you can use a ram cleaner too.&lt;/p&gt;
&lt;h2 id=&#34;but-antivirus-softwares-removes-viruses-and-why-are-they-bad&#34;&gt;But Antivirus Softwares Removes Viruses and Why are they bad?&lt;/h2&gt;
&lt;p&gt;Now this is my point guys, You may heard of this, or you may didn&amp;rsquo;t even know what&amp;rsquo;s this. Now Antivirus softwares typically works in several ways,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;They can scan your computer when Your computer hangs IDEAL for some amount of time. (Note this)&lt;/li&gt;
&lt;li&gt;They Preforms full scans.&lt;/li&gt;
&lt;li&gt;They Scans files before opening.&lt;/li&gt;
&lt;li&gt;They Preforms scans when the PC is starting.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now You shouldn&amp;rsquo;t use your PC while it&amp;rsquo;s under a scan, They know what could go wrong and they do nothing on it, Look at the first point, They clearly can preform a scan every single time you started your PC, someone would say they don&amp;rsquo;t do that because of performance issues, But NO! Are they effecting your PC&amp;rsquo;s performance while they scan your PC? NO THEY DON&amp;rsquo;T! The problem is even major companies know this issue, Anti virus softwares makes the driver stressed up-to 50-90% of their original rates. How I&amp;rsquo;m telling this? Think every-time scanning running Softwares and scanning before they start? that&amp;rsquo;s Antivirus stress + Normal stress almost twice the stress.&lt;/p&gt;
&lt;h2 id=&#34;but-we-need-antivirus-softwares&#34;&gt;But we need Antivirus Softwares?&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://unsplash.com/photos/FXFz-sW0uwo/download?force=true&amp;amp;w=1920&#34; alt=&#34;PC&#34;&gt;&lt;/p&gt;
&lt;p&gt;Yeah you does, but what&amp;rsquo;s the last time you got infected with a virus? did you had a virus guard on it? My social experiments showed that 85% of the population got infected with a virus while they&amp;rsquo;re using a &lt;strong&gt;PAID&lt;/strong&gt; virus guard. And this is the truth. Virus guards, Antivirus softwares can&amp;rsquo;t protect you from new viruses, and they only can protect you from old viruses and Those old viruses are almost extincted from this planet. Reality is different, Major companies provide shiny new services such as internet security, home security bla bla bla to impress the users but all does the same.&lt;/p&gt;
&lt;h2 id=&#34;what-should-i-do-then&#34;&gt;What should I do then?&lt;/h2&gt;
&lt;p&gt;If we considered the reality, Windows is the most risky platform and It&amp;rsquo;s the only platform which needs a virus guard. And with new Windows 10 you have a built in virus guard called windows defender and it&amp;rsquo;s a passive virus guard, which means it only running scans once for a file, and only when it&amp;rsquo;s running. It&amp;rsquo;s the best way to protect your windows PC and for other platforms Linux, Android, IOS, Mac doesn&amp;rsquo;t even need an antivirus software.&lt;/p&gt;
&lt;h2 id=&#34;what-im-using&#34;&gt;What I&amp;rsquo;m using&lt;/h2&gt;
&lt;p&gt;Well, To be honest, I don&amp;rsquo;t use an antivirus software. Yeah and I didn&amp;rsquo;t got infected with a virus for the past decade and how you ask? This is why, I only use trusted sources of softwares (&lt;a href=&#34;https://blog.nushankodikara.com/post/the-package-manager-for-windows-chocolatey/&#34;&gt;choco&lt;/a&gt;) And that&amp;rsquo;s the only source. So I don&amp;rsquo;t get effected with viruses. How about automatically downloading viruses while surfing internet? That&amp;rsquo;s a joke. A Myth and that&amp;rsquo;s not even a possibility. That&amp;rsquo;s a joke major companies use to fool you and take your money.&lt;/p&gt;
&lt;h2 id=&#34;what-i-prefer&#34;&gt;What I prefer?&lt;/h2&gt;
&lt;p&gt;Let me list out declaring the end of this post&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Don&amp;rsquo;t use an Antivirus Software&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t install softwares from un-trusted sources.&lt;/li&gt;
&lt;li&gt;Uninstall unwanted softwares&lt;/li&gt;
&lt;li&gt;Always backup important data (I have a guide on cloud usage &lt;a href=&#34;https://blog.nushankodikara.com/post/storage-free-cloud-life-2020/&#34;&gt;HERE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Keep your devices clean&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And That&amp;rsquo;s pretty much it for now.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Probably you don&amp;rsquo;t need an antivirus software. Stay safe, Use cloud as much as possible. Even I Don&amp;rsquo;t use one, and for the past 10 years, nothing killed my devices And Jus tDon&amp;rsquo;t waste money on something that isn&amp;rsquo;t necessary.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Best Password Managers 2020</title>
<link>https://blog.nushankodikara.com/blog/best-password-managers-2020/</link>
<pubDate>Wed, 29 Jul 2020 06:00:00 +0530</pubDate>
      
      <guid>https://blog.nushankodikara.com/blog/best-password-managers-2020/</guid>
<description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Password managers are pieces of softwares which keep our passwords saved in somewhere to decrease the chances of forgetting them and resetting, some password managers also can auto fill data and sync between platforms for the user&amp;rsquo;s convenience. Today, we&amp;rsquo;re discussing about password managers, are they safe to use? what kinds of password managers we have and how to use them safely. So without further explanation, Let&amp;rsquo;s get in to the post.&lt;/p&gt;
&lt;h2 id=&#34;categories-of-password-managers&#34;&gt;Categories Of Password managers&lt;/h2&gt;
&lt;p&gt;To be honest, there are many categories passwords managers rely on but for the ease of study, we&amp;rsquo;re categorizing existing password managers into 5 categories&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Type&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1.Free Online&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;These password managers work online, cross platform and also they are free to use.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2.Paid Online&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;These Password managers also work like free online category but they have an subscription and you have to pay for them monthly or yearly.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3.Free Offline&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;These password managers are proprietary, and only work with a single system. Also they are offline&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4.Paid Offline&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;These password managers work exactly as the free offline ones but you have to pay for the software in order to get it.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;5.Open-Source&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Here we have an interesting one, Open-Source means you can get the code of the password manager and modify, or compile for yourself for your use and they have no copyrights.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;We&amp;rsquo;re exploring what each category contains and at the end, I&amp;rsquo;m reveling what I use and What I prefer to use. And also note these password managers are well tested and they keep our passwords pre-encrypted, which means no one can access our passwords without our Master password we used to lock the vault.&lt;/p&gt;
&lt;h3 id=&#34;1freepaid-online&#34;&gt;1.Free/Paid Online&lt;/h3&gt;
&lt;p&gt;Why both are in the same topic? These password managers offers a free and a paid version itself and These are the best password managers we have by now, There are more, but I don&amp;rsquo;t trust them much.&lt;/p&gt;
&lt;p&gt;This is my favorite type of password manager and What I use. They sync our passwords across all of our devices online and also without a single penny to waste on, Here I&amp;rsquo;m listing 4 password managers of this type.&lt;/p&gt;
&lt;h4 id=&#34;1-bitwarden&#34;&gt;#1 Bitwarden&lt;/h4&gt;
&lt;p&gt;Bitwarden is a free and open-source password management service that stores sensitive information such as website credentials in an encrypted vault. The Bitwarden platform offers a variety of client applications including a web interface, desktop applications, browser extensions, mobile apps, and a CLI. Which means, It&amp;rsquo;s very powerful and you can visit their website &lt;a href=&#34;https://bitwarden.com&#34;&gt;https://bitwarden.com&lt;/a&gt; for more information and download links.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/CAljUhGVZsOVp1nSwQz1Dg4Lgypp3JzFp4UljUy8L1upv2xlcUfAcvZeFRUiA2dGMwBBz0fT=w640-h400-e365&#34; alt=&#34;Bitwarden&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;2-lastpass&#34;&gt;#2 LastPass&lt;/h4&gt;
&lt;p&gt;LastPass is a freemium password manager that stores encrypted passwords online. The standard version of LastPass comes with a web interface, but also includes plugins for various web browsers and apps for many smartphones. It also includes support for bookmarklets. LogMeIn, Inc. acquired LastPass in October 2015. It doesn&amp;rsquo;t have a CLI but it&amp;rsquo;s powerful as much as Bitwarden. you can visit &lt;a href=&#34;https://www.lastpass.com&#34;&gt;https://www.lastpass.com&lt;/a&gt; for more information and download links.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://preppernet.com/wp-content/uploads/2019/02/unnamed.png&#34; alt=&#34;LastPass&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;3-logmeonce&#34;&gt;#3 LogMeOnce&lt;/h4&gt;
&lt;p&gt;Password-Less Login without entering a password.
In the Password-Less era it’s simple and secure to log in to all your accounts. Patented LogMeOnce Password-Less login includes automatic 2FA protection. As they said. This is somewhat preferable but LogMeOnce has a unique password-less features which supports by several different companies. &lt;a href=&#34;https://www.logmeonce.com&#34;&gt;https://www.logmeonce.com&lt;/a&gt; for more information and download links.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://d1k8hez1mxkuxw.cloudfront.net/users/3938634/seller/profile/logmeonce-5d364c6de706a.png&#34; alt=&#34;LogMeOnce&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;4-dashlane&#34;&gt;#4 DashLane&lt;/h4&gt;
&lt;p&gt;It&amp;rsquo;s a somewhat popular solution but why in the fourth place? Because it only supports a single device on free version, which renders it useless for most of the users. But in the paid version, It&amp;rsquo;s another story. DashLane is a cross-platform subscription-based password manager and digital wallet application available on macOS, Windows, iOS and Android. DashLane uses a Freemium pricing model which includes both a free tier and a premium subscription. Goto &lt;a href=&#34;https://www.dashlane.com&#34;&gt;https://www.dashlane.com&lt;/a&gt; for more information and download links.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://1.bp.blogspot.com/-AsCSGHfPTiU/WusVXTUxVpI/AAAAAAAAwg4/rgrOwPEK_3szsaYQEP4YBCmkiBphaRWggCLcBGAs/s728-e20/dashlane-password-manager.png&#34; alt=&#34;Dashlane&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s consider free and paid offline password managers, These doesn&amp;rsquo;t have support for cross platform synchronizations but it would work for users who only has a single device.&lt;/p&gt;
&lt;h3 id=&#34;2freepaid-offline&#34;&gt;2.Free/Paid offline&lt;/h3&gt;
&lt;p&gt;These password managers are somewhat preferable but I don&amp;rsquo;t use any of these because I need a sync feature. But It&amp;rsquo;s way secure than using a text file or a note book to save passwords.&lt;/p&gt;
&lt;h4 id=&#34;1-enpass&#34;&gt;#1 Enpass&lt;/h4&gt;
&lt;p&gt;This is also a modern looking but a not-much-popular password manager that also works perfectly. You store all your passwords locally on your device, and can optionally sync them across devices using your own trusted cloud accounts. None of your secured-data reaches our servers. Total peace of mind. Which means something like GDrive OneDrive Dropbox iCloud or Box can sync your passwords cross-platform optionally. goto &lt;a href=&#34;https://www.enpass.io&#34;&gt;https://www.enpass.io&lt;/a&gt; for more information and download links&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.enpass.io/wp-content/uploads/2019/12/enpass_detail_view@1x.png&#34; alt=&#34;Enpass&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;2-1password&#34;&gt;#2 1password&lt;/h4&gt;
&lt;p&gt;This is also a popular password manager, and comparing to others, It Has a modern UI And UX design. They Say &amp;ldquo;The easiest and safest way to share logins, passwords, credit cards and more, with the people that matter most. Go ahead, forget your passwords&amp;rdquo; About their product and I agree with it however. This one also has a paid version so It&amp;rsquo;s more versatile than others. as always &lt;a href=&#34;https://1password.com&#34;&gt;https://1password.com&lt;/a&gt; can show you more information and download links.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.pcmag.com/imagery/reviews/04BeuaBbm49onPbM1tX7ENj-6.fit_scale.size_1028x578.v_1569482810.png&#34; alt=&#34;1Password&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;3-keepass&#34;&gt;#3 KeePass&lt;/h4&gt;
&lt;p&gt;This is a big one. KeePass is a free open source password manager, which helps you to manage your passwords in a secure way. You can store all your passwords in one database, which is locked with a master key. So you only have to remember one single master key to unlock the whole database. Database files are encrypted using the best and most secure encryption algorithms currently known (AES-256, ChaCha20 and Twofish). For more information and Download link &lt;a href=&#34;https://keepass.info&#34;&gt;https://keepass.info&lt;/a&gt; However It&amp;rsquo;s very lite-weight and portable.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://keepass.info/screenshots/keepass_2x/main.jpg&#34; alt=&#34;KeePass&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;4-keepassxc&#34;&gt;#4 KeePassXC&lt;/h4&gt;
&lt;p&gt;KeePassXC is a community fork of KeePassX, a native cross-platform port of KeePass Password Safe, with the goal to extend and improve it with new features and bugfixes to provide a feature-rich, fully cross-platform and modern open-source password manager. The project repository is available on GitHub. And for more information and Download links &lt;a href=&#34;https://keepassxc.org&#34;&gt;https://keepassxc.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://keepassxc.org/images/screenshots/welcome_screen.png&#34; alt=&#34;KeePassXC&#34;&gt;&lt;/p&gt;
&lt;p&gt;Well, now that out to the way, Let&amp;rsquo;s explore Open-Source Options.&lt;/p&gt;
&lt;h3 id=&#34;3open-source&#34;&gt;3.Open-Source&lt;/h3&gt;
&lt;p&gt;Now here, I&amp;rsquo;m not going to introduce some new password managers, I&amp;rsquo;m just listing OpenSource options from above password managers because they are the best according to my view, because of their versatility and encryptability. If I found something new, I&amp;rsquo;ll make a explanation on it.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://bitwarden.com&#34;&gt;Bitwarden&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.passbolt.com&#34;&gt;Passbolt&lt;/a&gt; (It&amp;rsquo;s totally online)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://keepass.info&#34;&gt;KeePass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://keepassxc.org&#34;&gt;KeePassXC&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;All of these are available on github and you can also download for free. And in the future, I&amp;rsquo;ll make a complete guide on how to develop open-source Softwares for everyone.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Here, We have a tool to make our lives easier. Now I use LastPass but I prefer Bitwarden because of it&amp;rsquo;s versatility. However why I use LastPass? I started with LastPass and stucked in it by this time and within no time, I&amp;rsquo;m also switching to Bitwarden. Should you buy a password manager? If you&amp;rsquo;re an enterprise, You should. because premium versions have more options for enterprises for more than personal users.&lt;/p&gt;
&lt;p&gt;Most of the users are afraid that they&amp;rsquo;ll leak their passwords to hackers if they use password managers. But no! These softwares I listed use 256bit Encryption and don&amp;rsquo;t worry it won&amp;rsquo;t happen at all. By the way, in case you don&amp;rsquo;t hold nuclear secrets in your accounts, so what&amp;rsquo;s so special? Live smartly not hardly!&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Simple, Beautiful Modal</title>
<link>https://blog.nushankodikara.com/blog/simple-beautiful-modal/</link>
<pubDate>Tue, 28 Jul 2020 06:00:00 +0530</pubDate>
      
      <guid>https://blog.nushankodikara.com/blog/simple-beautiful-modal/</guid>
<description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;We all come across a situation when the default notify-the-user procedure is getting incompatible with our project theme and appearance, so in this guide I&amp;rsquo;m going to discuss about creating a beautiful modal for your web project, with a SCSS and JQuery ( a little bit ) before this, you have to master &lt;a href=&#34;https://blog.nushankodikara.com/post/html-for-modern-web-development/&#34;&gt;HTML&lt;/a&gt; &lt;a href=&#34;https://blog.nushankodikara.com/post/css-for-modern-web-development/&#34;&gt;CSS&lt;/a&gt; &lt;a href=&#34;https://blog.nushankodikara.com/post/scss-for-modern-web-development/&#34;&gt;SCSS&lt;/a&gt; &lt;a href=&#34;https://blog.nushankodikara.com/post/js-for-modern-web-development/&#34;&gt;JS part 1&lt;/a&gt; and &lt;a href=&#34;https://blog.nushankodikara.com/content/post/js-for-modern-web-development-2/&#34;&gt;JS part 2&lt;/a&gt; guides.&lt;/p&gt;
&lt;p&gt;Now in this guide, We&amp;rsquo;re making This Beautiful modal from scratch with only 14 lines of JS codes. I&amp;rsquo;m using HTML SCSS and a JS file in the root folder.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200728_01.gif&#34; alt=&#34;Modal&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now it&amp;rsquo;s not hard at all, &lt;a href=&#34;https://blog.nushankodikara.com/zip/Asset4.zip&#34;&gt;Here&lt;/a&gt; you can also Download the whole project.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;lang&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;head&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;charset&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;UTF-8&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;viewport&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;content&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;style.css&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;title&lt;/span&gt;&amp;gt;SCSS Demo&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;title&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;head&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;nav&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;list&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;Contact Us&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;About&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;Home&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h4&lt;/span&gt;&amp;gt;Digital Guideline Of 21st Century&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h4&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;br&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h1&lt;/span&gt;&amp;gt;TECINPACT&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h1&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;butotnFunction()&amp;#34;&lt;/span&gt;&amp;gt;Show Modal&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;footer&amp;#34;&lt;/span&gt;&amp;gt;Tecinpact © 2020 All Rights Reserved.&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;wrapper&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;modal&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;close&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;butotnFunction()&amp;#34;&lt;/span&gt;&amp;gt;X&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;close&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;header&lt;/span&gt;&amp;gt;# Modal&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;header&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;main&lt;/span&gt;&amp;gt;Modal Content Goes Here
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;ul&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;Press That X To close&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;It&amp;#39;s Nice and simple&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;ul&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;main&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;footer&lt;/span&gt;&amp;gt;Copyright 2020 Tecinpact Or Something&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;footer&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://code.jquery.com/jquery-3.5.1.min.js&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;integrity&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;crossorigin&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;anonymous&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;./index.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the HTML file, I&amp;rsquo;m creating a very simple webpage and we made this page in &lt;a href=&#34;https://blog.nushankodikara.com/post/scss-for-modern-web-development/&#34;&gt;This Guide&lt;/a&gt; From scratch and additionally I&amp;rsquo;m adding a Button to open the modal. Also after this code, I&amp;rsquo;m adding a div with a class of wrapper and in it i&amp;rsquo;m creating the modal, This wrapper makes the background darker when the modal is showing. And in the modal, I&amp;rsquo;m creating a close button, header section, main section for content and a footer section. and also I&amp;rsquo;m adding JQuery from CDN in the end of the document.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scss&#34; data-lang=&#34;scss&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$background&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt; :&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;url(https://images.unsplash.com/photo-1593642703055-4b72c180d9b5?ixlib=rb-1.2.1&amp;amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;amp;auto=format&amp;amp;fit=crop&amp;amp;w=1350&amp;amp;q=80)&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$dark&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt; :&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#1f1e2f&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$mode&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt; :&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#111E6C&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$lite&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt; :&lt;/span&gt; white;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;height&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;position&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; fixed;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#50fa7b&#34;&gt;user-select&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; none;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;font-family&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; monospace;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;background&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;linear-gradient&lt;/span&gt;(&lt;span style=&#34;color:#50fa7b&#34;&gt;rgba&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;.3&lt;/span&gt;)&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rgba&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;.3&lt;/span&gt;))&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$background&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;background-repeat&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; no-repeat;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;background-size&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; cover;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;background-position&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; center;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;$lite&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;box-sizing&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; border-box;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;.nav&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;position&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; absolute;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;top&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;font-size&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;.list&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;float&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; right;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;text-align&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; center;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;padding&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;14&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;16&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;text-decoration&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; none;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;font-size&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;margin&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;.content&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;display&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; grid;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;place-items&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; center;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;position&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; absolute;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;top&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;25&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;h4&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;font-size&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;em&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;margin&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;h1&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;font-size&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;8&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;.5&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;em&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;margin&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;padding&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;95&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;margin&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;border-radius&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;500&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;outline&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; none;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;border&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; none;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;font-size&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; large;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;font-weight&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; bold;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; blanchedalmond;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;background-image&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;linear-gradient&lt;/span&gt;(to right&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#b6bebd&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#adb4b0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#a6aaa3&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#a09f97&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#9a948d&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#958e86&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#8f897e&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#8a8377&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#7f8272&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#718171&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#617f76&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#547c7e&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;transition-timing-function&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; linear;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;transition-duration&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;.1&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;s&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;:hover {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;padding&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;105&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;border&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; solid &lt;span style=&#34;color:#bd93f9&#34;&gt;#547c7e&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;.footer&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;position&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; absolute;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;bottom&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;text-align&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; center;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;margin&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#50fa7b&#34;&gt;.wrapper&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;position&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; fixed;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;z-index&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;height&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;top&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;left&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;display&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; grid;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;place-items&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; center;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;background-color&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rgba&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;.8&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#50fa7b&#34;&gt;.modal&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ff79c6&#34;&gt;close&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;position&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; absolute;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;top&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;right&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;font-size&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;color&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; red;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;padding&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ff79c6&#34;&gt;header&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;margin-bottom&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;font-size&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;.5&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;em&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ff79c6&#34;&gt;main&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;font-size&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;em&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#ff79c6&#34;&gt;footer&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                    &lt;span style=&#34;color:#50fa7b&#34;&gt;font-size&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;.5&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;em&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;width&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;350&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;height&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;350&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;border-radius&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;background-image&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;linear-gradient&lt;/span&gt;(to right top&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#d16ba5&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#c777b9&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#ba83ca&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#aa8fd8&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#9a9ae1&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#8aa7ec&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#79b3f4&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#69bff8&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#52cffe&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#41dfff&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#46eefa&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#5ffbf1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;padding&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;text-align&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; center;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;display&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; grid;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                &lt;span style=&#34;color:#50fa7b&#34;&gt;grid-template-rows&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; auto &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;fr&lt;/span&gt; auto;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And now here&amp;rsquo;s the scss Now in here, I&amp;rsquo;m defining the page width and height in the HTML tags and setting the font aspects in the body, I explained this SCSS code once and here I&amp;rsquo;m only explaining the modal section. Now when considering the wrapper I fixed it&amp;rsquo;s position and adjusted z-index to 2 to make it appear in-front of everything. Also I used a trick from &lt;a href=&#34;https://blog.nushankodikara.com/post/1line-css-tricks-part1/&#34;&gt;This Guide&lt;/a&gt; to add the modal to the center of the wrapper. and then adjusted some basic aspects and again used a trick from &lt;a href=&#34;https://blog.nushankodikara.com/post/1line-css-tricks-part1/&#34;&gt;This Guide&lt;/a&gt; to layout the modal.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;$(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.wrapper&amp;#34;&lt;/span&gt;).css({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    display&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; modalStat &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;butotnFunction &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; () =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (modalStat &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.wrapper&amp;#34;&lt;/span&gt;).fadeIn(&lt;span style=&#34;color:#bd93f9&#34;&gt;500&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        modalStat &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;.wrapper&amp;#34;&lt;/span&gt;).fadeOut(&lt;span style=&#34;color:#bd93f9&#34;&gt;500&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        modalStat &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here&amp;rsquo;s where the magic happens. Now considering this code, It&amp;rsquo;s very simple isn&amp;rsquo;t it? yeah I&amp;rsquo;m using a library called JQuery for this section. and I&amp;rsquo;m sure you never saw this kinds of codes if you&amp;rsquo;re a beginner. now let&amp;rsquo;s explore and I&amp;rsquo;ll post a JQuery guide in the near future. Here the $(&amp;quot;.wrapper&amp;quot;) is equal to&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;document.getElementByClass&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;from JS and I&amp;rsquo;m selecting the class wrapper and in the beginning changing it&amp;rsquo;s css to hide when the page loads. and then I&amp;rsquo;m setting modalStat which is a way for my program to know wether the modal is hidden or not to 0 means hidden and 1 means active. now I&amp;rsquo;m creating a basic JS function called butotnFunction which I miss spelled but it works for the program, and adding a simple logic to make it appear if hidden and hide if appeared when the function calls. And you can see in the HTML page, that I assigned onclick attribute to this function. When the button in the main page or the X to close button is pressed, this works perfectly and And also Don&amp;rsquo;t forget to use this in your next project.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s simple, It&amp;rsquo;s beautiful, It&amp;rsquo;s Elegant and I love it, I hope you like it too and the code is simple and easy to understand. I assume you learn something new today.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Git Hub Version Control for Starters</title>
<link>https://blog.nushankodikara.com/blog/git-hub-version-control-for-starters/</link>
<pubDate>Mon, 27 Jul 2020 06:00:00 +0530</pubDate>
      
      <guid>https://blog.nushankodikara.com/blog/git-hub-version-control-for-starters/</guid>
<description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Now let&amp;rsquo;s take an start on our project directories, we as programmers and developers, always run into certain problems regarding our folder structures, corrupted files, need to undo but unable to do that because we made a terrible mistake and so on. Is there a way which we can solve this? Yes it is! that&amp;rsquo;s called version controlling, Here we&amp;rsquo;ll be able to backup our codes with version numbers and retrieve anytime we want, and when working with several developers in a single project, we&amp;rsquo;ll be able to collaborate and code the same project simultaneously with these things, so without much explanation let&amp;rsquo;s get into it.&lt;/p&gt;
&lt;h2 id=&#34;whats-a-version-control-system&#34;&gt;What’s a version control system?&lt;/h2&gt;
&lt;p&gt;A version control system, or VCS, tracks the history of changes as people and teams collaborate on projects together. As the project evolves, teams can run tests, fix bugs, and contribute new code with the confidence that any version can be recovered at any time. Developers can review project history to find out:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Which changes were made?&lt;/li&gt;
&lt;li&gt;Who made the changes?&lt;/li&gt;
&lt;li&gt;When were the changes made?&lt;/li&gt;
&lt;li&gt;Why were changes needed?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;why-git&#34;&gt;Why Git?&lt;/h2&gt;
&lt;p&gt;There are many more version control systems but we are using GIT because it&amp;rsquo;s free and it&amp;rsquo;s what most of the developers use. and also it has many more features like web-hosting and many more, which we&amp;rsquo;re going to explore in a later date.&lt;/p&gt;
&lt;h2 id=&#34;whats-a-repository&#34;&gt;What’s a repository?&lt;/h2&gt;
&lt;p&gt;Consider a repository as a project. and that&amp;rsquo;s the most simplistic explanation on what&amp;rsquo;s a repository. Why they are called repositories you ask? That&amp;rsquo;s just a fancy name git uses and That&amp;rsquo;s all. Alongside with the repositories, there is a system to track down the changes, so if you need to rollback to a previous version of your project, you can do it in a matter of seconds and there are no limitations for this process.&lt;/p&gt;
&lt;h2 id=&#34;what-services-we-use&#34;&gt;What services we use&lt;/h2&gt;
&lt;p&gt;There are many hit services like gitbucket github gitlabs so on&amp;hellip; but we&amp;rsquo;re using github today, not for a real reason but it&amp;rsquo;s my favorite git service and I use it on my personal projects allot.&lt;/p&gt;
&lt;h2 id=&#34;how-do-i-start&#34;&gt;How do I start&lt;/h2&gt;
&lt;p&gt;There are many ways you can start, you can use a full GUI based application like github desktop or the command line GIT or extensions for VSCode too.. now let&amp;rsquo;s download git first, you can use &lt;a href=&#34;https://desktop.github.com/&#34;&gt;https://desktop.github.com/&lt;/a&gt; or &lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;https://git-scm.com/downloads&lt;/a&gt; To download manually or just got to your appstore on pc for linux and mac users. Anyway you need a git client on your machine install it, restart the machine and you&amp;rsquo;re good to go. Also goto &lt;a href=&#34;https://www.github.com&#34;&gt;www.github.com&lt;/a&gt; and create your account before starting, in anytime you&amp;rsquo;ll come-up with a login section, which you have to login with your email and password.&lt;/p&gt;
&lt;h2 id=&#34;github-cli&#34;&gt;Github CLI&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s start with the command line interface, you have to start a command line interface in your working directory. it&amp;rsquo;s different from machine to machine but you should probably know by now how it&amp;rsquo;s done, otherwise I don&amp;rsquo;t think it&amp;rsquo;s a good idea to continue. Anyway if you&amp;rsquo;re running into problems while using the command line, skip this section and follow along with the GUI base version.&lt;/p&gt;
&lt;p&gt;By using git command line you can come-up with this section of documentation&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;usage: git [--version] [--help] [-C &amp;lt;path&amp;gt;] [-c &amp;lt;name&amp;gt;=&amp;lt;value&amp;gt;]
           [--exec-path[=&amp;lt;path&amp;gt;]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=&amp;lt;path&amp;gt;] [--work-tree=&amp;lt;path&amp;gt;] [--namespace=&amp;lt;name&amp;gt;]
           &amp;lt;command&amp;gt; [&amp;lt;args&amp;gt;]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone             Clone a repository into a new directory
   init              Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add               Add file contents to the index
   mv                Move or rename a file, a directory, or a symlink
   restore           Restore working tree files
   rm                Remove files from the working tree and from the index
   sparse-checkout   Initialize and modify the sparse-checkout

examine the history and state (see also: git help revisions)
   bisect            Use binary search to find the commit that introduced a bug
   diff              Show changes between commits, commit and working tree, etc
   grep              Print lines matching a pattern
   log               Show commit logs
   show              Show various types of objects
   status            Show the working tree status

grow, mark and tweak your common history
   branch            List, create, or delete branches
   commit            Record changes to the repository
   merge             Join two or more development histories together
   rebase            Reapply commits on top of another base tip
   reset             Reset current HEAD to the specified state
   switch            Switch branches
   tag               Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch             Download objects and refs from another repository
   pull              Fetch from and integrate with another repository or a local branch
   push              Update remote refs along with associated objects

&amp;#39;git help -a&amp;#39; and &amp;#39;git help -g&amp;#39; list available subcommands and some
concept guides. See &amp;#39;git help &amp;lt;command&amp;gt;&amp;#39; or &amp;#39;git help &amp;lt;concept&amp;gt;&amp;#39;
to read about a specific subcommand or concept.
See &amp;#39;git help git&amp;#39; for an overview of the system.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;now With this section, you&amp;rsquo;re pretty much good to go it&amp;rsquo;s self explanatory, Let&amp;rsquo;s get started and I&amp;rsquo;ll show you some commands, not everything, only what you would need in your day-to-day programming career.&lt;/p&gt;
&lt;h3 id=&#34;lets-explore-basic-commands&#34;&gt;Let&amp;rsquo;s explore Basic commands&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;git init&lt;/strong&gt; - initializes a brand new Git repository and begins tracking an existing directory. It adds a hidden subfolder within the existing directory that houses the internal data structure required for version control.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;git clone&lt;/strong&gt; - creates a local copy of a project that already exists remotely. The clone includes all the project’s files, history, and branches.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;git add&lt;/strong&gt; - stages a change. Git tracks changes to a developer’s codebase, but it’s necessary to stage and take a snapshot of the changes to include them in the project’s history. This command performs staging, the first part of that two-step process. Any changes that are staged will become a part of the next snapshot and a part of the project’s history. Staging and committing separately gives developers complete control over the history of their project without changing how they code and work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;git commit&lt;/strong&gt; - saves the snapshot to the project history and completes the change-tracking process. In short, a commit functions like taking a photo. Anything that’s been staged with git add will become a part of the snapshot with git commit.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;git status&lt;/strong&gt; - shows the status of changes as untracked, modified, or staged.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;git branch&lt;/strong&gt; - shows the branches being worked on locally.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;git merge&lt;/strong&gt; - merges lines of development together. This command is typically used to combine changes made on two distinct branches. For example, a developer would merge when they want to combine changes from a feature branch into the main branch for deployment.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;git pull&lt;/strong&gt; - updates the local line of development with updates from its remote counterpart. Developers use this command if a teammate has made commits to a branch on a remote, and they would like to reflect those changes in their local environment.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;git push&lt;/strong&gt; - updates the remote repository with any commits made locally to a branch.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;branches&#34;&gt;Branches?&lt;/h3&gt;
&lt;p&gt;Consider them as parallel universes. Branches are the same copy of code but modified differently, you can merge two branches anytime you want and also you can create unlimited branches of a repository&lt;/p&gt;
&lt;h3 id=&#34;how-github-works&#34;&gt;How GitHub works&lt;/h3&gt;
&lt;p&gt;&amp;quot; GitHub builds collaboration directly into the development process. Work is organized into repositories, where developers can outline requirements or direction and set expectations for team members. Then, using the GitHub flow, developers simply create a branch to work on updates, commit changes to save them, open a pull request to propose and discuss changes, and merge pull requests once everyone is on the same page.&amp;quot;&lt;/p&gt;
&lt;h3 id=&#34;flow&#34;&gt;Flow&lt;/h3&gt;
&lt;p&gt;Here we&amp;rsquo;re discussing about the work flow of the github, also we can call this steps to make a github repository for a project.&lt;/p&gt;
&lt;p&gt;The GitHub flow is a lightweight, branch-based workflow built around core Git commands used by teams around the globe—including ours.&lt;/p&gt;
&lt;p&gt;The GitHub flow has six steps, each with distinct benefits when implemented:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a branch: Topic branches created from the canonical deployment branch (usually main) allow teams to contribute to many parallel efforts. Short-lived topic branches, in particular, keep teams focused and results in quick ships.&lt;/li&gt;
&lt;li&gt;Add commits: Snapshots of development efforts within a branch create safe, revertible points in the project’s history.&lt;/li&gt;
&lt;li&gt;Open a pull request: Pull requests publicize a project’s ongoing efforts and set the tone for a transparent development process.&lt;/li&gt;
&lt;li&gt;Discuss and review code: Teams participate in code reviews by commenting, testing, and reviewing open pull requests. Code review is at the core of an open and participatory culture.&lt;/li&gt;
&lt;li&gt;Merge: Upon clicking merge, GitHub automatically performs the equivalent of a local ‘git merge’ operation. GitHub also keeps the entire branch development history on the merged pull request.&lt;/li&gt;
&lt;li&gt;Deploy: Teams can choose the best release cycles or incorporate continuous integration tools and operate with the assurance that code on the deployment branch has gone through a robust workflow.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;can-we-code-now&#34;&gt;Can we code now?&lt;/h3&gt;
&lt;p&gt;Of course, let&amp;rsquo;s get into it. Now i&amp;rsquo;ll provide some examples on how we can use the github command-line interface for our needs.&lt;/p&gt;
&lt;h4 id=&#34;contributing-to-a-current-repository&#34;&gt;Contributing to a current repository&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;## download a repository on GitHub.com to our machine
git clone https://github.com/me/repo.git

## change into the `repo` directory
cd repo

## create a new branch to store any new changes
git branch my-branch

## switch to that branch (line of development)
git checkout my-branch

## make changes, for example, edit `file1.md` and `file2.md` using the text editor

## stage the changed files
git add file1.md file2.md

## take a snapshot of the staging area (anything that&amp;#39;s been added)
git commit -m &amp;#34;my snapshot&amp;#34;

## push changes to github
git push --set-upstream origin my-branch
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;start-a-new-repository-and-publish-it-to-github&#34;&gt;Start a new repository and publish it to GitHub&lt;/h4&gt;
&lt;p&gt;Before this step, goto github and create a new repository, It&amp;rsquo;s simple as it sounds and I&amp;rsquo;m not showing it here.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;## create a new directory, and initialize it with git-specific functions
git init my-repo

## change into the `my-repo` directory
cd my-repo

## create the first file in the project
touch README.md

## git isn&amp;#39;t aware of the file, stage it
git add README.md

## take a snapshot of the staging area
git commit -m &amp;#34;add README to initial commit&amp;#34;

## provide the path for the repository you created on github
git remote add origin https://github.com/YOUR-USERNAME/YOUR-REPOSITORY.git

## push changes to github
git push --set-upstream origin main
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;contribute-to-an-existing-branch-on-github&#34;&gt;Contribute to an existing branch on GitHub&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;## assumption: a project called `repo` already exists on the machine, and a new branch has been pushed to GitHub.com since the last time changes were made locally

## change into the `repo` directory
cd repo

## update all remote tracking branches, and the currently checked out branch
git pull

## change into the existing branch called `feature-a`
git checkout feature-a

## make changes, for example, edit `file1.md` using the text editor

## stage the changed file
git add file1.md

## take a snapshot of the staging area
git commit -m &amp;#34;edit file1&amp;#34;

## push changes to github
git push
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And that&amp;rsquo;s all for the command line, you can visit github guide pages on how you can improve and use advanced functionality of github, If you&amp;rsquo;re interested, I can also make a post on advanced github functions, so let me know in the comments wether you need one.&lt;/p&gt;
&lt;h2 id=&#34;github-desktop&#34;&gt;Github Desktop&lt;/h2&gt;
&lt;p&gt;Here we come to a fun part, Github GUI version is more fun to explore and use, It has everything a user needs with a guide on hand, First goto &lt;a href=&#34;https://desktop.github.com/&#34;&gt;https://desktop.github.com/&lt;/a&gt; and download your copy of github. And you can use it right on.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://desktop.github.com/images/github-desktop-screenshot-windows.png&#34; alt=&#34;Github&#34;&gt;&lt;/p&gt;
&lt;p&gt;This application is straight forward but follows the same workflow as the github CLI version, in case you didn&amp;rsquo;t read it and managed to get here straight, you can find it here  again.&lt;/p&gt;
&lt;h3 id=&#34;flow-1&#34;&gt;Flow&lt;/h3&gt;
&lt;p&gt;Here we&amp;rsquo;re discussing about the work flow of the github, also we can call this steps to make a github repository for a project.&lt;/p&gt;
&lt;p&gt;The GitHub flow is a lightweight, branch-based workflow built around core Git commands used by teams around the globe—including ours.&lt;/p&gt;
&lt;p&gt;The GitHub flow has six steps, each with distinct benefits when implemented:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a branch: Topic branches created from the canonical deployment branch (usually main) allow teams to contribute to many parallel efforts. Short-lived topic branches, in particular, keep teams focused and results in quick ships.&lt;/li&gt;
&lt;li&gt;Add commits: Snapshots of development efforts within a branch create safe, revertible points in the project’s history.&lt;/li&gt;
&lt;li&gt;Open a pull request: Pull requests publicize a project’s ongoing efforts and set the tone for a transparent development process.&lt;/li&gt;
&lt;li&gt;Discuss and review code: Teams participate in code reviews by commenting, testing, and reviewing open pull requests. Code review is at the core of an open and participatory culture.&lt;/li&gt;
&lt;li&gt;Merge: Upon clicking merge, GitHub automatically performs the equivalent of a local ‘git merge’ operation. GitHub also keeps the entire branch development history on the merged pull request.&lt;/li&gt;
&lt;li&gt;Deploy: Teams can choose the best release cycles or incorporate continuous integration tools and operate with the assurance that code on the deployment branch has gone through a robust workflow.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GitHub Desktop is an open source &lt;a href=&#34;https://electron.atom.io&#34;&gt;Electron&lt;/a&gt;-based
GitHub app. It is written in &lt;a href=&#34;http://www.typescriptlang.org&#34;&gt;TypeScript&lt;/a&gt; and
uses &lt;a href=&#34;https://facebook.github.io/react/&#34;&gt;React&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/359239/26094502/a1f56d02-3a5d-11e7-8799-23c7ba5e5106.png&#34; alt=&#34;GitHub Desktop screenshot - Windows&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;where-can-i-get-it&#34;&gt;Where can I get it?&lt;/h3&gt;
&lt;p&gt;Download the official installer for your operating system:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://central.github.com/deployments/desktop/desktop/latest/darwin&#34;&gt;macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://central.github.com/deployments/desktop/desktop/latest/win32&#34;&gt;Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://central.github.com/deployments/desktop/desktop/latest/win32?format=msi&#34;&gt;Windows machine-wide install&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can install this alongside your existing GitHub Desktop for Mac or GitHub
Desktop for Windows application.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: there is no current migration path to import your existing
repositories into the new application - you can drag-and-drop your repositories
from disk onto the application to get started.&lt;/p&gt;
&lt;h4 id=&#34;beta-channel&#34;&gt;Beta Channel&lt;/h4&gt;
&lt;p&gt;Want to test out new features and get fixes before everyone else? Install the
beta channel to get access to early builds of Desktop:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://central.github.com/deployments/desktop/desktop/latest/darwin?env=beta&#34;&gt;macOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://central.github.com/deployments/desktop/desktop/latest/win32?env=beta&#34;&gt;Windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;community-releases&#34;&gt;Community Releases&lt;/h4&gt;
&lt;p&gt;There are several community-supported package managers that can be used to
install GitHub Desktop:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows users can install using &lt;a href=&#34;https://chocolatey.org/&#34;&gt;Chocolatey&lt;/a&gt; package manager:
&lt;code&gt;c:\&amp;gt; choco install github-desktop&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;macOS users can install using &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt; package manager:
&lt;code&gt;$ brew cask install github&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Installers for various Linux distributions can be found on the
&lt;a href=&#34;https://github.com/shiftkey/desktop&#34;&gt;&lt;code&gt;shiftkey/desktop&lt;/code&gt;&lt;/a&gt; fork.&lt;/p&gt;
&lt;p&gt;Arch Linux users can install the latest version from the
&lt;a href=&#34;https://aur.archlinux.org/packages/github-desktop-bin/&#34;&gt;AUR&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;is-github-desktop-right-for-me-what-are-the-primary-areas-of-focus&#34;&gt;Is GitHub Desktop right for me? What are the primary areas of focus?&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/desktop/desktop/blob/development/docs/process/what-is-desktop.md&#34;&gt;This document&lt;/a&gt; describes the focus of GitHub Desktop and who the product is most useful for.&lt;/p&gt;
&lt;p&gt;And to see what the team is working on currently and in the near future, check out the &lt;a href=&#34;https://github.com/desktop/desktop/blob/development/docs/process/roadmap.md&#34;&gt;GitHub Desktop roadmap&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;i-have-a-problem-with-github-desktop&#34;&gt;I have a problem with GitHub Desktop&lt;/h3&gt;
&lt;p&gt;Note: The &lt;a href=&#34;https://github.com/desktop/desktop/blob/development/CODE_OF_CONDUCT.md&#34;&gt;GitHub Desktop Code of Conduct&lt;/a&gt; applies in all interactions relating to the GitHub Desktop project.&lt;/p&gt;
&lt;p&gt;First, please search the &lt;a href=&#34;https://github.com/desktop/desktop/issues?q=is%3Aopen&#34;&gt;open issues&lt;/a&gt;
and &lt;a href=&#34;https://github.com/desktop/desktop/issues?q=is%3Aclosed&#34;&gt;closed issues&lt;/a&gt;
to see if your issue hasn&amp;rsquo;t already been reported (it may also be fixed).&lt;/p&gt;
&lt;p&gt;There is also a list of &lt;a href=&#34;https://github.com/desktop/desktop/blob/development/docs/known-issues.md&#34;&gt;known issues&lt;/a&gt;
that are being tracked against Desktop, and some of these issues have workarounds.&lt;/p&gt;
&lt;p&gt;If you can&amp;rsquo;t find an issue that matches what you&amp;rsquo;re seeing, open a &lt;a href=&#34;https://github.com/desktop/desktop/issues/new/choose&#34;&gt;new issue&lt;/a&gt;,
choose the right template and provide us with enough information to investigate
further.&lt;/p&gt;
&lt;h3 id=&#34;the-issue-i-reported-isnt-fixed-yet-what-can-i-do&#34;&gt;The issue I reported isn&amp;rsquo;t fixed yet. What can I do?&lt;/h3&gt;
&lt;p&gt;If nobody has responded to your issue in a few days, you&amp;rsquo;re welcome to respond to it with a friendly ping in the issue. Please do not respond more than a second time if nobody has responded. The GitHub Desktop maintainers are constrained in time and resources, and diagnosing individual configurations can be difficult and time consuming. While we&amp;rsquo;ll try to at least get you pointed in the right direction, we can&amp;rsquo;t guarantee we&amp;rsquo;ll be able to dig too deeply into any one person&amp;rsquo;s issue.&lt;/p&gt;
&lt;h3 id=&#34;how-can-i-contribute-to-github-desktop&#34;&gt;How can I contribute to GitHub Desktop?&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&#34;./.github/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; document will help you get setup and
familiar with the source. The &lt;a href=&#34;docs/&#34;&gt;documentation&lt;/a&gt; folder also contains more
resources relevant to the project.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re looking for something to work on, check out the &lt;a href=&#34;https://github.com/desktop/desktop/issues?q=is%3Aissue+is%3Aopen+label%3A%22help%20wanted%22&#34;&gt;help wanted&lt;/a&gt; label.&lt;/p&gt;
&lt;h3 id=&#34;more-resources&#34;&gt;More Resources&lt;/h3&gt;
&lt;p&gt;See &lt;a href=&#34;https://desktop.github.com&#34;&gt;desktop.github.com&lt;/a&gt; for more product-oriented
information about GitHub Desktop.&lt;/p&gt;
&lt;h3 id=&#34;i-still-didnt-got-it&#34;&gt;I still didn&amp;rsquo;t got it&lt;/h3&gt;
&lt;p&gt;Go ahead and Create a repository in github and download then login to the Desktop client, you can see your repositories in the left hand side and using the GUI, clone it. you can then work on your project as usual and come back to github application to see your changes and from here on you can commit from the left bottom button and push to your repository from the top button, and you&amp;rsquo;re good to go.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Github is the favorite of most of the developers these days due to their functionalities, I&amp;rsquo;ll show you how you can use these specialties in the near future and until then, be safe and stay home.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Js for Modern Web Development (Part 2)</title>
<link>https://blog.nushankodikara.com/blog/js-for-modern-web-development-2/</link>
<pubDate>Sun, 26 Jul 2020 06:00:00 +0530</pubDate>
      
      <guid>https://blog.nushankodikara.com/blog/js-for-modern-web-development-2/</guid>
<description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;We did the programming part with JS, Now let&amp;rsquo;s implement our knowledge into action, Let&amp;rsquo;s create JS which can interact with webpages, This would be a long post so hold tight and here we go.&lt;/p&gt;
&lt;h2 id=&#34;browser-environment-specs&#34;&gt;Browser environment, specs&lt;/h2&gt;
&lt;p&gt;The JavaScript language was initially created for web browsers. Since then it has evolved and become a language with many uses and platforms.&lt;/p&gt;
&lt;p&gt;A platform may be a browser, or a web-server or another &lt;em&gt;host&lt;/em&gt;, even a &amp;ldquo;smart&amp;rdquo; coffee machine, if it can run JavaScript. Each of them provides platform-specific functionality. The JavaScript specification calls that a &lt;em&gt;host environment&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A host environment provides own objects and functions additional to the language core. Web browsers give a means to control web pages. Node.js provides server-side features, and so on.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a bird&amp;rsquo;s-eye view of what we have when JavaScript runs in a web browser:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;windowObjects.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s a &amp;ldquo;root&amp;rdquo; object called &lt;code&gt;window&lt;/code&gt;. It has two roles:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;First, it is a global object for JavaScript code, as described in the chapter &lt;a href=&#34;info:global-object&#34;&gt;info:global-object&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Second, it represents the &amp;ldquo;browser window&amp;rdquo; and provides methods to control it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For instance, here we use it as a global object:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; sayHi() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// global functions are methods of the global object:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;window&lt;/span&gt;.sayHi();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And here we use it as a browser window, to see the window height:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;window&lt;/span&gt;.innerHeight); &lt;span style=&#34;color:#6272a4&#34;&gt;// inner window height
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are more window-specific methods and properties, we&amp;rsquo;ll cover them later.&lt;/p&gt;
&lt;h3 id=&#34;dom-document-object-model&#34;&gt;DOM (Document Object Model)&lt;/h3&gt;
&lt;p&gt;Document Object Model, or DOM for short, represents all page content as objects that can be modified.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;document&lt;/code&gt; object is the main &amp;ldquo;entry point&amp;rdquo; to the page. We can change or create anything on the page using it.&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// change the background color to red
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.style.background &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;red&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// change it back after 1 second
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;setTimeout(() =&amp;gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.style.background &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;1000&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here we used &lt;code&gt;document.body.style&lt;/code&gt;, but there&amp;rsquo;s much, much more. Properties and methods are described in the specification: &lt;a href=&#34;https://dom.spec.whatwg.org&#34;&gt;DOM Living Standard&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The DOM specification explains the structure of a document and provides objects to manipulate it. There are non-browser instruments that use DOM too.&lt;/p&gt;
&lt;p&gt;For instance, server-side scripts that download HTML pages and process them can also use DOM. They may support only a part of the specification though.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s also a separate specification, &lt;a href=&#34;https://www.w3.org/TR/cssom-1/&#34;&gt;CSS Object Model (CSSOM)&lt;/a&gt; for CSS rules and stylesheets, that explains how they are represented as objects, and how to read and write them.&lt;/p&gt;
&lt;p&gt;CSSOM is used together with DOM when we modify style rules for the document. In practice though, CSSOM is rarely required, because we rarely need to modify CSS rules from JavaScript (usually we just add/remove CSS classes, not modify their CSS rules), but that&amp;rsquo;s also possible.&lt;/p&gt;
&lt;h3 id=&#34;bom-browser-object-model&#34;&gt;BOM (Browser Object Model)&lt;/h3&gt;
&lt;p&gt;The Browser Object Model (BOM) represents additional objects provided by the browser (host environment) for working with everything except the document.&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;a href=&#34;mdn:api/Window/navigator&#34;&gt;navigator&lt;/a&gt; object provides background information about the browser and the operating system. There are many properties, but the two most widely known are: &lt;code&gt;navigator.userAgent&lt;/code&gt; &amp;ndash; about the current browser, and &lt;code&gt;navigator.platform&lt;/code&gt; &amp;ndash; about the platform (can help to differ between Windows/Linux/Mac etc).&lt;/li&gt;
&lt;li&gt;The &lt;a href=&#34;mdn:api/Window/location&#34;&gt;location&lt;/a&gt; object allows us to read the current URL and can redirect the browser to a new one.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&amp;rsquo;s how we can use the &lt;code&gt;location&lt;/code&gt; object:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(location.href); &lt;span style=&#34;color:#6272a4&#34;&gt;// shows current URL
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (confirm(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Go to Wikipedia?&amp;#34;&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  location.href &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://wikipedia.org&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// redirect the browser to another URL
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Functions &lt;code&gt;alert/confirm/prompt&lt;/code&gt; are also a part of BOM: they are directly not related to the document, but represent pure browser methods of communicating with the user.&lt;/p&gt;
&lt;p&gt;BOM is the part of the general &lt;a href=&#34;https://html.spec.whatwg.org&#34;&gt;HTML specification&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Yes, you heard that right. The HTML spec at &lt;a href=&#34;https://html.spec.whatwg.org&#34;&gt;https://html.spec.whatwg.org&lt;/a&gt; is not only about the &amp;ldquo;HTML language&amp;rdquo; (tags, attributes), but also covers a bunch of objects, methods and browser-specific DOM extensions. That&amp;rsquo;s &amp;ldquo;HTML in broad terms&amp;rdquo;. Also, some parts have additional specs listed at &lt;a href=&#34;https://spec.whatwg.org&#34;&gt;https://spec.whatwg.org&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;Talking about standards, we have:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;DOM specification&lt;/dt&gt;
&lt;dd&gt;Describes the document structure, manipulations and events, see &lt;a href=&#34;https://dom.spec.whatwg.org&#34;&gt;https://dom.spec.whatwg.org&lt;/a&gt;.&lt;/dd&gt;
&lt;dt&gt;CSSOM specification&lt;/dt&gt;
&lt;dd&gt;Describes stylesheets and style rules, manipulations with them and their binding to documents, see &lt;a href=&#34;https://www.w3.org/TR/cssom-1/&#34;&gt;https://www.w3.org/TR/cssom-1/&lt;/a&gt;.&lt;/dd&gt;
&lt;dt&gt;HTML specification&lt;/dt&gt;
&lt;dd&gt;Describes the HTML language (e.g. tags) and also the BOM (browser object model) &amp;ndash; various browser functions: &lt;code&gt;setTimeout&lt;/code&gt;, &lt;code&gt;alert&lt;/code&gt;, &lt;code&gt;location&lt;/code&gt; and so on, see &lt;a href=&#34;https://html.spec.whatwg.org&#34;&gt;https://html.spec.whatwg.org&lt;/a&gt;. It takes the DOM specification and extends it with many additional properties and methods.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Additionally, some classes are described separately at &lt;a href=&#34;https://spec.whatwg.org/&#34;&gt;https://spec.whatwg.org/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Please note these links, as there&amp;rsquo;s so much stuff to learn it&amp;rsquo;s impossible to cover and remember everything.&lt;/p&gt;
&lt;p&gt;When you&amp;rsquo;d like to read about a property or a method, the Mozilla manual at &lt;a href=&#34;https://developer.mozilla.org/en-US/search&#34;&gt;https://developer.mozilla.org/en-US/search&lt;/a&gt; is also a nice resource, but the corresponding spec may be better: it&amp;rsquo;s more complex and longer to read, but will make your fundamental knowledge sound and complete.&lt;/p&gt;
&lt;p&gt;To find something, it&amp;rsquo;s often convenient to use an internet search &amp;ldquo;WHATWG [term]&amp;rdquo; or &amp;ldquo;MDN [term]&amp;rdquo;, e.g &lt;a href=&#34;https://google.com?q=whatwg+localstorage&#34;&gt;https://google.com?q=whatwg+localstorage&lt;/a&gt;, &lt;a href=&#34;https://google.com?q=mdn+localstorage&#34;&gt;https://google.com?q=mdn+localstorage&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now we&amp;rsquo;ll get down to learning DOM, because the document plays the central role in the UI.&lt;/p&gt;
&lt;p&gt;libs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;d3&lt;/li&gt;
&lt;li&gt;domtree&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;dom-tree&#34;&gt;DOM tree&lt;/h2&gt;
&lt;p&gt;The backbone of an HTML document is tags.&lt;/p&gt;
&lt;p&gt;According to the Document Object Model (DOM), every HTML tag is an object. Nested tags are  &amp;ldquo;children&amp;rdquo; of the enclosing one. The text inside a tag is an object as well.&lt;/p&gt;
&lt;p&gt;All these objects are accessible using JavaScript, and we can use them to modify the page.&lt;/p&gt;
&lt;p&gt;For example, &lt;code&gt;document.body&lt;/code&gt; is the object representing the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;
&lt;p&gt;Running this code will make the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; red for 3 seconds:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.style.background &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;red&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// make the background red
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;setTimeout(() =&amp;gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.style.background &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;3000&lt;/span&gt;); &lt;span style=&#34;color:#6272a4&#34;&gt;// return back
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here we used &lt;code&gt;style.background&lt;/code&gt; to change the background color of &lt;code&gt;document.body&lt;/code&gt;, but there are many other properties, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;innerHTML&lt;/code&gt; &amp;ndash; HTML contents of the node.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;offsetWidth&lt;/code&gt; &amp;ndash; the node width (in pixels)&lt;/li&gt;
&lt;li&gt;&amp;hellip;and so on.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Soon we&amp;rsquo;ll learn more ways to manipulate the DOM, but first we need to know about its structure.&lt;/p&gt;
&lt;h3 id=&#34;an-example-of-the-dom&#34;&gt;An example of the DOM&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s start with the following simple document:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;!DOCTYPE HTML&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;head&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;title&lt;/span&gt;&amp;gt;About elk&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;title&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;head&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  The truth about elk.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The DOM represents HTML as a tree structure of tags. Here&amp;rsquo;s how it looks:&lt;/p&gt;
&lt;div class=&#34;domtree&#34;&gt;&lt;/div&gt;
&lt;script&gt;
let node1 = {&#34;name&#34;:&#34;HTML&#34;,&#34;nodeType&#34;:1,&#34;children&#34;:[{&#34;name&#34;:&#34;HEAD&#34;,&#34;nodeType&#34;:1,&#34;children&#34;:[{&#34;name&#34;:&#34;#text&#34;,&#34;nodeType&#34;:3,&#34;content&#34;:&#34;\n    &#34;},{&#34;name&#34;:&#34;TITLE&#34;,&#34;nodeType&#34;:1,&#34;children&#34;:[{&#34;name&#34;:&#34;#text&#34;,&#34;nodeType&#34;:3,&#34;content&#34;:&#34;About elk&#34;}]},{&#34;name&#34;:&#34;#text&#34;,&#34;nodeType&#34;:3,&#34;content&#34;:&#34;\n  &#34;}]},{&#34;name&#34;:&#34;#text&#34;,&#34;nodeType&#34;:3,&#34;content&#34;:&#34;\n  &#34;},{&#34;name&#34;:&#34;BODY&#34;,&#34;nodeType&#34;:1,&#34;children&#34;:[{&#34;name&#34;:&#34;#text&#34;,&#34;nodeType&#34;:3,&#34;content&#34;:&#34;\n  The truth about elk.&#34;}]}]}

drawHtmlTree(node1, &#39;div.domtree&#39;, 690, 320);
&lt;/script&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;On the picture above, you can click on element nodes and their children will open/collapse.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Every tree node is an object.&lt;/p&gt;
&lt;p&gt;Tags are &lt;em&gt;element nodes&lt;/em&gt; (or just elements) and form the tree structure: &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; is at the root, then &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; are its children, etc.&lt;/p&gt;
&lt;p&gt;The text inside elements forms &lt;em&gt;text nodes&lt;/em&gt;, labelled as &lt;code&gt;#text&lt;/code&gt;. A text node contains only a string. It may not have children and is always a leaf of the tree.&lt;/p&gt;
&lt;p&gt;For instance, the &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt; tag has the text &lt;code&gt;&amp;quot;About elk&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Please note the special characters in text nodes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a newline: &lt;code&gt;↵&lt;/code&gt; (in JavaScript known as &lt;code&gt;\n&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;a space: &lt;code&gt;␣&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Spaces and newlines are totally valid characters, like letters and digits. They form text nodes and become a part of the DOM. So, for instance, in the example above the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag contains some spaces before &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt;, and that text becomes a &lt;code&gt;#text&lt;/code&gt; node (it contains a newline and some spaces only).&lt;/p&gt;
&lt;p&gt;There are only two top-level exclusions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Spaces and newlines before &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; are ignored for historical reasons.&lt;/li&gt;
&lt;li&gt;If we put something after &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt;, then that is automatically moved inside the &lt;code&gt;body&lt;/code&gt;, at the end, as the HTML spec requires that all content must be inside &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;. So there can&amp;rsquo;t be any spaces after &lt;code&gt;&amp;lt;/body&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In other cases everything&amp;rsquo;s straightforward &amp;ndash; if there are spaces (just like any character) in the document, then they become text nodes in the DOM, and if we remove them, then there won&amp;rsquo;t be any.&lt;/p&gt;
&lt;p&gt;Here are no space-only text nodes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;!DOCTYPE HTML&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;head&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;title&lt;/span&gt;&amp;gt;About elk&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;title&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;head&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;The truth about elk.&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;domtree&#34;&gt;&lt;/div&gt;
&lt;script&gt;
let node2 = {&#34;name&#34;:&#34;HTML&#34;,&#34;nodeType&#34;:1,&#34;children&#34;:[{&#34;name&#34;:&#34;HEAD&#34;,&#34;nodeType&#34;:1,&#34;children&#34;:[{&#34;name&#34;:&#34;TITLE&#34;,&#34;nodeType&#34;:1,&#34;children&#34;:[{&#34;name&#34;:&#34;#text&#34;,&#34;nodeType&#34;:3,&#34;content&#34;:&#34;About elk&#34;}]}]},{&#34;name&#34;:&#34;BODY&#34;,&#34;nodeType&#34;:1,&#34;children&#34;:[{&#34;name&#34;:&#34;#text&#34;,&#34;nodeType&#34;:3,&#34;content&#34;:&#34;The truth about elk.&#34;}]}]}

drawHtmlTree(node2, &#39;div.domtree&#39;, 690, 210);
&lt;/script&gt;
&lt;p&gt;Browser tools (to be covered soon) that work with DOM usually do not show spaces at the start/end of the text and empty text nodes (line-breaks) between tags.&lt;/p&gt;
&lt;p&gt;Developer tools save screen space this way.&lt;/p&gt;
&lt;p&gt;On further DOM pictures we&amp;rsquo;ll sometimes omit them when they are irrelevant. Such spaces usually do not affect how the document is displayed.&lt;/p&gt;
&lt;h3 id=&#34;autocorrection&#34;&gt;Autocorrection&lt;/h3&gt;
&lt;p&gt;If the browser encounters malformed HTML, it automatically corrects it when making the DOM.&lt;/p&gt;
&lt;p&gt;For instance, the top tag is always &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;. Even if it doesn&amp;rsquo;t exist in the document, it will exist in the DOM, because the browser will create it. The same goes for &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As an example, if the HTML file is the single word &lt;code&gt;&amp;quot;Hello&amp;quot;&lt;/code&gt;, the browser will wrap it into &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;, and add the required &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;, and the DOM will be:&lt;/p&gt;
&lt;div class=&#34;domtree&#34;&gt;&lt;/div&gt;
&lt;script&gt;
let node3 = {&#34;name&#34;:&#34;HTML&#34;,&#34;nodeType&#34;:1,&#34;children&#34;:[{&#34;name&#34;:&#34;HEAD&#34;,&#34;nodeType&#34;:1,&#34;children&#34;:[]},{&#34;name&#34;:&#34;BODY&#34;,&#34;nodeType&#34;:1,&#34;children&#34;:[{&#34;name&#34;:&#34;#text&#34;,&#34;nodeType&#34;:3,&#34;content&#34;:&#34;Hello&#34;}]}]}

drawHtmlTree(node3, &#39;div.domtree&#39;, 690, 150);
&lt;/script&gt;
&lt;p&gt;While generating the DOM, browsers automatically process errors in the document, close tags and so on.&lt;/p&gt;
&lt;p&gt;A document with unclosed tags:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;Hello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;Mom
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;and
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;Dad
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;hellip;will become a normal DOM as the browser reads tags and restores the missing parts:&lt;/p&gt;
&lt;div class=&#34;domtree&#34;&gt;&lt;/div&gt;
&lt;script&gt;
let node4 = {&#34;name&#34;:&#34;HTML&#34;,&#34;nodeType&#34;:1,&#34;children&#34;:[{&#34;name&#34;:&#34;HEAD&#34;,&#34;nodeType&#34;:1,&#34;children&#34;:[]},{&#34;name&#34;:&#34;BODY&#34;,&#34;nodeType&#34;:1,&#34;children&#34;:[{&#34;name&#34;:&#34;P&#34;,&#34;nodeType&#34;:1,&#34;children&#34;:[{&#34;name&#34;:&#34;#text&#34;,&#34;nodeType&#34;:3,&#34;content&#34;:&#34;Hello&#34;}]},{&#34;name&#34;:&#34;LI&#34;,&#34;nodeType&#34;:1,&#34;children&#34;:[{&#34;name&#34;:&#34;#text&#34;,&#34;nodeType&#34;:3,&#34;content&#34;:&#34;Mom&#34;}]},{&#34;name&#34;:&#34;LI&#34;,&#34;nodeType&#34;:1,&#34;children&#34;:[{&#34;name&#34;:&#34;#text&#34;,&#34;nodeType&#34;:3,&#34;content&#34;:&#34;and&#34;}]},{&#34;name&#34;:&#34;LI&#34;,&#34;nodeType&#34;:1,&#34;children&#34;:[{&#34;name&#34;:&#34;#text&#34;,&#34;nodeType&#34;:3,&#34;content&#34;:&#34;Dad&#34;}]}]}]}

drawHtmlTree(node4, &#39;div.domtree&#39;, 690, 360);
&lt;/script&gt;
&lt;p&gt;An interesting &amp;ldquo;special case&amp;rdquo; is tables. By the DOM specification they must have &lt;code&gt;&amp;lt;tbody&amp;gt;&lt;/code&gt;, but HTML text may (officially) omit it. Then the browser creates &lt;code&gt;&amp;lt;tbody&amp;gt;&lt;/code&gt; in the DOM automatically.&lt;/p&gt;
&lt;p&gt;For the HTML:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;table&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;table&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;1&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;table&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;DOM-structure will be:&lt;/p&gt;
&lt;div class=&#34;domtree&#34;&gt;&lt;/div&gt;
&lt;script&gt;
let node5 = {&#34;name&#34;:&#34;TABLE&#34;,&#34;nodeType&#34;:1,&#34;children&#34;:[{&#34;name&#34;:&#34;TBODY&#34;,&#34;nodeType&#34;:1,&#34;children&#34;:[{&#34;name&#34;:&#34;TR&#34;,&#34;nodeType&#34;:1,&#34;children&#34;:[{&#34;name&#34;:&#34;TD&#34;,&#34;nodeType&#34;:1,&#34;children&#34;:[{&#34;name&#34;:&#34;#text&#34;,&#34;nodeType&#34;:3,&#34;content&#34;:&#34;1&#34;}]}]}]}]};

drawHtmlTree(node5,  &#39;div.domtree&#39;, 600, 200);
&lt;/script&gt;
&lt;p&gt;You see? The &lt;code&gt;&amp;lt;tbody&amp;gt;&lt;/code&gt; appeared out of nowhere. You should keep this in mind while working with tables to avoid surprises.&lt;/p&gt;
&lt;h3 id=&#34;other-node-types&#34;&gt;Other node types&lt;/h3&gt;
&lt;p&gt;There are some other node types besides elements and text nodes.&lt;/p&gt;
&lt;p&gt;For example, comments:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;!DOCTYPE HTML&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  The truth about elk.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;ol&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;An elk is a smart&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!-- comment --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;...and cunning animal!&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;ol&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;domtree&#34;&gt;&lt;/div&gt;
&lt;script&gt;
let node6 = {&#34;name&#34;:&#34;HTML&#34;,&#34;nodeType&#34;:1,&#34;children&#34;:[{&#34;name&#34;:&#34;HEAD&#34;,&#34;nodeType&#34;:1,&#34;children&#34;:[]},{&#34;name&#34;:&#34;BODY&#34;,&#34;nodeType&#34;:1,&#34;children&#34;:[{&#34;name&#34;:&#34;#text&#34;,&#34;nodeType&#34;:3,&#34;content&#34;:&#34;\n  The truth about elk.\n    &#34;},{&#34;name&#34;:&#34;OL&#34;,&#34;nodeType&#34;:1,&#34;children&#34;:[{&#34;name&#34;:&#34;#text&#34;,&#34;nodeType&#34;:3,&#34;content&#34;:&#34;\n      &#34;},{&#34;name&#34;:&#34;LI&#34;,&#34;nodeType&#34;:1,&#34;children&#34;:[{&#34;name&#34;:&#34;#text&#34;,&#34;nodeType&#34;:3,&#34;content&#34;:&#34;An elk is a smart&#34;}]},{&#34;name&#34;:&#34;#text&#34;,&#34;nodeType&#34;:3,&#34;content&#34;:&#34;\n      &#34;},{&#34;name&#34;:&#34;#comment&#34;,&#34;nodeType&#34;:8,&#34;content&#34;:&#34;comment&#34;},{&#34;name&#34;:&#34;#text&#34;,&#34;nodeType&#34;:3,&#34;content&#34;:&#34;\n      &#34;},{&#34;name&#34;:&#34;LI&#34;,&#34;nodeType&#34;:1,&#34;children&#34;:[{&#34;name&#34;:&#34;#text&#34;,&#34;nodeType&#34;:3,&#34;content&#34;:&#34;...and cunning animal!&#34;}]},{&#34;name&#34;:&#34;#text&#34;,&#34;nodeType&#34;:3,&#34;content&#34;:&#34;\n    &#34;}]},{&#34;name&#34;:&#34;#text&#34;,&#34;nodeType&#34;:3,&#34;content&#34;:&#34;\n  \n&#34;}]}]};

drawHtmlTree(node6, &#39;div.domtree&#39;, 690, 500);
&lt;/script&gt;
&lt;p&gt;We can see here a new tree node type &amp;ndash; &lt;em&gt;comment node&lt;/em&gt;, labeled as &lt;code&gt;#comment&lt;/code&gt;, between two text nodes.&lt;/p&gt;
&lt;p&gt;We may think &amp;ndash; why is a comment added to the DOM? It doesn&amp;rsquo;t affect the visual representation in any way. But there&amp;rsquo;s a rule &amp;ndash; if something&amp;rsquo;s in HTML, then it also must be in the DOM tree.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Everything in HTML, even comments, becomes a part of the DOM.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Even the &lt;code&gt;&amp;lt;!DOCTYPE...&amp;gt;&lt;/code&gt; directive at the very beginning of HTML is also a DOM node. It&amp;rsquo;s in the DOM tree right before &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;. We are not going to touch that node, we even don&amp;rsquo;t draw it on diagrams for that reason, but it&amp;rsquo;s there.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;document&lt;/code&gt; object that represents the whole document is, formally, a DOM node as well.&lt;/p&gt;
&lt;p&gt;There are &lt;a href=&#34;https://dom.spec.whatwg.org/#node&#34;&gt;12 node types&lt;/a&gt;. In practice we usually work with 4 of them:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;document&lt;/code&gt; &amp;ndash; the &amp;ldquo;entry point&amp;rdquo; into DOM.&lt;/li&gt;
&lt;li&gt;element nodes &amp;ndash; HTML-tags, the tree building blocks.&lt;/li&gt;
&lt;li&gt;text nodes &amp;ndash; contain text.&lt;/li&gt;
&lt;li&gt;comments &amp;ndash; sometimes we can put information there, it won&amp;rsquo;t be shown, but JS can read it from the DOM.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;see-it-for-yourself&#34;&gt;See it for yourself&lt;/h3&gt;
&lt;p&gt;To see the DOM structure in real-time, try &lt;a href=&#34;http://software.hixie.ch/utilities/js/live-dom-viewer/&#34;&gt;Live DOM Viewer&lt;/a&gt;. Just type in the document, and it will show up as a DOM at an instant.&lt;/p&gt;
&lt;p&gt;Another way to explore the DOM is to use the browser developer tools. Actually, that&amp;rsquo;s what we use when developing.&lt;/p&gt;
&lt;p&gt;To do so, open the web page &lt;a href=&#34;elk.html&#34;&gt;elk.html&lt;/a&gt;, turn on the browser developer tools and switch to the Elements tab.&lt;/p&gt;
&lt;p&gt;It should look like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;elk.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;You can see the DOM, click on elements, see their details and so on.&lt;/p&gt;
&lt;p&gt;Please note that the DOM structure in developer tools is simplified. Text nodes are shown just as text. And there are no &amp;ldquo;blank&amp;rdquo; (space only) text nodes at all. That&amp;rsquo;s fine, because most of the time we are interested in element nodes.&lt;/p&gt;
&lt;p&gt;Clicking the &lt;span class=&#34;devtools&#34; style=&#34;background-position:-328px -124px&#34;&gt;&lt;/span&gt; button in the left-upper corner allows us to choose a node from the webpage using a mouse (or other pointer devices) and &amp;ldquo;inspect&amp;rdquo; it (scroll to it in the Elements tab). This works great when we have a huge HTML page (and corresponding huge DOM) and would like to see the place of a particular element in it.&lt;/p&gt;
&lt;p&gt;Another way to do it would be just right-clicking on a webpage and selecting &amp;ldquo;Inspect&amp;rdquo; in the context menu.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;inspect.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;At the right part of the tools there are the following subtabs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Styles&lt;/strong&gt; &amp;ndash; we can see CSS applied to the current element rule by rule, including built-in rules (gray). Almost everything can be edited in-place, including the dimensions/margins/paddings of the box below.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Computed&lt;/strong&gt; &amp;ndash; to see CSS applied to the element by property: for each property we can see a rule that gives it (including CSS inheritance and such).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Event Listeners&lt;/strong&gt; &amp;ndash; to see event listeners attached to DOM elements (we&amp;rsquo;ll cover them in the next part of the tutorial).&lt;/li&gt;
&lt;li&gt;&amp;hellip;and so on.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The best way to study them is to click around. Most values are editable in-place.&lt;/p&gt;
&lt;h3 id=&#34;interaction-with-console&#34;&gt;Interaction with console&lt;/h3&gt;
&lt;p&gt;As we work the DOM, we also may want to apply JavaScript to it. Like: get a node and run some code to modify it, to see the result. Here are few tips to travel between the Elements tab and the console.&lt;/p&gt;
&lt;p&gt;For the start:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Select the first &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; in the Elements tab.&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;key:Esc&lt;/code&gt; &amp;ndash; it will open console right below the Elements tab.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now the last selected element is available as &lt;code&gt;$0&lt;/code&gt;, the previously selected is &lt;code&gt;$1&lt;/code&gt; etc.&lt;/p&gt;
&lt;p&gt;We can run commands on them. For instance, &lt;code&gt;$0.style.background = &#39;red&#39;&lt;/code&gt; makes the selected list item red, like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;domconsole0.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s how to get a node from Elements in Console.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s also a road back. If there&amp;rsquo;s a variable referencing a DOM node, then we can use the command &lt;code&gt;inspect(node)&lt;/code&gt; in Console to see it in the Elements pane.&lt;/p&gt;
&lt;p&gt;Or we can just output the DOM node in the console and explore &amp;ldquo;in-place&amp;rdquo;, like &lt;code&gt;document.body&lt;/code&gt; below:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;domconsole1.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s for debugging purposes of course. From the next chapter on we&amp;rsquo;ll access and modify DOM using JavaScript.&lt;/p&gt;
&lt;p&gt;The browser developer tools are a great help in development: we can explore the DOM, try things and see what goes wrong.&lt;/p&gt;
&lt;h3 id=&#34;summary-1&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;An HTML/XML document is represented inside the browser as the DOM tree.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tags become element nodes and form the structure.&lt;/li&gt;
&lt;li&gt;Text becomes text nodes.&lt;/li&gt;
&lt;li&gt;&amp;hellip;etc, everything in HTML has its place in DOM, even comments.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can use developer tools to inspect DOM and modify it manually.&lt;/p&gt;
&lt;p&gt;Here we covered the basics, the most used and important actions to start with. There&amp;rsquo;s an extensive documentation about Chrome Developer Tools at &lt;a href=&#34;https://developers.google.com/web/tools/chrome-devtools&#34;&gt;https://developers.google.com/web/tools/chrome-devtools&lt;/a&gt;. The best way to learn the tools is to click here and there, read menus: most options are obvious. Later, when you know them in general, read the docs and pick up the rest.&lt;/p&gt;
&lt;p&gt;DOM nodes have properties and methods that allow us to travel between them, modify them, move around the page, and more. We&amp;rsquo;ll get down to them in the next chapters.&lt;/p&gt;
&lt;p&gt;libs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;d3&lt;/li&gt;
&lt;li&gt;domtree&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;walking-the-dom&#34;&gt;Walking the DOM&lt;/h2&gt;
&lt;p&gt;The DOM allows us to do anything with elements and their contents, but first we need to reach the corresponding DOM object.&lt;/p&gt;
&lt;p&gt;All operations on the DOM start with the &lt;code&gt;document&lt;/code&gt; object. That&amp;rsquo;s the main &amp;ldquo;entry point&amp;rdquo; to DOM. From it we can access any node.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a picture of links that allow for travel between DOM nodes:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;dom-links.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s discuss them in more detail.&lt;/p&gt;
&lt;h3 id=&#34;on-top-documentelement-and-body&#34;&gt;On top: documentElement and body&lt;/h3&gt;
&lt;p&gt;The topmost tree nodes are available directly as &lt;code&gt;document&lt;/code&gt; properties:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; = &lt;code&gt;document.documentElement&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;The topmost document node is &lt;code&gt;document.documentElement&lt;/code&gt;. That&amp;rsquo;s the DOM node of the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; tag.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; = &lt;code&gt;document.body&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Another widely used DOM node is the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; element &amp;ndash; &lt;code&gt;document.body&lt;/code&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; = &lt;code&gt;document.head&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;The &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag is available as &lt;code&gt;document.head&lt;/code&gt;.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;A script cannot access an element that doesn&amp;rsquo;t exist at the moment of running.&lt;/p&gt;
&lt;p&gt;In particular, if a script is inside &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;, then &lt;code&gt;document.body&lt;/code&gt; is unavailable, because the browser did not read it yet.&lt;/p&gt;
&lt;p&gt;So, in the example below the first &lt;code&gt;alert&lt;/code&gt; shows &lt;code&gt;null&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;head&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;From HEAD: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body ); &lt;span style=&#34;color:#6272a4&#34;&gt;// null, there&amp;#39;s no &amp;lt;body&amp;gt; yet
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;head&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;From BODY: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body ); &lt;span style=&#34;color:#6272a4&#34;&gt;// HTMLBodyElement, now it exists
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the DOM, the &lt;code&gt;null&lt;/code&gt; value means &amp;ldquo;doesn&amp;rsquo;t exist&amp;rdquo; or &amp;ldquo;no such node&amp;rdquo;.&lt;/p&gt;
&lt;h3 id=&#34;children-childnodes-firstchild-lastchild&#34;&gt;Children: childNodes, firstChild, lastChild&lt;/h3&gt;
&lt;p&gt;There are two terms that we&amp;rsquo;ll use from now on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Child nodes (or children)&lt;/strong&gt; &amp;ndash; elements that are direct children. In other words, they are nested exactly in the given one. For instance, &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; are children of &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; element.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Descendants&lt;/strong&gt; &amp;ndash; all elements that are nested in the given one, including children, their children and so on.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For instance, here &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; has children &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; (and few blank text nodes):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;Begin&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;ul&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;b&lt;/span&gt;&amp;gt;Information&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;b&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;ul&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;hellip;And descendants of &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; are not only direct children &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; but also more deeply nested elements, such as &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; (a child of &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;) and &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt; (a child of &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;) &amp;ndash; the entire subtree.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The &lt;code&gt;childNodes&lt;/code&gt; collection lists all child nodes, including text nodes.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The example below shows children of &lt;code&gt;document.body&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;Begin&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;ul&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;Information&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;ul&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;End&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.childNodes.length; i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      alert( &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.childNodes[i] ); &lt;span style=&#34;color:#6272a4&#34;&gt;// Text, DIV, Text, UL, ..., SCRIPT
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ...more stuff...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Please note an interesting detail here. If we run the example above, the last element shown is &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;. In fact, the document has more stuff below, but at the moment of the script execution the browser did not read it yet, so the script doesn&amp;rsquo;t see it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Properties &lt;code&gt;firstChild&lt;/code&gt; and &lt;code&gt;lastChild&lt;/code&gt; give fast access to the first and last children.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;They are just shorthands. If there exist child nodes, then the following is always true:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;elem.childNodes[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#ff79c6&#34;&gt;===&lt;/span&gt; elem.firstChild
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;elem.childNodes[elem.childNodes.length &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;] &lt;span style=&#34;color:#ff79c6&#34;&gt;===&lt;/span&gt; elem.lastChild
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There&amp;rsquo;s also a special function &lt;code&gt;elem.hasChildNodes()&lt;/code&gt; to check whether there are any child nodes.&lt;/p&gt;
&lt;h4 id=&#34;dom-collections&#34;&gt;DOM collections&lt;/h4&gt;
&lt;p&gt;As we can see, &lt;code&gt;childNodes&lt;/code&gt; looks like an array. But actually it&amp;rsquo;s not an array, but rather a &lt;em&gt;collection&lt;/em&gt; &amp;ndash; a special array-like iterable object.&lt;/p&gt;
&lt;p&gt;There are two important consequences:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We can use &lt;code&gt;for..of&lt;/code&gt; to iterate over it:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; node &lt;span style=&#34;color:#ff79c6&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.childNodes) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(node); &lt;span style=&#34;color:#6272a4&#34;&gt;// shows all nodes from the collection
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s because it&amp;rsquo;s iterable (provides the &lt;code&gt;Symbol.iterator&lt;/code&gt; property, as required).&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Array methods won&amp;rsquo;t work, because it&amp;rsquo;s not an array:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.childNodes.filter); &lt;span style=&#34;color:#6272a4&#34;&gt;// undefined (there&amp;#39;s no filter method!)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The first thing is nice. The second is tolerable, because we can use &lt;code&gt;Array.from&lt;/code&gt; to create a &amp;ldquo;real&amp;rdquo; array from the collection, if we want array methods:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Array&lt;/span&gt;.from(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.childNodes).filter ); &lt;span style=&#34;color:#6272a4&#34;&gt;// function
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;DOM collections, and even more &amp;ndash; &lt;em&gt;all&lt;/em&gt; navigation properties listed in this chapter are read-only.&lt;/p&gt;
&lt;p&gt;We can&amp;rsquo;t replace a child by something else by assigning &lt;code&gt;childNodes[i] = ...&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Changing DOM needs other methods. We will see them in the next chapter.&lt;/p&gt;
&lt;p&gt;Almost all DOM collections with minor exceptions are &lt;em&gt;live&lt;/em&gt;. In other words, they reflect the current state of DOM.&lt;/p&gt;
&lt;p&gt;If we keep a reference to &lt;code&gt;elem.childNodes&lt;/code&gt;, and add/remove nodes into DOM, then they appear in the collection automatically.&lt;/p&gt;
&lt;p&gt;Collections are iterable using &lt;code&gt;for..of&lt;/code&gt;. Sometimes people try to use &lt;code&gt;for..in&lt;/code&gt; for that.&lt;/p&gt;
&lt;p&gt;Please, don&amp;rsquo;t. The &lt;code&gt;for..in&lt;/code&gt; loop iterates over all enumerable properties. And collections have some &amp;ldquo;extra&amp;rdquo; rarely used properties that we usually do not want to get:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// shows 0, 1, length, item, values and more.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; prop &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.childNodes) alert(prop);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;siblings-and-the-parent&#34;&gt;Siblings and the parent&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Siblings&lt;/em&gt; are nodes that are children of the same parent.&lt;/p&gt;
&lt;p&gt;For instance, here &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; are siblings:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;head&lt;/span&gt;&amp;gt;...&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;head&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;...&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; is said to be the &amp;ldquo;next&amp;rdquo; or &amp;ldquo;right&amp;rdquo; sibling of &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; is said to be the &amp;ldquo;previous&amp;rdquo; or &amp;ldquo;left&amp;rdquo; sibling of &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The next sibling is in &lt;code&gt;nextSibling&lt;/code&gt; property, and the previous one - in &lt;code&gt;previousSibling&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The parent is available as &lt;code&gt;parentNode&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// parent of &amp;lt;body&amp;gt; is &amp;lt;html&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.parentNode &lt;span style=&#34;color:#ff79c6&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.documentElement ); &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// after &amp;lt;head&amp;gt; goes &amp;lt;body&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.head.nextSibling ); &lt;span style=&#34;color:#6272a4&#34;&gt;// HTMLBodyElement
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// before &amp;lt;body&amp;gt; goes &amp;lt;head&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.previousSibling ); &lt;span style=&#34;color:#6272a4&#34;&gt;// HTMLHeadElement
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;element-only-navigation&#34;&gt;Element-only navigation&lt;/h3&gt;
&lt;p&gt;Navigation properties listed above refer to &lt;em&gt;all&lt;/em&gt; nodes. For instance, in &lt;code&gt;childNodes&lt;/code&gt; we can see both text nodes, element nodes, and even comment nodes if there exist.&lt;/p&gt;
&lt;p&gt;But for many tasks we don&amp;rsquo;t want text or comment nodes. We want to manipulate element nodes that represent tags and form the structure of the page.&lt;/p&gt;
&lt;p&gt;So let&amp;rsquo;s see more navigation links that only take &lt;em&gt;element nodes&lt;/em&gt; into account:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;dom-links-elements.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The links are similar to those given above, just with &lt;code&gt;Element&lt;/code&gt; word inside:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;children&lt;/code&gt; &amp;ndash; only those children that are element nodes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;firstElementChild&lt;/code&gt;, &lt;code&gt;lastElementChild&lt;/code&gt; &amp;ndash; first and last element children.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;previousElementSibling&lt;/code&gt;, &lt;code&gt;nextElementSibling&lt;/code&gt; &amp;ndash; neighbor elements.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;parentElement&lt;/code&gt; &amp;ndash; parent element.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;parentElement&lt;/code&gt; property returns the &amp;ldquo;element&amp;rdquo; parent, while &lt;code&gt;parentNode&lt;/code&gt; returns &amp;ldquo;any node&amp;rdquo; parent. These properties are usually the same: they both get the parent.&lt;/p&gt;
&lt;p&gt;With the one exception of &lt;code&gt;document.documentElement&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.documentElement.parentNode ); &lt;span style=&#34;color:#6272a4&#34;&gt;// document
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.documentElement.parentElement ); &lt;span style=&#34;color:#6272a4&#34;&gt;// null
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The reason is that the root node &lt;code&gt;document.documentElement&lt;/code&gt; (&lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;) has &lt;code&gt;document&lt;/code&gt; as its parent. But &lt;code&gt;document&lt;/code&gt; is not an element node, so &lt;code&gt;parentNode&lt;/code&gt; returns it and &lt;code&gt;parentElement&lt;/code&gt; does not.&lt;/p&gt;
&lt;p&gt;This detail may be useful when we want to travel up from an arbitrary element &lt;code&gt;elem&lt;/code&gt; to &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;, but not to the &lt;code&gt;document&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;while&lt;/span&gt;(elem &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; elem.parentElement) { &lt;span style=&#34;color:#6272a4&#34;&gt;// go up till &amp;lt;html&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  alert( elem );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s modify one of the examples above: replace &lt;code&gt;childNodes&lt;/code&gt; with &lt;code&gt;children&lt;/code&gt;. Now it shows only elements:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;Begin&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;ul&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;Information&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;ul&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;End&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; elem &lt;span style=&#34;color:#ff79c6&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.children) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      alert(elem); &lt;span style=&#34;color:#6272a4&#34;&gt;// DIV, UL, DIV, SCRIPT
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;more-links-tables-dom-navigation-tables&#34;&gt;More links: tables [#dom-navigation-tables]&lt;/h3&gt;
&lt;p&gt;Till now we described the basic navigation properties.&lt;/p&gt;
&lt;p&gt;Certain types of DOM elements may provide additional properties, specific to their type, for convenience.&lt;/p&gt;
&lt;p&gt;Tables are a great example of that, and represent a particularly important case:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;&lt;/strong&gt; element supports (in addition to the given above) these properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;table.rows&lt;/code&gt; &amp;ndash; the collection of &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; elements of the table.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;table.caption/tHead/tFoot&lt;/code&gt; &amp;ndash; references to elements &lt;code&gt;&amp;lt;caption&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;thead&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;tfoot&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;table.tBodies&lt;/code&gt; &amp;ndash; the collection of &lt;code&gt;&amp;lt;tbody&amp;gt;&lt;/code&gt; elements (can be many according to the standard, but there will always be at least one &amp;ndash; even if it is not in the source HTML, the browser will put it in the DOM).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;&amp;lt;thead&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;tfoot&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;tbody&amp;gt;&lt;/code&gt;&lt;/strong&gt; elements provide the &lt;code&gt;rows&lt;/code&gt; property:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tbody.rows&lt;/code&gt; &amp;ndash; the collection of &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; inside.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tr.cells&lt;/code&gt; &amp;ndash; the collection of &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;th&amp;gt;&lt;/code&gt; cells inside the given &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tr.sectionRowIndex&lt;/code&gt; &amp;ndash; the position (index) of the given &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; inside the enclosing &lt;code&gt;&amp;lt;thead&amp;gt;/&amp;lt;tbody&amp;gt;/&amp;lt;tfoot&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tr.rowIndex&lt;/code&gt; &amp;ndash; the number of the &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; in the table as a whole (including all table rows).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;th&amp;gt;&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;td.cellIndex&lt;/code&gt; &amp;ndash; the number of the cell inside the enclosing &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An example of usage:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;table&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;table&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;one&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;two&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;three&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;four&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;table&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// get td with &amp;#34;two&amp;#34; (first row, second column)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; td &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; table.rows[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;].cells[&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  td.style.backgroundColor &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;red&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// highlight it
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The specification: &lt;a href=&#34;https://html.spec.whatwg.org/multipage/tables.html&#34;&gt;tabular data&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are also additional navigation properties for HTML forms. We&amp;rsquo;ll look at them later when we start working with forms.&lt;/p&gt;
&lt;h3 id=&#34;summary-2&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;Given a DOM node, we can go to its immediate neighbors using navigation properties.&lt;/p&gt;
&lt;p&gt;There are two main sets of them:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For all nodes: &lt;code&gt;parentNode&lt;/code&gt;, &lt;code&gt;childNodes&lt;/code&gt;, &lt;code&gt;firstChild&lt;/code&gt;, &lt;code&gt;lastChild&lt;/code&gt;, &lt;code&gt;previousSibling&lt;/code&gt;, &lt;code&gt;nextSibling&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;For element nodes only: &lt;code&gt;parentElement&lt;/code&gt;, &lt;code&gt;children&lt;/code&gt;, &lt;code&gt;firstElementChild&lt;/code&gt;, &lt;code&gt;lastElementChild&lt;/code&gt;, &lt;code&gt;previousElementSibling&lt;/code&gt;, &lt;code&gt;nextElementSibling&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some types of DOM elements, e.g. tables, provide additional properties and collections to access their content.&lt;/p&gt;
&lt;h2 id=&#34;searching-getelement-queryselector&#34;&gt;Searching: getElement*, querySelector*&lt;/h2&gt;
&lt;p&gt;DOM navigation properties are great when elements are close to each other. What if they are not? How to get an arbitrary element of the page?&lt;/p&gt;
&lt;p&gt;There are additional searching methods for that.&lt;/p&gt;
&lt;h3 id=&#34;documentgetelementbyid-or-just-id&#34;&gt;document.getElementById or just id&lt;/h3&gt;
&lt;p&gt;If an element has the &lt;code&gt;id&lt;/code&gt; attribute, we can get the element using the method &lt;code&gt;document.getElementById(id)&lt;/code&gt;, no matter where it is.&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;elem&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;elem-content&amp;#34;&lt;/span&gt;&amp;gt;Element&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// get the element
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; elem &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;elem&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// make its background red
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  elem.style.background &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;red&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Also, there&amp;rsquo;s a global variable named by &lt;code&gt;id&lt;/code&gt; that references the element:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;elem&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;elem-content&amp;#34;&lt;/span&gt;&amp;gt;Element&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// elem is a reference to DOM-element with id=&amp;#34;elem&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  elem.style.background &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;red&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// id=&amp;#34;elem-content&amp;#34; has a hyphen inside, so it can&amp;#39;t be a variable name
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// ...but we can access it using square brackets: window[&amp;#39;elem-content&amp;#39;]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;hellip;That&amp;rsquo;s unless we declare a JavaScript variable with the same name, then it takes precedence:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;elem&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; elem &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// now elem is 5, not a reference to &amp;lt;div id=&amp;#34;elem&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(elem); &lt;span style=&#34;color:#6272a4&#34;&gt;// 5
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This behavior is described &lt;a href=&#34;http://www.whatwg.org/specs/web-apps/current-work/#dom-window-nameditem&#34;&gt;in the specification&lt;/a&gt;, so it&amp;rsquo;s kind of standard. But it is supported mainly for compatibility.&lt;/p&gt;
&lt;p&gt;The browser tries to help us by mixing namespaces of JS and DOM. That&amp;rsquo;s fine for simple scripts, inlined into HTML, but generally isn&amp;rsquo;t a good thing. There may be naming conflicts. Also, when one reads JS code and doesn&amp;rsquo;t have HTML in view, it&amp;rsquo;s not obvious where the variable comes from.&lt;/p&gt;
&lt;p&gt;Here in the tutorial we use &lt;code&gt;id&lt;/code&gt; to directly reference an element for brevity, when it&amp;rsquo;s obvious where the element comes from.&lt;/p&gt;
&lt;p&gt;In real life &lt;code&gt;document.getElementById&lt;/code&gt; is the preferred method.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;id&lt;/code&gt; must be unique. There can be only one element in the document with the given &lt;code&gt;id&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If there are multiple elements with the same &lt;code&gt;id&lt;/code&gt;, then the behavior of methods that use it is unpredictable, e.g. &lt;code&gt;document.getElementById&lt;/code&gt; may return any of such elements at random. So please stick to the rule and keep &lt;code&gt;id&lt;/code&gt; unique.&lt;/p&gt;
&lt;p&gt;The method &lt;code&gt;getElementById&lt;/code&gt; that can be called only on &lt;code&gt;document&lt;/code&gt; object. It looks for the given &lt;code&gt;id&lt;/code&gt; in the whole document.&lt;/p&gt;
&lt;h3 id=&#34;queryselectorall-queryselectorall&#34;&gt;querySelectorAll [#querySelectorAll]&lt;/h3&gt;
&lt;p&gt;By far, the most versatile method, &lt;code&gt;elem.querySelectorAll(css)&lt;/code&gt; returns all elements inside &lt;code&gt;elem&lt;/code&gt; matching the given CSS selector.&lt;/p&gt;
&lt;p&gt;Here we look for all &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; elements that are last children:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;ul&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;The&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;test&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;ul&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;ul&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;has&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;passed&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;ul&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; elements &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.querySelectorAll(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;ul &amp;gt; li:last-child&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; elem &lt;span style=&#34;color:#ff79c6&#34;&gt;of&lt;/span&gt; elements) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(elem.innerHTML); &lt;span style=&#34;color:#6272a4&#34;&gt;// &amp;#34;test&amp;#34;, &amp;#34;passed&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This method is indeed powerful, because any CSS selector can be used.&lt;/p&gt;
&lt;p&gt;Pseudo-classes in the CSS selector like &lt;code&gt;:hover&lt;/code&gt; and &lt;code&gt;:active&lt;/code&gt; are also supported. For instance, &lt;code&gt;document.querySelectorAll(&#39;:hover&#39;)&lt;/code&gt; will return the collection with elements that the pointer is over now (in nesting order: from the outermost &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; to the most nested one).&lt;/p&gt;
&lt;h3 id=&#34;queryselector-queryselector&#34;&gt;querySelector [#querySelector]&lt;/h3&gt;
&lt;p&gt;The call to &lt;code&gt;elem.querySelector(css)&lt;/code&gt; returns the first element for the given CSS selector.&lt;/p&gt;
&lt;p&gt;In other words, the result is the same as &lt;code&gt;elem.querySelectorAll(css)[0]&lt;/code&gt;, but the latter is looking for &lt;em&gt;all&lt;/em&gt; elements and picking one, while &lt;code&gt;elem.querySelector&lt;/code&gt; just looks for one. So it&amp;rsquo;s faster and also shorter to write.&lt;/p&gt;
&lt;h3 id=&#34;matches&#34;&gt;matches&lt;/h3&gt;
&lt;p&gt;Previous methods were searching the DOM.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;http://dom.spec.whatwg.org/#dom-element-matches&#34;&gt;elem.matches(css)&lt;/a&gt; does not look for anything, it merely checks if &lt;code&gt;elem&lt;/code&gt; matches the given CSS-selector. It returns &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The method comes in handy when we are iterating over elements (like in an array or something) and trying to filter out those that interest us.&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;http://example.com/file.zip&amp;#34;&lt;/span&gt;&amp;gt;...&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;http://ya.ru&amp;#34;&lt;/span&gt;&amp;gt;...&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// can be any collection instead of document.body.children
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; elem &lt;span style=&#34;color:#ff79c6&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.children) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (elem.matches(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;a[href$=&amp;#34;zip&amp;#34;]&amp;#39;&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;The archive reference: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; elem.href );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;closest&#34;&gt;closest&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Ancestors&lt;/em&gt; of an element are: parent, the parent of parent, its parent and so on. The ancestors together form the chain of parents from the element to the top.&lt;/p&gt;
&lt;p&gt;The method &lt;code&gt;elem.closest(css)&lt;/code&gt; looks the nearest ancestor that matches the CSS-selector. The &lt;code&gt;elem&lt;/code&gt; itself is also included in the search.&lt;/p&gt;
&lt;p&gt;In other words, the method &lt;code&gt;closest&lt;/code&gt; goes up from the element and checks each of parents. If it matches the selector, then the search stops, and the ancestor is returned.&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h1&lt;/span&gt;&amp;gt;Contents&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h1&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;contents&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;ul&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;book&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;chapter&amp;#34;&lt;/span&gt;&amp;gt;Chapter 1&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;chapter&amp;#34;&lt;/span&gt;&amp;gt;Chapter 1&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;ul&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; chapter &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.querySelector(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;.chapter&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#6272a4&#34;&gt;// LI
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(chapter.closest(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;.book&amp;#39;&lt;/span&gt;)); &lt;span style=&#34;color:#6272a4&#34;&gt;// UL
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  alert(chapter.closest(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;.contents&amp;#39;&lt;/span&gt;)); &lt;span style=&#34;color:#6272a4&#34;&gt;// DIV
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(chapter.closest(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;h1&amp;#39;&lt;/span&gt;)); &lt;span style=&#34;color:#6272a4&#34;&gt;// null (because h1 is not an ancestor)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;getelementsby&#34;&gt;getElementsBy*&lt;/h3&gt;
&lt;p&gt;There are also other methods to look for nodes by a tag, class, etc.&lt;/p&gt;
&lt;p&gt;Today, they are mostly history, as &lt;code&gt;querySelector&lt;/code&gt; is more powerful and shorter to write.&lt;/p&gt;
&lt;p&gt;So here we cover them mainly for completeness, while you can still find them in the old scripts.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;elem.getElementsByTagName(tag)&lt;/code&gt; looks for elements with the given tag and returns the collection of them. The &lt;code&gt;tag&lt;/code&gt; parameter can also be a star &lt;code&gt;&amp;quot;*&amp;quot;&lt;/code&gt; for &amp;ldquo;any tags&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elem.getElementsByClassName(className)&lt;/code&gt; returns elements that have the given CSS class.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.getElementsByName(name)&lt;/code&gt; returns elements with the given &lt;code&gt;name&lt;/code&gt; attribute, document-wide. Very rarely used.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// get all divs in the document
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; divs &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.getElementsByTagName(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;div&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s find all &lt;code&gt;input&lt;/code&gt; tags inside the table:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;table&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;table&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;Your age:&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;label&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;radio&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;age&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;young&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;checked&lt;/span&gt;&amp;gt; less than 18
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;label&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;label&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;radio&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;age&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;mature&amp;#34;&lt;/span&gt;&amp;gt; from 18 to 50
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;label&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;label&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;radio&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;age&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;senior&amp;#34;&lt;/span&gt;&amp;gt; more than 60
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;label&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;table&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; inputs &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; table.getElementsByTagName(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;input&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; input &lt;span style=&#34;color:#ff79c6&#34;&gt;of&lt;/span&gt; inputs) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert( input.value &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;: &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; input.checked );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Novice developers sometimes forget the letter &lt;code&gt;&amp;quot;s&amp;quot;&lt;/code&gt;. That is, they try to call &lt;code&gt;getElementByTagName&lt;/code&gt; instead of &lt;code&gt;getElement&lt;b&gt;s&lt;/b&gt;ByTagName&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;quot;s&amp;quot;&lt;/code&gt; letter is absent in &lt;code&gt;getElementById&lt;/code&gt;, because it returns a single element. But &lt;code&gt;getElementsByTagName&lt;/code&gt; returns a collection of elements, so there&amp;rsquo;s &lt;code&gt;&amp;quot;s&amp;quot;&lt;/code&gt; inside.&lt;/p&gt;
&lt;p&gt;Another widespread novice mistake is to write:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// doesn&amp;#39;t work
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.getElementsByTagName(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;input&amp;#39;&lt;/span&gt;).value &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That won&amp;rsquo;t work, because it takes a &lt;em&gt;collection&lt;/em&gt; of inputs and assigns the value to it rather than to elements inside it.&lt;/p&gt;
&lt;p&gt;We should either iterate over the collection or get an element by its index, and then assign, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// should work (if there&amp;#39;s an input)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.getElementsByTagName(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;input&amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;].value &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Looking for &lt;code&gt;.article&lt;/code&gt; elements:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;form&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;my-form&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;article&amp;#34;&lt;/span&gt;&amp;gt;Article&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;long article&amp;#34;&lt;/span&gt;&amp;gt;Long article&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;form&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// find by name attribute
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; form &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.getElementsByName(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;my-form&amp;#39;&lt;/span&gt;)[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// find by class inside the form
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; articles &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; form.getElementsByClassName(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;article&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(articles.length); &lt;span style=&#34;color:#6272a4&#34;&gt;// 2, found two elements with class &amp;#34;article&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;live-collections&#34;&gt;Live collections&lt;/h3&gt;
&lt;p&gt;All methods &lt;code&gt;&amp;quot;getElementsBy*&amp;quot;&lt;/code&gt; return a &lt;em&gt;live&lt;/em&gt; collection. Such collections always reflect the current state of the document and &amp;ldquo;auto-update&amp;rdquo; when it changes.&lt;/p&gt;
&lt;p&gt;In the example below, there are two scripts.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The first one creates a reference to the collection of &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;. As of now, its length is &lt;code&gt;1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The second scripts runs after the browser meets one more &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, so its length is &lt;code&gt;2&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;First div&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; divs &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.getElementsByTagName(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;div&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(divs.length); &lt;span style=&#34;color:#6272a4&#34;&gt;// 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;Second div&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(divs.length); &lt;span style=&#34;color:#6272a4&#34;&gt;// 2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In contrast, &lt;code&gt;querySelectorAll&lt;/code&gt; returns a &lt;em&gt;static&lt;/em&gt; collection. It&amp;rsquo;s like a fixed array of elements.&lt;/p&gt;
&lt;p&gt;If we use it instead, then both scripts output &lt;code&gt;1&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;First div&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; divs &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.querySelectorAll(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;div&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(divs.length); &lt;span style=&#34;color:#6272a4&#34;&gt;// 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;Second div&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(divs.length); &lt;span style=&#34;color:#6272a4&#34;&gt;// 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we can easily see the difference. The static collection did not increase after the appearance of a new &lt;code&gt;div&lt;/code&gt; in the document.&lt;/p&gt;
&lt;h3 id=&#34;summary-3&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;There are 6 main methods to search for nodes in DOM:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;td&gt;Method&lt;/td&gt;
&lt;td&gt;Searches by...&lt;/td&gt;
&lt;td&gt;Can call on an element?&lt;/td&gt;
&lt;td&gt;Live?&lt;/td&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;querySelector&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;CSS-selector&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;querySelectorAll&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;CSS-selector&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;getElementById&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;id&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;getElementsByName&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;getElementsByTagName&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;tag or &lt;code&gt;&#39;*&#39;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;getElementsByClassName&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;class&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;td&gt;✔&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;By far the most used are &lt;code&gt;querySelector&lt;/code&gt; and &lt;code&gt;querySelectorAll&lt;/code&gt;, but &lt;code&gt;getElementBy*&lt;/code&gt; can be sporadically helpful or found in the old scripts.&lt;/p&gt;
&lt;p&gt;Besides that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There is &lt;code&gt;elem.matches(css)&lt;/code&gt; to check if &lt;code&gt;elem&lt;/code&gt; matches the given CSS selector.&lt;/li&gt;
&lt;li&gt;There is &lt;code&gt;elem.closest(css)&lt;/code&gt; to look for the nearest ancestor that matches the given CSS-selector. The &lt;code&gt;elem&lt;/code&gt; itself is also checked.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And let&amp;rsquo;s mention one more method here to check for the child-parent relationship, as it&amp;rsquo;s sometimes useful:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;elemA.contains(elemB)&lt;/code&gt; returns true if &lt;code&gt;elemB&lt;/code&gt; is inside &lt;code&gt;elemA&lt;/code&gt; (a descendant of &lt;code&gt;elemA&lt;/code&gt;) or when &lt;code&gt;elemA==elemB&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;node-properties-type-tag-and-contents&#34;&gt;Node properties: type, tag and contents&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s get a more in-depth look at DOM nodes.&lt;/p&gt;
&lt;p&gt;In this chapter we&amp;rsquo;ll see more into what they are and learn their most used properties.&lt;/p&gt;
&lt;h3 id=&#34;dom-node-classes&#34;&gt;DOM node classes&lt;/h3&gt;
&lt;p&gt;Different DOM nodes may have different properties. For instance, an element node corresponding to tag &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; has link-related properties, and the one corresponding to &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; has input-related properties and so on. Text nodes are not the same as element nodes. But there are also common properties and methods between all of them, because all classes of DOM nodes form a single hierarchy.&lt;/p&gt;
&lt;p&gt;Each DOM node belongs to the corresponding built-in class.&lt;/p&gt;
&lt;p&gt;The root of the hierarchy is &lt;a href=&#34;https://dom.spec.whatwg.org/#eventtarget&#34;&gt;EventTarget&lt;/a&gt;, that is inherited by  &lt;a href=&#34;http://dom.spec.whatwg.org/#interface-node&#34;&gt;Node&lt;/a&gt;, and other DOM nodes inherit from it.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the picture, explanations to follow:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;dom-class-hierarchy.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;The classes are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dom.spec.whatwg.org/#eventtarget&#34;&gt;EventTarget&lt;/a&gt; &amp;ndash; is the root &amp;ldquo;abstract&amp;rdquo; class. Objects of that class are never created. It serves as a base, so that all DOM nodes support so-called &amp;ldquo;events&amp;rdquo;, we&amp;rsquo;ll study them later.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dom.spec.whatwg.org/#interface-node&#34;&gt;Node&lt;/a&gt; &amp;ndash; is also an &amp;ldquo;abstract&amp;rdquo; class, serving as a base  for DOM nodes. It provides the core tree functionality: &lt;code&gt;parentNode&lt;/code&gt;, &lt;code&gt;nextSibling&lt;/code&gt;, &lt;code&gt;childNodes&lt;/code&gt; and so on (they are getters). Objects of &lt;code&gt;Node&lt;/code&gt; class are never created. But there are concrete node classes that inherit from it, namely: &lt;code&gt;Text&lt;/code&gt; for text nodes, &lt;code&gt;Element&lt;/code&gt; for element nodes and more exotic ones like &lt;code&gt;Comment&lt;/code&gt; for comment nodes.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dom.spec.whatwg.org/#interface-element&#34;&gt;Element&lt;/a&gt; &amp;ndash; is a base class for DOM elements. It provides element-level navigation like &lt;code&gt;nextElementSibling&lt;/code&gt;, &lt;code&gt;children&lt;/code&gt; and searching methods like &lt;code&gt;getElementsByTagName&lt;/code&gt;, &lt;code&gt;querySelector&lt;/code&gt;. A browser supports not only HTML, but also XML and SVG. The &lt;code&gt;Element&lt;/code&gt; class serves as a base for more specific classes: &lt;code&gt;SVGElement&lt;/code&gt;, &lt;code&gt;XMLElement&lt;/code&gt; and &lt;code&gt;HTMLElement&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://html.spec.whatwg.org/multipage/dom.html#htmlelement&#34;&gt;HTMLElement&lt;/a&gt; &amp;ndash; is finally the basic class for all HTML elements. It is inherited by concrete HTML elements:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://html.spec.whatwg.org/multipage/forms.html#htmlinputelement&#34;&gt;HTMLInputElement&lt;/a&gt; &amp;ndash; the class for &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; elements,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://html.spec.whatwg.org/multipage/semantics.html#htmlbodyelement&#34;&gt;HTMLBodyElement&lt;/a&gt; &amp;ndash; the class for &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; elements,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://html.spec.whatwg.org/multipage/semantics.html#htmlanchorelement&#34;&gt;HTMLAnchorElement&lt;/a&gt; &amp;ndash; the class for &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; elements,&lt;/li&gt;
&lt;li&gt;&amp;hellip;and so on, each tag has its own class that may provide specific properties and methods.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, the full set of properties and methods of a given node comes as the result of the inheritance.&lt;/p&gt;
&lt;p&gt;For example, let&amp;rsquo;s consider the DOM object for an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; element. It belongs to &lt;a href=&#34;https://html.spec.whatwg.org/multipage/forms.html#htmlinputelement&#34;&gt;HTMLInputElement&lt;/a&gt; class.&lt;/p&gt;
&lt;p&gt;It gets properties and methods as a superposition of (listed in inheritance order):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HTMLInputElement&lt;/code&gt; &amp;ndash; this class provides input-specific properties,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HTMLElement&lt;/code&gt; &amp;ndash; it provides common HTML element methods (and getters/setters),&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Element&lt;/code&gt; &amp;ndash; provides generic element methods,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Node&lt;/code&gt; &amp;ndash; provides common DOM node properties,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EventTarget&lt;/code&gt; &amp;ndash; gives the support for events (to be covered),&lt;/li&gt;
&lt;li&gt;&amp;hellip;and finally it inherits from &lt;code&gt;Object&lt;/code&gt;, so &amp;ldquo;plain object&amp;rdquo; methods like &lt;code&gt;hasOwnProperty&lt;/code&gt; are also available.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To see the DOM node class name, we can recall that an object usually has the &lt;code&gt;constructor&lt;/code&gt; property. It references the class constructor, and &lt;code&gt;constructor.name&lt;/code&gt; is its name:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.constructor.name ); &lt;span style=&#34;color:#6272a4&#34;&gt;// HTMLBodyElement
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;hellip;Or we can just &lt;code&gt;toString&lt;/code&gt; it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body ); &lt;span style=&#34;color:#6272a4&#34;&gt;// [object HTMLBodyElement]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We also can use &lt;code&gt;instanceof&lt;/code&gt; to check the inheritance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body &lt;span style=&#34;color:#ff79c6&#34;&gt;instanceof&lt;/span&gt; HTMLBodyElement ); &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body &lt;span style=&#34;color:#ff79c6&#34;&gt;instanceof&lt;/span&gt; HTMLElement ); &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body &lt;span style=&#34;color:#ff79c6&#34;&gt;instanceof&lt;/span&gt; Element ); &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body &lt;span style=&#34;color:#ff79c6&#34;&gt;instanceof&lt;/span&gt; Node ); &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body &lt;span style=&#34;color:#ff79c6&#34;&gt;instanceof&lt;/span&gt; EventTarget ); &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As we can see, DOM nodes are regular JavaScript objects. They use prototype-based classes for inheritance.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s also easy to see by outputting an element with &lt;code&gt;console.dir(elem)&lt;/code&gt; in a browser. There in the console you can see &lt;code&gt;HTMLElement.prototype&lt;/code&gt;, &lt;code&gt;Element.prototype&lt;/code&gt; and so on.&lt;/p&gt;
&lt;p&gt;Most browsers support two commands in their developer tools: &lt;code&gt;console.log&lt;/code&gt; and &lt;code&gt;console.dir&lt;/code&gt;. They output their arguments to the console. For JavaScript objects these commands usually do the same.&lt;/p&gt;
&lt;p&gt;But for DOM elements they are different:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;console.log(elem)&lt;/code&gt; shows the element DOM tree.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;console.dir(elem)&lt;/code&gt; shows the element as a DOM object, good to explore its properties.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Try it on &lt;code&gt;document.body&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the specification, DOM classes aren&amp;rsquo;t described by using JavaScript, but a special &lt;a href=&#34;https://en.wikipedia.org/wiki/Interface_description_language&#34;&gt;Interface description language&lt;/a&gt; (IDL), that is usually easy to understand.&lt;/p&gt;
&lt;p&gt;In IDL all properties are prepended with their types. For instance, &lt;code&gt;DOMString&lt;/code&gt;, &lt;code&gt;boolean&lt;/code&gt; and so on.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s an excerpt from it, with comments:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Define HTMLInputElement
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// The colon &amp;#34;:&amp;#34; means that HTMLInputElement inherits from HTMLElement
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;interface&lt;/span&gt; HTMLInputElement&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; HTMLElement {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// here go properties and methods of &amp;lt;input&amp;gt; elements
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// &amp;#34;DOMString&amp;#34; means that the value of a property is a string
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  attribute DOMString accept;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  attribute DOMString alt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  attribute DOMString autocomplete;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  attribute DOMString value;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// boolean value property (true/false)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  attribute &lt;span style=&#34;color:#ff79c6&#34;&gt;boolean&lt;/span&gt; autofocus;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// now the method: &amp;#34;void&amp;#34; means that the method returns no value
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;void&lt;/span&gt; select();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;the-nodetype-property&#34;&gt;The &amp;ldquo;nodeType&amp;rdquo; property&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;nodeType&lt;/code&gt; property provides one more, &amp;ldquo;old-fashioned&amp;rdquo; way to get the &amp;ldquo;type&amp;rdquo; of a DOM node.&lt;/p&gt;
&lt;p&gt;It has a numeric value:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;elem.nodeType == 1&lt;/code&gt; for element nodes,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elem.nodeType == 3&lt;/code&gt; for text nodes,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elem.nodeType == 9&lt;/code&gt; for the document object,&lt;/li&gt;
&lt;li&gt;there are few other values in &lt;a href=&#34;https://dom.spec.whatwg.org/#node&#34;&gt;the specification&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; elem &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// let&amp;#39;s examine what it is?
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  alert(elem.nodeType); &lt;span style=&#34;color:#6272a4&#34;&gt;// 1 =&amp;gt; element
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// and the first child is...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  alert(elem.firstChild.nodeType); &lt;span style=&#34;color:#6272a4&#34;&gt;// 3 =&amp;gt; text
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// for the document object, the type is 9
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  alert( &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.nodeType ); &lt;span style=&#34;color:#6272a4&#34;&gt;// 9
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In modern scripts, we can use &lt;code&gt;instanceof&lt;/code&gt; and other class-based tests to see the node type, but sometimes &lt;code&gt;nodeType&lt;/code&gt; may be simpler. We can only read &lt;code&gt;nodeType&lt;/code&gt;, not change it.&lt;/p&gt;
&lt;h3 id=&#34;tag-nodename-and-tagname&#34;&gt;Tag: nodeName and tagName&lt;/h3&gt;
&lt;p&gt;Given a DOM node, we can read its tag name from &lt;code&gt;nodeName&lt;/code&gt; or &lt;code&gt;tagName&lt;/code&gt; properties:&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.nodeName ); &lt;span style=&#34;color:#6272a4&#34;&gt;// BODY
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.tagName ); &lt;span style=&#34;color:#6272a4&#34;&gt;// BODY
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Is there any difference between &lt;code&gt;tagName&lt;/code&gt; and &lt;code&gt;nodeName&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Sure, the difference is reflected in their names, but is indeed a bit subtle.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;tagName&lt;/code&gt; property exists only for &lt;code&gt;Element&lt;/code&gt; nodes.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;nodeName&lt;/code&gt; is defined for any &lt;code&gt;Node&lt;/code&gt;:
&lt;ul&gt;
&lt;li&gt;for elements it means the same as &lt;code&gt;tagName&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;for other node types (text, comment, etc.) it has a string with the node type.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In other words, &lt;code&gt;tagName&lt;/code&gt; is only supported by element nodes (as it originates from &lt;code&gt;Element&lt;/code&gt; class), while &lt;code&gt;nodeName&lt;/code&gt; can say something about other node types.&lt;/p&gt;
&lt;p&gt;For instance, let&amp;rsquo;s compare &lt;code&gt;tagName&lt;/code&gt; and &lt;code&gt;nodeName&lt;/code&gt; for the &lt;code&gt;document&lt;/code&gt; and a comment node:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!-- comment --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// for comment
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    alert( &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.firstChild.tagName ); &lt;span style=&#34;color:#6272a4&#34;&gt;// undefined (not an element)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    alert( &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.firstChild.nodeName ); &lt;span style=&#34;color:#6272a4&#34;&gt;// #comment
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// for document
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    alert( &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.tagName ); &lt;span style=&#34;color:#6272a4&#34;&gt;// undefined (not an element)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    alert( &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.nodeName ); &lt;span style=&#34;color:#6272a4&#34;&gt;// #document
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If we only deal with elements, then we can use both &lt;code&gt;tagName&lt;/code&gt; and &lt;code&gt;nodeName&lt;/code&gt; - there&amp;rsquo;s no difference.&lt;/p&gt;
&lt;p&gt;The browser has two modes of processing documents: HTML and XML. Usually the HTML-mode is used for webpages. XML-mode is enabled when the browser receives an XML-document with the header: &lt;code&gt;Content-Type: application/xml+xhtml&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In HTML mode &lt;code&gt;tagName/nodeName&lt;/code&gt; is always uppercased: it&amp;rsquo;s &lt;code&gt;BODY&lt;/code&gt; either for &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;BoDy&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In XML mode the case is kept &amp;ldquo;as is&amp;rdquo;. Nowadays XML mode is rarely used.&lt;/p&gt;
&lt;h3 id=&#34;innerhtml-the-contents&#34;&gt;innerHTML: the contents&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&#34;https://w3c.github.io/DOM-Parsing/#widl-Element-innerHTML&#34;&gt;innerHTML&lt;/a&gt; property allows to get the HTML inside the element as a string.&lt;/p&gt;
&lt;p&gt;We can also modify it. So it&amp;rsquo;s one of the most powerful ways to change the page.&lt;/p&gt;
&lt;p&gt;The example shows the contents of &lt;code&gt;document.body&lt;/code&gt; and then replaces it completely:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;A paragraph&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;A div&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert( &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.innerHTML ); &lt;span style=&#34;color:#6272a4&#34;&gt;// read the current contents
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.innerHTML &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;The new BODY!&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// replace it
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can try to insert invalid HTML, the browser will fix our errors:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.innerHTML &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;lt;b&amp;gt;test&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// forgot to close the tag
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    alert( &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.innerHTML ); &lt;span style=&#34;color:#6272a4&#34;&gt;// &amp;lt;b&amp;gt;test&amp;lt;/b&amp;gt; (fixed)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If &lt;code&gt;innerHTML&lt;/code&gt; inserts a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag into the document &amp;ndash; it becomes a part of HTML, but doesn&amp;rsquo;t execute.&lt;/p&gt;
&lt;h4 id=&#34;beware-innerhtml-does-a-full-overwrite&#34;&gt;Beware: &amp;ldquo;innerHTML+=&amp;rdquo; does a full overwrite&lt;/h4&gt;
&lt;p&gt;We can append HTML to an element by using &lt;code&gt;elem.innerHTML+=&amp;quot;more html&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;chatDiv.innerHTML &lt;span style=&#34;color:#ff79c6&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;lt;div&amp;gt;Hello&amp;lt;img src=&amp;#39;smile.gif&amp;#39;/&amp;gt; !&amp;lt;/div&amp;gt;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;chatDiv.innerHTML &lt;span style=&#34;color:#ff79c6&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;How goes?&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But we should be very careful about doing it, because what&amp;rsquo;s going on is &lt;em&gt;not&lt;/em&gt; an addition, but a full overwrite.&lt;/p&gt;
&lt;p&gt;Technically, these two lines do the same:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;elem.innerHTML &lt;span style=&#34;color:#ff79c6&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// is a shorter way to write:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;elem.innerHTML &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; elem.innerHTML &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In other words, &lt;code&gt;innerHTML+=&lt;/code&gt; does this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The old contents is removed.&lt;/li&gt;
&lt;li&gt;The new &lt;code&gt;innerHTML&lt;/code&gt; is written instead (a concatenation of the old and the new one).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;As the content is &amp;ldquo;zeroed-out&amp;rdquo; and rewritten from the scratch, all images and other resources will be reloaded&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;chatDiv&lt;/code&gt; example above the line &lt;code&gt;chatDiv.innerHTML+=&amp;quot;How goes?&amp;quot;&lt;/code&gt; re-creates the HTML content and reloads &lt;code&gt;smile.gif&lt;/code&gt; (hope it&amp;rsquo;s cached). If &lt;code&gt;chatDiv&lt;/code&gt; has a lot of other text and images, then the reload becomes clearly visible.&lt;/p&gt;
&lt;p&gt;There are other side-effects as well. For instance, if the existing text was selected with the mouse, then most browsers will remove the selection upon rewriting &lt;code&gt;innerHTML&lt;/code&gt;. And if there was an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; with a text entered by the visitor, then the text will be removed. And so on.&lt;/p&gt;
&lt;p&gt;Luckily, there are other ways to add HTML besides &lt;code&gt;innerHTML&lt;/code&gt;, and we&amp;rsquo;ll study them soon.&lt;/p&gt;
&lt;h3 id=&#34;outerhtml-full-html-of-the-element&#34;&gt;outerHTML: full HTML of the element&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;outerHTML&lt;/code&gt; property contains the full HTML of the element. That&amp;rsquo;s like &lt;code&gt;innerHTML&lt;/code&gt; plus the element itself.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s an example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;elem&amp;#34;&lt;/span&gt;&amp;gt;Hello &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;b&lt;/span&gt;&amp;gt;World&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;b&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(elem.outerHTML); &lt;span style=&#34;color:#6272a4&#34;&gt;// &amp;lt;div id=&amp;#34;elem&amp;#34;&amp;gt;Hello &amp;lt;b&amp;gt;World&amp;lt;/b&amp;gt;&amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Beware: unlike &lt;code&gt;innerHTML&lt;/code&gt;, writing to &lt;code&gt;outerHTML&lt;/code&gt; does not change the element. Instead, it replaces it in the DOM.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Yeah, sounds strange, and strange it is, that&amp;rsquo;s why we make a separate note about it here. Take a look.&lt;/p&gt;
&lt;p&gt;Consider the example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;Hello, world!&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; div &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.querySelector(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;div&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// replace div.outerHTML with &amp;lt;p&amp;gt;...&amp;lt;/p&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  div.outerHTML &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;lt;p&amp;gt;A new element&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// (*)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// Wow! &amp;#39;div&amp;#39; is still the same!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(div.outerHTML); &lt;span style=&#34;color:#6272a4&#34;&gt;// &amp;lt;div&amp;gt;Hello, world!&amp;lt;/div&amp;gt; (**)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Looks really odd, right?&lt;/p&gt;
&lt;p&gt;In the line &lt;code&gt;(*)&lt;/code&gt; we replaced &lt;code&gt;div&lt;/code&gt; with &lt;code&gt;&amp;lt;p&amp;gt;A new element&amp;lt;/p&amp;gt;&lt;/code&gt;. In the outer document (the DOM) we can see the new content instead of the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;. But, as we can see in line &lt;code&gt;(**)&lt;/code&gt;, the value of the old &lt;code&gt;div&lt;/code&gt; variable hasn&amp;rsquo;t changed!&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;outerHTML&lt;/code&gt; assignment does not modify the DOM element (the object referenced by, in this case, the variable &amp;lsquo;div&amp;rsquo;), but removes it from the DOM and inserts the new HTML in its place.&lt;/p&gt;
&lt;p&gt;So what happened in &lt;code&gt;div.outerHTML=...&lt;/code&gt; is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;div&lt;/code&gt; was removed from the document.&lt;/li&gt;
&lt;li&gt;Another piece of HTML &lt;code&gt;&amp;lt;p&amp;gt;A new element&amp;lt;/p&amp;gt;&lt;/code&gt; was inserted in its place.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;div&lt;/code&gt; still has its old value. The new HTML wasn&amp;rsquo;t saved to any variable.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It&amp;rsquo;s so easy to make an error here: modify &lt;code&gt;div.outerHTML&lt;/code&gt; and then continue to work with &lt;code&gt;div&lt;/code&gt; as if it had the new content in it. But it doesn&amp;rsquo;t. Such thing is correct for &lt;code&gt;innerHTML&lt;/code&gt;, but not for &lt;code&gt;outerHTML&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can write to &lt;code&gt;elem.outerHTML&lt;/code&gt;, but should keep in mind that it doesn&amp;rsquo;t change the element we&amp;rsquo;re writing to (&amp;rsquo;elem&amp;rsquo;). It puts the new HTML in its place instead. We can get references to the new elements by querying the DOM.&lt;/p&gt;
&lt;h3 id=&#34;nodevaluedata-text-node-content&#34;&gt;nodeValue/data: text node content&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;innerHTML&lt;/code&gt; property is only valid for element nodes.&lt;/p&gt;
&lt;p&gt;Other node types, such as text nodes, have their counterpart: &lt;code&gt;nodeValue&lt;/code&gt; and &lt;code&gt;data&lt;/code&gt; properties. These two are almost the same for practical use, there are only minor specification differences. So we&amp;rsquo;ll use &lt;code&gt;data&lt;/code&gt;, because it&amp;rsquo;s shorter.&lt;/p&gt;
&lt;p&gt;An example of reading the content of a text node and a comment:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Hello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!-- Comment --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; text &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.firstChild;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(text.data); &lt;span style=&#34;color:#6272a4&#34;&gt;// Hello
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; comment &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; text.nextSibling;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(comment.data); &lt;span style=&#34;color:#6272a4&#34;&gt;// Comment
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For text nodes we can imagine a reason to read or modify them, but why comments?&lt;/p&gt;
&lt;p&gt;Sometimes developers embed information or template instructions into HTML in them, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!-- if isAdmin --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;Welcome, Admin!&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!-- /if --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;hellip;Then JavaScript can read it from &lt;code&gt;data&lt;/code&gt; property and process embedded instructions.&lt;/p&gt;
&lt;h3 id=&#34;textcontent-pure-text&#34;&gt;textContent: pure text&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;textContent&lt;/code&gt; provides access to the &lt;em&gt;text&lt;/em&gt; inside the element: only text, minus all &lt;code&gt;&amp;lt;tags&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;news&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h1&lt;/span&gt;&amp;gt;Headline!&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h1&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;Martians attack people!&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// Headline! Martians attack people!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  alert(news.textContent);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As we can see, only text is returned, as if all &lt;code&gt;&amp;lt;tags&amp;gt;&lt;/code&gt; were cut out, but the text in them remained.&lt;/p&gt;
&lt;p&gt;In practice, reading such text is rarely needed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Writing to &lt;code&gt;textContent&lt;/code&gt; is much more useful, because it allows to write text the &amp;ldquo;safe way&amp;rdquo;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say we have an arbitrary string, for instance entered by a user, and want to show it.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;With &lt;code&gt;innerHTML&lt;/code&gt; we&amp;rsquo;ll have it inserted &amp;ldquo;as HTML&amp;rdquo;, with all HTML tags.&lt;/li&gt;
&lt;li&gt;With &lt;code&gt;textContent&lt;/code&gt; we&amp;rsquo;ll have it inserted &amp;ldquo;as text&amp;rdquo;, all symbols are treated literally.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Compare the two:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;elem1&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;elem2&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; prompt(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;What&amp;#39;s your name?&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;lt;b&amp;gt;Winnie-the-pooh!&amp;lt;/b&amp;gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  elem1.innerHTML &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; name;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  elem2.textContent &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; name;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;The first &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; gets the name &amp;ldquo;as HTML&amp;rdquo;: all tags become tags, so we see the bold name.&lt;/li&gt;
&lt;li&gt;The second &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; gets the name &amp;ldquo;as text&amp;rdquo;, so we literally see &lt;code&gt;&amp;lt;b&amp;gt;Winnie-the-pooh!&amp;lt;/b&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In most cases, we expect the text from a user, and want to treat it as text. We don&amp;rsquo;t want unexpected HTML in our site. An assignment to &lt;code&gt;textContent&lt;/code&gt; does exactly that.&lt;/p&gt;
&lt;h3 id=&#34;the-hidden-property&#34;&gt;The &amp;ldquo;hidden&amp;rdquo; property&lt;/h3&gt;
&lt;p&gt;The &amp;ldquo;hidden&amp;rdquo; attribute and the DOM property specifies whether the element is visible or not.&lt;/p&gt;
&lt;p&gt;We can use it in HTML or assign using JavaScript, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;Both divs below are hidden&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;hidden&lt;/span&gt;&amp;gt;With the attribute &amp;#34;hidden&amp;#34;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;elem&amp;#34;&lt;/span&gt;&amp;gt;JavaScript assigned the property &amp;#34;hidden&amp;#34;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  elem.hidden &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Technically, &lt;code&gt;hidden&lt;/code&gt; works the same as &lt;code&gt;style=&amp;quot;display:none&amp;quot;&lt;/code&gt;. But it&amp;rsquo;s shorter to write.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a blinking element:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;elem&amp;#34;&lt;/span&gt;&amp;gt;A blinking element&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  setInterval(() =&amp;gt; elem.hidden &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;!&lt;/span&gt;elem.hidden, &lt;span style=&#34;color:#bd93f9&#34;&gt;1000&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;more-properties&#34;&gt;More properties&lt;/h3&gt;
&lt;p&gt;DOM elements also have additional properties, in particular those that depend on the class:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;value&lt;/code&gt; &amp;ndash; the value for &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; (&lt;code&gt;HTMLInputElement&lt;/code&gt;, &lt;code&gt;HTMLSelectElement&lt;/code&gt;&amp;hellip;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;href&lt;/code&gt; &amp;ndash; the &amp;ldquo;href&amp;rdquo; for &lt;code&gt;&amp;lt;a href=&amp;quot;...&amp;quot;&amp;gt;&lt;/code&gt; (&lt;code&gt;HTMLAnchorElement&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;id&lt;/code&gt; &amp;ndash; the value of &amp;ldquo;id&amp;rdquo; attribute, for all elements (&lt;code&gt;HTMLElement&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&amp;hellip;and much more&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;elem&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(elem.type); &lt;span style=&#34;color:#6272a4&#34;&gt;// &amp;#34;text&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  alert(elem.id); &lt;span style=&#34;color:#6272a4&#34;&gt;// &amp;#34;elem&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  alert(elem.value); &lt;span style=&#34;color:#6272a4&#34;&gt;// value
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Most standard HTML attributes have the corresponding DOM property, and we can access it like that.&lt;/p&gt;
&lt;p&gt;If we want to know the full list of supported properties for a given class, we can find them in the specification. For instance, &lt;code&gt;HTMLInputElement&lt;/code&gt; is documented at &lt;a href=&#34;https://html.spec.whatwg.org/#htmlinputelement&#34;&gt;https://html.spec.whatwg.org/#htmlinputelement&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Or if we&amp;rsquo;d like to get them fast or are interested in a concrete browser specification &amp;ndash; we can always output the element using &lt;code&gt;console.dir(elem)&lt;/code&gt; and read the properties. Or explore &amp;ldquo;DOM properties&amp;rdquo; in the Elements tab of the browser developer tools.&lt;/p&gt;
&lt;h3 id=&#34;summary-4&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;Each DOM node belongs to a certain class. The classes form a hierarchy. The full set of properties and methods come as the result of inheritance.&lt;/p&gt;
&lt;p&gt;Main DOM node properties are:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;nodeType&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;We can use it to see if a node is a text or an element node. It has a numeric value: &lt;code&gt;1&lt;/code&gt; for elements,&lt;code&gt;3&lt;/code&gt; for text nodes, and a few others for other node types. Read-only.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;nodeName/tagName&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;For elements, tag name (uppercased unless XML-mode). For non-element nodes &lt;code&gt;nodeName&lt;/code&gt; describes what it is. Read-only.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;innerHTML&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;The HTML content of the element. Can be modified.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;outerHTML&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;The full HTML of the element. A write operation into &lt;code&gt;elem.outerHTML&lt;/code&gt; does not touch &lt;code&gt;elem&lt;/code&gt; itself. Instead it gets replaced with the new HTML in the outer context.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;nodeValue/data&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;The content of a non-element node (text, comment). These two are almost the same, usually we use &lt;code&gt;data&lt;/code&gt;. Can be modified.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;textContent&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;The text inside the element: HTML minus all &lt;code&gt;&amp;lt;tags&amp;gt;&lt;/code&gt;. Writing into it puts the text inside the element, with all special characters and tags treated exactly as text. Can safely insert user-generated text and protect from unwanted HTML insertions.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;hidden&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;When set to &lt;code&gt;true&lt;/code&gt;, does the same as CSS &lt;code&gt;display:none&lt;/code&gt;.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;DOM nodes also have other properties depending on their class. For instance, &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; elements (&lt;code&gt;HTMLInputElement&lt;/code&gt;) support &lt;code&gt;value&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt;, while &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; elements (&lt;code&gt;HTMLAnchorElement&lt;/code&gt;) support &lt;code&gt;href&lt;/code&gt; etc. Most standard HTML attributes have a corresponding DOM property.&lt;/p&gt;
&lt;p&gt;However, HTML attributes and DOM properties are not always the same, as we&amp;rsquo;ll see in the next chapter.&lt;/p&gt;
&lt;h2 id=&#34;attributes-and-properties&#34;&gt;Attributes and properties&lt;/h2&gt;
&lt;p&gt;When the browser loads the page, it &amp;ldquo;reads&amp;rdquo; (another word: &amp;ldquo;parses&amp;rdquo;) the HTML and generates DOM objects from it. For element nodes, most standard HTML attributes automatically become properties of DOM objects.&lt;/p&gt;
&lt;p&gt;For instance, if the tag is &lt;code&gt;&amp;lt;body id=&amp;quot;page&amp;quot;&amp;gt;&lt;/code&gt;, then the DOM object has &lt;code&gt;body.id=&amp;quot;page&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But the attribute-property mapping is not one-to-one! In this chapter we&amp;rsquo;ll pay attention to separate these two notions, to see how to work with them, when they are the same, and when they are different.&lt;/p&gt;
&lt;h3 id=&#34;dom-properties&#34;&gt;DOM properties&lt;/h3&gt;
&lt;p&gt;We&amp;rsquo;ve already seen built-in DOM properties. There are a lot. But technically no one limits us, and if there aren&amp;rsquo;t enough, we can add our own.&lt;/p&gt;
&lt;p&gt;DOM nodes are regular JavaScript objects. We can alter them.&lt;/p&gt;
&lt;p&gt;For instance, let&amp;rsquo;s create a new property in &lt;code&gt;document.body&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.myData &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Caesar&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  title&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Imperator&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.myData.title); &lt;span style=&#34;color:#6272a4&#34;&gt;// Imperator
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can add a method as well:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.sayTagName &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.tagName);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.sayTagName(); &lt;span style=&#34;color:#6272a4&#34;&gt;// BODY (the value of &amp;#34;this&amp;#34; in the method is document.body)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can also modify built-in prototypes like &lt;code&gt;Element.prototype&lt;/code&gt; and add new methods to all elements:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Element.prototype.sayHi &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;`Hello, I&amp;#39;m &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.tagName&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.documentElement.sayHi(); &lt;span style=&#34;color:#6272a4&#34;&gt;// Hello, I&amp;#39;m HTML
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.sayHi(); &lt;span style=&#34;color:#6272a4&#34;&gt;// Hello, I&amp;#39;m BODY
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, DOM properties and methods behave just like those of regular JavaScript objects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;They can have any value.&lt;/li&gt;
&lt;li&gt;They are case-sensitive (write &lt;code&gt;elem.nodeType&lt;/code&gt;, not &lt;code&gt;elem.NoDeTyPe&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;html-attributes&#34;&gt;HTML attributes&lt;/h3&gt;
&lt;p&gt;In HTML, tags may have attributes. When the browser parses the HTML to create DOM objects for tags, it recognizes &lt;em&gt;standard&lt;/em&gt; attributes and creates DOM properties from them.&lt;/p&gt;
&lt;p&gt;So when an element has &lt;code&gt;id&lt;/code&gt; or another &lt;em&gt;standard&lt;/em&gt; attribute, the corresponding property gets created. But that doesn&amp;rsquo;t happen if the attribute is non-standard.&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;something&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;non-standard&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.id); &lt;span style=&#34;color:#6272a4&#34;&gt;// test
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// non-standard attribute does not yield a property
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    alert(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.something); &lt;span style=&#34;color:#6272a4&#34;&gt;// undefined
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Please note that a standard attribute for one element can be unknown for another one. For instance, &lt;code&gt;&amp;quot;type&amp;quot;&lt;/code&gt; is standard for &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; (&lt;a href=&#34;https://html.spec.whatwg.org/#htmlinputelement&#34;&gt;HTMLInputElement&lt;/a&gt;), but not for &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; (&lt;a href=&#34;https://html.spec.whatwg.org/#htmlbodyelement&#34;&gt;HTMLBodyElement&lt;/a&gt;). Standard attributes are described in the specification for the corresponding element class.&lt;/p&gt;
&lt;p&gt;Here we can see it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;body&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;input&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(input.type); &lt;span style=&#34;color:#6272a4&#34;&gt;// text
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(body.type); &lt;span style=&#34;color:#6272a4&#34;&gt;// undefined: DOM property not created, because it&amp;#39;s non-standard
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, if an attribute is non-standard, there won&amp;rsquo;t be a DOM-property for it. Is there a way to access such attributes?&lt;/p&gt;
&lt;p&gt;Sure. All attributes are accessible by using the following methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;elem.hasAttribute(name)&lt;/code&gt; &amp;ndash; checks for existence.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elem.getAttribute(name)&lt;/code&gt; &amp;ndash; gets the value.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elem.setAttribute(name, value)&lt;/code&gt; &amp;ndash; sets the value.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elem.removeAttribute(name)&lt;/code&gt; &amp;ndash; removes the attribute.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These methods operate exactly with what&amp;rsquo;s written in HTML.&lt;/p&gt;
&lt;p&gt;Also one can read all attributes using &lt;code&gt;elem.attributes&lt;/code&gt;: a collection of objects that belong to a built-in &lt;a href=&#34;https://dom.spec.whatwg.org/#attr&#34;&gt;Attr&lt;/a&gt; class, with &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; properties.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a demo of reading a non-standard property:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;something&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;non-standard&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.getAttribute(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;something&amp;#39;&lt;/span&gt;)); &lt;span style=&#34;color:#6272a4&#34;&gt;// non-standard
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;HTML attributes have the following features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Their name is case-insensitive (&lt;code&gt;id&lt;/code&gt; is same as &lt;code&gt;ID&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Their values are always strings.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&amp;rsquo;s an extended demo of working with attributes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;elem&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;about&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Elephant&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert( elem.getAttribute(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;About&amp;#39;&lt;/span&gt;) ); &lt;span style=&#34;color:#6272a4&#34;&gt;// (1) &amp;#39;Elephant&amp;#39;, reading
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    elem.setAttribute(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Test&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;123&lt;/span&gt;); &lt;span style=&#34;color:#6272a4&#34;&gt;// (2), writing
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert( elem.outerHTML ); &lt;span style=&#34;color:#6272a4&#34;&gt;// (3), see if the attribute is in HTML (yes)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; attr &lt;span style=&#34;color:#ff79c6&#34;&gt;of&lt;/span&gt; elem.attributes) { &lt;span style=&#34;color:#6272a4&#34;&gt;// (4) list all
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;      alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;attr.name&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt; = &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;attr.value&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Please note:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;getAttribute(&#39;About&#39;)&lt;/code&gt; &amp;ndash; the first letter is uppercase here, and in HTML it&amp;rsquo;s all lowercase. But that doesn&amp;rsquo;t matter: attribute names are case-insensitive.&lt;/li&gt;
&lt;li&gt;We can assign anything to an attribute, but it becomes a string. So here we have &lt;code&gt;&amp;quot;123&amp;quot;&lt;/code&gt; as the value.&lt;/li&gt;
&lt;li&gt;All attributes including ones that we set are visible in &lt;code&gt;outerHTML&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;attributes&lt;/code&gt; collection is iterable and has all the attributes of the element (standard and non-standard) as objects with &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; properties.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;property-attribute-synchronization&#34;&gt;Property-attribute synchronization&lt;/h3&gt;
&lt;p&gt;When a standard attribute changes, the corresponding property is auto-updated, and (with some exceptions) vice versa.&lt;/p&gt;
&lt;p&gt;In the example below &lt;code&gt;id&lt;/code&gt; is modified as an attribute, and we can see the property changed too. And then the same backwards:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; input &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.querySelector(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;input&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// attribute =&amp;gt; property
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  input.setAttribute(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(input.id); &lt;span style=&#34;color:#6272a4&#34;&gt;// id (updated)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// property =&amp;gt; attribute
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  input.id &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;newId&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(input.getAttribute(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;)); &lt;span style=&#34;color:#6272a4&#34;&gt;// newId (updated)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But there are exclusions, for instance &lt;code&gt;input.value&lt;/code&gt; synchronizes only from attribute -&amp;gt; to property, but not back:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; input &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.querySelector(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;input&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// attribute =&amp;gt; property
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  input.setAttribute(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;text&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(input.value); &lt;span style=&#34;color:#6272a4&#34;&gt;// text
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// NOT property =&amp;gt; attribute
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  input.value &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;newValue&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(input.getAttribute(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;)); &lt;span style=&#34;color:#6272a4&#34;&gt;// text (not updated!)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the example above:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Changing the attribute &lt;code&gt;value&lt;/code&gt; updates the property.&lt;/li&gt;
&lt;li&gt;But the property change does not affect the attribute.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That &amp;ldquo;feature&amp;rdquo; may actually come in handy, because the user actions may lead to &lt;code&gt;value&lt;/code&gt; changes, and then after them, if we want to recover the &amp;ldquo;original&amp;rdquo; value from HTML, it&amp;rsquo;s in the attribute.&lt;/p&gt;
&lt;h3 id=&#34;dom-properties-are-typed&#34;&gt;DOM properties are typed&lt;/h3&gt;
&lt;p&gt;DOM properties are not always strings. For instance, the &lt;code&gt;input.checked&lt;/code&gt; property (for checkboxes) is a boolean:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;input&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;checkbox&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;checked&lt;/span&gt;&amp;gt; checkbox
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(input.getAttribute(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;checked&amp;#39;&lt;/span&gt;)); &lt;span style=&#34;color:#6272a4&#34;&gt;// the attribute value is: empty string
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  alert(input.checked); &lt;span style=&#34;color:#6272a4&#34;&gt;// the property value is: true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are other examples. The &lt;code&gt;style&lt;/code&gt; attribute is a string, but the &lt;code&gt;style&lt;/code&gt; property is an object:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;div&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;color:red;font-size:120%&amp;#34;&lt;/span&gt;&amp;gt;Hello&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// string
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  alert(div.getAttribute(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;style&amp;#39;&lt;/span&gt;)); &lt;span style=&#34;color:#6272a4&#34;&gt;// color:red;font-size:120%
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// object
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  alert(div.style); &lt;span style=&#34;color:#6272a4&#34;&gt;// [object CSSStyleDeclaration]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  alert(div.style.color); &lt;span style=&#34;color:#6272a4&#34;&gt;// red
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Most properties are strings though.&lt;/p&gt;
&lt;p&gt;Quite rarely, even if a DOM property type is a string, it may differ from the attribute. For instance, the &lt;code&gt;href&lt;/code&gt; DOM property is always a &lt;em&gt;full&lt;/em&gt; URL, even if the attribute contains a relative URL or just a &lt;code&gt;#hash&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s an example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;#hello&amp;#34;&lt;/span&gt;&amp;gt;link&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// attribute
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  alert(a.getAttribute(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;href&amp;#39;&lt;/span&gt;)); &lt;span style=&#34;color:#6272a4&#34;&gt;// #hello
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// property
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  alert(a.href ); &lt;span style=&#34;color:#6272a4&#34;&gt;// full URL in the form http://site.com/page#hello
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If we need the value of &lt;code&gt;href&lt;/code&gt; or any other attribute exactly as written in the HTML, we can use &lt;code&gt;getAttribute&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;non-standard-attributes-dataset&#34;&gt;Non-standard attributes, dataset&lt;/h3&gt;
&lt;p&gt;When writing HTML, we use a lot of standard attributes. But what about non-standard, custom ones? First, let&amp;rsquo;s see whether they are useful or not? What for?&lt;/p&gt;
&lt;p&gt;Sometimes non-standard attributes are used to pass custom data from HTML to JavaScript, or to &amp;ldquo;mark&amp;rdquo; HTML-elements for JavaScript.&lt;/p&gt;
&lt;p&gt;Like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!-- mark the div to show &amp;#34;name&amp;#34; here --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;show-info&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!-- and age here --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;show-info&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;age&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// the code finds an element with the mark and shows what&amp;#39;s requested
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Pete&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    age&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;25&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; div &lt;span style=&#34;color:#ff79c6&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.querySelectorAll(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;[show-info]&amp;#39;&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// insert the corresponding info into the field
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; field &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; div.getAttribute(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;show-info&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    div.innerHTML &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; user[field]; &lt;span style=&#34;color:#6272a4&#34;&gt;// first Pete into &amp;#34;name&amp;#34;, then 25 into &amp;#34;age&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Also they can be used to style an element.&lt;/p&gt;
&lt;p&gt;For instance, here for the order state the attribute &lt;code&gt;order-state&lt;/code&gt; is used:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;style&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;/* styles rely on the custom attribute &amp;#34;order-state&amp;#34; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .&lt;span style=&#34;color:#50fa7b&#34;&gt;order&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;order-state&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;new&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;green&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .&lt;span style=&#34;color:#50fa7b&#34;&gt;order&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;order-state&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;pending&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;blue&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .&lt;span style=&#34;color:#50fa7b&#34;&gt;order&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;order-state&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;canceled&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;red&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;style&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;order&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;order-state&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;new&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  A new order.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;order&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;order-state&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;pending&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  A pending order.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;order&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;order-state&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;canceled&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  A canceled order.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Why would using an attribute be preferable to having classes like &lt;code&gt;.order-state-new&lt;/code&gt;, &lt;code&gt;.order-state-pending&lt;/code&gt;, &lt;code&gt;order-state-canceled&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Because an attribute is more convenient to manage. The state can be changed as easy as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// a bit simpler than removing old/adding a new class
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;div.setAttribute(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;order-state&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;canceled&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But there may be a possible problem with custom attributes. What if we use a non-standard attribute for our purposes and later the standard introduces it and makes it do something? The HTML language is alive, it grows, and more attributes appear to suit the needs of developers. There may be unexpected effects in such case.&lt;/p&gt;
&lt;p&gt;To avoid conflicts, there exist &lt;a href=&#34;https://html.spec.whatwg.org/#embedding-custom-non-visible-data-with-the-data-*-attributes&#34;&gt;data-*&lt;/a&gt; attributes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;All attributes starting with &amp;ldquo;data-&amp;rdquo; are reserved for programmers&amp;rsquo; use. They are available in the &lt;code&gt;dataset&lt;/code&gt; property.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For instance, if an &lt;code&gt;elem&lt;/code&gt; has an attribute named &lt;code&gt;&amp;quot;data-about&amp;quot;&lt;/code&gt;, it&amp;rsquo;s available as &lt;code&gt;elem.dataset.about&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;data-about&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Elephants&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.dataset.about); &lt;span style=&#34;color:#6272a4&#34;&gt;// Elephants
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Multiword attributes like &lt;code&gt;data-order-state&lt;/code&gt; become camel-cased: &lt;code&gt;dataset.orderState&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a rewritten &amp;ldquo;order state&amp;rdquo; example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;style&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .&lt;span style=&#34;color:#50fa7b&#34;&gt;order&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;data-order-state&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;new&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;green&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .&lt;span style=&#34;color:#50fa7b&#34;&gt;order&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;data-order-state&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;pending&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;blue&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .&lt;span style=&#34;color:#50fa7b&#34;&gt;order&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;data-order-state&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;canceled&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;]&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;red&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;style&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;order&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;order&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;data-order-state&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;new&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  A new order.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// read
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  alert(order.dataset.orderState); &lt;span style=&#34;color:#6272a4&#34;&gt;// new
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// modify
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  order.dataset.orderState &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;pending&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// (*)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using &lt;code&gt;data-*&lt;/code&gt; attributes is a valid, safe way to pass custom data.&lt;/p&gt;
&lt;p&gt;Please note that we can not only read, but also modify data-attributes. Then CSS updates the view accordingly: in the example above the last line &lt;code&gt;(*)&lt;/code&gt; changes the color to blue.&lt;/p&gt;
&lt;h3 id=&#34;summary-5&#34;&gt;Summary&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Attributes &amp;ndash; is what&amp;rsquo;s written in HTML.&lt;/li&gt;
&lt;li&gt;Properties &amp;ndash; is what&amp;rsquo;s in DOM objects.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A small comparison:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Properties&lt;/th&gt;
&lt;th&gt;Attributes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Type&lt;/td&gt;
&lt;td&gt;Any value, standard properties have types described in the spec&lt;/td&gt;
&lt;td&gt;A string&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Name&lt;/td&gt;
&lt;td&gt;Name is case-sensitive&lt;/td&gt;
&lt;td&gt;Name is not case-sensitive&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Methods to work with attributes are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;elem.hasAttribute(name)&lt;/code&gt; &amp;ndash; to check for existence.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elem.getAttribute(name)&lt;/code&gt; &amp;ndash; to get the value.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elem.setAttribute(name, value)&lt;/code&gt; &amp;ndash; to set the value.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elem.removeAttribute(name)&lt;/code&gt; &amp;ndash; to remove the attribute.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elem.attributes&lt;/code&gt; is a collection of all attributes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For most situations using DOM properties is preferable. We should refer to attributes only when DOM properties do not suit us, when we need exactly attributes, for instance:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We need a non-standard attribute. But if it starts with &lt;code&gt;data-&lt;/code&gt;, then we should use &lt;code&gt;dataset&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;We want to read the value &amp;ldquo;as written&amp;rdquo; in HTML. The value of the DOM property may be different, for instance the &lt;code&gt;href&lt;/code&gt; property is always a full URL, and we may want to get the &amp;ldquo;original&amp;rdquo; value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;modifying-the-document&#34;&gt;Modifying the document&lt;/h2&gt;
&lt;p&gt;DOM modification is the key to creating &amp;ldquo;live&amp;rdquo; pages.&lt;/p&gt;
&lt;p&gt;Here we&amp;rsquo;ll see how to create new elements &amp;ldquo;on the fly&amp;rdquo; and modify the existing page content.&lt;/p&gt;
&lt;h3 id=&#34;example-show-a-message&#34;&gt;Example: show a message&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s demonstrate using an example. We&amp;rsquo;ll add a message on the page that looks nicer than &lt;code&gt;alert&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s how it will look:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;style&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.&lt;span style=&#34;color:#50fa7b&#34;&gt;alert&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;padding&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;border&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;solid&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#d6e9c6&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;border-radius&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;#3c763d&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;background-color&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;#dff0d8&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;style&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;strong&lt;/span&gt;&amp;gt;Hi there!&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;strong&lt;/span&gt;&amp;gt; You&amp;#39;ve read an important message.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That was the HTML example. Now let&amp;rsquo;s create the same &lt;code&gt;div&lt;/code&gt; with JavaScript (assuming that the styles are in the HTML/CSS already).&lt;/p&gt;
&lt;h3 id=&#34;creating-an-element&#34;&gt;Creating an element&lt;/h3&gt;
&lt;p&gt;To create DOM nodes, there are two methods:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;document.createElement(tag)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Creates a new &lt;em&gt;element node&lt;/em&gt; with the given tag:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; div &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.createElement(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;div&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;document.createTextNode(text)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Creates a new &lt;em&gt;text node&lt;/em&gt; with the given text:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; textNode &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.createTextNode(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Here I am&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Most of the time we need to create element nodes, such as the &lt;code&gt;div&lt;/code&gt; for the message.&lt;/p&gt;
&lt;h4 id=&#34;creating-the-message&#34;&gt;Creating the message&lt;/h4&gt;
&lt;p&gt;Creating the message div takes 3 steps:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// 1. Create &amp;lt;div&amp;gt; element
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; div &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.createElement(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;div&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// 2. Set its class to &amp;#34;alert&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;div.className &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// 3. Fill it with the content
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;div.innerHTML &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;lt;strong&amp;gt;Hi there!&amp;lt;/strong&amp;gt; You&amp;#39;ve read an important message.&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&amp;rsquo;ve created the element. But as of now it&amp;rsquo;s only in a variable named &lt;code&gt;div&lt;/code&gt;, not in the page yet. So we can&amp;rsquo;t see it.&lt;/p&gt;
&lt;h3 id=&#34;insertion-methods&#34;&gt;Insertion methods&lt;/h3&gt;
&lt;p&gt;To make the &lt;code&gt;div&lt;/code&gt; show up, we need to insert it somewhere into &lt;code&gt;document&lt;/code&gt;. For instance, into &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; element, referenced by &lt;code&gt;document.body&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s a special method &lt;code&gt;append&lt;/code&gt; for that: &lt;code&gt;document.body.append(div)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the full code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;style&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.&lt;span style=&#34;color:#50fa7b&#34;&gt;alert&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;padding&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;border&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;solid&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#d6e9c6&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;border-radius&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;#3c763d&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;background-color&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;#dff0d8&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;style&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; div &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.createElement(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;div&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  div.className &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  div.innerHTML &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;lt;strong&amp;gt;Hi there!&amp;lt;/strong&amp;gt; You&amp;#39;ve read an important message.&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.append(div);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here we called &lt;code&gt;append&lt;/code&gt; on &lt;code&gt;document.body&lt;/code&gt;, but we can call &lt;code&gt;append&lt;/code&gt; method on any other element, to put another element into it. For instance, we can append something to &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; by calling &lt;code&gt;div.append(anotherElement)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here are more insertion methods, they specify different places where to insert:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;node.append(...nodes or strings)&lt;/code&gt; &amp;ndash; append nodes or strings &lt;em&gt;at the end&lt;/em&gt; of &lt;code&gt;node&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;node.prepend(...nodes or strings)&lt;/code&gt; &amp;ndash; insert nodes or strings &lt;em&gt;at the beginning&lt;/em&gt; of &lt;code&gt;node&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;node.before(...nodes or strings)&lt;/code&gt; –- insert nodes or strings &lt;em&gt;before&lt;/em&gt; &lt;code&gt;node&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;node.after(...nodes or strings)&lt;/code&gt; –- insert nodes or strings &lt;em&gt;after&lt;/em&gt; &lt;code&gt;node&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;node.replaceWith(...nodes or strings)&lt;/code&gt; –- replaces &lt;code&gt;node&lt;/code&gt; with the given nodes or strings.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Arguments of these methods are an arbitrary list of DOM nodes to insert, or text strings (that become text nodes automatically).&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s see them in action.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s an example of using these methods to add items to a list and the text before/after it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;ol&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ol&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;0&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;1&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;2&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;ol&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ol.before(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;before&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#6272a4&#34;&gt;// insert string &amp;#34;before&amp;#34; before &amp;lt;ol&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  ol.after(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;after&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#6272a4&#34;&gt;// insert string &amp;#34;after&amp;#34; after &amp;lt;ol&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; liFirst &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.createElement(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;li&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  liFirst.innerHTML &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;prepend&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ol.prepend(liFirst); &lt;span style=&#34;color:#6272a4&#34;&gt;// insert liFirst at the beginning of &amp;lt;ol&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; liLast &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.createElement(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;li&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  liLast.innerHTML &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;append&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ol.append(liLast); &lt;span style=&#34;color:#6272a4&#34;&gt;// insert liLast at the end of &amp;lt;ol&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here&amp;rsquo;s a visual picture of what the methods do:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;before-prepend-append-after.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;So the final list will be:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;before
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;ol&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ol&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;prepend&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;0&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;1&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;2&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;append&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;ol&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;after
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As said, these methods can insert multiple nodes and text pieces in a single call.&lt;/p&gt;
&lt;p&gt;For instance, here a string and an element are inserted:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;div&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  div.before(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.createElement(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;hr&amp;#39;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Please note: the text is inserted &amp;ldquo;as text&amp;rdquo;, not &amp;ldquo;as HTML&amp;rdquo;, with proper escaping of characters such as &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So the final HTML is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;amp;lt;p&amp;amp;gt;Hello&amp;amp;lt;/p&amp;amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;hr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;div&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In other words, strings are inserted in a safe way, like &lt;code&gt;elem.textContent&lt;/code&gt; does it.&lt;/p&gt;
&lt;p&gt;So, these methods can only be used to insert DOM nodes or text pieces.&lt;/p&gt;
&lt;p&gt;But what if we&amp;rsquo;d like to insert an HTML string &amp;ldquo;as html&amp;rdquo;, with all tags and stuff working, in the same manner as &lt;code&gt;elem.innerHTML&lt;/code&gt; does it?&lt;/p&gt;
&lt;h3 id=&#34;insertadjacenthtmltextelement&#34;&gt;insertAdjacentHTML/Text/Element&lt;/h3&gt;
&lt;p&gt;For that we can use another, pretty versatile method: &lt;code&gt;elem.insertAdjacentHTML(where, html)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The first parameter is a code word, specifying where to insert relative to &lt;code&gt;elem&lt;/code&gt;. Must be one of the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;beforebegin&amp;quot;&lt;/code&gt; &amp;ndash; insert &lt;code&gt;html&lt;/code&gt; immediately before &lt;code&gt;elem&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;afterbegin&amp;quot;&lt;/code&gt; &amp;ndash; insert &lt;code&gt;html&lt;/code&gt; into &lt;code&gt;elem&lt;/code&gt;, at the beginning,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;beforeend&amp;quot;&lt;/code&gt; &amp;ndash; insert &lt;code&gt;html&lt;/code&gt; into &lt;code&gt;elem&lt;/code&gt;, at the end,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;afterend&amp;quot;&lt;/code&gt; &amp;ndash; insert &lt;code&gt;html&lt;/code&gt; immediately after &lt;code&gt;elem&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The second parameter is an HTML string, that is inserted &amp;ldquo;as HTML&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;div&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  div.insertAdjacentHTML(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;beforebegin&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;lt;p&amp;gt;Hello&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  div.insertAdjacentHTML(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;afterend&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;lt;p&amp;gt;Bye&amp;lt;/p&amp;gt;&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;hellip;Would lead to:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;Hello&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;div&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;Bye&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s how we can append arbitrary HTML to the page.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the picture of insertion variants:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;insert-adjacent.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;We can easily notice similarities between this and the previous picture. The insertion points are actually the same, but this method inserts HTML.&lt;/p&gt;
&lt;p&gt;The method has two brothers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;elem.insertAdjacentText(where, text)&lt;/code&gt; &amp;ndash; the same syntax, but a string of &lt;code&gt;text&lt;/code&gt; is inserted &amp;ldquo;as text&amp;rdquo; instead of HTML,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elem.insertAdjacentElement(where, elem)&lt;/code&gt; &amp;ndash; the same syntax, but inserts an element.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;They exist mainly to make the syntax &amp;ldquo;uniform&amp;rdquo;. In practice, only &lt;code&gt;insertAdjacentHTML&lt;/code&gt; is used most of the time. Because for elements and text, we have methods &lt;code&gt;append/prepend/before/after&lt;/code&gt; &amp;ndash; they are shorter to write and can insert nodes/text pieces.&lt;/p&gt;
&lt;p&gt;So here&amp;rsquo;s an alternative variant of showing a message:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;style&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.&lt;span style=&#34;color:#50fa7b&#34;&gt;alert&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;padding&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;border&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;solid&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#d6e9c6&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;border-radius&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;#3c763d&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;background-color&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;#dff0d8&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;style&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.insertAdjacentHTML(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;afterbegin&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;`&amp;lt;div class=&amp;#34;alert&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;    &amp;lt;strong&amp;gt;Hi there!&amp;lt;/strong&amp;gt; You&amp;#39;ve read an important message.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;  &amp;lt;/div&amp;gt;`&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;node-removal&#34;&gt;Node removal&lt;/h3&gt;
&lt;p&gt;To remove a node, there&amp;rsquo;s a method &lt;code&gt;node.remove()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s make our message disappear after a second:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;style&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.&lt;span style=&#34;color:#50fa7b&#34;&gt;alert&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;padding&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;border&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;solid&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#d6e9c6&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;border-radius&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;#3c763d&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;background-color&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;#dff0d8&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;style&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; div &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.createElement(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;div&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  div.className &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  div.innerHTML &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;lt;strong&amp;gt;Hi there!&amp;lt;/strong&amp;gt; You&amp;#39;ve read an important message.&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.append(div);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  setTimeout(() =&amp;gt; div.remove(), &lt;span style=&#34;color:#bd93f9&#34;&gt;1000&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Please note: if we want to &lt;em&gt;move&lt;/em&gt; an element to another place &amp;ndash; there&amp;rsquo;s no need to remove it from the old one.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;All insertion methods automatically remove the node from the old place.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For instance, let&amp;rsquo;s swap elements:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;first&amp;#34;&lt;/span&gt;&amp;gt;First&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;second&amp;#34;&lt;/span&gt;&amp;gt;Second&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// no need to call remove
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  second.after(first); &lt;span style=&#34;color:#6272a4&#34;&gt;// take #second and after it insert #first
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;cloning-nodes-clonenode&#34;&gt;Cloning nodes: cloneNode&lt;/h3&gt;
&lt;p&gt;How to insert one more similar message?&lt;/p&gt;
&lt;p&gt;We could make a function and put the code there. But the alternative way would be to &lt;em&gt;clone&lt;/em&gt; the existing &lt;code&gt;div&lt;/code&gt; and modify the text inside it (if needed).&lt;/p&gt;
&lt;p&gt;Sometimes when we have a big element, that may be faster and simpler.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The call &lt;code&gt;elem.cloneNode(true)&lt;/code&gt; creates a &amp;ldquo;deep&amp;rdquo; clone of the element &amp;ndash; with all attributes and subelements. If we call &lt;code&gt;elem.cloneNode(false)&lt;/code&gt;, then the clone is made without child elements.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;An example of copying the message:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;style&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.&lt;span style=&#34;color:#50fa7b&#34;&gt;alert&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;padding&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;border&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;solid&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#d6e9c6&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;border-radius&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;#3c763d&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;background-color&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;#dff0d8&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;style&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;div&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;strong&lt;/span&gt;&amp;gt;Hi there!&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;strong&lt;/span&gt;&amp;gt; You&amp;#39;ve read an important message.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; div2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; div.cloneNode(&lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;); &lt;span style=&#34;color:#6272a4&#34;&gt;// clone the message
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  div2.querySelector(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;strong&amp;#39;&lt;/span&gt;).innerHTML &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Bye there!&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// change the clone
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  div.after(div2); &lt;span style=&#34;color:#6272a4&#34;&gt;// show the clone after the existing div
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;documentfragment-document-fragment&#34;&gt;DocumentFragment [#document-fragment]&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;DocumentFragment&lt;/code&gt; is a special DOM node that serves as a wrapper to pass around lists of nodes.&lt;/p&gt;
&lt;p&gt;We can append other nodes to it, but when we insert it somewhere, then its content is inserted instead.&lt;/p&gt;
&lt;p&gt;For example, &lt;code&gt;getListContent&lt;/code&gt; below generates a fragment with &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; items, that are later inserted into &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;ul&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ul&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;ul&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; getListContent() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; fragment &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; DocumentFragment();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; i&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;; i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; li &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.createElement(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;li&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    li.append(i);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    fragment.append(li);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; fragment;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ul.append(getListContent()); &lt;span style=&#34;color:#6272a4&#34;&gt;// (*)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Please note, at the last line &lt;code&gt;(*)&lt;/code&gt; we append &lt;code&gt;DocumentFragment&lt;/code&gt;, but it &amp;ldquo;blends in&amp;rdquo;, so the resulting structure will be:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;ul&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;1&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;2&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;3&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;ul&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;DocumentFragment&lt;/code&gt; is rarely used explicitly. Why append to a special kind of node, if we can return an array of nodes instead? Rewritten example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;ul&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ul&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;ul&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; getListContent() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; result &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; [];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; i&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;; i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; li &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.createElement(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;li&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    li.append(i);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    result.push(li);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; result;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ul.append(...getListContent()); &lt;span style=&#34;color:#6272a4&#34;&gt;// append + &amp;#34;...&amp;#34; operator = friends!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We mention &lt;code&gt;DocumentFragment&lt;/code&gt; mainly because there are some concepts on top of it, like &lt;a href=&#34;info:template-element&#34;&gt;template&lt;/a&gt; element, that we&amp;rsquo;ll cover much later.&lt;/p&gt;
&lt;h3 id=&#34;old-school-insertremove-methods&#34;&gt;Old-school insert/remove methods&lt;/h3&gt;
&lt;p&gt;[old]&lt;/p&gt;
&lt;p&gt;There are also &amp;ldquo;old school&amp;rdquo; DOM manipulation methods, existing for historical reasons.&lt;/p&gt;
&lt;p&gt;These methods come from really ancient times. Nowadays, there&amp;rsquo;s no reason to use them, as modern methods, such as &lt;code&gt;append&lt;/code&gt;, &lt;code&gt;prepend&lt;/code&gt;, &lt;code&gt;before&lt;/code&gt;, &lt;code&gt;after&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt;, &lt;code&gt;replaceWith&lt;/code&gt;, are more flexible.&lt;/p&gt;
&lt;p&gt;The only reason we list these methods here is that you can find them in many old scripts:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;parentElem.appendChild(node)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Appends &lt;code&gt;node&lt;/code&gt; as the last child of &lt;code&gt;parentElem&lt;/code&gt;.
&lt;p&gt;The following example adds a new &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; to the end of &lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;ol&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;list&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;0&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;1&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;2&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;ol&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; newLi &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.createElement(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;li&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  newLi.innerHTML &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Hello, world!&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  list.appendChild(newLi);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;parentElem.insertBefore(node, nextSibling)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Inserts &lt;code&gt;node&lt;/code&gt; before &lt;code&gt;nextSibling&lt;/code&gt; into &lt;code&gt;parentElem&lt;/code&gt;.
&lt;p&gt;The following code inserts a new list item before the second &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;ol&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;list&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;0&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;1&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;2&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;ol&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; newLi &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.createElement(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;li&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  newLi.innerHTML &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Hello, world!&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  list.insertBefore(newLi, list.children[&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To insert &lt;code&gt;newLi&lt;/code&gt; as the first element, we can do it like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;list.insertBefore(newLi, list.firstChild);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;parentElem.replaceChild(node, oldChild)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Replaces &lt;code&gt;oldChild&lt;/code&gt; with &lt;code&gt;node&lt;/code&gt; among children of &lt;code&gt;parentElem&lt;/code&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;parentElem.removeChild(node)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Removes &lt;code&gt;node&lt;/code&gt; from &lt;code&gt;parentElem&lt;/code&gt; (assuming &lt;code&gt;node&lt;/code&gt; is its child).
&lt;p&gt;The following example removes first &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; from &lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;ol&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;list&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;0&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;1&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;2&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;ol&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; li &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; list.firstElementChild;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  list.removeChild(li);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;All these methods return the inserted/removed node. In other words, &lt;code&gt;parentElem.appendChild(node)&lt;/code&gt; returns &lt;code&gt;node&lt;/code&gt;. But usually the returned value is not used, we just run the method.&lt;/p&gt;
&lt;h3 id=&#34;a-word-about-documentwrite&#34;&gt;A word about &amp;ldquo;document.write&amp;rdquo;&lt;/h3&gt;
&lt;p&gt;There&amp;rsquo;s one more, very ancient method of adding something to a web-page: &lt;code&gt;document.write&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The syntax:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;Somewhere in the page...&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.write(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;lt;b&amp;gt;Hello from JS&amp;lt;/b&amp;gt;&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;The end&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The call to &lt;code&gt;document.write(html)&lt;/code&gt; writes the &lt;code&gt;html&lt;/code&gt; into page &amp;ldquo;right here and now&amp;rdquo;. The &lt;code&gt;html&lt;/code&gt; string can be dynamically generated, so it&amp;rsquo;s kind of flexible. We can use JavaScript to create a full-fledged webpage and write it.&lt;/p&gt;
&lt;p&gt;The method comes from times when there was no DOM, no standards&amp;hellip; Really old times. It still lives, because there are scripts using it.&lt;/p&gt;
&lt;p&gt;In modern scripts we can rarely see it, because of the following important limitation:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The call to &lt;code&gt;document.write&lt;/code&gt; only works while the page is loading.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If we call it afterwards, the existing document content is erased.&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;After one second the contents of this page will be replaced...&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// document.write after 1 second
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// that&amp;#39;s after the page loaded, so it erases the existing content
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  setTimeout(() =&amp;gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.write(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;lt;b&amp;gt;...By this.&amp;lt;/b&amp;gt;&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#bd93f9&#34;&gt;1000&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So it&amp;rsquo;s kind of unusable at &amp;ldquo;after loaded&amp;rdquo; stage, unlike other DOM methods we covered above.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s the downside.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s an upside also. Technically, when &lt;code&gt;document.write&lt;/code&gt; is called while the browser is reading (&amp;ldquo;parsing&amp;rdquo;) incoming HTML, and it writes something, the browser consumes it just as if it were initially there, in the HTML text.&lt;/p&gt;
&lt;p&gt;So it works blazingly fast, because there&amp;rsquo;s &lt;em&gt;no DOM modification&lt;/em&gt; involved. It writes directly into the page text, while the DOM is not yet built.&lt;/p&gt;
&lt;p&gt;So if we need to add a lot of text into HTML dynamically, and we&amp;rsquo;re at page loading phase, and the speed matters, it may help. But in practice these requirements rarely come together. And usually we can see this method in scripts just because they are old.&lt;/p&gt;
&lt;h3 id=&#34;summary-6&#34;&gt;Summary&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Methods to create new nodes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;document.createElement(tag)&lt;/code&gt; &amp;ndash; creates an element with the given tag,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.createTextNode(value)&lt;/code&gt; &amp;ndash; creates a text node (rarely used),&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elem.cloneNode(deep)&lt;/code&gt; &amp;ndash; clones the element, if &lt;code&gt;deep==true&lt;/code&gt; then with all descendants.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Insertion and removal:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;node.append(...nodes or strings)&lt;/code&gt; &amp;ndash; insert into &lt;code&gt;node&lt;/code&gt;, at the end,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;node.prepend(...nodes or strings)&lt;/code&gt; &amp;ndash; insert into &lt;code&gt;node&lt;/code&gt;, at the beginning,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;node.before(...nodes or strings)&lt;/code&gt; –- insert right before &lt;code&gt;node&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;node.after(...nodes or strings)&lt;/code&gt; –- insert right after &lt;code&gt;node&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;node.replaceWith(...nodes or strings)&lt;/code&gt; –- replace &lt;code&gt;node&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;node.remove()&lt;/code&gt; –- remove the &lt;code&gt;node&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Text strings are inserted &amp;ldquo;as text&amp;rdquo;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There are also &amp;ldquo;old school&amp;rdquo; methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;parent.appendChild(node)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;parent.insertBefore(node, nextSibling)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;parent.removeChild(node)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;parent.replaceChild(newElem, node)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All these methods return &lt;code&gt;node&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Given some HTML in &lt;code&gt;html&lt;/code&gt;, &lt;code&gt;elem.insertAdjacentHTML(where, html)&lt;/code&gt; inserts it depending on the value of &lt;code&gt;where&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;beforebegin&amp;quot;&lt;/code&gt; &amp;ndash; insert &lt;code&gt;html&lt;/code&gt; right before &lt;code&gt;elem&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;afterbegin&amp;quot;&lt;/code&gt; &amp;ndash; insert &lt;code&gt;html&lt;/code&gt; into &lt;code&gt;elem&lt;/code&gt;, at the beginning,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;beforeend&amp;quot;&lt;/code&gt; &amp;ndash; insert &lt;code&gt;html&lt;/code&gt; into &lt;code&gt;elem&lt;/code&gt;, at the end,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;afterend&amp;quot;&lt;/code&gt; &amp;ndash; insert &lt;code&gt;html&lt;/code&gt; right after &lt;code&gt;elem&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also there are similar methods, &lt;code&gt;elem.insertAdjacentText&lt;/code&gt; and &lt;code&gt;elem.insertAdjacentElement&lt;/code&gt;, that insert text strings and elements, but they are rarely used.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To append HTML to the page before it has finished loading:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;document.write(html)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After the page is loaded such a call erases the document. Mostly seen in old scripts.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;styles-and-classes&#34;&gt;Styles and classes&lt;/h2&gt;
&lt;p&gt;Before we get into JavaScript&amp;rsquo;s ways of dealing with styles and classes &amp;ndash; here&amp;rsquo;s an important rule. Hopefully it&amp;rsquo;s obvious enough, but we still have to mention it.&lt;/p&gt;
&lt;p&gt;There are generally two ways to style an element:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a class in CSS and add it: &lt;code&gt;&amp;lt;div class=&amp;quot;...&amp;quot;&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Write properties directly into &lt;code&gt;style&lt;/code&gt;: &lt;code&gt;&amp;lt;div style=&amp;quot;...&amp;quot;&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;JavaScript can modify both classes and &lt;code&gt;style&lt;/code&gt; properties.&lt;/p&gt;
&lt;p&gt;We should always prefer CSS classes to &lt;code&gt;style&lt;/code&gt;. The latter should only be used if classes &amp;ldquo;can&amp;rsquo;t handle it&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;For example, &lt;code&gt;style&lt;/code&gt; is acceptable if we calculate coordinates of an element dynamically and want to set them from JavaScript, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; top &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;/* complex calculations */&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; left &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;/* complex calculations */&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;elem.style.left &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; left; &lt;span style=&#34;color:#6272a4&#34;&gt;// e.g &amp;#39;123px&amp;#39;, calculated at run-time
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;elem.style.top &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; top; &lt;span style=&#34;color:#6272a4&#34;&gt;// e.g &amp;#39;456px&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For other cases, like making the text red, adding a background icon &amp;ndash; describe that in CSS and then add the class (JavaScript can do that). That&amp;rsquo;s more flexible and easier to support.&lt;/p&gt;
&lt;h3 id=&#34;classname-and-classlist&#34;&gt;className and classList&lt;/h3&gt;
&lt;p&gt;Changing a class is one of the most often used actions in scripts.&lt;/p&gt;
&lt;p&gt;In the ancient time, there was a limitation in JavaScript: a reserved word like &lt;code&gt;&amp;quot;class&amp;quot;&lt;/code&gt; could not be an object property. That limitation does not exist now, but at that time it was impossible to have a &lt;code&gt;&amp;quot;class&amp;quot;&lt;/code&gt; property, like &lt;code&gt;elem.class&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So for classes the similar-looking property &lt;code&gt;&amp;quot;className&amp;quot;&lt;/code&gt; was introduced: the &lt;code&gt;elem.className&lt;/code&gt; corresponds to the &lt;code&gt;&amp;quot;class&amp;quot;&lt;/code&gt; attribute.&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;main page&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.className); &lt;span style=&#34;color:#6272a4&#34;&gt;// main page
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If we assign something to &lt;code&gt;elem.className&lt;/code&gt;, it replaces the whole string of classes. Sometimes that&amp;rsquo;s what we need, but often we want to add/remove a single class.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s another property for that: &lt;code&gt;elem.classList&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;elem.classList&lt;/code&gt; is a special object with methods to &lt;code&gt;add/remove/toggle&lt;/code&gt; a single class.&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;main page&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// add a class
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.classList.add(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;article&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.className); &lt;span style=&#34;color:#6272a4&#34;&gt;// main page article
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So we can operate both on the full class string using &lt;code&gt;className&lt;/code&gt; or on individual classes using &lt;code&gt;classList&lt;/code&gt;. What we choose depends on our needs.&lt;/p&gt;
&lt;p&gt;Methods of &lt;code&gt;classList&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;elem.classList.add/remove(&amp;quot;class&amp;quot;)&lt;/code&gt; &amp;ndash; adds/removes the class.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elem.classList.toggle(&amp;quot;class&amp;quot;)&lt;/code&gt; &amp;ndash; adds the class if it doesn&amp;rsquo;t exist, otherwise removes it.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elem.classList.contains(&amp;quot;class&amp;quot;)&lt;/code&gt; &amp;ndash; checks for the given class, returns &lt;code&gt;true/false&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Besides, &lt;code&gt;classList&lt;/code&gt; is iterable, so we can list all classes with &lt;code&gt;for..of&lt;/code&gt;, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;main page&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; name &lt;span style=&#34;color:#ff79c6&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.classList) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      alert(name); &lt;span style=&#34;color:#6272a4&#34;&gt;// main, and then page
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;element-style&#34;&gt;Element style&lt;/h3&gt;
&lt;p&gt;The property &lt;code&gt;elem.style&lt;/code&gt; is an object that corresponds to what&amp;rsquo;s written in the &lt;code&gt;&amp;quot;style&amp;quot;&lt;/code&gt; attribute. Setting &lt;code&gt;elem.style.width=&amp;quot;100px&amp;quot;&lt;/code&gt; works the same as if we had in the attribute &lt;code&gt;style&lt;/code&gt; a string &lt;code&gt;width:100px&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For multi-word property the camelCase is used:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;background&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;color  =&amp;gt; elem.style.backgroundColor
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;z&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;index           =&amp;gt; elem.style.zIndex
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;border&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;left&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;width =&amp;gt; elem.style.borderLeftWidth
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.style.backgroundColor &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; prompt(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;background color?&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;green&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Browser-prefixed properties like &lt;code&gt;-moz-border-radius&lt;/code&gt;, &lt;code&gt;-webkit-border-radius&lt;/code&gt; also follow the same rule: a dash means upper case.&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;button.style.MozBorderRadius &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;5px&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;button.style.WebkitBorderRadius &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;5px&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;resetting-the-style-property&#34;&gt;Resetting the style property&lt;/h3&gt;
&lt;p&gt;Sometimes we want to assign a style property, and later remove it.&lt;/p&gt;
&lt;p&gt;For instance, to hide an element, we can set &lt;code&gt;elem.style.display = &amp;quot;none&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then later we may want to remove the &lt;code&gt;style.display&lt;/code&gt; as if it were not set. Instead of &lt;code&gt;delete elem.style.display&lt;/code&gt; we should assign an empty string to it: &lt;code&gt;elem.style.display = &amp;quot;&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// if we run this code, the &amp;lt;body&amp;gt; will blink
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.style.display &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;none&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// hide
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;setTimeout(() =&amp;gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.style.display &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;1000&lt;/span&gt;); &lt;span style=&#34;color:#6272a4&#34;&gt;// back to normal
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If we set &lt;code&gt;style.display&lt;/code&gt; to an empty string, then the browser applies CSS classes and its built-in styles normally, as if there were no such &lt;code&gt;style.display&lt;/code&gt; property at all.&lt;/p&gt;
&lt;p&gt;Normally, we use &lt;code&gt;style.*&lt;/code&gt; to assign individual style properties. We can&amp;rsquo;t set the full style like &lt;code&gt;div.style=&amp;quot;color: red; width: 100px&amp;quot;&lt;/code&gt;, because &lt;code&gt;div.style&lt;/code&gt; is an object, and it&amp;rsquo;s read-only.&lt;/p&gt;
&lt;p&gt;To set the full style as a string, there&amp;rsquo;s a special property &lt;code&gt;style.cssText&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;div&amp;#34;&lt;/span&gt;&amp;gt;Button&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// we can set special style flags like &amp;#34;important&amp;#34; here
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  div.style.cssText&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;`color: red !important;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;    background-color: yellow;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;    width: 100px;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;    text-align: center;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;  `&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(div.style.cssText);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This property is rarely used, because such assignment removes all existing styles: it does not add, but replaces them. May occasionally delete something needed. But we can safely use it for new elements, when we know we won&amp;rsquo;t delete an existing style.&lt;/p&gt;
&lt;p&gt;The same can be accomplished by setting an attribute: &lt;code&gt;div.setAttribute(&#39;style&#39;, &#39;color: red...&#39;)&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;mind-the-units&#34;&gt;Mind the units&lt;/h3&gt;
&lt;p&gt;Don&amp;rsquo;t forget to add CSS units to values.&lt;/p&gt;
&lt;p&gt;For instance, we should not set &lt;code&gt;elem.style.top&lt;/code&gt; to &lt;code&gt;10&lt;/code&gt;, but rather to &lt;code&gt;10px&lt;/code&gt;. Otherwise it wouldn&amp;rsquo;t work:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// doesn&amp;#39;t work!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.style.margin &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.style.margin); &lt;span style=&#34;color:#6272a4&#34;&gt;// &amp;#39;&amp;#39; (empty string, the assignment is ignored)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// now add the CSS unit (px) - and it works
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.style.margin &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;20px&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.style.margin); &lt;span style=&#34;color:#6272a4&#34;&gt;// 20px
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.style.marginTop); &lt;span style=&#34;color:#6272a4&#34;&gt;// 20px
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    alert(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.style.marginLeft); &lt;span style=&#34;color:#6272a4&#34;&gt;// 20px
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Please note: the browser &amp;ldquo;unpacks&amp;rdquo; the property &lt;code&gt;style.margin&lt;/code&gt; in the last lines and infers &lt;code&gt;style.marginLeft&lt;/code&gt; and &lt;code&gt;style.marginTop&lt;/code&gt; from it.&lt;/p&gt;
&lt;h3 id=&#34;computed-styles-getcomputedstyle&#34;&gt;Computed styles: getComputedStyle&lt;/h3&gt;
&lt;p&gt;So, modifying a style is easy. But how to &lt;em&gt;read&lt;/em&gt; it?&lt;/p&gt;
&lt;p&gt;For instance, we want to know the size, margins, the color of an element. How to do it?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The &lt;code&gt;style&lt;/code&gt; property operates only on the value of the &lt;code&gt;&amp;quot;style&amp;quot;&lt;/code&gt; attribute, without any CSS cascade.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So we can&amp;rsquo;t read anything that comes from CSS classes using &lt;code&gt;elem.style&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For instance, here &lt;code&gt;style&lt;/code&gt; doesn&amp;rsquo;t see the margin:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;head&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;style&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt; { &lt;span style=&#34;color:#ff79c6&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;red&lt;/span&gt;; &lt;span style=&#34;color:#ff79c6&#34;&gt;margin&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt; } &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;style&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;head&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  The red text
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.style.color); &lt;span style=&#34;color:#6272a4&#34;&gt;// empty
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    alert(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.style.marginTop); &lt;span style=&#34;color:#6272a4&#34;&gt;// empty
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;hellip;But what if we need, say, to increase the margin by &lt;code&gt;20px&lt;/code&gt;? We would want the current value of it.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s another method for that: &lt;code&gt;getComputedStyle&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The syntax is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;getComputedStyle(element, [pseudo])
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;dl&gt;
&lt;dt&gt;element&lt;/dt&gt;
&lt;dd&gt;Element to read the value for.&lt;/dd&gt;
&lt;dt&gt;pseudo&lt;/dt&gt;
&lt;dd&gt;A pseudo-element if required, for instance &lt;code&gt;::before&lt;/code&gt;. An empty string or no argument means the element itself.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;The result is an object with styles, like &lt;code&gt;elem.style&lt;/code&gt;, but now with respect to all CSS classes.&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;head&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;style&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt; { &lt;span style=&#34;color:#ff79c6&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;red&lt;/span&gt;; &lt;span style=&#34;color:#ff79c6&#34;&gt;margin&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt; } &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;style&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;head&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; computedStyle &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; getComputedStyle(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// now we can read the margin and the color from it
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert( computedStyle.marginTop ); &lt;span style=&#34;color:#6272a4&#34;&gt;// 5px
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    alert( computedStyle.color ); &lt;span style=&#34;color:#6272a4&#34;&gt;// rgb(255, 0, 0)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are two concepts in &lt;a href=&#34;https://drafts.csswg.org/cssom/#resolved-values&#34;&gt;CSS&lt;/a&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A &lt;em&gt;computed&lt;/em&gt; style value is the value after all CSS rules and CSS inheritance is applied, as the result of the CSS cascade. It can look like &lt;code&gt;height:1em&lt;/code&gt; or &lt;code&gt;font-size:125%&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;A &lt;em&gt;resolved&lt;/em&gt; style value is the one finally applied to the element. Values like &lt;code&gt;1em&lt;/code&gt; or &lt;code&gt;125%&lt;/code&gt; are relative. The browser takes the computed value and makes all units fixed and absolute, for instance: &lt;code&gt;height:20px&lt;/code&gt; or &lt;code&gt;font-size:16px&lt;/code&gt;. For geometry properties resolved values may have a floating point, like &lt;code&gt;width:50.5px&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A long time ago &lt;code&gt;getComputedStyle&lt;/code&gt; was created to get computed values, but it turned out that resolved values are much more convenient, and the standard changed.&lt;/p&gt;
&lt;p&gt;So nowadays &lt;code&gt;getComputedStyle&lt;/code&gt; actually returns the resolved value of the property, usually in &lt;code&gt;px&lt;/code&gt; for geometry.&lt;/p&gt;
&lt;p&gt;We should always ask for the exact property that we want, like &lt;code&gt;paddingLeft&lt;/code&gt; or &lt;code&gt;marginTop&lt;/code&gt; or &lt;code&gt;borderTopWidth&lt;/code&gt;. Otherwise the correct result is not guaranteed.&lt;/p&gt;
&lt;p&gt;For instance, if there are properties &lt;code&gt;paddingLeft/paddingTop&lt;/code&gt;, then what should we get for &lt;code&gt;getComputedStyle(elem).padding&lt;/code&gt;? Nothing, or maybe a &amp;ldquo;generated&amp;rdquo; value from known paddings? There&amp;rsquo;s no standard rule here.&lt;/p&gt;
&lt;p&gt;There are other inconsistencies. As an example, some browsers (Chrome) show &lt;code&gt;10px&lt;/code&gt; in the document below, and some of them (Firefox) &amp;ndash;  do not:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;style&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;margin&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;style&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; style &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; getComputedStyle(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(style.margin); &lt;span style=&#34;color:#6272a4&#34;&gt;// empty string in Firefox
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Visited links may be colored using &lt;code&gt;:visited&lt;/code&gt; CSS pseudoclass.&lt;/p&gt;
&lt;p&gt;But &lt;code&gt;getComputedStyle&lt;/code&gt; does not give access to that color, because otherwise an arbitrary page could find out whether the user visited a link by creating it on the page and checking the styles.&lt;/p&gt;
&lt;p&gt;JavaScript may not see the styles applied by &lt;code&gt;:visited&lt;/code&gt;. And also, there&amp;rsquo;s a limitation in CSS that forbids applying geometry-changing styles in &lt;code&gt;:visited&lt;/code&gt;. That&amp;rsquo;s to guarantee that there&amp;rsquo;s no side way for an evil page to test if a link was visited and hence to break the privacy.&lt;/p&gt;
&lt;h3 id=&#34;summary-7&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;To manage classes, there are two DOM properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;className&lt;/code&gt; &amp;ndash; the string value, good to manage the whole set of classes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;classList&lt;/code&gt; &amp;ndash; the object with methods &lt;code&gt;add/remove/toggle/contains&lt;/code&gt;, good for individual classes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To change the styles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;style&lt;/code&gt; property is an object with camelCased styles. Reading and writing to it has the same meaning as modifying individual properties in the &lt;code&gt;&amp;quot;style&amp;quot;&lt;/code&gt; attribute. To see how to apply &lt;code&gt;important&lt;/code&gt; and other rare stuff &amp;ndash; there&amp;rsquo;s a list of methods at &lt;a href=&#34;mdn:api/CSSStyleDeclaration&#34;&gt;MDN&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;style.cssText&lt;/code&gt; property corresponds to the whole &lt;code&gt;&amp;quot;style&amp;quot;&lt;/code&gt; attribute, the full string of styles.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To read the resolved styles (with respect to all classes, after all CSS is applied and final values are calculated):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;getComputedStyle(elem, [pseudo])&lt;/code&gt; returns the style-like object with them. Read-only.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;element-size-and-scrolling&#34;&gt;Element size and scrolling&lt;/h2&gt;
&lt;p&gt;There are many JavaScript properties that allow us to read information about element width, height and other geometry features.&lt;/p&gt;
&lt;p&gt;We often need them when moving or positioning elements in JavaScript.&lt;/p&gt;
&lt;h3 id=&#34;sample-element&#34;&gt;Sample element&lt;/h3&gt;
&lt;p&gt;As a sample element to demonstrate properties we&amp;rsquo;ll use the one given below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;example&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ...Text...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;style&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  #example {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;width&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;300&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;height&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;200&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;border&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;25&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;solid&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;#E8C48F&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;padding&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;              
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;overflow&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt;;             
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;style&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It has the border, padding and scrolling. The full set of features. There are no margins, as they are not the part of the element itself, and there are no special properties for them.&lt;/p&gt;
&lt;p&gt;The element looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;metric-css.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;You can &lt;a href=&#34;sandbox:metric&#34;&gt;open the document in the sandbox&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The picture above demonstrates the most complex case when the element has a scrollbar. Some browsers (not all) reserve the space for it by taking it from the content (labeled as &amp;ldquo;content width&amp;rdquo; above).&lt;/p&gt;
&lt;p&gt;So, without scrollbar the content width would be &lt;code&gt;300px&lt;/code&gt;, but if the scrollbar is &lt;code&gt;16px&lt;/code&gt; wide (the width may vary between devices and browsers) then only &lt;code&gt;300 - 16 = 284px&lt;/code&gt; remains, and we should take it into account. That&amp;rsquo;s why examples from this chapter assume that there&amp;rsquo;s a scrollbar. Without it, some calculations are simpler.&lt;/p&gt;
&lt;p&gt;Usually paddings are shown empty on our illustrations, but if there&amp;rsquo;s a lot of text in the element and it overflows, then browsers show the &amp;ldquo;overflowing&amp;rdquo; text at &lt;code&gt;padding-bottom&lt;/code&gt;, that&amp;rsquo;s normal.&lt;/p&gt;
&lt;h3 id=&#34;geometry&#34;&gt;Geometry&lt;/h3&gt;
&lt;p&gt;Here&amp;rsquo;s the overall picture with geometry properties:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;metric-all.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Values of these properties are technically numbers, but these numbers are &amp;ldquo;of pixels&amp;rdquo;, so these are pixel measurements.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s start exploring the properties starting from the outside of the element.&lt;/p&gt;
&lt;h3 id=&#34;offsetparent-offsetlefttop&#34;&gt;offsetParent, offsetLeft/Top&lt;/h3&gt;
&lt;p&gt;These properties are rarely needed, but still they are the &amp;ldquo;most outer&amp;rdquo; geometry properties, so we&amp;rsquo;ll start with them.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;offsetParent&lt;/code&gt; is the nearest ancestor that the browser uses for calculating coordinates during rendering.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s the nearest ancestor that is one of the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CSS-positioned (&lt;code&gt;position&lt;/code&gt; is &lt;code&gt;absolute&lt;/code&gt;, &lt;code&gt;relative&lt;/code&gt;, &lt;code&gt;fixed&lt;/code&gt; or &lt;code&gt;sticky&lt;/code&gt;),  or&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;th&amp;gt;&lt;/code&gt;, or &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;,  or&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Properties &lt;code&gt;offsetLeft/offsetTop&lt;/code&gt; provide x/y coordinates relative to &lt;code&gt;offsetParent&lt;/code&gt; upper-left corner.&lt;/p&gt;
&lt;p&gt;In the example below the inner &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; has &lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt; as &lt;code&gt;offsetParent&lt;/code&gt; and &lt;code&gt;offsetLeft/offsetTop&lt;/code&gt; shifts from its upper-left corner (&lt;code&gt;180&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;position: relative&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;main&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;article&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;example&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;position: absolute; left: 180px; top: 180px&amp;#34;&lt;/span&gt;&amp;gt;...&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;article&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;main&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(example.offsetParent.id); &lt;span style=&#34;color:#6272a4&#34;&gt;// main
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  alert(example.offsetLeft); &lt;span style=&#34;color:#6272a4&#34;&gt;// 180 (note: a number, not a string &amp;#34;180px&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  alert(example.offsetTop); &lt;span style=&#34;color:#6272a4&#34;&gt;// 180
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;metric-offset-parent.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;There are several occasions when &lt;code&gt;offsetParent&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;For not shown elements (&lt;code&gt;display:none&lt;/code&gt; or not in the document).&lt;/li&gt;
&lt;li&gt;For &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;For elements with &lt;code&gt;position:fixed&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;offsetwidthheight&#34;&gt;offsetWidth/Height&lt;/h3&gt;
&lt;p&gt;Now let&amp;rsquo;s move on to the element itself.&lt;/p&gt;
&lt;p&gt;These two properties are the simplest ones. They provide the &amp;ldquo;outer&amp;rdquo; width/height of the element. Or, in other words, its full size including borders.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;metric-offset-width-height.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;For our sample element:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;offsetWidth = 390&lt;/code&gt; &amp;ndash; the outer width, can be calculated as inner CSS-width (&lt;code&gt;300px&lt;/code&gt;) plus paddings (&lt;code&gt;2 * 20px&lt;/code&gt;) and borders (&lt;code&gt;2 * 25px&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;offsetHeight = 290&lt;/code&gt; &amp;ndash; the outer height.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Geometry properties are calculated only for displayed elements.&lt;/p&gt;
&lt;p&gt;If an element (or any of its ancestors) has &lt;code&gt;display:none&lt;/code&gt; or is not in the document, then all geometry properties are zero (or &lt;code&gt;null&lt;/code&gt; for &lt;code&gt;offsetParent&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;For example, &lt;code&gt;offsetParent&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, and &lt;code&gt;offsetWidth&lt;/code&gt;, &lt;code&gt;offsetHeight&lt;/code&gt; are &lt;code&gt;0&lt;/code&gt; when we created an element, but haven&amp;rsquo;t inserted it into the document yet, or it (or it&amp;rsquo;s ancestor) has &lt;code&gt;display:none&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can use this to check if an element is hidden, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; isHidden(elem) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;!&lt;/span&gt;elem.offsetWidth &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;!&lt;/span&gt;elem.offsetHeight;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Please note that such &lt;code&gt;isHidden&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; for elements that are on-screen, but have zero sizes (like an empty &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;).&lt;/p&gt;
&lt;h3 id=&#34;clienttopleft&#34;&gt;clientTop/Left&lt;/h3&gt;
&lt;p&gt;Inside the element we have the borders.&lt;/p&gt;
&lt;p&gt;To measure them, there are properties &lt;code&gt;clientTop&lt;/code&gt; and &lt;code&gt;clientLeft&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In our example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;clientLeft = 25&lt;/code&gt; &amp;ndash; left border width&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clientTop = 25&lt;/code&gt; &amp;ndash; top border width&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;metric-client-left-top.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&amp;hellip;But to be precise &amp;ndash; these properties are not border width/height, but rather relative coordinates of the inner side from the outer side.&lt;/p&gt;
&lt;p&gt;What&amp;rsquo;s the difference?&lt;/p&gt;
&lt;p&gt;It becomes visible when the document is right-to-left (the operating system is in Arabic or Hebrew languages). The scrollbar is then not on the right, but on the left, and then &lt;code&gt;clientLeft&lt;/code&gt; also includes the scrollbar width.&lt;/p&gt;
&lt;p&gt;In that case, &lt;code&gt;clientLeft&lt;/code&gt; would be not &lt;code&gt;25&lt;/code&gt;, but with the scrollbar width &lt;code&gt;25 + 16 = 41&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the example in hebrew:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;metric-client-left-top-rtl.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;clientwidthheight&#34;&gt;clientWidth/Height&lt;/h3&gt;
&lt;p&gt;These properties provide the size of the area inside the element borders.&lt;/p&gt;
&lt;p&gt;They include the content width together with paddings, but without the scrollbar:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;metric-client-width-height.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;On the picture above let&amp;rsquo;s first consider &lt;code&gt;clientHeight&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s no horizontal scrollbar, so it&amp;rsquo;s exactly the sum of what&amp;rsquo;s inside the borders: CSS-height &lt;code&gt;200px&lt;/code&gt; plus top and bottom paddings (&lt;code&gt;2 * 20px&lt;/code&gt;) total &lt;code&gt;240px&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now &lt;code&gt;clientWidth&lt;/code&gt; &amp;ndash; here the content width is not &lt;code&gt;300px&lt;/code&gt;, but &lt;code&gt;284px&lt;/code&gt;, because &lt;code&gt;16px&lt;/code&gt; are occupied by the scrollbar. So the sum is &lt;code&gt;284px&lt;/code&gt; plus left and right paddings, total &lt;code&gt;324px&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If there are no paddings, then &lt;code&gt;clientWidth/Height&lt;/code&gt; is exactly the content area, inside the borders and the scrollbar (if any).&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;metric-client-width-nopadding.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;So when there&amp;rsquo;s no padding we can use &lt;code&gt;clientWidth/clientHeight&lt;/code&gt; to get the content area size.&lt;/p&gt;
&lt;h3 id=&#34;scrollwidthheight&#34;&gt;scrollWidth/Height&lt;/h3&gt;
&lt;p&gt;These properties are like &lt;code&gt;clientWidth/clientHeight&lt;/code&gt;, but they also include the scrolled out (hidden) parts:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;metric-scroll-width-height.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;On the picture above:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scrollHeight = 723&lt;/code&gt; &amp;ndash; is the full inner height of the content area including the scrolled out parts.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scrollWidth = 324&lt;/code&gt; &amp;ndash; is the full inner width, here we have no horizontal scroll, so it equals &lt;code&gt;clientWidth&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can use these properties to expand the element wide to its full width/height.&lt;/p&gt;
&lt;p&gt;Like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// expand the element to the full content height
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;element.style.height &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;element.scrollHeight&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;px`&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Click the button to expand the element:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;element&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;width:300px;height:200px; padding: 0;overflow: auto; border:1px solid black;&amp;#34;&lt;/span&gt;&amp;gt;text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text text&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;padding:0&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;element.style.height = `${element.scrollHeight}px`&amp;#34;&lt;/span&gt;&amp;gt;element.style.height = `${element.scrollHeight}px`&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;scrollleftscrolltop&#34;&gt;scrollLeft/scrollTop&lt;/h3&gt;
&lt;p&gt;Properties &lt;code&gt;scrollLeft/scrollTop&lt;/code&gt; are the width/height of the hidden, scrolled out part of the element.&lt;/p&gt;
&lt;p&gt;On the picture below we can see &lt;code&gt;scrollHeight&lt;/code&gt; and &lt;code&gt;scrollTop&lt;/code&gt; for a block with a vertical scroll.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;metric-scroll-top.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;In other words, &lt;code&gt;scrollTop&lt;/code&gt; is &amp;ldquo;how much is scrolled up&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Most of the geometry properties here are read-only, but &lt;code&gt;scrollLeft/scrollTop&lt;/code&gt; can be changed, and the browser will scroll the element.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;If you click the element below, the code `elem.scrollTop += 10` executes. That makes the element content scroll `10px` down.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;this.scrollTop+=10&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;cursor:pointer;border:1px solid black;width:100px;height:80px;overflow:auto&amp;#34;&lt;/span&gt;&amp;gt;Click&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;br&lt;/span&gt;&amp;gt;Me&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;br&lt;/span&gt;&amp;gt;1&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;br&lt;/span&gt;&amp;gt;2&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;br&lt;/span&gt;&amp;gt;3&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;br&lt;/span&gt;&amp;gt;4&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;br&lt;/span&gt;&amp;gt;5&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;br&lt;/span&gt;&amp;gt;6&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;br&lt;/span&gt;&amp;gt;7&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;br&lt;/span&gt;&amp;gt;8&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;br&lt;/span&gt;&amp;gt;9&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Setting &lt;code&gt;scrollTop&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt; or a big value, such as &lt;code&gt;1e9&lt;/code&gt; will make the element scroll to the very top/bottom respectively.&lt;/p&gt;
&lt;h3 id=&#34;dont-take-widthheight-from-css&#34;&gt;Don&amp;rsquo;t take width/height from CSS&lt;/h3&gt;
&lt;p&gt;We&amp;rsquo;ve just covered geometry properties of DOM elements, that can be used to get widths, heights and calculate distances.&lt;/p&gt;
&lt;p&gt;But as we know from the chapter &lt;a href=&#34;info:styles-and-classes&#34;&gt;info:styles-and-classes&lt;/a&gt;, we can read CSS-height and width using &lt;code&gt;getComputedStyle&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So why not to read the width of an element with &lt;code&gt;getComputedStyle&lt;/code&gt;, like this?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; elem &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( getComputedStyle(elem).width ); &lt;span style=&#34;color:#6272a4&#34;&gt;// show CSS width for elem
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Why should we use geometry properties instead? There are two reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;First, CSS &lt;code&gt;width/height&lt;/code&gt; depend on another property: &lt;code&gt;box-sizing&lt;/code&gt; that defines &amp;ldquo;what is&amp;rdquo; CSS width and height. A change in &lt;code&gt;box-sizing&lt;/code&gt; for CSS purposes may break such JavaScript.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Second, CSS &lt;code&gt;width/height&lt;/code&gt; may be &lt;code&gt;auto&lt;/code&gt;, for instance for an inline element:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;elem&amp;#34;&lt;/span&gt;&amp;gt;Hello!&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert( getComputedStyle(elem).width ); &lt;span style=&#34;color:#6272a4&#34;&gt;// auto
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;From the CSS standpoint, &lt;code&gt;width:auto&lt;/code&gt; is perfectly normal, but in JavaScript we need an exact size in &lt;code&gt;px&lt;/code&gt; that we can use in calculations. So here CSS width is useless.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And there&amp;rsquo;s one more reason: a scrollbar. Sometimes the code that works fine without a scrollbar becomes buggy with it, because a scrollbar takes the space from the content in some browsers. So the real width available for the content is &lt;em&gt;less&lt;/em&gt; than CSS width. And &lt;code&gt;clientWidth/clientHeight&lt;/code&gt; take that into account.&lt;/p&gt;
&lt;p&gt;&amp;hellip;But with &lt;code&gt;getComputedStyle(elem).width&lt;/code&gt; the situation is different. Some browsers (e.g. Chrome) return the real inner width, minus the scrollbar, and some of them (e.g. Firefox) &amp;ndash; CSS width (ignore the scrollbar). Such cross-browser differences is the reason not to use &lt;code&gt;getComputedStyle&lt;/code&gt;, but rather rely on geometry properties.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;If your browser reserves the space for a scrollbar (most browsers for Windows do), then you can test it below.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[iframe src=&amp;#34;cssWidthScroll&amp;#34; link border=1]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The element with text has CSS `width:300px`.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;On a Desktop Windows OS, Firefox, Chrome, Edge all reserve the space for the scrollbar. But  Firefox shows `300px`, while Chrome and Edge show less. That&amp;#39;s because Firefox returns the CSS width and other browsers return the &amp;#34;real&amp;#34; width.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Please note that the described difference is only about reading &lt;code&gt;getComputedStyle(...).width&lt;/code&gt; from JavaScript, visually everything is correct.&lt;/p&gt;
&lt;h3 id=&#34;summary-8&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;Elements have the following geometry properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;offsetParent&lt;/code&gt; &amp;ndash; is the nearest positioned ancestor or &lt;code&gt;td&lt;/code&gt;, &lt;code&gt;th&lt;/code&gt;, &lt;code&gt;table&lt;/code&gt;, &lt;code&gt;body&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;offsetLeft/offsetTop&lt;/code&gt; &amp;ndash; coordinates relative to the upper-left edge of &lt;code&gt;offsetParent&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;offsetWidth/offsetHeight&lt;/code&gt; &amp;ndash; &amp;ldquo;outer&amp;rdquo; width/height of an element including borders.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clientLeft/clientTop&lt;/code&gt; &amp;ndash; the distances from the upper-left outer corner to the upper-left inner (content + padding) corner. For left-to-right OS they are always the widths of left/top borders. For right-to-left OS the vertical scrollbar is on the left so &lt;code&gt;clientLeft&lt;/code&gt; includes its width too.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clientWidth/clientHeight&lt;/code&gt; &amp;ndash; the width/height of the content including paddings, but without the scrollbar.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scrollWidth/scrollHeight&lt;/code&gt; &amp;ndash; the width/height of the content, just like &lt;code&gt;clientWidth/clientHeight&lt;/code&gt;, but also include scrolled-out, invisible part of the element.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scrollLeft/scrollTop&lt;/code&gt; &amp;ndash; width/height of the scrolled out upper part of the element, starting from its upper-left corner.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All properties are read-only except &lt;code&gt;scrollLeft/scrollTop&lt;/code&gt; that make the browser scroll the element if changed.&lt;/p&gt;
&lt;h2 id=&#34;window-sizes-and-scrolling&#34;&gt;Window sizes and scrolling&lt;/h2&gt;
&lt;p&gt;How do we find the width and height of the browser window? How do we get the full width and height of the document, including the scrolled out part? How do we scroll the page using JavaScript?&lt;/p&gt;
&lt;p&gt;For most such requests, we can use the root document element &lt;code&gt;document.documentElement&lt;/code&gt;, that corresponds to the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; tag. But there are additional methods and peculiarities important enough to consider.&lt;/p&gt;
&lt;h3 id=&#34;widthheight-of-the-window&#34;&gt;Width/height of the window&lt;/h3&gt;
&lt;p&gt;To get window width and height we can use &lt;code&gt;clientWidth/clientHeight&lt;/code&gt; of &lt;code&gt;document.documentElement&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;For instance, this button shows the height of your window:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert(document.documentElement.clientHeight)&amp;#34;&lt;/span&gt;&amp;gt;alert(document.documentElement.clientHeight)&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Browsers also support properties &lt;code&gt;window.innerWidth/innerHeight&lt;/code&gt;. They look like what we want. So why not to use them instead?&lt;/p&gt;
&lt;p&gt;If there exists a scrollbar, and it occupies some space, &lt;code&gt;clientWidth/clientHeight&lt;/code&gt; provide the width/height without it (subtract it). In other words, they return width/height of the visible part of the document, available for the content.&lt;/p&gt;
&lt;p&gt;&amp;hellip;And &lt;code&gt;window.innerWidth/innerHeight&lt;/code&gt; include the scrollbar.&lt;/p&gt;
&lt;p&gt;If there&amp;rsquo;s a scrollbar, and it occupies some space, then these two lines show different values:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;window&lt;/span&gt;.innerWidth ); &lt;span style=&#34;color:#6272a4&#34;&gt;// full window width
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.documentElement.clientWidth ); &lt;span style=&#34;color:#6272a4&#34;&gt;// window width minus the scrollbar
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In most cases we need the &lt;em&gt;available&lt;/em&gt; window width: to draw or position something. That is: inside scrollbars if there are any. So we should use &lt;code&gt;documentElement.clientHeight/Width&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Please note: top-level geometry properties may work a little bit differently when there&amp;rsquo;s no &lt;code&gt;&amp;lt;!DOCTYPE HTML&amp;gt;&lt;/code&gt; in HTML. Odd things are possible.&lt;/p&gt;
&lt;p&gt;In modern HTML we should always write &lt;code&gt;DOCTYPE&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;widthheight-of-the-document&#34;&gt;Width/height of the document&lt;/h3&gt;
&lt;p&gt;Theoretically, as the root document element is &lt;code&gt;document.documentElement&lt;/code&gt;, and it encloses all the content, we could measure document full size as &lt;code&gt;document.documentElement.scrollWidth/scrollHeight&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But on that element, for the whole page, these properties do not work as intended. In Chrome/Safari/Opera if there&amp;rsquo;s no scroll, then &lt;code&gt;documentElement.scrollHeight&lt;/code&gt; may be even less than  &lt;code&gt;documentElement.clientHeight&lt;/code&gt;! Sounds like a nonsense, weird, right?&lt;/p&gt;
&lt;p&gt;To reliably obtain the full document height, we should take the maximum of these properties:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; scrollHeight &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Math&lt;/span&gt;.max(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.scrollHeight, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.documentElement.scrollHeight,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.offsetHeight, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.documentElement.offsetHeight,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.clientHeight, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.documentElement.clientHeight
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Full document height, with scrolled out part: &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; scrollHeight);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Why so? Better don&amp;rsquo;t ask. These inconsistencies come from ancient times, not a &amp;ldquo;smart&amp;rdquo; logic.&lt;/p&gt;
&lt;h3 id=&#34;get-the-current-scroll-page-scroll&#34;&gt;Get the current scroll [#page-scroll]&lt;/h3&gt;
&lt;p&gt;DOM elements have their current scroll state in &lt;code&gt;elem.scrollLeft/scrollTop&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For document scroll &lt;code&gt;document.documentElement.scrollLeft/Top&lt;/code&gt; works in most browsers, except older WebKit-based ones, like Safari (bug &lt;a href=&#34;https://bugs.webkit.org/show_bug.cgi?id=5991&#34;&gt;5991&lt;/a&gt;), where we should use &lt;code&gt;document.body&lt;/code&gt; instead of &lt;code&gt;document.documentElement&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Luckily, we don&amp;rsquo;t have to remember these peculiarities at all, because the scroll is available in the special properties &lt;code&gt;window.pageXOffset/pageYOffset&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Current scroll from the top: &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;window&lt;/span&gt;.pageYOffset);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Current scroll from the left: &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;window&lt;/span&gt;.pageXOffset);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;These properties are read-only.&lt;/p&gt;
&lt;h3 id=&#34;scrolling-scrollto-scrollby-scrollintoview-window-scroll&#34;&gt;Scrolling: scrollTo, scrollBy, scrollIntoView [#window-scroll]&lt;/h3&gt;
&lt;p&gt;To scroll the page from JavaScript, its DOM must be fully built.&lt;/p&gt;
&lt;p&gt;For instance, if we try to scroll the page from the script in &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;, it won&amp;rsquo;t work.&lt;/p&gt;
&lt;p&gt;Regular elements can be scrolled by changing &lt;code&gt;scrollTop/scrollLeft&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can do the same for the page using &lt;code&gt;document.documentElement.scrollTop/Left&lt;/code&gt; (except Safari, where &lt;code&gt;document.body.scrollTop/Left&lt;/code&gt; should be used instead).&lt;/p&gt;
&lt;p&gt;Alternatively, there&amp;rsquo;s a simpler, universal solution: special methods  &lt;a href=&#34;mdn:api/Window/scrollBy&#34;&gt;window.scrollBy(x,y)&lt;/a&gt; and &lt;a href=&#34;mdn:api/Window/scrollTo&#34;&gt;window.scrollTo(pageX,pageY)&lt;/a&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The method &lt;code&gt;scrollBy(x,y)&lt;/code&gt; scrolls the page &lt;em&gt;relative to its current position&lt;/em&gt;. For instance, &lt;code&gt;scrollBy(0,10)&lt;/code&gt; scrolls the page &lt;code&gt;10px&lt;/code&gt; down.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The button below demonstrates this:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;window.scrollBy(0,10)&amp;#34;&lt;/span&gt;&amp;gt;window.scrollBy(0,10)&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The method &lt;code&gt;scrollTo(pageX,pageY)&lt;/code&gt; scrolls the page &lt;em&gt;to absolute coordinates&lt;/em&gt;, so that the top-left corner of the visible part has coordinates &lt;code&gt;(pageX, pageY)&lt;/code&gt; relative to the document&amp;rsquo;s top-left corner. It&amp;rsquo;s like setting &lt;code&gt;scrollLeft/scrollTop&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To scroll to the very beginning, we can use &lt;code&gt;scrollTo(0,0)&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;window.scrollTo(0,0)&amp;#34;&lt;/span&gt;&amp;gt;window.scrollTo(0,0)&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These methods work for all browsers the same way.&lt;/p&gt;
&lt;h3 id=&#34;scrollintoview&#34;&gt;scrollIntoView&lt;/h3&gt;
&lt;p&gt;For completeness, let&amp;rsquo;s cover one more method:  &lt;a href=&#34;mdn:api/Element/scrollIntoView&#34;&gt;elem.scrollIntoView(top)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The call to &lt;code&gt;elem.scrollIntoView(top)&lt;/code&gt; scrolls the page to make &lt;code&gt;elem&lt;/code&gt; visible. It has one argument:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if &lt;code&gt;top=true&lt;/code&gt; (that&amp;rsquo;s the default), then the page will be scrolled to make &lt;code&gt;elem&lt;/code&gt; appear on the top of the window. The upper edge of the element is aligned with the window top.&lt;/li&gt;
&lt;li&gt;if &lt;code&gt;top=false&lt;/code&gt;, then the page scrolls to make &lt;code&gt;elem&lt;/code&gt; appear at the bottom. The bottom edge of the element is aligned with the window bottom.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The button below scrolls the page to make itself show at the window top:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;this.scrollIntoView()&amp;#34;&lt;/span&gt;&amp;gt;this.scrollIntoView()&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;And this button scrolls the page to show it at the bottom:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;this.scrollIntoView(false)&amp;#34;&lt;/span&gt;&amp;gt;this.scrollIntoView(false)&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;forbid-the-scrolling&#34;&gt;Forbid the scrolling&lt;/h3&gt;
&lt;p&gt;Sometimes we need to make the document &amp;ldquo;unscrollable&amp;rdquo;. For instance, when we need to cover it with a large message requiring immediate attention, and we want the visitor to interact with that message, not with the document.&lt;/p&gt;
&lt;p&gt;To make the document unscrollable, it&amp;rsquo;s enough to set &lt;code&gt;document.body.style.overflow = &amp;quot;hidden&amp;quot;&lt;/code&gt;. The page will freeze on its current scroll.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Try it:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;document.body.style.overflow = &amp;#39;hidden&amp;#39;&amp;#34;&lt;/span&gt;&amp;gt;document.body.style.overflow = &amp;#39;hidden&amp;#39;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;document.body.style.overflow = &amp;#39;&amp;#39;&amp;#34;&lt;/span&gt;&amp;gt;document.body.style.overflow = &amp;#39;&amp;#39;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The first button freezes the scroll, the second one resumes it.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can use the same technique to &amp;ldquo;freeze&amp;rdquo; the scroll for other elements, not just for &lt;code&gt;document.body&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The drawback of the method is that the scrollbar disappears. If it occupied some space, then that space is now free, and the content &amp;ldquo;jumps&amp;rdquo; to fill it.&lt;/p&gt;
&lt;p&gt;That looks a bit odd, but can be worked around if we compare &lt;code&gt;clientWidth&lt;/code&gt; before and after the freeze, and if it increased (the scrollbar disappeared) then add &lt;code&gt;padding&lt;/code&gt; to &lt;code&gt;document.body&lt;/code&gt; in place of the scrollbar, to keep the content width the same.&lt;/p&gt;
&lt;h3 id=&#34;summary-9&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;Geometry:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Width/height of the visible part of the document (content area width/height): &lt;code&gt;document.documentElement.clientWidth/Height&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Width/height of the whole document, with the scrolled out part:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; scrollHeight &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Math&lt;/span&gt;.max(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.scrollHeight, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.documentElement.scrollHeight,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.offsetHeight, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.documentElement.offsetHeight,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.clientHeight, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.documentElement.clientHeight
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Scrolling:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Read the current scroll: &lt;code&gt;window.pageYOffset/pageXOffset&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change the current scroll:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;window.scrollTo(pageX,pageY)&lt;/code&gt; &amp;ndash; absolute coordinates,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;window.scrollBy(x,y)&lt;/code&gt; &amp;ndash; scroll relative the current place,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elem.scrollIntoView(top)&lt;/code&gt; &amp;ndash; scroll to make &lt;code&gt;elem&lt;/code&gt; visible (align with the top/bottom of the window).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;coordinates&#34;&gt;Coordinates&lt;/h2&gt;
&lt;p&gt;To move elements around we should be familiar with coordinates.&lt;/p&gt;
&lt;p&gt;Most JavaScript methods deal with one of two coordinate systems:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Relative to the window&lt;/strong&gt; - similar to &lt;code&gt;position:fixed&lt;/code&gt;, calculated from the window top/left edge.
&lt;ul&gt;
&lt;li&gt;we&amp;rsquo;ll denote these coordinates as &lt;code&gt;clientX/clientY&lt;/code&gt;, the reasoning for such name will become clear later, when we study event properties.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Relative to the document&lt;/strong&gt; - similar to &lt;code&gt;position:absolute&lt;/code&gt; in the document root, calculated from the document top/left edge.
&lt;ul&gt;
&lt;li&gt;we&amp;rsquo;ll denote them &lt;code&gt;pageX/pageY&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;When the page is scrolled to the very beginning, so that the top/left corner of the window is exactly the document top/left corner, these coordinates equal each other. But after the document shifts, window-relative coordinates of elements change, as elements move across the window, while document-relative coordinates remain the same.&lt;/p&gt;
&lt;p&gt;On this picture we take a point in the document and demonstrate its coordinates before the scroll (left) and after it (right):&lt;/p&gt;
&lt;p&gt;When the document scrolled:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pageY&lt;/code&gt; - document-relative coordinate stayed the same, it&amp;rsquo;s counted from the document top (now scrolled out).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clientY&lt;/code&gt; - window-relative coordinate did change (the arrow became shorter), as the same point became closer to window top.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;element-coordinates-getboundingclientrect&#34;&gt;Element coordinates: getBoundingClientRect&lt;/h3&gt;
&lt;p&gt;The method &lt;code&gt;elem.getBoundingClientRect()&lt;/code&gt; returns window coordinates for a minimal rectangle that encloses &lt;code&gt;elem&lt;/code&gt; as an object of built-in &lt;a href=&#34;https://www.w3.org/TR/geometry-1/#domrect&#34;&gt;DOMRect&lt;/a&gt; class.&lt;/p&gt;
&lt;p&gt;Main &lt;code&gt;DOMRect&lt;/code&gt; properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x/y&lt;/code&gt; &amp;ndash; X/Y-coordinates of the rectangle origin relative to window,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;width/height&lt;/code&gt; &amp;ndash; width/height of the rectangle (can be negative).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additionally, there are derived properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;top/bottom&lt;/code&gt; &amp;ndash; Y-coordinate for the top/bottom rectangle edge,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;left/right&lt;/code&gt; &amp;ndash; X-coordinate for the left/right rectangle edge.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;For instance click this button to see its window coordinates:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;brTest&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;button&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Get coordinates using button.getBoundingClientRect() for this button&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;showRect(this)&amp;#39;&lt;/span&gt;/&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; showRect(elem) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; r &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; elem.getBoundingClientRect();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;`x:&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;r.x&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;y:&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;r.y&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;width:&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;r.width&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;height:&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;r.height&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;top:&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;r.top&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;bottom:&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;r.bottom&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;left:&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;r.left&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;right:&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;r.right&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;If you scroll the page and repeat, you&amp;#39;ll notice that as window-relative button position changes, its window coordinates (`y/top/bottom` if you scroll vertically) change as well.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here&amp;rsquo;s the picture of &lt;code&gt;elem.getBoundingClientRect()&lt;/code&gt; output:&lt;/p&gt;
&lt;p&gt;As you can see, &lt;code&gt;x/y&lt;/code&gt; and &lt;code&gt;width/height&lt;/code&gt; fully describe the rectangle. Derived properties can be easily calculated from them:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;left = x&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;top = y&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;right = x + width&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bottom = y + height&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please note:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Coordinates may be decimal fractions, such as &lt;code&gt;10.5&lt;/code&gt;. That&amp;rsquo;s normal, internally browser uses fractions in calculations. We don&amp;rsquo;t have to round them when setting to &lt;code&gt;style.left/top&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Coordinates may be negative. For instance, if the page is scrolled so that &lt;code&gt;elem&lt;/code&gt; is now above the window, then &lt;code&gt;elem.getBoundingClientRect().top&lt;/code&gt; is negative.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mathematically, a rectangle is uniquely defined with its starting point &lt;code&gt;(x,y)&lt;/code&gt; and the direction vector &lt;code&gt;(width,height)&lt;/code&gt;. So the additional derived properties are for convenience.&lt;/p&gt;
&lt;p&gt;Technically it&amp;rsquo;s possible for &lt;code&gt;width/height&lt;/code&gt; to be negative, that allows for &amp;ldquo;directed&amp;rdquo; rectangle, e.g. to represent mouse selection with properly marked start and end.&lt;/p&gt;
&lt;p&gt;Negative &lt;code&gt;width/height&lt;/code&gt; values mean that the rectangle starts at its bottom-right corner and then &amp;ldquo;grows&amp;rdquo; left-upwards.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a rectangle with negative &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; (e.g. &lt;code&gt;width=-200&lt;/code&gt;, &lt;code&gt;height=-100&lt;/code&gt;):&lt;/p&gt;
&lt;p&gt;As you can see, &lt;code&gt;left/top&lt;/code&gt; do not equal &lt;code&gt;x/y&lt;/code&gt; in such case.&lt;/p&gt;
&lt;p&gt;In practice though, &lt;code&gt;elem.getBoundingClientRect()&lt;/code&gt; always returns positive width/height, here we mention negative &lt;code&gt;width/height&lt;/code&gt; only for you to understand why these seemingly duplicate properties are not actually duplicates.&lt;/p&gt;
&lt;p&gt;Internet Explorer and Edge don&amp;rsquo;t support &lt;code&gt;x/y&lt;/code&gt; properties for historical reasons.&lt;/p&gt;
&lt;p&gt;So we can either make a polyfill (add getters in &lt;code&gt;DomRect.prototype&lt;/code&gt;) or just use &lt;code&gt;top/left&lt;/code&gt;, as they are always the same as &lt;code&gt;x/y&lt;/code&gt; for positive &lt;code&gt;width/height&lt;/code&gt;, in particular in the result of &lt;code&gt;elem.getBoundingClientRect()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There are obvious similarities between window-relative coordinates and CSS &lt;code&gt;position:fixed&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But in CSS positioning, &lt;code&gt;right&lt;/code&gt; property means the distance from the right edge, and &lt;code&gt;bottom&lt;/code&gt; property means the distance from the bottom edge.&lt;/p&gt;
&lt;p&gt;If we just look at the picture above, we can see that in JavaScript it is not so. All window coordinates are counted from the top-left corner, including these ones.&lt;/p&gt;
&lt;h3 id=&#34;elementfrompointx-y-elementfrompoint&#34;&gt;elementFromPoint(x, y) [#elementFromPoint]&lt;/h3&gt;
&lt;p&gt;The call to &lt;code&gt;document.elementFromPoint(x, y)&lt;/code&gt; returns the most nested element at window coordinates &lt;code&gt;(x, y)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The syntax is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; elem &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.elementFromPoint(x, y);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For instance, the code below highlights and outputs the tag of the element that is now in the middle of the window:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; centerX &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.documentElement.clientWidth &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; centerY &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.documentElement.clientHeight &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; elem &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.elementFromPoint(centerX, centerY);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;elem.style.background &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;red&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(elem.tagName);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As it uses window coordinates, the element may be different depending on the current scroll position.&lt;/p&gt;
&lt;p&gt;The method &lt;code&gt;document.elementFromPoint(x,y)&lt;/code&gt; only works if &lt;code&gt;(x,y)&lt;/code&gt; are inside the visible area.&lt;/p&gt;
&lt;p&gt;If any of the coordinates is negative or exceeds the window width/height, then it returns &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a typical error that may occur if we don&amp;rsquo;t check for it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; elem &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.elementFromPoint(x, y);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// if the coordinates happen to be out of the window, then elem = null
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;elem.style.background &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// Error!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;using-for-fixed-positioning&#34;&gt;Using for &amp;ldquo;fixed&amp;rdquo; positioning&lt;/h3&gt;
&lt;p&gt;Most of time we need coordinates in order to position something.&lt;/p&gt;
&lt;p&gt;To show something near an element, we can use &lt;code&gt;getBoundingClientRect&lt;/code&gt; to get its coordinates, and then CSS &lt;code&gt;position&lt;/code&gt; together with &lt;code&gt;left/top&lt;/code&gt; (or &lt;code&gt;right/bottom&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;For instance, the function &lt;code&gt;createMessageUnder(elem, html)&lt;/code&gt; below shows the message under &lt;code&gt;elem&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; elem &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;coords-show-mark&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; createMessageUnder(elem, html) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// create message element
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; message &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.createElement(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;div&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// better to use a css class for the style here
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  message.style.cssText &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;position:fixed; color: red&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// assign coordinates, don&amp;#39;t forget &amp;#34;px&amp;#34;!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; coords &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; elem.getBoundingClientRect();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  message.style.left &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; coords.left &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;px&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  message.style.top &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; coords.bottom &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;px&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  message.innerHTML &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; html;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; message;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Usage:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// add it for 5 seconds in the document
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; message &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; createMessageUnder(elem, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Hello, world!&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.append(message);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;setTimeout(() =&amp;gt; message.remove(), &lt;span style=&#34;color:#bd93f9&#34;&gt;5000&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Click the button to run it:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;coords-show-mark&amp;#34;&lt;/span&gt;&amp;gt;Button with id=&amp;#34;coords-show-mark&amp;#34;, the message will appear under it&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The code can be modified to show the message at the left, right, below, apply CSS animations to &amp;ldquo;fade it in&amp;rdquo; and so on. That&amp;rsquo;s easy, as we have all the coordinates and sizes of the element.&lt;/p&gt;
&lt;p&gt;But note the important detail: when the page is scrolled, the message flows away from the button.&lt;/p&gt;
&lt;p&gt;The reason is obvious: the message element relies on &lt;code&gt;position:fixed&lt;/code&gt;, so it remains at the same place of the window while the page scrolls away.&lt;/p&gt;
&lt;p&gt;To change that, we need to use document-based coordinates and &lt;code&gt;position:absolute&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;document-coordinates-getcoords&#34;&gt;Document coordinates [#getCoords]&lt;/h3&gt;
&lt;p&gt;Document-relative coordinates start from the upper-left corner of the document, not the window.&lt;/p&gt;
&lt;p&gt;In CSS, window coordinates correspond to &lt;code&gt;position:fixed&lt;/code&gt;, while document coordinates are similar to &lt;code&gt;position:absolute&lt;/code&gt; on top.&lt;/p&gt;
&lt;p&gt;We can use &lt;code&gt;position:absolute&lt;/code&gt; and &lt;code&gt;top/left&lt;/code&gt; to put something at a certain place of the document, so that it remains there during a page scroll. But we need the right coordinates first.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s no standard method to get the document coordinates of an element. But it&amp;rsquo;s easy to write it.&lt;/p&gt;
&lt;p&gt;The two coordinate systems are connected by the formula:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pageY&lt;/code&gt; = &lt;code&gt;clientY&lt;/code&gt; + height of the scrolled-out vertical part of the document.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pageX&lt;/code&gt; = &lt;code&gt;clientX&lt;/code&gt; + width of the scrolled-out horizontal part of the document.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The function &lt;code&gt;getCoords(elem)&lt;/code&gt; will take window coordinates from &lt;code&gt;elem.getBoundingClientRect()&lt;/code&gt; and add the current scroll to them:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// get document coordinates of the element
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; getCoords(elem) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; box &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; elem.getBoundingClientRect();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    top&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; box.top &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;window&lt;/span&gt;.pageYOffset,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    right&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; box.right &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;window&lt;/span&gt;.pageXOffset,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    bottom&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; box.bottom &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;window&lt;/span&gt;.pageYOffset,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    left&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; box.left &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;window&lt;/span&gt;.pageXOffset
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If in the example above we used it with &lt;code&gt;position:absolute&lt;/code&gt;, then the message would stay near the element on scroll.&lt;/p&gt;
&lt;p&gt;The modified &lt;code&gt;createMessageUnder&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; createMessageUnder(elem, html) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; message &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.createElement(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;div&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  message.style.cssText &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;position:absolute; color: red&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; coords &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; getCoords(elem);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  message.style.left &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; coords.left &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;px&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  message.style.top &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; coords.bottom &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;px&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  message.innerHTML &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; html;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; message;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;summary-10&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;Any point on the page has coordinates:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Relative to the window &amp;ndash; &lt;code&gt;elem.getBoundingClientRect()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Relative to the document &amp;ndash; &lt;code&gt;elem.getBoundingClientRect()&lt;/code&gt; plus the current page scroll.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Window coordinates are great to use with &lt;code&gt;position:fixed&lt;/code&gt;, and document coordinates do well with &lt;code&gt;position:absolute&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Both coordinate systems have their pros and cons; there are times we need one or the other one, just like CSS &lt;code&gt;position&lt;/code&gt; &lt;code&gt;absolute&lt;/code&gt; and &lt;code&gt;fixed&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;introduction-to-browser-events&#34;&gt;Introduction to browser events&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;An event&lt;/em&gt; is a signal that something has happened. All DOM nodes generate such signals (but events are not limited to DOM).&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a list of the most useful DOM events, just to take a look at:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mouse events:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;click&lt;/code&gt; &amp;ndash; when the mouse clicks on an element (touchscreen devices generate it on a tap).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;contextmenu&lt;/code&gt; &amp;ndash; when the mouse right-clicks on an element.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mouseover&lt;/code&gt; / &lt;code&gt;mouseout&lt;/code&gt; &amp;ndash; when the mouse cursor comes over / leaves an element.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mousedown&lt;/code&gt; / &lt;code&gt;mouseup&lt;/code&gt; &amp;ndash; when the mouse button is pressed / released over an element.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mousemove&lt;/code&gt; &amp;ndash; when the mouse is moved.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Keyboard events:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;keydown&lt;/code&gt; and &lt;code&gt;keyup&lt;/code&gt; &amp;ndash; when a keyboard key is pressed and released.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Form element events:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;submit&lt;/code&gt; &amp;ndash; when the visitor submits a &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;focus&lt;/code&gt; &amp;ndash;  when the visitor focuses on an element, e.g. on an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Document events:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DOMContentLoaded&lt;/code&gt; &amp;ndash; when the HTML is loaded and processed, DOM is fully built.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;CSS events:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;transitionend&lt;/code&gt; &amp;ndash; when a CSS-animation finishes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are many other events. We&amp;rsquo;ll get into more details of particular events in next chapters.&lt;/p&gt;
&lt;h3 id=&#34;event-handlers&#34;&gt;Event handlers&lt;/h3&gt;
&lt;p&gt;To react on events we can assign a &lt;em&gt;handler&lt;/em&gt; &amp;ndash; a function that runs in case of an event.&lt;/p&gt;
&lt;p&gt;Handlers are a way to run JavaScript code in case of user actions.&lt;/p&gt;
&lt;p&gt;There are several ways to assign a handler. Let&amp;rsquo;s see them, starting from the simplest one.&lt;/p&gt;
&lt;h4 id=&#34;html-attribute&#34;&gt;HTML-attribute&lt;/h4&gt;
&lt;p&gt;A handler can be set in HTML with an attribute named &lt;code&gt;on&amp;lt;event&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For instance, to assign a &lt;code&gt;click&lt;/code&gt; handler for an &lt;code&gt;input&lt;/code&gt;, we can use &lt;code&gt;onclick&lt;/code&gt;, like here:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Click me&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert(&amp;#39;Click!&amp;#39;)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;button&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;On mouse click, the code inside &lt;code&gt;onclick&lt;/code&gt; runs.&lt;/p&gt;
&lt;p&gt;Please note that inside &lt;code&gt;onclick&lt;/code&gt; we use single quotes, because the attribute itself is in double quotes. If we forget that the code is inside the attribute and use double quotes inside, like this:  &lt;code&gt;onclick=&amp;quot;alert(&amp;quot;Click!&amp;quot;)&amp;quot;&lt;/code&gt;, then it won&amp;rsquo;t work right.&lt;/p&gt;
&lt;p&gt;An HTML-attribute is not a convenient place to write a lot of code, so we&amp;rsquo;d better create a JavaScript function and call it there.&lt;/p&gt;
&lt;p&gt;Here a click runs the function &lt;code&gt;countRabbits()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; countRabbits() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; i&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;; i&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;; i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Rabbit number &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; i);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;button&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;countRabbits()&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Count rabbits!&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As we know, HTML attribute names are not case-sensitive, so &lt;code&gt;ONCLICK&lt;/code&gt; works as well as &lt;code&gt;onClick&lt;/code&gt; and &lt;code&gt;onCLICK&lt;/code&gt;&amp;hellip; But usually attributes are lowercased: &lt;code&gt;onclick&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;dom-property&#34;&gt;DOM property&lt;/h4&gt;
&lt;p&gt;We can assign a handler using a DOM property &lt;code&gt;on&amp;lt;event&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For instance, &lt;code&gt;elem.onclick&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;elem&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;button&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Click me&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  elem.onclick &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Thank you&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If the handler is assigned using an HTML-attribute then the browser reads it, creates a new function from the attribute content and writes it to the DOM property.&lt;/p&gt;
&lt;p&gt;So this way is actually the same as the previous one.&lt;/p&gt;
&lt;p&gt;These two code pieces work the same:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Only HTML:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;button&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert(&amp;#39;Click!&amp;#39;)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Button&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;HTML + JS:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;button&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;button&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Button&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  button.onclick &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Click!&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the first example, the HTML attribute is used to initialize the &lt;code&gt;button.onclick&lt;/code&gt;, while in the second example &amp;ndash; the script, that&amp;rsquo;s all the difference.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;As there&amp;rsquo;s only one &lt;code&gt;onclick&lt;/code&gt; property, we can&amp;rsquo;t assign more than one event handler.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In the example below adding a handler with JavaScript overwrites the existing handler:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;button&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;elem&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert(&amp;#39;Before&amp;#39;)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Click me&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  elem.onclick &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() { &lt;span style=&#34;color:#6272a4&#34;&gt;// overwrites the existing handler
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;After&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#6272a4&#34;&gt;// only this will be shown
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To remove a handler &amp;ndash; assign &lt;code&gt;elem.onclick = null&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;accessing-the-element-this&#34;&gt;Accessing the element: this&lt;/h3&gt;
&lt;p&gt;The value of &lt;code&gt;this&lt;/code&gt; inside a handler is the element. The one which has the handler on it.&lt;/p&gt;
&lt;p&gt;In the code below &lt;code&gt;button&lt;/code&gt; shows its contents using &lt;code&gt;this.innerHTML&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert(this.innerHTML)&amp;#34;&lt;/span&gt;&amp;gt;Click me&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;possible-mistakes&#34;&gt;Possible mistakes&lt;/h3&gt;
&lt;p&gt;If you&amp;rsquo;re starting to work with events &amp;ndash; please note some subtleties.&lt;/p&gt;
&lt;p&gt;We can set an existing function as a handler:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; sayThanks() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Thanks!&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;elem.onclick &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; sayThanks;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But be careful: the function should be assigned as &lt;code&gt;sayThanks&lt;/code&gt;, not &lt;code&gt;sayThanks()&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// right
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;button.onclick &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; sayThanks;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// wrong
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;button.onclick &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; sayThanks();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If we add parentheses, then &lt;code&gt;sayThanks()&lt;/code&gt; becomes is a function call. So the last line actually takes the &lt;em&gt;result&lt;/em&gt; of the function execution, that is &lt;code&gt;undefined&lt;/code&gt; (as the function returns nothing), and assigns it to &lt;code&gt;onclick&lt;/code&gt;. That doesn&amp;rsquo;t work.&lt;/p&gt;
&lt;p&gt;&amp;hellip;On the other hand, in the markup we do need the parentheses:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;button&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;button&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sayThanks()&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The difference is easy to explain. When the browser reads the attribute, it creates a handler function with body from the attribute content.&lt;/p&gt;
&lt;p&gt;So the markup generates this property:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;button.onclick &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sayThanks(); &lt;span style=&#34;color:#6272a4&#34;&gt;// &amp;lt;-- the attribute content goes here
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Don&amp;rsquo;t use &lt;code&gt;setAttribute&lt;/code&gt; for handlers.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Such a call won&amp;rsquo;t work:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// a click on &amp;lt;body&amp;gt; will generate errors,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// because attributes are always strings, function becomes a string
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.setAttribute(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;onclick&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() { alert(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;) });
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;DOM-property case matters.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Assign a handler to &lt;code&gt;elem.onclick&lt;/code&gt;, not &lt;code&gt;elem.ONCLICK&lt;/code&gt;, because DOM properties are case-sensitive.&lt;/p&gt;
&lt;h3 id=&#34;addeventlistener&#34;&gt;addEventListener&lt;/h3&gt;
&lt;p&gt;The fundamental problem of the aforementioned ways to assign handlers &amp;ndash; we can&amp;rsquo;t assign multiple handlers to one event.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say, one part of our code wants to highlight a button on click, and another one wants to show a message on the same click.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;d like to assign two event handlers for that. But a new DOM property will overwrite the existing one:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;input.onclick &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() { alert(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;); }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;input.onclick &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() { alert(&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;); } &lt;span style=&#34;color:#6272a4&#34;&gt;// replaces the previous handler
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Developers of web standards understood that long ago and suggested an alternative way of managing handlers using special methods &lt;code&gt;addEventListener&lt;/code&gt; and &lt;code&gt;removeEventListener&lt;/code&gt;. They are free of such a problem.&lt;/p&gt;
&lt;p&gt;The syntax to add a handler:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;element.addEventListener(event, handler, [options]);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;event&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Event name, e.g. &lt;code&gt;&amp;quot;click&amp;quot;&lt;/code&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;handler&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;The handler function.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;options&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;An additional optional object with properties:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;once&lt;/code&gt;: if &lt;code&gt;true&lt;/code&gt;, then the listener is automatically removed after it triggers.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;capture&lt;/code&gt;: the phase where to handle the event, to be covered later in the chapter &lt;a href=&#34;info:bubbling-and-capturing&#34;&gt;info:bubbling-and-capturing&lt;/a&gt;. For historical reasons, &lt;code&gt;options&lt;/code&gt; can also be &lt;code&gt;false/true&lt;/code&gt;, that&amp;rsquo;s the same as &lt;code&gt;{capture: false/true}&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;passive&lt;/code&gt;: if &lt;code&gt;true&lt;/code&gt;, then the handler will not call &lt;code&gt;preventDefault()&lt;/code&gt;, we&amp;rsquo;ll explain that later in &lt;a href=&#34;info:default-browser-action&#34;&gt;info:default-browser-action&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;To remove the handler, use &lt;code&gt;removeEventListener&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;element.removeEventListener(event, handler, [options]);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To remove a handler we should pass exactly the same function as was assigned.&lt;/p&gt;
&lt;p&gt;That doesn&amp;rsquo;t work:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;elem.addEventListener( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt; , () =&amp;gt; alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Thanks!&amp;#39;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// ....
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;elem.removeEventListener( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, () =&amp;gt; alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Thanks!&amp;#39;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The handler won&amp;rsquo;t be removed, because &lt;code&gt;removeEventListener&lt;/code&gt; gets another function &amp;ndash; with the same code, but that doesn&amp;rsquo;t matter, as it&amp;rsquo;s a different function object.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the right way:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; handler() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Thanks!&amp;#39;&lt;/span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;input.addEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, handler);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// ....
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;input.removeEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, handler);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Please note &amp;ndash; if we don&amp;rsquo;t store the function in a variable, then we can&amp;rsquo;t remove it. There&amp;rsquo;s no way to &amp;ldquo;read back&amp;rdquo; handlers assigned by &lt;code&gt;addEventListener&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Multiple calls to &lt;code&gt;addEventListener&lt;/code&gt; allow to add multiple handlers, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;elem&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;button&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Click me&amp;#34;&lt;/span&gt;/&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; handler1() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Thanks!&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; handler2() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Thanks again!&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  elem.onclick &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; () =&amp;gt; alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  elem.addEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, handler1); &lt;span style=&#34;color:#6272a4&#34;&gt;// Thanks!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  elem.addEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, handler2); &lt;span style=&#34;color:#6272a4&#34;&gt;// Thanks again!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As we can see in the example above, we can set handlers &lt;em&gt;both&lt;/em&gt; using a DOM-property and &lt;code&gt;addEventListener&lt;/code&gt;. But generally we use only one of these ways.&lt;/p&gt;
&lt;p&gt;There exist events that can&amp;rsquo;t be assigned via a DOM-property. Only with &lt;code&gt;addEventListener&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For instance, the &lt;code&gt;DOMContentLoaded&lt;/code&gt; event, that triggers when the document is loaded and DOM is built.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// will never run
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.onDOMContentLoaded &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;DOM built&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// this way it works
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.addEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;DOMContentLoaded&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;DOM built&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So &lt;code&gt;addEventListener&lt;/code&gt; is more universal. Although, such events are an exception rather than the rule.&lt;/p&gt;
&lt;h3 id=&#34;event-object&#34;&gt;Event object&lt;/h3&gt;
&lt;p&gt;To properly handle an event we&amp;rsquo;d want to know more about what&amp;rsquo;s happened. Not just a &amp;ldquo;click&amp;rdquo; or a &amp;ldquo;keydown&amp;rdquo;, but what were the pointer coordinates? Which key was pressed? And so on.&lt;/p&gt;
&lt;p&gt;When an event happens, the browser creates an &lt;em&gt;event object&lt;/em&gt;, puts details into it and passes it as an argument to the handler.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s an example of getting pointer coordinates from the event object:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;button&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Click me&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;elem&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  elem.onclick &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(event) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// show event type, element and coordinates of the click
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    alert(event.type &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34; at &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; event.currentTarget);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Coordinates: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; event.clientX &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; event.clientY);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Some properties of &lt;code&gt;event&lt;/code&gt; object:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;event.type&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Event type, here it&amp;rsquo;s &lt;code&gt;&amp;quot;click&amp;quot;&lt;/code&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;event.currentTarget&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Element that handled the event. That&amp;rsquo;s exactly the same as &lt;code&gt;this&lt;/code&gt;, unless the handler is an arrow function, or its &lt;code&gt;this&lt;/code&gt; is bound to something else, then we can get the element from  &lt;code&gt;event.currentTarget&lt;/code&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;event.clientX / event.clientY&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Window-relative coordinates of the cursor, for pointer events.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;There are more properties. Many of them depend on the event type: keyboard events have one set of properties, pointer events - another one, we&amp;rsquo;ll study them later when we come to different events in details.&lt;/p&gt;
&lt;p&gt;If we assign a handler in HTML, we can also use the &lt;code&gt;event&lt;/code&gt; object, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;button&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert(event.type)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Event type&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s possible because when the browser reads the attribute, it creates a handler like this:  &lt;code&gt;function(event) { alert(event.type) }&lt;/code&gt;. That is: its first argument is called &lt;code&gt;&amp;quot;event&amp;quot;&lt;/code&gt;, and the body is taken from the attribute.&lt;/p&gt;
&lt;h3 id=&#34;object-handlers-handleevent&#34;&gt;Object handlers: handleEvent&lt;/h3&gt;
&lt;p&gt;We can assign not just a function, but an object as an event handler using &lt;code&gt;addEventListener&lt;/code&gt;. When an event occurs, its &lt;code&gt;handleEvent&lt;/code&gt; method is called.&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;elem&amp;#34;&lt;/span&gt;&amp;gt;Click me&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; obj &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    handleEvent(event) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      alert(event.type &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34; at &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; event.currentTarget);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  elem.addEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;, obj);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As we can see, when &lt;code&gt;addEventListener&lt;/code&gt; receives an object as the handler, it calls &lt;code&gt;obj.handleEvent(event)&lt;/code&gt; in case of an event.&lt;/p&gt;
&lt;p&gt;We could also use a class for that:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;elem&amp;#34;&lt;/span&gt;&amp;gt;Click me&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; Menu {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    handleEvent(event) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;switch&lt;/span&gt;(event.type) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;mousedown&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          elem.innerHTML &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Mouse button pressed&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#ff79c6&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;mouseup&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          elem.innerHTML &lt;span style=&#34;color:#ff79c6&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;...and released.&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#ff79c6&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; menu &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Menu();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  elem.addEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;mousedown&amp;#39;&lt;/span&gt;, menu);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  elem.addEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;mouseup&amp;#39;&lt;/span&gt;, menu);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here the same object handles both events. Please note that we need to explicitly setup the events to listen using &lt;code&gt;addEventListener&lt;/code&gt;. The &lt;code&gt;menu&lt;/code&gt; object only gets &lt;code&gt;mousedown&lt;/code&gt; and &lt;code&gt;mouseup&lt;/code&gt; here, not any other types of events.&lt;/p&gt;
&lt;p&gt;The method &lt;code&gt;handleEvent&lt;/code&gt; does not have to do all the job by itself. It can call other event-specific methods instead, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;elem&amp;#34;&lt;/span&gt;&amp;gt;Click me&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; Menu {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    handleEvent(event) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#6272a4&#34;&gt;// mousedown -&amp;gt; onMousedown
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; method &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;on&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; event.type[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;].toUpperCase() &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; event.type.slice(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;[method](event);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    onMousedown() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      elem.innerHTML &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Mouse button pressed&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    onMouseup() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      elem.innerHTML &lt;span style=&#34;color:#ff79c6&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;...and released.&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; menu &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Menu();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  elem.addEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;mousedown&amp;#39;&lt;/span&gt;, menu);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  elem.addEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;mouseup&amp;#39;&lt;/span&gt;, menu);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now event handlers are clearly separated, that may be easier to support.&lt;/p&gt;
&lt;h3 id=&#34;summary-11&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;There are 3 ways to assign event handlers:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;HTML attribute: &lt;code&gt;onclick=&amp;quot;...&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;DOM property: &lt;code&gt;elem.onclick = function&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Methods: &lt;code&gt;elem.addEventListener(event, handler[, phase])&lt;/code&gt; to add, &lt;code&gt;removeEventListener&lt;/code&gt; to remove.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;HTML attributes are used sparingly, because JavaScript in the middle of an HTML tag looks a little bit odd and alien. Also can&amp;rsquo;t write lots of code in there.&lt;/p&gt;
&lt;p&gt;DOM properties are ok to use, but we can&amp;rsquo;t assign more than one handler of the particular event. In many cases that limitation is not pressing.&lt;/p&gt;
&lt;p&gt;The last way is the most flexible, but it is also the longest to write. There are few events that only work with it, for instance &lt;code&gt;transitionend&lt;/code&gt; and &lt;code&gt;DOMContentLoaded&lt;/code&gt; (to be covered). Also &lt;code&gt;addEventListener&lt;/code&gt; supports objects as event handlers. In that case the method &lt;code&gt;handleEvent&lt;/code&gt; is called in case of the event.&lt;/p&gt;
&lt;p&gt;No matter how you assign the handler &amp;ndash; it gets an event object as the first argument. That object contains the details about what&amp;rsquo;s happened.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll learn more about events in general and about different types of events in the next chapters.&lt;/p&gt;
&lt;h2 id=&#34;bubbling-and-capturing&#34;&gt;Bubbling and capturing&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s start with an example.&lt;/p&gt;
&lt;p&gt;This handler is assigned to &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, but also runs if you click any nested tag like &lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert(&amp;#39;The handler!&amp;#39;)&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;em&lt;/span&gt;&amp;gt;If you click on &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;code&lt;/span&gt;&amp;gt;EM&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;code&lt;/span&gt;&amp;gt;, the handler on &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;code&lt;/span&gt;&amp;gt;DIV&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;code&lt;/span&gt;&amp;gt; runs.&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;em&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Isn&amp;rsquo;t it a bit strange? Why does the handler on &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; run if the actual click was on &lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt;?&lt;/p&gt;
&lt;h3 id=&#34;bubbling&#34;&gt;Bubbling&lt;/h3&gt;
&lt;p&gt;The bubbling principle is simple.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;When an event happens on an element, it first runs the handlers on it, then on its parent, then all the way up on other ancestors.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say we have 3 nested elements &lt;code&gt;FORM &amp;gt; DIV &amp;gt; P&lt;/code&gt; with a handler on each of them:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;style&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;margin&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;border&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;solid&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;blue&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;style&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;form&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert(&amp;#39;form&amp;#39;)&amp;#34;&lt;/span&gt;&amp;gt;FORM
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert(&amp;#39;div&amp;#39;)&amp;#34;&lt;/span&gt;&amp;gt;DIV
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert(&amp;#39;p&amp;#39;)&amp;#34;&lt;/span&gt;&amp;gt;P&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;form&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A click on the inner &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; first runs &lt;code&gt;onclick&lt;/code&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;On that &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Then on the outer &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Then on the outer &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;And so on upwards till the &lt;code&gt;document&lt;/code&gt; object.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So if we click on &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;, then we&amp;rsquo;ll see 3 alerts: &lt;code&gt;p&lt;/code&gt; -&amp;gt; &lt;code&gt;div&lt;/code&gt; -&amp;gt; &lt;code&gt;form&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The process is called &amp;ldquo;bubbling&amp;rdquo;, because events &amp;ldquo;bubble&amp;rdquo; from the inner element up through parents like a bubble in the water.&lt;/p&gt;
&lt;p&gt;The key word in this phrase is &amp;ldquo;almost&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;For instance, a &lt;code&gt;focus&lt;/code&gt; event does not bubble. There are other examples too, we&amp;rsquo;ll meet them. But still it&amp;rsquo;s an exception, rather than a rule, most events do bubble.&lt;/p&gt;
&lt;h3 id=&#34;eventtarget&#34;&gt;event.target&lt;/h3&gt;
&lt;p&gt;A handler on a parent element can always get the details about where it actually happened.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The most deeply nested element that caused the event is called a &lt;em&gt;target&lt;/em&gt; element, accessible as &lt;code&gt;event.target&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Note the differences from &lt;code&gt;this&lt;/code&gt; (=&lt;code&gt;event.currentTarget&lt;/code&gt;):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;event.target&lt;/code&gt; &amp;ndash; is the &amp;ldquo;target&amp;rdquo; element that initiated the event, it doesn&amp;rsquo;t change through the bubbling process.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this&lt;/code&gt; &amp;ndash; is the &amp;ldquo;current&amp;rdquo; element, the one that has a currently running handler on it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For instance, if we have a single handler &lt;code&gt;form.onclick&lt;/code&gt;, then it can &amp;ldquo;catch&amp;rdquo; all clicks inside the form. No matter where the click happened, it bubbles up to &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; and runs the handler.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;form.onclick&lt;/code&gt; handler:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;this&lt;/code&gt; (=&lt;code&gt;event.currentTarget&lt;/code&gt;) is the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element, because the handler runs on it.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;event.target&lt;/code&gt; is the actual element inside the form that was clicked.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Check it out:&lt;/p&gt;
&lt;p&gt;[codetabs height=220 src=&amp;ldquo;bubble-target&amp;rdquo;]&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s possible that &lt;code&gt;event.target&lt;/code&gt; could equal &lt;code&gt;this&lt;/code&gt; &amp;ndash; it happens when the click is made directly on the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; element.&lt;/p&gt;
&lt;h3 id=&#34;stopping-bubbling&#34;&gt;Stopping bubbling&lt;/h3&gt;
&lt;p&gt;A bubbling event goes from the target element straight up. Normally it goes upwards till &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;, and then to &lt;code&gt;document&lt;/code&gt; object, and some events even reach &lt;code&gt;window&lt;/code&gt;, calling all handlers on the path.&lt;/p&gt;
&lt;p&gt;But any handler may decide that the event has been fully processed and stop the bubbling.&lt;/p&gt;
&lt;p&gt;The method for it is &lt;code&gt;event.stopPropagation()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For instance, here &lt;code&gt;body.onclick&lt;/code&gt; doesn&amp;rsquo;t work if you click on &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert(`the bubbling doesn&amp;#39;t reach here`)&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;event.stopPropagation()&amp;#34;&lt;/span&gt;&amp;gt;Click me&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If an element has multiple event handlers on a single event, then even if one of them stops the bubbling, the other ones still execute.&lt;/p&gt;
&lt;p&gt;In other words, &lt;code&gt;event.stopPropagation()&lt;/code&gt; stops the move upwards, but on the current element all other handlers will run.&lt;/p&gt;
&lt;p&gt;To stop the bubbling and prevent handlers on the current element from running, there&amp;rsquo;s a method &lt;code&gt;event.stopImmediatePropagation()&lt;/code&gt;. After it no other handlers execute.&lt;/p&gt;
&lt;p&gt;Bubbling is convenient. Don&amp;rsquo;t stop it without a real need: obvious and architecturally well thought out.&lt;/p&gt;
&lt;p&gt;Sometimes &lt;code&gt;event.stopPropagation()&lt;/code&gt; creates hidden pitfalls that later may become problems.&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We create a nested menu. Each submenu handles clicks on its elements and calls &lt;code&gt;stopPropagation&lt;/code&gt; so that the outer menu won&amp;rsquo;t trigger.&lt;/li&gt;
&lt;li&gt;Later we decide to catch clicks on the whole window, to track users&amp;rsquo; behavior (where people click). Some analytic systems do that. Usually the code uses &lt;code&gt;document.addEventListener(&#39;click&#39;…)&lt;/code&gt; to catch all clicks.&lt;/li&gt;
&lt;li&gt;Our analytic won&amp;rsquo;t work over the area where clicks are stopped by &lt;code&gt;stopPropagation&lt;/code&gt;. Sadly, we&amp;rsquo;ve got a &amp;ldquo;dead zone&amp;rdquo;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There&amp;rsquo;s usually no real need to prevent the bubbling. A task that seemingly requires that may be solved by other means. One of them is to use custom events, we&amp;rsquo;ll cover them later. Also we can write our data into the &lt;code&gt;event&lt;/code&gt; object in one handler and read it in another one, so we can pass to handlers on parents information about the processing below.&lt;/p&gt;
&lt;h3 id=&#34;capturing&#34;&gt;Capturing&lt;/h3&gt;
&lt;p&gt;There&amp;rsquo;s another phase of event processing called &amp;ldquo;capturing&amp;rdquo;. It is rarely used in real code, but sometimes can be useful.&lt;/p&gt;
&lt;p&gt;The standard &lt;a href=&#34;http://www.w3.org/TR/DOM-Level-3-Events/&#34;&gt;DOM Events&lt;/a&gt; describes 3 phases of event propagation:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Capturing phase &amp;ndash; the event goes down to the element.&lt;/li&gt;
&lt;li&gt;Target phase &amp;ndash; the event reached the target element.&lt;/li&gt;
&lt;li&gt;Bubbling phase &amp;ndash; the event bubbles up from the element.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here&amp;rsquo;s the picture of a click on &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; inside a table, taken from the specification:&lt;/p&gt;
&lt;p&gt;That is: for a click on &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; the event first goes through the ancestors chain down to the element (capturing phase), then it reaches the target and triggers there (target phase), and then it goes up (bubbling phase), calling handlers on its way.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Before we only talked about bubbling, because the capturing phase is rarely used. Normally it is invisible to us.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Handlers added using &lt;code&gt;on&amp;lt;event&amp;gt;&lt;/code&gt;-property or using HTML attributes or using two-argument &lt;code&gt;addEventListener(event, handler)&lt;/code&gt; don&amp;rsquo;t know anything about capturing, they only run on the 2nd and 3rd phases.&lt;/p&gt;
&lt;p&gt;To catch an event on the capturing phase, we need to set the handler &lt;code&gt;capture&lt;/code&gt; option to &lt;code&gt;true&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;elem.addEventListener(..., {capture&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// or, just &amp;#34;true&amp;#34; is an alias to {capture: true}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;elem.addEventListener(..., &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are two possible values of the &lt;code&gt;capture&lt;/code&gt; option:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If it&amp;rsquo;s &lt;code&gt;false&lt;/code&gt; (default), then the handler is set on the bubbling phase.&lt;/li&gt;
&lt;li&gt;If it&amp;rsquo;s &lt;code&gt;true&lt;/code&gt;, then the handler is set on the capturing phase.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that while formally there are 3 phases, the 2nd phase (&amp;ldquo;target phase&amp;rdquo;: the event reached the element) is not handled separately: handlers on both capturing and bubbling phases trigger at that phase.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s see both capturing and bubbling in action:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;style&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;margin&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;border&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;solid&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;blue&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;style&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;form&lt;/span&gt;&amp;gt;FORM
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;DIV
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;P&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;form&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; elem &lt;span style=&#34;color:#ff79c6&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.querySelectorAll(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    elem.addEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, e =&amp;gt; alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;`Capturing: &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;elem.tagName&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;), &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    elem.addEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, e =&amp;gt; alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;`Bubbling: &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;elem.tagName&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The code sets click handlers on &lt;em&gt;every&lt;/em&gt; element in the document to see which ones are working.&lt;/p&gt;
&lt;p&gt;If you click on &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;, then the sequence is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;HTML&lt;/code&gt; -&amp;gt; &lt;code&gt;BODY&lt;/code&gt; -&amp;gt; &lt;code&gt;FORM&lt;/code&gt; -&amp;gt; &lt;code&gt;DIV&lt;/code&gt; (capturing phase, the first listener):&lt;/li&gt;
&lt;li&gt;&lt;code&gt;P&lt;/code&gt; (target phase, triggers two times, as we&amp;rsquo;ve set two listeners: capturing and bubbling)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DIV&lt;/code&gt; -&amp;gt; &lt;code&gt;FORM&lt;/code&gt; -&amp;gt; &lt;code&gt;BODY&lt;/code&gt; -&amp;gt; &lt;code&gt;HTML&lt;/code&gt; (bubbling phase, the second listener).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There&amp;rsquo;s a property &lt;code&gt;event.eventPhase&lt;/code&gt; that tells us the number of the phase on which the event was caught. But it&amp;rsquo;s rarely used, because we usually know it in the handler.&lt;/p&gt;
&lt;p&gt;If we &lt;code&gt;addEventListener(..., true)&lt;/code&gt;, then we should mention the same phase in &lt;code&gt;removeEventListener(..., true)&lt;/code&gt; to correctly remove the handler.&lt;/p&gt;
&lt;p&gt;If we have multiple event handlers on the same phase, assigned to the same element with &lt;code&gt;addEventListener&lt;/code&gt;, they run in the same order as they are created:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;elem.addEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, e =&amp;gt; alert(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;)); &lt;span style=&#34;color:#6272a4&#34;&gt;// guaranteed to trigger first
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;elem.addEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, e =&amp;gt; alert(&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;summary-12&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;When an event happens &amp;ndash; the most nested element where it happens gets labeled as the &amp;ldquo;target element&amp;rdquo; (&lt;code&gt;event.target&lt;/code&gt;).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Then the event moves down from the document root to &lt;code&gt;event.target&lt;/code&gt;, calling handlers assigned with &lt;code&gt;addEventListener(..., true)&lt;/code&gt; on the way (&lt;code&gt;true&lt;/code&gt; is a shorthand for &lt;code&gt;{capture: true}&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Then handlers are called on the target element itself.&lt;/li&gt;
&lt;li&gt;Then the event bubbles up from &lt;code&gt;event.target&lt;/code&gt; up to the root, calling handlers assigned using &lt;code&gt;on&amp;lt;event&amp;gt;&lt;/code&gt; and &lt;code&gt;addEventListener&lt;/code&gt; without the 3rd argument or with the 3rd argument &lt;code&gt;false/{capture:false}&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each handler can access &lt;code&gt;event&lt;/code&gt; object properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;event.target&lt;/code&gt; &amp;ndash; the deepest element that originated the event.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;event.currentTarget&lt;/code&gt; (=&lt;code&gt;this&lt;/code&gt;) &amp;ndash; the current element that handles the event (the one that has the handler on it)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;event.eventPhase&lt;/code&gt; &amp;ndash; the current phase (capturing=1, target=2, bubbling=3).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Any event handler can stop the event by calling &lt;code&gt;event.stopPropagation()&lt;/code&gt;, but that&amp;rsquo;s not recommended, because we can&amp;rsquo;t really be sure we won&amp;rsquo;t need it above, maybe for completely different things.&lt;/p&gt;
&lt;p&gt;The capturing phase is used very rarely, usually we handle events on bubbling. And there&amp;rsquo;s a logic behind that.&lt;/p&gt;
&lt;p&gt;In real world, when an accident happens, local authorities react first. They know best the area where it happened. Then higher-level authorities if needed.&lt;/p&gt;
&lt;p&gt;The same for event handlers. The code that set the handler on a particular element knows maximum  details about the element and what it does. A handler on a particular &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; may be suited for that exactly &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt;, it knows everything about it, so it should get the chance first. Then its immediate parent also knows about the context, but a little bit less, and so on till the very top element that handles general concepts and runs the last.&lt;/p&gt;
&lt;p&gt;Bubbling and capturing lay the foundation for &amp;ldquo;event delegation&amp;rdquo; &amp;ndash; an extremely powerful event handling pattern that we study in the next chapter.&lt;/p&gt;
&lt;h2 id=&#34;event-delegation&#34;&gt;Event delegation&lt;/h2&gt;
&lt;p&gt;Capturing and bubbling allow us to implement one of most powerful event handling patterns called &lt;em&gt;event delegation&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;The idea is that if we have a lot of elements handled in a similar way, then instead of assigning a handler to each of them &amp;ndash; we put a single handler on their common ancestor.&lt;/p&gt;
&lt;p&gt;In the handler we get &lt;code&gt;event.target&lt;/code&gt;, see where the event actually happened and handle it.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s see an example &amp;ndash; the &lt;a href=&#34;http://en.wikipedia.org/wiki/Ba_gua&#34;&gt;Ba-Gua diagram&lt;/a&gt; reflecting the ancient Chinese philosophy.&lt;/p&gt;
&lt;p&gt;Here it is:&lt;/p&gt;
&lt;p&gt;[iframe height=350 src=&amp;ldquo;bagua&amp;rdquo; edit link]&lt;/p&gt;
&lt;p&gt;The HTML is like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;table&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;th&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;colspan&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;em&lt;/span&gt;&amp;gt;Bagua&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;em&lt;/span&gt;&amp;gt; Chart: Direction, Element, Color, Meaning&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;th&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;nw&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;strong&lt;/span&gt;&amp;gt;Northwest&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;strong&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;br&lt;/span&gt;&amp;gt;Metal&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;br&lt;/span&gt;&amp;gt;Silver&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;br&lt;/span&gt;&amp;gt;Elders&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;n&amp;#34;&lt;/span&gt;&amp;gt;...&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;ne&amp;#34;&lt;/span&gt;&amp;gt;...&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;...2 more lines of this kind...&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;...2 more lines of this kind...&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;tr&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;table&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The table has 9 cells, but there could be 99 or 9999, doesn&amp;rsquo;t matter.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Our task is to highlight a cell &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; on click.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Instead of assign an &lt;code&gt;onclick&lt;/code&gt; handler to each &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; (can be many) &amp;ndash; we&amp;rsquo;ll setup the &amp;ldquo;catch-all&amp;rdquo; handler on &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; element.&lt;/p&gt;
&lt;p&gt;It will use &lt;code&gt;event.target&lt;/code&gt; to get the clicked element and highlight it.&lt;/p&gt;
&lt;p&gt;The code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; selectedTd;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;table.onclick &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(event) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; target &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; event.target; &lt;span style=&#34;color:#6272a4&#34;&gt;// where was the click?
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (target.tagName &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;TD&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// not on TD? Then we&amp;#39;re not interested
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  highlight(target); &lt;span style=&#34;color:#6272a4&#34;&gt;// highlight it
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; highlight(td) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (selectedTd) { &lt;span style=&#34;color:#6272a4&#34;&gt;// remove the existing highlight if any
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    selectedTd.classList.remove(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;highlight&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  selectedTd &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; td;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  selectedTd.classList.add(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;highlight&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#6272a4&#34;&gt;// highlight the new td
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Such a code doesn&amp;rsquo;t care how many cells there are in the table. We can add/remove &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; dynamically at any time and the highlighting will still work.&lt;/p&gt;
&lt;p&gt;Still, there&amp;rsquo;s a drawback.&lt;/p&gt;
&lt;p&gt;The click may occur not on the &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt;, but inside it.&lt;/p&gt;
&lt;p&gt;In our case if we take a look inside the HTML, we can see nested tags inside &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt;, like &lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;strong&lt;/span&gt;&amp;gt;Northwest&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;strong&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Naturally, if a click happens on that &lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt; then it becomes the value of &lt;code&gt;event.target&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the handler &lt;code&gt;table.onclick&lt;/code&gt; we should take such &lt;code&gt;event.target&lt;/code&gt; and find out whether the click was inside &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; or not.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the improved code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;table.onclick &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(event) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; td &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; event.target.closest(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;td&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#6272a4&#34;&gt;// (1)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;!&lt;/span&gt;td) &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// (2)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;!&lt;/span&gt;table.contains(td)) &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// (3)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  highlight(td); &lt;span style=&#34;color:#6272a4&#34;&gt;// (4)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Explanations:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The method &lt;code&gt;elem.closest(selector)&lt;/code&gt; returns the nearest ancestor that matches the selector. In our case we look for &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; on the way up from the source element.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;event.target&lt;/code&gt; is not inside any &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt;, then the call returns immediately, as there&amp;rsquo;s nothing to do.&lt;/li&gt;
&lt;li&gt;In case of nested tables, &lt;code&gt;event.target&lt;/code&gt; may be a &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt;, but lying outside of the current table. So we check if that&amp;rsquo;s actually &lt;em&gt;our table&amp;rsquo;s&lt;/em&gt; &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;And, if it&amp;rsquo;s so, then highlight it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As the result, we have a fast, efficient highlighting code, that doesn&amp;rsquo;t care about the total number of &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; in the table.&lt;/p&gt;
&lt;h3 id=&#34;delegation-example-actions-in-markup&#34;&gt;Delegation example: actions in markup&lt;/h3&gt;
&lt;p&gt;There are other uses for event delegation.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say, we want to make a menu with buttons &amp;ldquo;Save&amp;rdquo;, &amp;ldquo;Load&amp;rdquo;, &amp;ldquo;Search&amp;rdquo; and so on. And there&amp;rsquo;s an object with methods &lt;code&gt;save&lt;/code&gt;, &lt;code&gt;load&lt;/code&gt;, &lt;code&gt;search&lt;/code&gt;&amp;hellip; How to match them?&lt;/p&gt;
&lt;p&gt;The first idea may be to assign a separate handler to each button. But there&amp;rsquo;s a more elegant solution. We can add a handler for the whole menu and &lt;code&gt;data-action&lt;/code&gt; attributes for buttons that has the method to call:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;data-action&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;save&amp;#34;&lt;/span&gt;&amp;gt;Click to Save&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The handler reads the attribute and executes the method. Take a look at the working example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;menu&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;data-action&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;save&amp;#34;&lt;/span&gt;&amp;gt;Save&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;data-action&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;load&amp;#34;&lt;/span&gt;&amp;gt;Load&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;data-action&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;search&amp;#34;&lt;/span&gt;&amp;gt;Search&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; Menu {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    constructor(elem) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;._elem &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; elem;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      elem.onclick &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.onClick.bind(&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;); &lt;span style=&#34;color:#6272a4&#34;&gt;// (*)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    save() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;saving&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    load() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;loading&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    search() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;searching&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    onClick(event) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; action &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; event.target.dataset.action;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (action) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;[action]();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Menu(menu);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Please note that &lt;code&gt;this.onClick&lt;/code&gt; is bound to &lt;code&gt;this&lt;/code&gt; in &lt;code&gt;(*)&lt;/code&gt;. That&amp;rsquo;s important, because otherwise &lt;code&gt;this&lt;/code&gt; inside it would reference the DOM element (&lt;code&gt;elem&lt;/code&gt;), not the &lt;code&gt;Menu&lt;/code&gt; object, and &lt;code&gt;this[action]&lt;/code&gt; would not be what we need.&lt;/p&gt;
&lt;p&gt;So, what advantages does delegation give us here?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We don&amp;rsquo;t need to write the code to assign a handler to each button. Just make a method and put it in the markup.&lt;/li&gt;
&lt;li&gt;The HTML structure is flexible, we can add/remove buttons at any time.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We could also use classes &lt;code&gt;.action-save&lt;/code&gt;, &lt;code&gt;.action-load&lt;/code&gt;, but an attribute &lt;code&gt;data-action&lt;/code&gt; is better semantically. And we can use it in CSS rules too.&lt;/p&gt;
&lt;h3 id=&#34;the-behavior-pattern&#34;&gt;The &amp;ldquo;behavior&amp;rdquo; pattern&lt;/h3&gt;
&lt;p&gt;We can also use event delegation to add &amp;ldquo;behaviors&amp;rdquo; to elements &lt;em&gt;declaratively&lt;/em&gt;, with special attributes and classes.&lt;/p&gt;
&lt;p&gt;The pattern has two parts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We add a custom attribute to an element that describes its behavior.&lt;/li&gt;
&lt;li&gt;A document-wide handler tracks events, and if an event happens on an attributed element &amp;ndash; performs the action.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;behavior-counter&#34;&gt;Behavior: Counter&lt;/h4&gt;
&lt;p&gt;For instance, here the attribute &lt;code&gt;data-counter&lt;/code&gt; adds a behavior: &amp;ldquo;increase value on click&amp;rdquo; to buttons:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Counter: &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;button&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;data-counter&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;One more counter: &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;button&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;data-counter&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.addEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(event) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (event.target.dataset.counter &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;undefined&lt;/span&gt;) { &lt;span style=&#34;color:#6272a4&#34;&gt;// if the attribute exists...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;      event.target.value&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If we click a button &amp;ndash; its value is increased. Not buttons, but the general approach is important here.&lt;/p&gt;
&lt;p&gt;There can be as many attributes with &lt;code&gt;data-counter&lt;/code&gt; as we want. We can add new ones to HTML at any moment. Using the event delegation we &amp;ldquo;extended&amp;rdquo; HTML, added an attribute that describes a new behavior.&lt;/p&gt;
&lt;p&gt;When we assign an event handler to the &lt;code&gt;document&lt;/code&gt; object, we should always use &lt;code&gt;addEventListener&lt;/code&gt;, not &lt;code&gt;document.on&amp;lt;event&amp;gt;&lt;/code&gt;, because the latter will cause conflicts: new handlers overwrite old ones.&lt;/p&gt;
&lt;p&gt;For real projects it&amp;rsquo;s normal that there are many handlers on &lt;code&gt;document&lt;/code&gt; set by different parts of the code.&lt;/p&gt;
&lt;h4 id=&#34;behavior-toggler&#34;&gt;Behavior: Toggler&lt;/h4&gt;
&lt;p&gt;One more example of behavior. A click on an element with the attribute &lt;code&gt;data-toggle-id&lt;/code&gt; will show/hide the element with the given &lt;code&gt;id&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;data-toggle-id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;subscribe-mail&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Show the subscription form
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;form&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;subscribe-mail&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;hidden&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Your mail: &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;form&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.addEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;click&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(event) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; id &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; event.target.dataset.toggleId;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;!&lt;/span&gt;id) &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; elem &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.getElementById(id);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    elem.hidden &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;!&lt;/span&gt;elem.hidden;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s note once again what we did. Now, to add toggling functionality to an element &amp;ndash; there&amp;rsquo;s no need to know JavaScript, just use the attribute &lt;code&gt;data-toggle-id&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That may become really convenient &amp;ndash; no need to write JavaScript for every such element. Just use the behavior. The document-level handler makes it work for any element of the page.&lt;/p&gt;
&lt;p&gt;We can combine multiple behaviors on a single element as well.&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;behavior&amp;rdquo; pattern can be an alternative to mini-fragments of JavaScript.&lt;/p&gt;
&lt;h3 id=&#34;summary-13&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;Event delegation is really cool! It&amp;rsquo;s one of the most helpful patterns for DOM events.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s often used to add the same handling for many similar elements, but not only for that.&lt;/p&gt;
&lt;p&gt;The algorithm:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Put a single handler on the container.&lt;/li&gt;
&lt;li&gt;In the handler &amp;ndash; check the source element &lt;code&gt;event.target&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If the event happened inside an element that interests us, then handle the event.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Benefits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Simplifies initialization and saves memory: no need to add many handlers.&lt;/li&gt;
&lt;li&gt;Less code: when adding or removing elements, no need to add/remove handlers.&lt;/li&gt;
&lt;li&gt;DOM modifications: we can mass add/remove elements with &lt;code&gt;innerHTML&lt;/code&gt; and the like.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The delegation has its limitations of course:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First, the event must be bubbling. Some events do not bubble. Also, low-level handlers should not use &lt;code&gt;event.stopPropagation()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Second, the delegation may add CPU load, because the container-level handler reacts on events in any place of the container, no matter whether they interest us or not. But usually the load is negligible, so we don&amp;rsquo;t take it into account.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;browser-default-actions&#34;&gt;Browser default actions&lt;/h2&gt;
&lt;p&gt;Many events automatically lead to certain actions performed by the browser.&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A click on a link - initiates navigation to its URL.&lt;/li&gt;
&lt;li&gt;A click on a form submit button - initiates its submission to the server.&lt;/li&gt;
&lt;li&gt;Pressing a mouse button over a text and moving it - selects the text.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we handle an event in JavaScript, we may not want the corresponding browser action to happen, and want to implement another behavior instead.&lt;/p&gt;
&lt;h3 id=&#34;preventing-browser-actions&#34;&gt;Preventing browser actions&lt;/h3&gt;
&lt;p&gt;There are two ways to tell the browser we don&amp;rsquo;t want it to act:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The main way is to use the &lt;code&gt;event&lt;/code&gt; object. There&amp;rsquo;s a method &lt;code&gt;event.preventDefault()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If the handler is assigned using &lt;code&gt;on&amp;lt;event&amp;gt;&lt;/code&gt; (not by &lt;code&gt;addEventListener&lt;/code&gt;), then returning &lt;code&gt;false&lt;/code&gt; also works the same.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this HTML a click on a link doesn&amp;rsquo;t lead to navigation, browser doesn&amp;rsquo;t do anything:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;return false&amp;#34;&lt;/span&gt;&amp;gt;Click here&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;or
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;event.preventDefault()&amp;#34;&lt;/span&gt;&amp;gt;here&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the next example we&amp;rsquo;ll use this technique to create a JavaScript-powered menu.&lt;/p&gt;
&lt;p&gt;The value returned by an event handler is usually ignored.&lt;/p&gt;
&lt;p&gt;The only exception is &lt;code&gt;return false&lt;/code&gt; from a handler assigned using &lt;code&gt;on&amp;lt;event&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In all other cases, &lt;code&gt;return&lt;/code&gt; value is ignored. In particular, there&amp;rsquo;s no sense in returning &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;example-the-menu&#34;&gt;Example: the menu&lt;/h4&gt;
&lt;p&gt;Consider a site menu, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;ul&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;menu&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;menu&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;/html&amp;#34;&lt;/span&gt;&amp;gt;HTML&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;/javascript&amp;#34;&lt;/span&gt;&amp;gt;JavaScript&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;/css&amp;#34;&lt;/span&gt;&amp;gt;CSS&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;ul&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here&amp;rsquo;s how it looks with some CSS:&lt;/p&gt;
&lt;p&gt;[iframe height=70 src=&amp;ldquo;menu&amp;rdquo; link edit]&lt;/p&gt;
&lt;p&gt;Menu items are implemented as HTML-links &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;, not buttons &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;. There are several reasons to do so, for instance:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Many people like to use &amp;ldquo;right click&amp;rdquo; &amp;ndash; &amp;ldquo;open in a new window&amp;rdquo;. If we use &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;, that doesn&amp;rsquo;t work.&lt;/li&gt;
&lt;li&gt;Search engines follow &lt;code&gt;&amp;lt;a href=&amp;quot;...&amp;quot;&amp;gt;&lt;/code&gt; links while indexing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So we use &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; in the markup. But normally we intend to handle clicks in JavaScript. So we should prevent the default browser action.&lt;/p&gt;
&lt;p&gt;Like here:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;menu.onclick &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(event) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (event.target.nodeName &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; href &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; event.target.getAttribute(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;href&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert( href ); &lt;span style=&#34;color:#6272a4&#34;&gt;// ...can be loading from the server, UI generation etc
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// prevent browser action (don&amp;#39;t go to the URL)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If we omit &lt;code&gt;return false&lt;/code&gt;, then after our code executes the browser will do its &amp;ldquo;default action&amp;rdquo; &amp;ndash; navigating to the URL in &lt;code&gt;href&lt;/code&gt;. And we don&amp;rsquo;t need that here, as we&amp;rsquo;re handling the click by ourselves.&lt;/p&gt;
&lt;p&gt;By the way, using event delegation here makes our menu very flexible. We can add nested lists and style them using CSS to &amp;ldquo;slide down&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Certain events flow one into another. If we prevent the first event, there will be no second.&lt;/p&gt;
&lt;p&gt;For instance, &lt;code&gt;mousedown&lt;/code&gt; on an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; field leads to focusing in it, and the &lt;code&gt;focus&lt;/code&gt; event. If we prevent the &lt;code&gt;mousedown&lt;/code&gt; event, there&amp;rsquo;s no focus.&lt;/p&gt;
&lt;p&gt;Try to click on the first &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; below &amp;ndash; the &lt;code&gt;focus&lt;/code&gt; event happens. But if you click the second one, there&amp;rsquo;s no focus.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Focus works&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onfocus&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;this.value=&amp;#39;&amp;#39;&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onmousedown&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;return false&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onfocus&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;this.value=&amp;#39;&amp;#39;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Click me&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s because the browser action is canceled on &lt;code&gt;mousedown&lt;/code&gt;. The focusing is still possible if we use another way to enter the input. For instance, the &lt;code&gt;key:Tab&lt;/code&gt; key to switch from the 1st input into the 2nd. But not with the mouse click any more.&lt;/p&gt;
&lt;h3 id=&#34;the-passive-handler-option&#34;&gt;The &amp;ldquo;passive&amp;rdquo; handler option&lt;/h3&gt;
&lt;p&gt;The optional &lt;code&gt;passive: true&lt;/code&gt; option of &lt;code&gt;addEventListener&lt;/code&gt; signals the browser that the handler is not going to call &lt;code&gt;preventDefault()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Why that may be needed?&lt;/p&gt;
&lt;p&gt;There are some events like &lt;code&gt;touchmove&lt;/code&gt; on mobile devices (when the user moves their finger across the screen), that cause scrolling by default, but that scrolling can be prevented using &lt;code&gt;preventDefault()&lt;/code&gt; in the handler.&lt;/p&gt;
&lt;p&gt;So when the browser detects such event, it has first to process all handlers, and then if &lt;code&gt;preventDefault&lt;/code&gt; is not called anywhere, it can proceed with scrolling. That may cause unnecessary delays and &amp;ldquo;jitters&amp;rdquo; in the UI.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;passive: true&lt;/code&gt; options tells the browser that the handler is not going to cancel scrolling. Then browser scrolls immediately providing a maximally fluent experience, and the event is handled by the way.&lt;/p&gt;
&lt;p&gt;For some browsers (Firefox, Chrome), &lt;code&gt;passive&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; by default for &lt;code&gt;touchstart&lt;/code&gt; and &lt;code&gt;touchmove&lt;/code&gt; events.&lt;/p&gt;
&lt;h3 id=&#34;eventdefaultprevented&#34;&gt;event.defaultPrevented&lt;/h3&gt;
&lt;p&gt;The property &lt;code&gt;event.defaultPrevented&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; if the default action was prevented, and &lt;code&gt;false&lt;/code&gt; otherwise.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s an interesting use case for it.&lt;/p&gt;
&lt;p&gt;You remember in the chapter &lt;a href=&#34;info:bubbling-and-capturing&#34;&gt;info:bubbling-and-capturing&lt;/a&gt; we talked about &lt;code&gt;event.stopPropagation()&lt;/code&gt; and why stopping bubbling is bad?&lt;/p&gt;
&lt;p&gt;Sometimes we can use &lt;code&gt;event.defaultPrevented&lt;/code&gt; instead, to signal other event handlers that the event was handled.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s see a practical example.&lt;/p&gt;
&lt;p&gt;By default the browser on &lt;code&gt;contextmenu&lt;/code&gt; event (right mouse click) shows a context menu with standard options. We can prevent it and show our own, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;Right-click shows browser context menu&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;oncontextmenu&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert(&amp;#39;Draw our menu&amp;#39;); return false&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Right-click shows our context menu
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, in addition to that context menu we&amp;rsquo;d like to implement document-wide context menu.&lt;/p&gt;
&lt;p&gt;Upon right click, the closest context menu should show up.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;Right-click here for the document context menu&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;elem&amp;#34;&lt;/span&gt;&amp;gt;Right-click here for the button context menu&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  elem.oncontextmenu &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(event) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    event.preventDefault();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Button context menu&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.oncontextmenu &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(event) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    event.preventDefault();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Document context menu&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The problem is that when we click on &lt;code&gt;elem&lt;/code&gt;, we get two menus: the button-level and (the event bubbles up) the document-level menu.&lt;/p&gt;
&lt;p&gt;How to fix it? One of solutions is to think like: &amp;ldquo;When we handle right-click in the button handler, let&amp;rsquo;s stop its bubbling&amp;rdquo; and use &lt;code&gt;event.stopPropagation()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;Right-click for the document menu&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;elem&amp;#34;&lt;/span&gt;&amp;gt;Right-click for the button menu (fixed with event.stopPropagation)&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  elem.oncontextmenu &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(event) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    event.preventDefault();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    event.stopPropagation();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Button context menu&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.oncontextmenu &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(event) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    event.preventDefault();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Document context menu&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now the button-level menu works as intended. But the price is high. We forever deny access to information about right-clicks for any outer code, including counters that gather statistics and so on. That&amp;rsquo;s quite unwise.&lt;/p&gt;
&lt;p&gt;An alternative solution would be to check in the &lt;code&gt;document&lt;/code&gt; handler if the default action was prevented? If it is so, then the event was handled, and we don&amp;rsquo;t need to react on it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;Right-click for the document menu (added a check for event.defaultPrevented)&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;elem&amp;#34;&lt;/span&gt;&amp;gt;Right-click for the button menu&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  elem.oncontextmenu &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(event) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    event.preventDefault();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Button context menu&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.oncontextmenu &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(event) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (event.defaultPrevented) &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    event.preventDefault();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Document context menu&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now everything also works correctly. If we have nested elements, and each of them has a context menu of its own, that would also work. Just make sure to check for &lt;code&gt;event.defaultPrevented&lt;/code&gt; in each &lt;code&gt;contextmenu&lt;/code&gt; handler.&lt;/p&gt;
&lt;p&gt;As we can clearly see, &lt;code&gt;event.stopPropagation()&lt;/code&gt; and &lt;code&gt;event.preventDefault()&lt;/code&gt; (also known as &lt;code&gt;return false&lt;/code&gt;) are two different things. They are not related to each other.&lt;/p&gt;
&lt;p&gt;There are also alternative ways to implement nested context menus. One of them is to have a single global object with a handler for &lt;code&gt;document.oncontextmenu&lt;/code&gt;, and also methods that allow us to store other handlers in it.&lt;/p&gt;
&lt;p&gt;The object will catch any right-click, look through stored handlers and run the appropriate one.&lt;/p&gt;
&lt;p&gt;But then each piece of code that wants a context menu should know about that object and use its help instead of the own &lt;code&gt;contextmenu&lt;/code&gt; handler.&lt;/p&gt;
&lt;h3 id=&#34;summary-14&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;There are many default browser actions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mousedown&lt;/code&gt; &amp;ndash; starts the selection (move the mouse to select).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;click&lt;/code&gt; on &lt;code&gt;&amp;lt;input type=&amp;quot;checkbox&amp;quot;&amp;gt;&lt;/code&gt; &amp;ndash; checks/unchecks the &lt;code&gt;input&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;submit&lt;/code&gt; &amp;ndash; clicking an &lt;code&gt;&amp;lt;input type=&amp;quot;submit&amp;quot;&amp;gt;&lt;/code&gt; or hitting &lt;code&gt;key:Enter&lt;/code&gt; inside a form field causes this event to happen, and the browser submits the form after it.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;keydown&lt;/code&gt; &amp;ndash; pressing a key may lead to adding a character into a field, or other actions.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;contextmenu&lt;/code&gt; &amp;ndash; the event happens on a right-click, the action is to show the browser context menu.&lt;/li&gt;
&lt;li&gt;&amp;hellip;there are more&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All the default actions can be prevented if we want to handle the event exclusively by JavaScript.&lt;/p&gt;
&lt;p&gt;To prevent a default action &amp;ndash; use either &lt;code&gt;event.preventDefault()&lt;/code&gt; or  &lt;code&gt;return false&lt;/code&gt;. The second method works only for handlers assigned with &lt;code&gt;on&amp;lt;event&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;passive: true&lt;/code&gt; option of &lt;code&gt;addEventListener&lt;/code&gt; tells the browser that the action is not going to be prevented. That&amp;rsquo;s useful for some mobile events, like &lt;code&gt;touchstart&lt;/code&gt; and &lt;code&gt;touchmove&lt;/code&gt;, to tell the browser that it should not wait for all handlers to finish before scrolling.&lt;/p&gt;
&lt;p&gt;If the default action was prevented, the value of &lt;code&gt;event.defaultPrevented&lt;/code&gt; becomes &lt;code&gt;true&lt;/code&gt;, otherwise it&amp;rsquo;s &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Technically, by preventing default actions and adding JavaScript we can customize the behavior of any elements. For instance, we can make a link &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; work like a button, and a button &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; behave as a link (redirect to another URL or so).&lt;/p&gt;
&lt;p&gt;But we should generally keep the semantic meaning of HTML elements. For instance, &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; should perform navigation, not a button.&lt;/p&gt;
&lt;p&gt;Besides being &amp;ldquo;just a good thing&amp;rdquo;, that makes your HTML better in terms of accessibility.&lt;/p&gt;
&lt;p&gt;Also if we consider the example with &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;, then please note: a browser allows us to open such links in a new window (by right-clicking them and other means). And people like that. But if we make a button behave as a link using JavaScript and even look like a link using CSS, then &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;-specific browser features still won&amp;rsquo;t work for it.&lt;/p&gt;
&lt;h2 id=&#34;dispatching-custom-events&#34;&gt;Dispatching custom events&lt;/h2&gt;
&lt;p&gt;We can not only assign handlers, but also generate events from JavaScript.&lt;/p&gt;
&lt;p&gt;Custom events can be used to create &amp;ldquo;graphical components&amp;rdquo;. For instance, a root element of our own JS-based menu may trigger events telling what happens with the menu: &lt;code&gt;open&lt;/code&gt; (menu open), &lt;code&gt;select&lt;/code&gt; (an item is selected) and so on. Another code may listen for the events and observe what&amp;rsquo;s happening with the menu.&lt;/p&gt;
&lt;p&gt;We can generate not only completely new events, that we invent for our own purposes, but also built-in ones, such as &lt;code&gt;click&lt;/code&gt;, &lt;code&gt;mousedown&lt;/code&gt; etc. That may be helpful for automated testing.&lt;/p&gt;
&lt;h3 id=&#34;event-constructor&#34;&gt;Event constructor&lt;/h3&gt;
&lt;p&gt;Build-in event classes form a hierarchy, similar to DOM element classes. The root is the built-in &lt;a href=&#34;http://www.w3.org/TR/dom/#event&#34;&gt;Event&lt;/a&gt; class.&lt;/p&gt;
&lt;p&gt;We can create &lt;code&gt;Event&lt;/code&gt; objects like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; event &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Event(type[, options]);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Arguments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;type&lt;/em&gt; &amp;ndash; event type, a string like &lt;code&gt;&amp;quot;click&amp;quot;&lt;/code&gt; or our own like &lt;code&gt;&amp;quot;my-event&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;options&lt;/em&gt; &amp;ndash; the object with two optional properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bubbles: true/false&lt;/code&gt; &amp;ndash; if &lt;code&gt;true&lt;/code&gt;, then the event bubbles.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cancelable: true/false&lt;/code&gt; &amp;ndash; if &lt;code&gt;true&lt;/code&gt;, then the &amp;ldquo;default action&amp;rdquo;  may be prevented. Later we&amp;rsquo;ll see what it means for custom events.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By default both are false: &lt;code&gt;{bubbles: false, cancelable: false}&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dispatchevent&#34;&gt;dispatchEvent&lt;/h3&gt;
&lt;p&gt;After an event object is created, we should &amp;ldquo;run&amp;rdquo; it on an element using the call &lt;code&gt;elem.dispatchEvent(event)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then handlers react on it as if it were a regular browser event. If the event was created with the &lt;code&gt;bubbles&lt;/code&gt; flag, then it bubbles.&lt;/p&gt;
&lt;p&gt;In the example below the &lt;code&gt;click&lt;/code&gt; event is initiated in JavaScript. The handler works same way as if the button was clicked:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;elem&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert(&amp;#39;Click!&amp;#39;);&amp;#34;&lt;/span&gt;&amp;gt;Autoclick&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; event &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Event(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  elem.dispatchEvent(event);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There is a way to tell a &amp;ldquo;real&amp;rdquo; user event from a script-generated one.&lt;/p&gt;
&lt;p&gt;The property &lt;code&gt;event.isTrusted&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; for events that come from real user actions and &lt;code&gt;false&lt;/code&gt; for script-generated events.&lt;/p&gt;
&lt;h3 id=&#34;bubbling-example&#34;&gt;Bubbling example&lt;/h3&gt;
&lt;p&gt;We can create a bubbling event with the name &lt;code&gt;&amp;quot;hello&amp;quot;&lt;/code&gt; and catch it on &lt;code&gt;document&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;All we need is to set &lt;code&gt;bubbles&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h1&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;elem&amp;#34;&lt;/span&gt;&amp;gt;Hello from the script!&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h1&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// catch on document...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.addEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(event) { &lt;span style=&#34;color:#6272a4&#34;&gt;// (1)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Hello from &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; event.target.tagName); &lt;span style=&#34;color:#6272a4&#34;&gt;// Hello from H1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// ...dispatch on elem!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; event &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Event(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;, {bubbles&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;}); &lt;span style=&#34;color:#6272a4&#34;&gt;// (2)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  elem.dispatchEvent(event);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// the handler on document will activate and display the message.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Notes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We should use &lt;code&gt;addEventListener&lt;/code&gt; for our custom events, because &lt;code&gt;on&amp;lt;event&amp;gt;&lt;/code&gt; only exists for built-in events, &lt;code&gt;document.onhello&lt;/code&gt; doesn&amp;rsquo;t work.&lt;/li&gt;
&lt;li&gt;Must set &lt;code&gt;bubbles:true&lt;/code&gt;, otherwise the event won&amp;rsquo;t bubble up.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The bubbling mechanics is the same for built-in (&lt;code&gt;click&lt;/code&gt;) and custom (&lt;code&gt;hello&lt;/code&gt;) events. There are also capturing and bubbling stages.&lt;/p&gt;
&lt;h3 id=&#34;mouseevent-keyboardevent-and-others&#34;&gt;MouseEvent, KeyboardEvent and others&lt;/h3&gt;
&lt;p&gt;Here&amp;rsquo;s a short list of classes for UI Events from the &lt;a href=&#34;https://www.w3.org/TR/uievents&#34;&gt;UI Event specification&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;UIEvent&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FocusEvent&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MouseEvent&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WheelEvent&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;KeyboardEvent&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We should use them instead of &lt;code&gt;new Event&lt;/code&gt; if we want to create such events. For instance, &lt;code&gt;new MouseEvent(&amp;quot;click&amp;quot;)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The right constructor allows to specify standard properties for that type of event.&lt;/p&gt;
&lt;p&gt;Like &lt;code&gt;clientX/clientY&lt;/code&gt; for a mouse event:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; event &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; MouseEvent(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  bubbles&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cancelable&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  clientX&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  clientY&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(event.clientX); &lt;span style=&#34;color:#6272a4&#34;&gt;// 100
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Please note: the generic &lt;code&gt;Event&lt;/code&gt; constructor does not allow that.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s try:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; event &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Event(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;, {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  bubbles&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#6272a4&#34;&gt;// only bubbles and cancelable
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  cancelable&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#6272a4&#34;&gt;// work in the Event constructor
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  clientX&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  clientY&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(event.clientX); &lt;span style=&#34;color:#6272a4&#34;&gt;// undefined, the unknown property is ignored!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Technically, we can work around that by assigning directly &lt;code&gt;event.clientX=100&lt;/code&gt; after creation. So that&amp;rsquo;s a matter of convenience and following the rules. Browser-generated events always have the right type.&lt;/p&gt;
&lt;p&gt;The full list of properties for different UI events is in the specification, for instance, &lt;a href=&#34;https://www.w3.org/TR/uievents/#mouseevent&#34;&gt;MouseEvent&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;custom-events&#34;&gt;Custom events&lt;/h3&gt;
&lt;p&gt;For our own, completely new events types like &lt;code&gt;&amp;quot;hello&amp;quot;&lt;/code&gt; we should use &lt;code&gt;new CustomEvent&lt;/code&gt;. Technically &lt;a href=&#34;https://dom.spec.whatwg.org/#customevent&#34;&gt;CustomEvent&lt;/a&gt; is the same as &lt;code&gt;Event&lt;/code&gt;, with one exception.&lt;/p&gt;
&lt;p&gt;In the second argument (object) we can add an additional property &lt;code&gt;detail&lt;/code&gt; for any custom information that we want to pass with the event.&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h1&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;elem&amp;#34;&lt;/span&gt;&amp;gt;Hello for John!&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h1&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// additional details come with the event to the handler
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  elem.addEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(event) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(event.detail.name);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  elem.dispatchEvent(&lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; CustomEvent(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;, {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    detail&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; { name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;detail&lt;/code&gt; property can have any data. Technically we could live without, because we can assign any properties into a regular &lt;code&gt;new Event&lt;/code&gt; object after its creation. But &lt;code&gt;CustomEvent&lt;/code&gt; provides the special &lt;code&gt;detail&lt;/code&gt; field for it to evade conflicts with other event properties.&lt;/p&gt;
&lt;p&gt;Besides, the event class describes &amp;ldquo;what kind of event&amp;rdquo; it is, and if the event is custom, then we should use &lt;code&gt;CustomEvent&lt;/code&gt; just to be clear about what it is.&lt;/p&gt;
&lt;h3 id=&#34;eventpreventdefault&#34;&gt;event.preventDefault()&lt;/h3&gt;
&lt;p&gt;Many browser events have a &amp;ldquo;default action&amp;rdquo;, such as navigating to a link, starting a selection, and so on.&lt;/p&gt;
&lt;p&gt;For new, custom events, there are definitely no default browser actions, but a code that dispatches such event may have its own plans what to do after triggering the event.&lt;/p&gt;
&lt;p&gt;By calling &lt;code&gt;event.preventDefault()&lt;/code&gt;, an event handler may send a signal that those actions should be canceled.&lt;/p&gt;
&lt;p&gt;In that case the call to &lt;code&gt;elem.dispatchEvent(event)&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;. And the code that dispatched it knows that it shouldn&amp;rsquo;t continue.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s see a practical example - a hiding rabbit (could be a closing menu or something else).&lt;/p&gt;
&lt;p&gt;Below you can see a &lt;code&gt;#rabbit&lt;/code&gt; and &lt;code&gt;hide()&lt;/code&gt; function that dispatches &lt;code&gt;&amp;quot;hide&amp;quot;&lt;/code&gt; event on it, to let all interested parties know that the rabbit is going to hide.&lt;/p&gt;
&lt;p&gt;Any handler can listen for that event with &lt;code&gt;rabbit.addEventListener(&#39;hide&#39;,...)&lt;/code&gt; and, if needed, cancel the action using &lt;code&gt;event.preventDefault()&lt;/code&gt;. Then the rabbit won&amp;rsquo;t disappear:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;pre&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;rabbit&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  |\   /|
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   \|_|/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   /. .\
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  =\_Y_/=
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   {&amp;gt;o&amp;lt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;pre&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;hide()&amp;#34;&lt;/span&gt;&amp;gt;Hide()&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// hide() will be called automatically in 2 seconds
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; hide() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; event &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; CustomEvent(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;hide&amp;#34;&lt;/span&gt;, {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      cancelable&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;// without that flag preventDefault doesn&amp;#39;t work
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;!&lt;/span&gt;rabbit.dispatchEvent(event)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;The action was prevented by a handler&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      rabbit.hidden &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  rabbit.addEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;hide&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(event) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (confirm(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Call preventDefault?&amp;#34;&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      event.preventDefault();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Please note: the event must have the flag &lt;code&gt;cancelable: true&lt;/code&gt;, otherwise the call &lt;code&gt;event.preventDefault()&lt;/code&gt; is ignored.&lt;/p&gt;
&lt;h3 id=&#34;events-in-events-are-synchronous&#34;&gt;Events-in-events are synchronous&lt;/h3&gt;
&lt;p&gt;Usually events are processed in a queue. That is: if the browser is processing &lt;code&gt;onclick&lt;/code&gt; and a new event occurs, e.g. mouse moved, then it&amp;rsquo;s handing is queued up, corresponding &lt;code&gt;mousemove&lt;/code&gt; handlers will be called after &lt;code&gt;onclick&lt;/code&gt; processing is finished.&lt;/p&gt;
&lt;p&gt;The notable exception is when one event is initiated from within another one, e.g. using &lt;code&gt;dispatchEvent&lt;/code&gt;. Such events are processed immediately: the new event handlers are called, and then the current event handling is resumed.&lt;/p&gt;
&lt;p&gt;For instance, in the code below the &lt;code&gt;menu-open&lt;/code&gt; event is triggered during the &lt;code&gt;onclick&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s processed immediately, without waiting for &lt;code&gt;onlick&lt;/code&gt; handler to end:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;menu&amp;#34;&lt;/span&gt;&amp;gt;Menu (click me)&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  menu.onclick &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    menu.dispatchEvent(&lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; CustomEvent(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;menu-open&amp;#34;&lt;/span&gt;, {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      bubbles&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// triggers between 1 and 2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.addEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;menu-open&amp;#39;&lt;/span&gt;, () =&amp;gt; alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;nested&amp;#39;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The output order is: 1 -&amp;gt; nested -&amp;gt; 2.&lt;/p&gt;
&lt;p&gt;Please note that the nested event &lt;code&gt;menu-open&lt;/code&gt; is caught on the &lt;code&gt;document&lt;/code&gt;. The propagation and handling of the nested event is finished before the processing gets back to the outer code (&lt;code&gt;onclick&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s not only about &lt;code&gt;dispatchEvent&lt;/code&gt;, there are other cases. If an event handler calls methods that trigger to other events &amp;ndash; they are too processed synchronously, in a nested fashion.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say we don&amp;rsquo;t like it. We&amp;rsquo;d want &lt;code&gt;onclick&lt;/code&gt; to be fully processed first, independently from &lt;code&gt;menu-open&lt;/code&gt; or any other nested events.&lt;/p&gt;
&lt;p&gt;Then we can either put the &lt;code&gt;dispatchEvent&lt;/code&gt; (or another event-triggering call) at the end of &lt;code&gt;onclick&lt;/code&gt; or, maybe better, wrap it in the zero-delay &lt;code&gt;setTimeout&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;menu&amp;#34;&lt;/span&gt;&amp;gt;Menu (click me)&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  menu.onclick &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    setTimeout(() =&amp;gt; menu.dispatchEvent(&lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; CustomEvent(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;menu-open&amp;#34;&lt;/span&gt;, {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      bubbles&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    })));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.addEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;menu-open&amp;#39;&lt;/span&gt;, () =&amp;gt; alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;nested&amp;#39;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now &lt;code&gt;dispatchEvent&lt;/code&gt; runs asynchronously after the current code execution is finished, including &lt;code&gt;mouse.onclick&lt;/code&gt;, so event handlers are totally separate.&lt;/p&gt;
&lt;p&gt;The output order becomes: 1 -&amp;gt; 2 -&amp;gt; nested.&lt;/p&gt;
&lt;h3 id=&#34;summary-15&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;To generate an event from code, we first need to create an event object.&lt;/p&gt;
&lt;p&gt;The generic &lt;code&gt;Event(name, options)&lt;/code&gt; constructor accepts an arbitrary event name and the &lt;code&gt;options&lt;/code&gt; object with two properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bubbles: true&lt;/code&gt; if the event should bubble.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cancelable: true&lt;/code&gt; if the &lt;code&gt;event.preventDefault()&lt;/code&gt; should work.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other constructors of native events like &lt;code&gt;MouseEvent&lt;/code&gt;, &lt;code&gt;KeyboardEvent&lt;/code&gt; and so on accept properties specific to that event type. For instance, &lt;code&gt;clientX&lt;/code&gt; for mouse events.&lt;/p&gt;
&lt;p&gt;For custom events we should use &lt;code&gt;CustomEvent&lt;/code&gt; constructor. It has an additional option named &lt;code&gt;detail&lt;/code&gt;, we should assign the event-specific data to it. Then all handlers can access it as &lt;code&gt;event.detail&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Despite the technical possibility to generate browser events like &lt;code&gt;click&lt;/code&gt; or &lt;code&gt;keydown&lt;/code&gt;, we should use with the great care.&lt;/p&gt;
&lt;p&gt;We shouldn&amp;rsquo;t generate browser events as it&amp;rsquo;s a hacky way to run handlers. That&amp;rsquo;s a bad architecture most of the time.&lt;/p&gt;
&lt;p&gt;Native events might be generated:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;As a dirty hack to make 3rd-party libraries work the needed way, if they don&amp;rsquo;t provide other means of interaction.&lt;/li&gt;
&lt;li&gt;For automated testing, to &amp;ldquo;click the button&amp;rdquo; in the script and see if the interface reacts correctly.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Custom events with our own names are often generated for architectural purposes, to signal what happens inside our menus, sliders, carousels etc.&lt;/p&gt;
&lt;h2 id=&#34;mouse-events&#34;&gt;Mouse events&lt;/h2&gt;
&lt;p&gt;In this chapter we&amp;rsquo;ll get into more details about mouse events and their properties.&lt;/p&gt;
&lt;p&gt;Please note: such events may come not only from &amp;ldquo;mouse devices&amp;rdquo;, but are also from other devices, such as phones and tablets, where they are emulated for compatibility.&lt;/p&gt;
&lt;h3 id=&#34;mouse-event-types&#34;&gt;Mouse event types&lt;/h3&gt;
&lt;p&gt;We&amp;rsquo;ve already seen some of these events:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;mousedown/mouseup&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Mouse button is clicked/released over an element.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;mouseover/mouseout&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Mouse pointer comes over/out from an element.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;mousemove&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Every mouse move over an element triggers that event.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;click&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Triggers after &lt;code&gt;mousedown&lt;/code&gt; and then &lt;code&gt;mouseup&lt;/code&gt; over the same element if the left mouse button was used.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;dblclick&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Triggers after two clicks on the same element within a short timeframe. Rarely used nowadays.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;contextmenu&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Triggers when the right mouse button is pressed. There are other ways to open a context menu, e.g. using a special keyboard key, it triggers in that case also, so it&amp;rsquo;s not exactly the mouse event.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;&amp;hellip;There are several other events too, we&amp;rsquo;ll cover them later.&lt;/p&gt;
&lt;h3 id=&#34;events-order&#34;&gt;Events order&lt;/h3&gt;
&lt;p&gt;As you can see from the list above, a user action may trigger multiple events.&lt;/p&gt;
&lt;p&gt;For instance, a left-button click first triggers &lt;code&gt;mousedown&lt;/code&gt;, when the button is pressed, then &lt;code&gt;mouseup&lt;/code&gt; and &lt;code&gt;click&lt;/code&gt; when it&amp;rsquo;s released.&lt;/p&gt;
&lt;p&gt;In cases when a single action initiates multiple events, their order is fixed. That is, the handlers are called in the order &lt;code&gt;mousedown&lt;/code&gt; -&amp;gt; &lt;code&gt;mouseup&lt;/code&gt; -&amp;gt; &lt;code&gt;click&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Click the button below and you&amp;#39;ll see the events. Try double-click too.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;On the teststand below all mouse events are logged, and if there is more than a 1 second delay between them they are separated by a horizontal ruler.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Also we can see the `button` property that allows to detect the mouse button, it&amp;#39;s explained below.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onmousedown&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;return logMouse(event)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onmouseup&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;return logMouse(event)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;return logMouse(event)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;oncontextmenu&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;return logMouse(event)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;ondblclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;return logMouse(event)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Click me with the right or the left mouse button&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;button&amp;#34;&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;logClear(&amp;#39;test&amp;#39;)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Clear&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;button&amp;#34;&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;form&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;testform&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;testform&amp;#34;&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;textarea&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;font-size:12px;height:150px;width:360px;&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;textarea&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;form&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;mouse-button&#34;&gt;Mouse button&lt;/h3&gt;
&lt;p&gt;Click-related events always have the &lt;code&gt;button&lt;/code&gt; property, which allows to get the exact mouse button.&lt;/p&gt;
&lt;p&gt;We usually don&amp;rsquo;t use it for &lt;code&gt;click&lt;/code&gt; and &lt;code&gt;contextmenu&lt;/code&gt; events, because the former happens only on left-click, and the latter &amp;ndash; only on right-click.&lt;/p&gt;
&lt;p&gt;From the other hand, &lt;code&gt;mousedown&lt;/code&gt; and &lt;code&gt;mouseup&lt;/code&gt; handlers we may need &lt;code&gt;event.button&lt;/code&gt;, because these events trigger on any button, so &lt;code&gt;button&lt;/code&gt; allows to distinguish between &amp;ldquo;right-mousedown&amp;rdquo; and &amp;ldquo;left-mousedown&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;The possible values of &lt;code&gt;event.button&lt;/code&gt; are:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Button state&lt;/th&gt;
&lt;th&gt;&lt;code&gt;event.button&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Left button (primary)&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Middle button (auxillary)&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Right button (secondary)&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;X1 button (back)&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;X2 button (forward)&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Most mouse devices only have the left and right buttons, so possible values are &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;2&lt;/code&gt;. Touch devices also generate similar events when one taps on them.&lt;/p&gt;
&lt;p&gt;Also there&amp;rsquo;s &lt;code&gt;event.buttons&lt;/code&gt; property that has all currently pressed buttons as an integer, one bit per button. In practice this property is very rarely used, you can find details at &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons&#34;&gt;MDN&lt;/a&gt; if you ever need it.&lt;/p&gt;
&lt;p&gt;Old code may use &lt;code&gt;event.which&lt;/code&gt; property that&amp;rsquo;s an old non-standard way of getting a button, with possible values:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;event.which == 1&lt;/code&gt; – left button,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;event.which == 2&lt;/code&gt; – middle button,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;event.which == 3&lt;/code&gt; – right button.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As of now, &lt;code&gt;event.which&lt;/code&gt; is deprecated, we shouldn&amp;rsquo;t use it.&lt;/p&gt;
&lt;h3 id=&#34;modifiers-shift-alt-ctrl-and-meta&#34;&gt;Modifiers: shift, alt, ctrl and meta&lt;/h3&gt;
&lt;p&gt;All mouse events include the information about pressed modifier keys.&lt;/p&gt;
&lt;p&gt;Event properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shiftKey&lt;/code&gt;: &lt;code&gt;key:Shift&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;altKey&lt;/code&gt;: &lt;code&gt;key:Alt&lt;/code&gt; (or &lt;code&gt;key:Opt&lt;/code&gt; for Mac)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ctrlKey&lt;/code&gt;: &lt;code&gt;key:Ctrl&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;metaKey&lt;/code&gt;: &lt;code&gt;key:Cmd&lt;/code&gt; for Mac&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;They are &lt;code&gt;true&lt;/code&gt; if the corresponding key was pressed during the event.&lt;/p&gt;
&lt;p&gt;For instance, the button below only works on &lt;code&gt;key:Alt+Shift&lt;/code&gt;+click:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;button&amp;#34;&lt;/span&gt;&amp;gt;Alt+Shift+Click on me!&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  button.onclick &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(event) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (event.altKey &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; event.shiftKey) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Hooray!&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;On Windows and Linux there are modifier keys &lt;code&gt;key:Alt&lt;/code&gt;, &lt;code&gt;key:Shift&lt;/code&gt; and &lt;code&gt;key:Ctrl&lt;/code&gt;. On Mac there&amp;rsquo;s one more: &lt;code&gt;key:Cmd&lt;/code&gt;, corresponding to the property &lt;code&gt;metaKey&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In most applications, when Windows/Linux uses &lt;code&gt;key:Ctrl&lt;/code&gt;, on Mac &lt;code&gt;key:Cmd&lt;/code&gt; is used.&lt;/p&gt;
&lt;p&gt;That is: where a Windows user presses &lt;code&gt;key:Ctrl+Enter&lt;/code&gt; or &lt;code&gt;key:Ctrl+A&lt;/code&gt;, a Mac user would press &lt;code&gt;key:Cmd+Enter&lt;/code&gt; or &lt;code&gt;key:Cmd+A&lt;/code&gt;, and so on.&lt;/p&gt;
&lt;p&gt;So if we want to support combinations like &lt;code&gt;key:Ctrl&lt;/code&gt;+click, then for Mac it makes sense to use &lt;code&gt;key:Cmd&lt;/code&gt;+click. That&amp;rsquo;s more comfortable for Mac users.&lt;/p&gt;
&lt;p&gt;Even if we&amp;rsquo;d like to force Mac users to &lt;code&gt;key:Ctrl&lt;/code&gt;+click &amp;ndash; that&amp;rsquo;s kind of difficult. The problem is: a left-click with &lt;code&gt;key:Ctrl&lt;/code&gt; is interpreted as a &lt;em&gt;right-click&lt;/em&gt; on MacOS, and it generates the &lt;code&gt;contextmenu&lt;/code&gt; event, not &lt;code&gt;click&lt;/code&gt; like Windows/Linux.&lt;/p&gt;
&lt;p&gt;So if we want users of all operating systems to feel comfortable, then together with &lt;code&gt;ctrlKey&lt;/code&gt; we should check &lt;code&gt;metaKey&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For JS-code it means that we should check &lt;code&gt;if (event.ctrlKey || event.metaKey)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Keyboard combinations are good as an addition to the workflow. So that if the visitor uses a keyboard &amp;ndash; they work.&lt;/p&gt;
&lt;p&gt;But if their device doesn&amp;rsquo;t have it &amp;ndash; then there should be a way to live without modifier keys.&lt;/p&gt;
&lt;h3 id=&#34;coordinates-clientxy-pagexy&#34;&gt;Coordinates: clientX/Y, pageX/Y&lt;/h3&gt;
&lt;p&gt;All mouse events provide coordinates in two flavours:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Window-relative: &lt;code&gt;clientX&lt;/code&gt; and &lt;code&gt;clientY&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Document-relative: &lt;code&gt;pageX&lt;/code&gt; and &lt;code&gt;pageY&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We already covered the difference between them in the chapter &lt;a href=&#34;info:coordinates&#34;&gt;info:coordinates&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In short, document-relative coordinates &lt;code&gt;pageX/Y&lt;/code&gt; are counted from the left-upper corner of the document, and do not change when the page is scrolled, while &lt;code&gt;clientX/Y&lt;/code&gt; are counted from the current window left-upper corner. When the page is scrolled, they change.&lt;/p&gt;
&lt;p&gt;For instance, if we have a window of the size 500x500, and the mouse is in the left-upper corner, then &lt;code&gt;clientX&lt;/code&gt; and &lt;code&gt;clientY&lt;/code&gt; are &lt;code&gt;0&lt;/code&gt;, no matter how the page is scrolled.&lt;/p&gt;
&lt;p&gt;And if the mouse is in the center, then &lt;code&gt;clientX&lt;/code&gt; and &lt;code&gt;clientY&lt;/code&gt; are &lt;code&gt;250&lt;/code&gt;, no matter what place in the document it is. They are similar to &lt;code&gt;position:fixed&lt;/code&gt; in that aspect.&lt;/p&gt;
&lt;p&gt;Move the mouse over the input field to see &lt;code&gt;clientX/clientY&lt;/code&gt; (the example is in the &lt;code&gt;iframe&lt;/code&gt;, so coordinates are relative to that &lt;code&gt;iframe&lt;/code&gt;):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onmousemove&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;this.value=event.clientX+&amp;#39;:&amp;#39;+event.clientY&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Mouse over me&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;preventing-selection-on-mousedown&#34;&gt;Preventing selection on mousedown&lt;/h3&gt;
&lt;p&gt;Double mouse click has a side-effect that may be disturbing in some interfaces: it selects text.&lt;/p&gt;
&lt;p&gt;For instance, a double-click on the text below selects it in addition to our handler:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;ondblclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert(&amp;#39;dblclick&amp;#39;)&amp;#34;&lt;/span&gt;&amp;gt;Double-click me&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If one presses the left mouse button and, without releasing it, moves the mouse, that also makes the selection, often unwanted.&lt;/p&gt;
&lt;p&gt;There are multiple ways to prevent the selection, that you can read in the chapter &lt;a href=&#34;info:selection-range&#34;&gt;info:selection-range&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this particular case the most reasonable way is to prevent the browser action on &lt;code&gt;mousedown&lt;/code&gt;. It prevents both these selections:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Before...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;ondblclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert(&amp;#39;Click!&amp;#39;)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onmousedown&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;return false&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Double-click me
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;b&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...After
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now the bold element is not selected on double clicks, and pressing the left button on it won&amp;rsquo;t start the selection.&lt;/p&gt;
&lt;p&gt;Please note: the text inside it is still selectable. However, the selection should start not on the text itself, but before or after it. Usually that&amp;rsquo;s fine for users.&lt;/p&gt;
&lt;p&gt;If we want to disable selection to protect our page content from copy-pasting, then we can use another event: &lt;code&gt;oncopy&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;oncopy&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert(&amp;#39;Copying forbidden!&amp;#39;);return false&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Dear user,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  The copying is forbidden for you.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  If you know JS or HTML, then you can get everything from the page source though.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you try to copy a piece of text in the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, that won&amp;rsquo;t work, because the default action &lt;code&gt;oncopy&lt;/code&gt; is prevented.&lt;/p&gt;
&lt;p&gt;Surely the user has access to HTML-source of the page, and can take the content from there, but not everyone knows how to do it.&lt;/p&gt;
&lt;h3 id=&#34;summary-16&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;Mouse events have the following properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Button: &lt;code&gt;button&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Modifier keys (&lt;code&gt;true&lt;/code&gt; if pressed): &lt;code&gt;altKey&lt;/code&gt;, &lt;code&gt;ctrlKey&lt;/code&gt;, &lt;code&gt;shiftKey&lt;/code&gt; and &lt;code&gt;metaKey&lt;/code&gt; (Mac).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you want to handle &lt;code&gt;key:Ctrl&lt;/code&gt;, then don&amp;rsquo;t forget Mac users, they usually use &lt;code&gt;key:Cmd&lt;/code&gt;, so it&amp;rsquo;s better to check &lt;code&gt;if (e.metaKey || e.ctrlKey)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Window-relative coordinates: &lt;code&gt;clientX/clientY&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Document-relative coordinates: &lt;code&gt;pageX/pageY&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The default browser action of &lt;code&gt;mousedown&lt;/code&gt; is text selection, if it&amp;rsquo;s not good for the interface, then it should be prevented.&lt;/p&gt;
&lt;p&gt;In the next chapter we&amp;rsquo;ll see more details about events that follow pointer movement and how to track element changes under it.&lt;/p&gt;
&lt;h2 id=&#34;moving-the-mouse-mouseoverout-mouseenterleave&#34;&gt;Moving the mouse: mouseover/out, mouseenter/leave&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s dive into more details about events that happen when the mouse moves between elements.&lt;/p&gt;
&lt;h3 id=&#34;events-mouseovermouseout-relatedtarget&#34;&gt;Events mouseover/mouseout, relatedTarget&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;mouseover&lt;/code&gt; event occurs when a mouse pointer comes over an element, and &lt;code&gt;mouseout&lt;/code&gt; &amp;ndash; when it leaves.&lt;/p&gt;
&lt;p&gt;These events are special, because they have property &lt;code&gt;relatedTarget&lt;/code&gt;. This property complements &lt;code&gt;target&lt;/code&gt;. When a mouse leaves one element for another, one of them becomes &lt;code&gt;target&lt;/code&gt;, and the other one - &lt;code&gt;relatedTarget&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For &lt;code&gt;mouseover&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;event.target&lt;/code&gt; &amp;ndash; is the element where the mouse came over.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;event.relatedTarget&lt;/code&gt; &amp;ndash; is the element from which the mouse came (&lt;code&gt;relatedTarget&lt;/code&gt; -&amp;gt; &lt;code&gt;target&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For &lt;code&gt;mouseout&lt;/code&gt; the reverse:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;event.target&lt;/code&gt; &amp;ndash; is the element that the mouse left.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;event.relatedTarget&lt;/code&gt; &amp;ndash; is the new under-the-pointer element, that mouse left for (&lt;code&gt;target&lt;/code&gt; -&amp;gt; &lt;code&gt;relatedTarget&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the example below each face and its features are separate elements. When you move the mouse, you can see mouse events in the text area.&lt;/p&gt;
&lt;p&gt;Each event has the information about both &lt;code&gt;target&lt;/code&gt; and &lt;code&gt;relatedTarget&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;[codetabs src=&amp;ldquo;mouseoverout&amp;rdquo; height=280]&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;relatedTarget&lt;/code&gt; property can be &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s normal and just means that the mouse came not from another element, but from out of the window. Or that it left the window.&lt;/p&gt;
&lt;p&gt;We should keep that possibility in mind when using &lt;code&gt;event.relatedTarget&lt;/code&gt; in our code. If we access &lt;code&gt;event.relatedTarget.tagName&lt;/code&gt;, then there will be an error.&lt;/p&gt;
&lt;h3 id=&#34;skipping-elements&#34;&gt;Skipping elements&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;mousemove&lt;/code&gt; event triggers when the mouse moves. But that doesn&amp;rsquo;t mean that every pixel leads to an event.&lt;/p&gt;
&lt;p&gt;The browser checks the mouse position from time to time. And if it notices changes then triggers the events.&lt;/p&gt;
&lt;p&gt;That means that if the visitor is moving the mouse very fast then some DOM-elements may be skipped:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;mouseover-mouseout-over-elems.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;If the mouse moves very fast from &lt;code&gt;#FROM&lt;/code&gt; to &lt;code&gt;#TO&lt;/code&gt; elements as painted above, then intermediate &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; elements (or some of them) may be skipped. The &lt;code&gt;mouseout&lt;/code&gt; event may trigger on &lt;code&gt;#FROM&lt;/code&gt; and then immediately &lt;code&gt;mouseover&lt;/code&gt; on &lt;code&gt;#TO&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s good for performance, because there may be many intermediate elements. We don&amp;rsquo;t really want to process in and out of each one.&lt;/p&gt;
&lt;p&gt;On the other hand, we should keep in mind that the mouse pointer doesn&amp;rsquo;t &amp;ldquo;visit&amp;rdquo; all elements along the way. It can &amp;ldquo;jump&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;In particular, it&amp;rsquo;s possible that the pointer jumps right inside the middle of the page from out of the window. In that case &lt;code&gt;relatedTarget&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, because it came from &amp;ldquo;nowhere&amp;rdquo;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;mouseover-mouseout-from-outside.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;You can check it out &amp;#34;live&amp;#34; on a teststand below.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Its HTML has two nested elements: the `&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;child&amp;#34;&lt;/span&gt;&amp;gt;` is inside the `&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;parent&amp;#34;&lt;/span&gt;&amp;gt;`. If you move the mouse fast over them, then maybe only the child div triggers events, or maybe the parent one, or maybe there will be no events at all.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Also move the pointer into the child `div`, and then move it out quickly down through the parent one. If the movement is fast enough, then the parent element is ignored. The mouse will cross the parent element without noticing it.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[codetabs height=360 src=&amp;#34;mouseoverout-fast&amp;#34;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;In case of fast mouse movements, intermediate elements may be ignored, but one thing we know for sure: if the pointer &amp;#34;officially&amp;#34; entered an element (`mouseover` event generated), then upon leaving it we always get `mouseout`.
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;mouseout-when-leaving-for-a-child&#34;&gt;Mouseout when leaving for a child&lt;/h3&gt;
&lt;p&gt;An important feature of &lt;code&gt;mouseout&lt;/code&gt; &amp;ndash; it triggers, when the pointer moves from an element to its descendant, e.g. from &lt;code&gt;#parent&lt;/code&gt; to &lt;code&gt;#child&lt;/code&gt; in this HTML:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;parent&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;child&amp;#34;&lt;/span&gt;&amp;gt;...&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If we&amp;rsquo;re on &lt;code&gt;#parent&lt;/code&gt; and then move the pointer deeper into &lt;code&gt;#child&lt;/code&gt;, but we get &lt;code&gt;mouseout&lt;/code&gt; on &lt;code&gt;#parent&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;mouseover-to-child.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;That may seem strange, but can be easily explained.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;According to the browser logic, the mouse cursor may be only over a &lt;em&gt;single&lt;/em&gt; element at any time &amp;ndash; the most nested one and top by z-index.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;So if it goes to another element (even a descendant), then it leaves the previous one.&lt;/p&gt;
&lt;p&gt;Please note another important detail of event processing.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;mouseover&lt;/code&gt; event on a descendant bubbles up. So, if &lt;code&gt;#parent&lt;/code&gt; has &lt;code&gt;mouseover&lt;/code&gt; handler, it triggers:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;mouseover-bubble-nested.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;You can see that very well in the example below: `&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;child&amp;#34;&lt;/span&gt;&amp;gt;` is inside the `&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;parent&amp;#34;&lt;/span&gt;&amp;gt;`. There are `mouseover/out` handlers on `#parent` element that output event details.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;If you move the mouse from `#parent` to `#child`, you see two events on `#parent`:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;1. `mouseout [target: parent]` (left the parent), then
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;2. `mouseover [target: child]` (came to the child, bubbled).
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[codetabs height=360 src=&amp;#34;mouseoverout-child&amp;#34;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As shown, when the pointer moves from &lt;code&gt;#parent&lt;/code&gt; element to &lt;code&gt;#child&lt;/code&gt;, two handlers trigger on the parent element: &lt;code&gt;mouseout&lt;/code&gt; and &lt;code&gt;mouseover&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;parent.onmouseout &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(event) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;/* event.target: parent element */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;parent.onmouseover &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(event) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;/* event.target: child element (bubbled) */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;If we don&amp;rsquo;t examine &lt;code&gt;event.target&lt;/code&gt; inside the handlers, then it may seem that the mouse pointer left &lt;code&gt;#parent&lt;/code&gt; element, and then immediately came back over it.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;But that&amp;rsquo;s not the case! The pointer is still over the parent, it just moved deeper into the child element.&lt;/p&gt;
&lt;p&gt;If there are some actions upon leaving the parent element, e.g. an animation runs in &lt;code&gt;parent.onmouseout&lt;/code&gt;, we usually don&amp;rsquo;t want it when the pointer just goes deeper into &lt;code&gt;#parent&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To avoid it, we can check &lt;code&gt;relatedTarget&lt;/code&gt; in the handler and, if the mouse is still inside the element, then ignore such event.&lt;/p&gt;
&lt;p&gt;Alternatively we can use other events: &lt;code&gt;mouseenter&lt;/code&gt; and &lt;code&gt;mouseleave&lt;/code&gt;, that we&amp;rsquo;ll be covering now, as they don&amp;rsquo;t have such problems.&lt;/p&gt;
&lt;h3 id=&#34;events-mouseenter-and-mouseleave&#34;&gt;Events mouseenter and mouseleave&lt;/h3&gt;
&lt;p&gt;Events &lt;code&gt;mouseenter/mouseleave&lt;/code&gt; are like &lt;code&gt;mouseover/mouseout&lt;/code&gt;. They trigger when the mouse pointer enters/leaves the element.&lt;/p&gt;
&lt;p&gt;But there are two important differences:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Transitions inside the element, to/from descendants, are not counted.&lt;/li&gt;
&lt;li&gt;Events &lt;code&gt;mouseenter/mouseleave&lt;/code&gt; do not bubble.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These events are extremely simple.&lt;/p&gt;
&lt;p&gt;When the pointer enters an element &amp;ndash; &lt;code&gt;mouseenter&lt;/code&gt; triggers. The exact location of the pointer inside the element or its descendants doesn&amp;rsquo;t matter.&lt;/p&gt;
&lt;p&gt;When the pointer leaves an element &amp;ndash; &lt;code&gt;mouseleave&lt;/code&gt; triggers.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;This example is similar to the one above, but now the top element has `mouseenter/mouseleave` instead of `mouseover/mouseout`.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;As you can see, the only generated events are the ones related to moving the pointer in and out of the top element. Nothing happens when the pointer goes to the child and back. Transitions between descendants are ignored
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[codetabs height=340 src=&amp;#34;mouseleave&amp;#34;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;event-delegation-1&#34;&gt;Event delegation&lt;/h3&gt;
&lt;p&gt;Events &lt;code&gt;mouseenter/leave&lt;/code&gt; are very simple and easy to use. But they do not bubble. So we can&amp;rsquo;t use event delegation with them.&lt;/p&gt;
&lt;p&gt;Imagine we want to handle mouse enter/leave for table cells. And there are hundreds of cells.&lt;/p&gt;
&lt;p&gt;The natural solution would be &amp;ndash; to set the handler on &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; and process events there. But &lt;code&gt;mouseenter/leave&lt;/code&gt; don&amp;rsquo;t bubble. So if such event happens on &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt;, then only a handler on that &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; is able to catch it.&lt;/p&gt;
&lt;p&gt;Handlers for &lt;code&gt;mouseenter/leave&lt;/code&gt; on &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; only trigger when the pointer enters/leaves the table as a whole. It&amp;rsquo;s impossible to get any information about transitions inside it.&lt;/p&gt;
&lt;p&gt;So, let&amp;rsquo;s use &lt;code&gt;mouseover/mouseout&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s start with simple handlers that highlight the element under mouse:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// let&amp;#39;s highlight an element under the pointer
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;table.onmouseover &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(event) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; target &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; event.target;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  target.style.background &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;pink&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;table.onmouseout &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(event) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; target &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; event.target;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  target.style.background &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Here they are in action. As the mouse travels across the elements of this table, the current one is highlighted:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[codetabs height=480 src=&amp;#34;mouseenter-mouseleave-delegation&amp;#34;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In our case we&amp;rsquo;d like to handle transitions between table cells &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt;: entering a cell and leaving it. Other transitions, such as inside the cell or outside of any cells, don&amp;rsquo;t interest us. Let&amp;rsquo;s filter them out.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s what we can do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Remember the currently highlighted &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; in a variable, let&amp;rsquo;s call it &lt;code&gt;currentElem&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;On &lt;code&gt;mouseover&lt;/code&gt; &amp;ndash; ignore the event if we&amp;rsquo;re still inside the current &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;On &lt;code&gt;mouseout&lt;/code&gt; &amp;ndash; ignore if we didn&amp;rsquo;t leave the current &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&amp;rsquo;s an example of code that accounts for all possible situations:&lt;/p&gt;
&lt;p&gt;[js src=&amp;ldquo;mouseenter-mouseleave-delegation-2/script.js&amp;rdquo;]&lt;/p&gt;
&lt;p&gt;Once again, the important features are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It uses event delegation to handle entering/leaving of any &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; inside the table. So it relies on &lt;code&gt;mouseover/out&lt;/code&gt; instead of &lt;code&gt;mouseenter/leave&lt;/code&gt; that don&amp;rsquo;t bubble and hence allow no delegation.&lt;/li&gt;
&lt;li&gt;Extra events, such as moving between descendants of &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; are filtered out, so that &lt;code&gt;onEnter/Leave&lt;/code&gt; runs only if the pointer leaves or enters &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; as a whole.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Here&amp;#39;s the full example with all details:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[codetabs height=460 src=&amp;#34;mouseenter-mouseleave-delegation-2&amp;#34;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Try to move the cursor in and out of table cells and inside them. Fast or slow -- doesn&amp;#39;t matter. Only `&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;td&lt;/span&gt;&amp;gt;` as a whole is highlighted, unlike the example before.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;summary-17&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;We covered events &lt;code&gt;mouseover&lt;/code&gt;, &lt;code&gt;mouseout&lt;/code&gt;, &lt;code&gt;mousemove&lt;/code&gt;, &lt;code&gt;mouseenter&lt;/code&gt; and &lt;code&gt;mouseleave&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;These things are good to note:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A fast mouse move may skip intermediate elements.&lt;/li&gt;
&lt;li&gt;Events &lt;code&gt;mouseover/out&lt;/code&gt; and &lt;code&gt;mouseenter/leave&lt;/code&gt; have an additional property: &lt;code&gt;relatedTarget&lt;/code&gt;. That&amp;rsquo;s the element that we are coming from/to, complementary to &lt;code&gt;target&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Events &lt;code&gt;mouseover/out&lt;/code&gt; trigger even when we go from the parent element to a child element. The browser assumes that the mouse can be only over one element at one time &amp;ndash; the deepest one.&lt;/p&gt;
&lt;p&gt;Events &lt;code&gt;mouseenter/leave&lt;/code&gt; are different in that aspect: they only trigger when the mouse comes in and out the element as a whole. Also they do not bubble.&lt;/p&gt;
&lt;h2 id=&#34;dragndrop-with-mouse-events&#34;&gt;Drag&amp;rsquo;n&amp;rsquo;Drop with mouse events&lt;/h2&gt;
&lt;p&gt;Drag&amp;rsquo;n&amp;rsquo;Drop is a great interface solution. Taking something and dragging and dropping it is a clear and simple way to do many things, from copying and moving documents (as in file managers) to ordering (dropping items into a cart).&lt;/p&gt;
&lt;p&gt;In the modern HTML standard there&amp;rsquo;s a &lt;a href=&#34;https://html.spec.whatwg.org/multipage/interaction.html#dnd&#34;&gt;section about Drag and Drop&lt;/a&gt; with special events such as &lt;code&gt;dragstart&lt;/code&gt;, &lt;code&gt;dragend&lt;/code&gt;, and so on.&lt;/p&gt;
&lt;p&gt;These events allow us to support special kinds of drag&amp;rsquo;n&amp;rsquo;drop, such as handling dragging a file from OS file-manager and dropping it into the browser window. Then JavaScript can access the contents of such files.&lt;/p&gt;
&lt;p&gt;But native Drag Events also have limitations. For instance, we can&amp;rsquo;t prevent dragging from a certain area. Also we can&amp;rsquo;t make the dragging &amp;ldquo;horizontal&amp;rdquo; or &amp;ldquo;vertical&amp;rdquo; only. And there are many other drag&amp;rsquo;n&amp;rsquo;drop tasks that can&amp;rsquo;t be done using them. Also, mobile device support for such events is very weak.&lt;/p&gt;
&lt;p&gt;So here we&amp;rsquo;ll see how to implement Drag&amp;rsquo;n&amp;rsquo;Drop using mouse events.&lt;/p&gt;
&lt;h3 id=&#34;dragndrop-algorithm&#34;&gt;Drag&amp;rsquo;n&amp;rsquo;Drop algorithm&lt;/h3&gt;
&lt;p&gt;The basic Drag&amp;rsquo;n&amp;rsquo;Drop algorithm looks like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;On &lt;code&gt;mousedown&lt;/code&gt; - prepare the element for moving, if needed (maybe create a clone of it, add a class to it or whatever).&lt;/li&gt;
&lt;li&gt;Then on &lt;code&gt;mousemove&lt;/code&gt; move it by changing &lt;code&gt;left/top&lt;/code&gt; with &lt;code&gt;position:absolute&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;On &lt;code&gt;mouseup&lt;/code&gt; - perform all actions related to finishing the drag&amp;rsquo;n&amp;rsquo;drop.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These are the basics. Later we&amp;rsquo;ll see how to other features, such as highlighting current underlying elements while we drag over them.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the implementation of dragging a ball:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ball.onmousedown &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(event) { 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// (1) prepare to moving: make absolute and on top by z-index
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  ball.style.position &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;absolute&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ball.style.zIndex &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1000&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// move it out of any current parents directly into body
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// to make it positioned relative to the body
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.append(ball);  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// centers the ball at (pageX, pageY) coordinates
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; moveAt(pageX, pageY) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ball.style.left &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; pageX &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; ball.offsetWidth &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;px&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ball.style.top &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; pageY &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; ball.offsetHeight &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;px&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// move our absolutely positioned ball under the pointer
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  moveAt(event.pageX, event.pageY);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; onMouseMove(event) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    moveAt(event.pageX, event.pageY);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// (2) move the ball on mousemove
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.addEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;mousemove&amp;#39;&lt;/span&gt;, onMouseMove);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// (3) drop the ball, remove unneeded handlers
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  ball.onmouseup &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.removeEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;mousemove&amp;#39;&lt;/span&gt;, onMouseMove);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ball.onmouseup &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If we run the code, we can notice something strange. On the beginning of the drag&amp;rsquo;n&amp;rsquo;drop, the ball &amp;ldquo;forks&amp;rdquo;: we start dragging its &amp;ldquo;clone&amp;rdquo;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Here&amp;#39;s an example in action:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[iframe src=&amp;#34;ball&amp;#34; height=230]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Try to drag&amp;#39;n&amp;#39;drop with the mouse and you&amp;#39;ll see such behavior.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s because the browser has its own drag&amp;rsquo;n&amp;rsquo;drop support for images and some other elements. It runs automatically and conflicts with ours.&lt;/p&gt;
&lt;p&gt;To disable it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ball.ondragstart &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now everything will be all right.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In action:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[iframe src=&amp;#34;ball2&amp;#34; height=230]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Another important aspect &amp;ndash; we track &lt;code&gt;mousemove&lt;/code&gt; on &lt;code&gt;document&lt;/code&gt;, not on &lt;code&gt;ball&lt;/code&gt;. From the first sight it may seem that the mouse is always over the ball, and we can put &lt;code&gt;mousemove&lt;/code&gt; on it.&lt;/p&gt;
&lt;p&gt;But as we remember, &lt;code&gt;mousemove&lt;/code&gt; triggers often, but not for every pixel. So after swift move the pointer can jump from the ball somewhere in the middle of document (or even outside of the window).&lt;/p&gt;
&lt;p&gt;So we should listen on &lt;code&gt;document&lt;/code&gt; to catch it.&lt;/p&gt;
&lt;h3 id=&#34;correct-positioning&#34;&gt;Correct positioning&lt;/h3&gt;
&lt;p&gt;In the examples above the ball is always moved so, that it&amp;rsquo;s center is under the pointer:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ball.style.left &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; pageX &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; ball.offsetWidth &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;px&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ball.style.top &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; pageY &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; ball.offsetHeight &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;px&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Not bad, but there&amp;rsquo;s a side-effect. To initiate the drag&amp;rsquo;n&amp;rsquo;drop, we can &lt;code&gt;mousedown&lt;/code&gt; anywhere on the ball. But if &amp;ldquo;take&amp;rdquo; it from its edge, then the ball suddenly &amp;ldquo;jumps&amp;rdquo; to become centered under the mouse pointer.&lt;/p&gt;
&lt;p&gt;It would be better if we keep the initial shift of the element relative to the pointer.&lt;/p&gt;
&lt;p&gt;For instance, if we start dragging by the edge of the ball, then the pointer should remain over the edge while dragging.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;ball_shift.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s update our algorithm:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;When a visitor presses the button (&lt;code&gt;mousedown&lt;/code&gt;) - remember the distance from the pointer to the left-upper corner of the ball in variables &lt;code&gt;shiftX/shiftY&lt;/code&gt;. We&amp;rsquo;ll keep that distance while dragging.&lt;/p&gt;
&lt;p&gt;To get these shifts we can substract the coordinates:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// onmousedown
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; shiftX &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; event.clientX &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; ball.getBoundingClientRect().left;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; shiftY &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; event.clientY &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; ball.getBoundingClientRect().top;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then while dragging we position the ball on the same shift relative to the pointer, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// onmousemove
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// ball has position:absoute
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;ball.style.left &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; event.pageX &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; shiftX &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;px&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ball.style.top &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; event.pageY &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; shiftY &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;px&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The final code with better positioning:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ball.onmousedown &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(event) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; shiftX &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; event.clientX &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; ball.getBoundingClientRect().left;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; shiftY &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; event.clientY &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; ball.getBoundingClientRect().top;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ball.style.position &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;absolute&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ball.style.zIndex &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1000&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.append(ball);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  moveAt(event.pageX, event.pageY);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// moves the ball at (pageX, pageY) coordinates
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// taking initial shifts into account
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; moveAt(pageX, pageY) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ball.style.left &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; pageX &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; shiftX &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;px&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ball.style.top &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; pageY &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; shiftY &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;px&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; onMouseMove(event) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    moveAt(event.pageX, event.pageY);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// move the ball on mousemove
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.addEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;mousemove&amp;#39;&lt;/span&gt;, onMouseMove);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// drop the ball, remove unneeded handlers
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  ball.onmouseup &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.removeEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;mousemove&amp;#39;&lt;/span&gt;, onMouseMove);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ball.onmouseup &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ball.ondragstart &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In action (inside `&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;iframe&lt;/span&gt;&amp;gt;`):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[iframe src=&amp;#34;ball3&amp;#34; height=230]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The difference is especially noticeable if we drag the ball by its right-bottom corner. In the previous example the ball &amp;ldquo;jumps&amp;rdquo; under the pointer. Now it fluently follows the pointer from the current position.&lt;/p&gt;
&lt;h3 id=&#34;potential-drop-targets-droppables&#34;&gt;Potential drop targets (droppables)&lt;/h3&gt;
&lt;p&gt;In previous examples the ball could be dropped just &amp;ldquo;anywhere&amp;rdquo; to stay. In real-life we usually take one element and drop it onto another. For instance, a &amp;ldquo;file&amp;rdquo; into a &amp;ldquo;folder&amp;rdquo; or something else.&lt;/p&gt;
&lt;p&gt;Speaking abstract, we take a &amp;ldquo;draggable&amp;rdquo; element and drop it onto &amp;ldquo;droppable&amp;rdquo; element.&lt;/p&gt;
&lt;p&gt;We need to know:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;where the element was dropped at the end of Drag&amp;rsquo;n&amp;rsquo;Drop &amp;ndash; to do the corresponding action,&lt;/li&gt;
&lt;li&gt;and, preferably, know the droppable we&amp;rsquo;re dragging over, to highlight it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The solution is kind-of interesting and just a little bit tricky, so let&amp;rsquo;s cover it here.&lt;/p&gt;
&lt;p&gt;What may be the first idea? Probably to set &lt;code&gt;mouseover/mouseup&lt;/code&gt; handlers on potential droppables?&lt;/p&gt;
&lt;p&gt;But that doesn&amp;rsquo;t work.&lt;/p&gt;
&lt;p&gt;The problem is that, while we&amp;rsquo;re dragging, the draggable element is always above other elements. And mouse events only happen on the top element, not on those below it.&lt;/p&gt;
&lt;p&gt;For instance, below are two &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; elements, red one on top of the blue one (fully covers). There&amp;rsquo;s no way to catch an event on the blue one, because the red is on top:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;style&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;width&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;height&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;position&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;absolute&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;top&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;style&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;background:blue&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onmouseover&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert(&amp;#39;never works&amp;#39;)&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;background:red&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onmouseover&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert(&amp;#39;over red!&amp;#39;)&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The same with a draggable element. The ball is always on top over other elements, so events happen on it. Whatever handlers we set on lower elements, they won&amp;rsquo;t work.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s why the initial idea to put handlers on potential droppables doesn&amp;rsquo;t work in practice. They won&amp;rsquo;t run.&lt;/p&gt;
&lt;p&gt;So, what to do?&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s a method called &lt;code&gt;document.elementFromPoint(clientX, clientY)&lt;/code&gt;. It returns the most nested element on given window-relative coordinates (or &lt;code&gt;null&lt;/code&gt; if given coordinates are out of the window).&lt;/p&gt;
&lt;p&gt;We can use it in any of our mouse event handlers to detect the potential droppable under the pointer, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// in a mouse event handler
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;ball.hidden &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// (*) hide the element that we drag
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; elemBelow &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.elementFromPoint(event.clientX, event.clientY);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// elemBelow is the element below the ball, may be droppable
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ball.hidden &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Please note: we need to hide the ball before the call &lt;code&gt;(*)&lt;/code&gt;. Otherwise we&amp;rsquo;ll usually have a ball on these coordinates, as it&amp;rsquo;s the top element under the pointer: &lt;code&gt;elemBelow=ball&lt;/code&gt;. So we hide it and immediately show again.&lt;/p&gt;
&lt;p&gt;We can use that code to check what element we&amp;rsquo;re &amp;ldquo;flying over&amp;rdquo; at any time. And handle the drop when it happens.&lt;/p&gt;
&lt;p&gt;An extended code of &lt;code&gt;onMouseMove&lt;/code&gt; to find &amp;ldquo;droppable&amp;rdquo; elements:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// potential droppable that we&amp;#39;re flying over right now
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; currentDroppable &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; onMouseMove(event) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  moveAt(event.pageX, event.pageY);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ball.hidden &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; elemBelow &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.elementFromPoint(event.clientX, event.clientY);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ball.hidden &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// mousemove events may trigger out of the window (when the ball is dragged off-screen)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// if clientX/clientY are out of the window, then elementFromPoint returns null
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;!&lt;/span&gt;elemBelow) &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// potential droppables are labeled with the class &amp;#34;droppable&amp;#34; (can be other logic)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; droppableBelow &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; elemBelow.closest(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;.droppable&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (currentDroppable &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; droppableBelow) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// we&amp;#39;re flying in or out...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// note: both values can be null
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;//   currentDroppable=null if we were not over a droppable before this event (e.g over an empty space)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;//   droppableBelow=null if we&amp;#39;re not over a droppable now, during this event
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (currentDroppable) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#6272a4&#34;&gt;// the logic to process &amp;#34;flying out&amp;#34; of the droppable (remove highlight)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;      leaveDroppable(currentDroppable);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    currentDroppable &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; droppableBelow;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (currentDroppable) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#6272a4&#34;&gt;// the logic to process &amp;#34;flying in&amp;#34; of the droppable
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;      enterDroppable(currentDroppable);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the example below when the ball is dragged over the soccer gate, the gate is highlighted.&lt;/p&gt;
&lt;p&gt;[codetabs height=250 src=&amp;ldquo;ball4&amp;rdquo;]&lt;/p&gt;
&lt;p&gt;Now we have the current &amp;ldquo;drop target&amp;rdquo;, that we&amp;rsquo;re flying over, in the variable &lt;code&gt;currentDroppable&lt;/code&gt; during the whole process and can use it to highlight or any other stuff.&lt;/p&gt;
&lt;h3 id=&#34;summary-18&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;We considered a basic Drag&amp;rsquo;n&amp;rsquo;Drop algorithm.&lt;/p&gt;
&lt;p&gt;The key components:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Events flow: &lt;code&gt;ball.mousedown&lt;/code&gt; -&amp;gt; &lt;code&gt;document.mousemove&lt;/code&gt; -&amp;gt; &lt;code&gt;ball.mouseup&lt;/code&gt; (don&amp;rsquo;t forget to cancel native &lt;code&gt;ondragstart&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;At the drag start &amp;ndash; remember the initial shift of the pointer relative to the element: &lt;code&gt;shiftX/shiftY&lt;/code&gt; and keep it during the dragging.&lt;/li&gt;
&lt;li&gt;Detect droppable elements under the pointer using &lt;code&gt;document.elementFromPoint&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We can lay a lot on this foundation.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;On &lt;code&gt;mouseup&lt;/code&gt; we can intellectually finalize the drop: change data, move elements around.&lt;/li&gt;
&lt;li&gt;We can highlight the elements we&amp;rsquo;re flying over.&lt;/li&gt;
&lt;li&gt;We can limit dragging by a certain area or direction.&lt;/li&gt;
&lt;li&gt;We can use event delegation for &lt;code&gt;mousedown/up&lt;/code&gt;. A large-area event handler that checks  &lt;code&gt;event.target&lt;/code&gt; can manage Drag&amp;rsquo;n&amp;rsquo;Drop for hundreds of elements.&lt;/li&gt;
&lt;li&gt;And so on.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are frameworks that build architecture over it: &lt;code&gt;DragZone&lt;/code&gt;, &lt;code&gt;Droppable&lt;/code&gt;, &lt;code&gt;Draggable&lt;/code&gt; and other classes. Most of them do the similar stuff to what&amp;rsquo;s described above, so it should be easy to understand them now. Or roll your own, as you can see that that&amp;rsquo;s easy enough to do, sometimes easier than adapting a third-part solution.&lt;/p&gt;
&lt;h2 id=&#34;pointer-events&#34;&gt;Pointer events&lt;/h2&gt;
&lt;p&gt;Pointer events is a modern way to handle input from a variety of pointing devices, such as a mouse, a pen/stylus, a touchscreen and so on.&lt;/p&gt;
&lt;h3 id=&#34;the-brief-history&#34;&gt;The brief history&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s make a small overview, so that you understand the general picture and the place of Pointer Events among other event types.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Long ago, in the past, there existed only mouse events.&lt;/p&gt;
&lt;p&gt;Then touch devices appeared. For the old code to work, they also generate mouse events. For instance, tapping generates &lt;code&gt;mousedown&lt;/code&gt;. But mouse events were not good enough, as touch devices are more powerful in many aspects. For example, it&amp;rsquo;s possible to touch multiple points at once, and mouse events don&amp;rsquo;t have any properties for that.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;So touch events were introduced, such as &lt;code&gt;touchstart&lt;/code&gt;, &lt;code&gt;touchend&lt;/code&gt;, &lt;code&gt;touchmove&lt;/code&gt;, that have touch-specific properties (we don&amp;rsquo;t cover them in detail here, because pointer events are even better).&lt;/p&gt;
&lt;p&gt;Still, it wasn&amp;rsquo;t enough, as there are many other devices, such as pens, that have their own features. Also, writing a code that listens both touch and mouse events was cumbersome.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To solve these issues, the new standard Pointer Events was introduced. It provides a single set of events for all kinds of pointing devices.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As of now, &lt;a href=&#34;https://www.w3.org/TR/pointerevents2/&#34;&gt;Pointer Events Level 2&lt;/a&gt; specification is supported in all major browsers, while the &lt;a href=&#34;https://w3c.github.io/pointerevents/&#34;&gt;Pointer Events Level 3&lt;/a&gt; is in the works. Unless you code for Internet Explorer 10 or Safari 12 and below, there&amp;rsquo;s no point in using mouse or touch events any more. We can switch to pointer events.&lt;/p&gt;
&lt;p&gt;That said, there are important peculiarities, one should know them to use them correctly and avoid extra surprises.  We&amp;rsquo;ll pay attention to them in this article.&lt;/p&gt;
&lt;h3 id=&#34;pointer-event-types&#34;&gt;Pointer event types&lt;/h3&gt;
&lt;p&gt;Pointer events are named similar to mouse events:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Pointer Event&lt;/th&gt;
&lt;th&gt;Mouse event&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pointerdown&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;mousedown&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pointerup&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;mouseup&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pointermove&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;mousemove&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pointerover&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;mouseover&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pointerout&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;mouseout&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pointerenter&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;mouseenter&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pointerleave&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;mouseleave&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pointercancel&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;gotpointercapture&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lostpointercapture&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;As we can see, for every &lt;code&gt;mouse&amp;lt;event&amp;gt;&lt;/code&gt;, there&amp;rsquo;s a &lt;code&gt;pointer&amp;lt;event&amp;gt;&lt;/code&gt; that plays a similar role. Also there are 3 additional pointer events that don&amp;rsquo;t have a corresponding &lt;code&gt;mouse...&lt;/code&gt; counterpart, we&amp;rsquo;ll soon explain about them.&lt;/p&gt;
&lt;p&gt;We can replace &lt;code&gt;mouse&amp;lt;event&amp;gt;&lt;/code&gt; events with &lt;code&gt;pointer&amp;lt;event&amp;gt;&lt;/code&gt; in our code and expect things to continue working fine with mouse.&lt;/p&gt;
&lt;p&gt;The support for touch devices will also &amp;ldquo;magically&amp;rdquo; improve, but we&amp;rsquo;ll probably need to add &lt;code&gt;touch-action: none&lt;/code&gt; rule in CSS. See the details below in the section about &lt;code&gt;pointercancel&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;pointer-event-properties&#34;&gt;Pointer event properties&lt;/h3&gt;
&lt;p&gt;Pointer events have the same properties as mouse events, such as &lt;code&gt;clientX/Y&lt;/code&gt;, &lt;code&gt;target&lt;/code&gt; etc, plus some extra:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pointerId&lt;/code&gt; - the unique identifier of the pointer causing the event.&lt;/p&gt;
&lt;p&gt;Allows to handle multiple pointers, such as a touchscreen with stylus and multi-touch (explained below).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pointerType&lt;/code&gt; - the pointing device type, must be a string, one of: &amp;ldquo;mouse&amp;rdquo;, &amp;ldquo;pen&amp;rdquo; or &amp;ldquo;touch&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;We can use this property to react differently on various pointer types.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;isPrimary&lt;/code&gt; - &lt;code&gt;true&lt;/code&gt; for the primary pointer (the first finger in multi-touch).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For pointers that measure a contact area and pressure, e.g. a finger on the touchscreen, the additional properties can be useful:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;width&lt;/code&gt; - the width of of the area where the pointer touches the device. Where unsupported, e.g. for mouse it&amp;rsquo;s always &lt;code&gt;1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;height&lt;/code&gt; - the height of of the area where the pointer touches the device. Where unsupported, always &lt;code&gt;1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pressure&lt;/code&gt; - the pressure of the pointer tip, in range from 0 to 1. For devices that don&amp;rsquo;t support pressure must be either &lt;code&gt;0.5&lt;/code&gt; (pressed) or &lt;code&gt;0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tangentialPressure&lt;/code&gt; - the normalized tangential pressure.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tiltX&lt;/code&gt;, &lt;code&gt;tiltY&lt;/code&gt;, &lt;code&gt;twist&lt;/code&gt; - pen-specific properties that describe how the pen is positioned relative the surface.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These properties aren&amp;rsquo;t very well supported across devices, so they are rarely used. You can find the details in the &lt;a href=&#34;https://w3c.github.io/pointerevents/#pointerevent-interface&#34;&gt;specification&lt;/a&gt; if needed.&lt;/p&gt;
&lt;h3 id=&#34;multi-touch&#34;&gt;Multi-touch&lt;/h3&gt;
&lt;p&gt;One of the things that mouse events totally don&amp;rsquo;t support is multi-touch: a user can touch them in several places at once at their phone or tablet, perform special gestures.&lt;/p&gt;
&lt;p&gt;Pointer Events allow to handle multi-touch with the help of &lt;code&gt;pointerId&lt;/code&gt; and &lt;code&gt;isPrimary&lt;/code&gt; properties.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s what happens when a user touches a screen at one place, and then puts another finger somewhere else on it:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;At the first touch:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pointerdown&lt;/code&gt; with &lt;code&gt;isPrimary=true&lt;/code&gt; and some &lt;code&gt;pointerId&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;For the second finger and further touches:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pointerdown&lt;/code&gt; with &lt;code&gt;isPrimary=false&lt;/code&gt; and a different &lt;code&gt;pointerId&lt;/code&gt; for every finger.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Please note: there &lt;code&gt;pointerId&lt;/code&gt; is assigned not to the whole device, but for each touching finger. If we use 5 fingers to simultaneously touch the screen, we have 5 &lt;code&gt;pointerdown&lt;/code&gt; events with respective coordinates and different &lt;code&gt;pointerId&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The events associated with the first finger always have &lt;code&gt;isPrimary=true&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can track multiple touching fingers using their &lt;code&gt;pointerId&lt;/code&gt;. When the user moves move and then detouches a finger, we get &lt;code&gt;pointermove&lt;/code&gt; and &lt;code&gt;pointerup&lt;/code&gt; events with the same &lt;code&gt;pointerId&lt;/code&gt; as we had in &lt;code&gt;pointerdown&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Here&amp;#39;s the demo that logs `pointerdown` and `pointerup` events:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[iframe src=&amp;#34;multitouch&amp;#34; edit height=200]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Please note: you must be using a touchscreen device, such as a phone or a tablet to actually see the difference. For single-touch devices, such as a mouse, there&amp;#39;ll be always same `pointerId` with `isPrimary=true`, for all pointer events.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;event-pointercancel&#34;&gt;Event: pointercancel&lt;/h3&gt;
&lt;p&gt;We&amp;rsquo;ve mentioned the importance of &lt;code&gt;touch-action: none&lt;/code&gt; before. Now let&amp;rsquo;s explain why, as skipping this may cause our interfaces to malfunction.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;pointercancel&lt;/code&gt; event fires when there&amp;rsquo;s an ongoing pointer interaction, and then something happens that causes it to be aborted, so that no more pointer events are generated.&lt;/p&gt;
&lt;p&gt;Such causes are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The pointer device hardware was disabled.&lt;/li&gt;
&lt;li&gt;The device orientation changed (tablet rotated).&lt;/li&gt;
&lt;li&gt;The browser decided to handle the interaction on its own, considering it a mouse gesture or zoom-and-pan action or something else.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We&amp;rsquo;ll demonstrate &lt;code&gt;pointercancel&lt;/code&gt; on a practical example to see how it affects us.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say we&amp;rsquo;re impelementing drag&amp;rsquo;n&amp;rsquo;drop for a ball, just as in the beginning of the article &lt;a href=&#34;info:mouse-drag-and-drop&#34;&gt;info:mouse-drag-and-drop&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here are the flow of user actions and corresponding events:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The user presses the mouse button on an image, to start dragging
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pointerdown&lt;/code&gt; event fires&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Then they start dragging the image
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pointermove&lt;/code&gt; fires, maybe several times&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Surprise! The browser has native drag&amp;rsquo;n&amp;rsquo;drop support for images, that kicks in and takes over the drag&amp;rsquo;n&amp;rsquo;drop process, thus generating &lt;code&gt;pointercancel&lt;/code&gt; event.
&lt;ul&gt;
&lt;li&gt;The browser now handles drag&amp;rsquo;n&amp;rsquo;drop of the image on its own. The user may even drag the ball image out of the browser, into their Mail program or a File Manager.&lt;/li&gt;
&lt;li&gt;No more &lt;code&gt;pointermove&lt;/code&gt; events for us.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So the issue is that the browser &amp;ldquo;hijacks&amp;rdquo; the interaction: &lt;code&gt;pointercancel&lt;/code&gt; fires and no more &lt;code&gt;pointermove&lt;/code&gt; events are generated.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Here&amp;#39;s the demo with pointer events (only `up/down`, `move` and `cancel`) logged in the textarea: 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[iframe src=&amp;#34;ball&amp;#34; height=240 edit]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&amp;rsquo;d like to implement our own drag&amp;rsquo;n&amp;rsquo;drop, so let&amp;rsquo;s tell the browser not to take it over.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Prevent default browser actions to avoid &lt;code&gt;pointercancel&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We need to do two things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Prevent native drag&amp;rsquo;n&amp;rsquo;drop from happening:
&lt;ul&gt;
&lt;li&gt;Can do it by setting &lt;code&gt;ball.ondragstart = () =&amp;gt; false&lt;/code&gt;, just as described in the article &lt;a href=&#34;info:mouse-drag-and-drop&#34;&gt;info:mouse-drag-and-drop&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;That works well for mouse events.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;For touch devices, there are also touch-related browser actions. We&amp;rsquo;ll have problems with them too.
&lt;ul&gt;
&lt;li&gt;We can prevent them by setting &lt;code&gt;#ball { touch-action: none }&lt;/code&gt; in CSS.&lt;/li&gt;
&lt;li&gt;Then our code will start working on touch devices.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After we do that, the events will work as intended, the browser won&amp;rsquo;t hijack the process and emit no &lt;code&gt;pointercancel&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;This demo adds these lines:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[iframe src=&amp;#34;ball-2&amp;#34; height=240 edit]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;As you can see, there&amp;#39;s no `pointercancel` any more.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we can add the code to actually move the ball, and our drag&amp;rsquo;n&amp;rsquo;drop will work for mouse devices and touch devices.&lt;/p&gt;
&lt;h3 id=&#34;pointer-capturing&#34;&gt;Pointer capturing&lt;/h3&gt;
&lt;p&gt;Pointer capturing is a special feature of pointer events.&lt;/p&gt;
&lt;p&gt;The idea is that we can &amp;ldquo;bind&amp;rdquo; all events with a particular &lt;code&gt;pointerId&lt;/code&gt; to a given element. Then all subsequent events with the same &lt;code&gt;pointerId&lt;/code&gt; will be retargeted to the same element. That is: the browser sets that element as the target and trigger associated handlers, no matter where it actually happened.&lt;/p&gt;
&lt;p&gt;The related methods are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;elem.setPointerCapture(pointerId)&lt;/code&gt; - binds the given &lt;code&gt;pointerId&lt;/code&gt; to &lt;code&gt;elem&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;elem.releasePointerCapture(pointerId)&lt;/code&gt; - unbinds the given &lt;code&gt;pointerId&lt;/code&gt; from &lt;code&gt;elem&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Such binding doesn&amp;rsquo;t hold long. It&amp;rsquo;s automatically removed after &lt;code&gt;pointerup&lt;/code&gt; or &lt;code&gt;pointercancel&lt;/code&gt; events, or when the target &lt;code&gt;elem&lt;/code&gt; is removed from the document.&lt;/p&gt;
&lt;p&gt;Now when do we need this?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pointer capturing is used to simplify drag&amp;rsquo;n&amp;rsquo;drop kind of interactions.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s recall the problem we met while making a custom slider in the article &lt;a href=&#34;info:mouse-drag-and-drop&#34;&gt;info:mouse-drag-and-drop&lt;/a&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;First, the user presses &lt;code&gt;pointerdown&lt;/code&gt; on the slider thumb to start dragging it.&lt;/li&gt;
&lt;li&gt;&amp;hellip;But then, as they move the pointer, it may leave the slider: go below or over it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;But we continue tracking track &lt;code&gt;pointermove&lt;/code&gt; events and move the thumb until &lt;code&gt;pointerup&lt;/code&gt;, even though the pointer is not on the slider any more.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;info:mouse-drag-and-drop&#34;&gt;Previously&lt;/a&gt;, to handle &lt;code&gt;pointermove&lt;/code&gt; events that happen outside of the slider, we listened for &lt;code&gt;pointermove&lt;/code&gt; events on the whole &lt;code&gt;document&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Pointer capturing provides an alternative solution: we can call &lt;code&gt;thumb.setPointerCapture(event.pointerId)&lt;/code&gt; in &lt;code&gt;pointerdown&lt;/code&gt; handler, and then all future pointer events until &lt;code&gt;pointerup&lt;/code&gt; will be retargeted to &lt;code&gt;thumb&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That is: events handlers on &lt;code&gt;thumb&lt;/code&gt; will be called, and &lt;code&gt;event.target&lt;/code&gt; will always be &lt;code&gt;thumb&lt;/code&gt;, even if the user moves their pointer around the whole document. So we can listen at &lt;code&gt;thumb&lt;/code&gt; for &lt;code&gt;pointermove&lt;/code&gt;, no matter where it happens.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the essential code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;thumb.onpointerdown &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(event) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// retarget all pointer events (until pointerup) to me
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  thumb.setPointerCapture(event.pointerId);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;thumb.onpointermove &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(event) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// move the slider: listen at thumb, as all events are retargeted to it
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; newLeft &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; event.clientX &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; slider.getBoundingClientRect().left;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  thumb.style.left &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; newLeft &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;px&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// note: no need to call thumb.releasePointerCapture, 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// it happens on pointerup automatically
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The full demo:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[iframe src=&amp;#34;slider&amp;#34; height=100 edit]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;As a summary: the code becomes cleaner as we don&amp;rsquo;t need to add/remove handlers on the whole &lt;code&gt;document&lt;/code&gt; any more. That&amp;rsquo;s what pointer capturing does.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There are two associated pointer events:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gotpointercapture&lt;/code&gt; fires when an element uses &lt;code&gt;setPointerCapture&lt;/code&gt; to enable capturing.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lostpointercapture&lt;/code&gt; fires when the capture is released: either explicitly with &lt;code&gt;releasePointerCapture&lt;/code&gt; call, or automatically on &lt;code&gt;pointerup&lt;/code&gt;/&lt;code&gt;pointercancel&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;summary-19&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;Pointer events allow to handle mouse, touch and pen events simultaneously.&lt;/p&gt;
&lt;p&gt;Pointer events extend mouse events. We can replace &lt;code&gt;mouse&lt;/code&gt; with &lt;code&gt;pointer&lt;/code&gt; in event names and expect our code to continue working for mouse, with better support for other device types.&lt;/p&gt;
&lt;p&gt;Remember to set &lt;code&gt;touch-events: none&lt;/code&gt; in CSS for elements that we engage, otherwise the browser hijacks many types of touch interactions and pointer events won&amp;rsquo;t be generated.&lt;/p&gt;
&lt;p&gt;Additional abilities of Pointer events are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Multi-touch support using &lt;code&gt;pointerId&lt;/code&gt; and &lt;code&gt;isPrimary&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Device-specific properties, such as &lt;code&gt;pressure&lt;/code&gt;, &lt;code&gt;width/height&lt;/code&gt; and others.&lt;/li&gt;
&lt;li&gt;Pointer capturing: we can retarget all pointer events to a specific element until &lt;code&gt;pointerup&lt;/code&gt;/&lt;code&gt;pointercancel&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As of now, pointer events are supported in all major browsers, so we can safely switch to them, if IE10- and Safari 12- are not needed. And even with those browsers, there are polyfills that enable the support of pointer events.&lt;/p&gt;
&lt;h2 id=&#34;keyboard-keydown-and-keyup&#34;&gt;Keyboard: keydown and keyup&lt;/h2&gt;
&lt;p&gt;Before we get to keyboard, please note that on modern devices there are other ways to &amp;ldquo;input something&amp;rdquo;. For instance, people use speech recognition (especially on mobile devices) or copy/paste with the mouse.&lt;/p&gt;
&lt;p&gt;So if we want to track any input into an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; field, then keyboard events are not enough. There&amp;rsquo;s another event named &lt;code&gt;input&lt;/code&gt; to track changes of an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; field, by any means. And it may be a better choice for such task. We&amp;rsquo;ll cover it later in the chapter &lt;a href=&#34;info:events-change-input&#34;&gt;info:events-change-input&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Keyboard events should be used when we want to handle keyboard actions (virtual keyboard also counts). For instance, to react on arrow keys &lt;code&gt;key:Up&lt;/code&gt; and &lt;code&gt;key:Down&lt;/code&gt; or hotkeys (including combinations of keys).&lt;/p&gt;
&lt;h3 id=&#34;teststand-keyboard-test-stand&#34;&gt;Teststand [#keyboard-test-stand]&lt;/h3&gt;
&lt;p&gt;To better understand keyboard events, you can use the &lt;a href=&#34;sandbox:keyboard-dump&#34;&gt;teststand&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;To better understand keyboard events, you can use the teststand below.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Try different key combinations in the text field.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[codetabs src=&amp;#34;keyboard-dump&amp;#34; height=480]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;keydown-and-keyup&#34;&gt;Keydown and keyup&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;keydown&lt;/code&gt; events happens when a key is pressed down, and then &lt;code&gt;keyup&lt;/code&gt; &amp;ndash; when it&amp;rsquo;s released.&lt;/p&gt;
&lt;h4 id=&#34;eventcode-and-eventkey&#34;&gt;event.code and event.key&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;key&lt;/code&gt; property of the event object allows to get the character, while the &lt;code&gt;code&lt;/code&gt; property of the event object allows to get the &amp;ldquo;physical key code&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;For instance, the same key &lt;code&gt;key:Z&lt;/code&gt; can be pressed with or without &lt;code&gt;key:Shift&lt;/code&gt;. That gives us two different characters: lowercase &lt;code&gt;z&lt;/code&gt; and uppercase &lt;code&gt;Z&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;event.key&lt;/code&gt; is exactly the character, and it will be different. But &lt;code&gt;event.code&lt;/code&gt; is the same:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;&lt;code&gt;event.key&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;event.code&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;key:Z&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;z&lt;/code&gt; (lowercase)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;KeyZ&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;key:Shift+Z&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Z&lt;/code&gt; (uppercase)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;KeyZ&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;If a user works with different languages, then switching to another language would make a totally different character instead of &lt;code&gt;&amp;quot;Z&amp;quot;&lt;/code&gt;. That will become the value of &lt;code&gt;event.key&lt;/code&gt;, while &lt;code&gt;event.code&lt;/code&gt; is always the same: &lt;code&gt;&amp;quot;KeyZ&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Every key has the code that depends on its location on the keyboard. Key codes described in the &lt;a href=&#34;https://www.w3.org/TR/uievents-code/&#34;&gt;UI Events code specification&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Letter keys have codes &lt;code&gt;&amp;quot;Key&amp;lt;letter&amp;gt;&amp;quot;&lt;/code&gt;: &lt;code&gt;&amp;quot;KeyA&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;KeyB&amp;quot;&lt;/code&gt; etc.&lt;/li&gt;
&lt;li&gt;Digit keys have codes: &lt;code&gt;&amp;quot;Digit&amp;lt;number&amp;gt;&amp;quot;&lt;/code&gt;: &lt;code&gt;&amp;quot;Digit0&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;Digit1&amp;quot;&lt;/code&gt; etc.&lt;/li&gt;
&lt;li&gt;Special keys are coded by their names: &lt;code&gt;&amp;quot;Enter&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;Backspace&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;Tab&amp;quot;&lt;/code&gt; etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are several widespread keyboard layouts, and the specification gives key codes for each of them.&lt;/p&gt;
&lt;p&gt;Read the &lt;a href=&#34;https://www.w3.org/TR/uievents-code/#key-alphanumeric-section&#34;&gt;alphanumeric section of the spec&lt;/a&gt; for more codes, or just press a key in the &lt;a href=&#34;#keyboard-test-stand&#34;&gt;teststand&lt;/a&gt; above.&lt;/p&gt;
&lt;p&gt;Seems obvious, but people still make mistakes.&lt;/p&gt;
&lt;p&gt;Please evade mistypes: it&amp;rsquo;s &lt;code&gt;KeyZ&lt;/code&gt;, not &lt;code&gt;keyZ&lt;/code&gt;. The check like &lt;code&gt;event.code==&amp;quot;keyZ&amp;quot;&lt;/code&gt; won&amp;rsquo;t work: the first letter of &lt;code&gt;&amp;quot;Key&amp;quot;&lt;/code&gt; must be uppercase.&lt;/p&gt;
&lt;p&gt;What if a key does not give any character? For instance, &lt;code&gt;key:Shift&lt;/code&gt; or &lt;code&gt;key:F1&lt;/code&gt; or others. For those keys, &lt;code&gt;event.key&lt;/code&gt; is approximately the same as &lt;code&gt;event.code&lt;/code&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;&lt;code&gt;event.key&lt;/code&gt;&lt;/th&gt;
&lt;th&gt;&lt;code&gt;event.code&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;key:F1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;F1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;F1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;key:Backspace&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Backspace&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Backspace&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;key:Shift&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Shift&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ShiftRight&lt;/code&gt; or &lt;code&gt;ShiftLeft&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Please note that &lt;code&gt;event.code&lt;/code&gt; specifies exactly which key is pressed. For instance, most keyboards have two &lt;code&gt;key:Shift&lt;/code&gt; keys: on the left and on the right side. The &lt;code&gt;event.code&lt;/code&gt; tells us exactly which one was pressed, and &lt;code&gt;event.key&lt;/code&gt; is responsible for the &amp;ldquo;meaning&amp;rdquo; of the key: what it is (a &amp;ldquo;Shift&amp;rdquo;).&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say, we want to handle a hotkey: &lt;code&gt;key:Ctrl+Z&lt;/code&gt; (or &lt;code&gt;key:Cmd+Z&lt;/code&gt; for Mac). Most text editors hook the &amp;ldquo;Undo&amp;rdquo; action on it. We can set a listener on &lt;code&gt;keydown&lt;/code&gt; and check which key is pressed.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s a dilemma here: in such a listener, should we check the value of &lt;code&gt;event.key&lt;/code&gt; or &lt;code&gt;event.code&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;On one hand, the value of &lt;code&gt;event.key&lt;/code&gt; is a character, it changes depending on the language. If the visitor has several languages in OS and switches between them, the same key gives different characters. So it makes sense to check &lt;code&gt;event.code&lt;/code&gt;, it&amp;rsquo;s always the same.&lt;/p&gt;
&lt;p&gt;Like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.addEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;keydown&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(event) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (event.code &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;KeyZ&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; (event.ctrlKey &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; event.metaKey)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Undo!&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;On the other hand, there&amp;rsquo;s a problem with &lt;code&gt;event.code&lt;/code&gt;. For different keyboard layouts, the same key may have different characters.&lt;/p&gt;
&lt;p&gt;For example, here are US layout (&amp;ldquo;QWERTY&amp;rdquo;) and German layout (&amp;ldquo;QWERTZ&amp;rdquo;) under it (from Wikipedia):&lt;/p&gt;
&lt;p&gt;For the same key, US layout has &amp;ldquo;Z&amp;rdquo;, while German layout has &amp;ldquo;Y&amp;rdquo; (letters are swapped).&lt;/p&gt;
&lt;p&gt;Literally, &lt;code&gt;event.code&lt;/code&gt; will equal &lt;code&gt;KeyZ&lt;/code&gt; for people with German layout when they press &lt;code&gt;key:Y&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If we check &lt;code&gt;event.code == &#39;KeyZ&#39;&lt;/code&gt; in our code, then for people with German layout such test will pass when they press &lt;code&gt;key:Y&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That sounds really odd, but so it is. The &lt;a href=&#34;https://www.w3.org/TR/uievents-code/#table-key-code-alphanumeric-writing-system&#34;&gt;specification&lt;/a&gt; explicitly mentions such behavior.&lt;/p&gt;
&lt;p&gt;So, &lt;code&gt;event.code&lt;/code&gt; may match a wrong character for unexpected layout. Same letters in different layouts may map to different physical keys, leading to different codes. Luckily, that happens only with several codes, e.g. &lt;code&gt;keyA&lt;/code&gt;, &lt;code&gt;keyQ&lt;/code&gt;, &lt;code&gt;keyZ&lt;/code&gt; (as we&amp;rsquo;ve seen), and doesn&amp;rsquo;t happen with special keys such as &lt;code&gt;Shift&lt;/code&gt;. You can find the list in the &lt;a href=&#34;https://www.w3.org/TR/uievents-code/#table-key-code-alphanumeric-writing-system&#34;&gt;specification&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To reliably track layout-dependent characters, &lt;code&gt;event.key&lt;/code&gt; may be a better way.&lt;/p&gt;
&lt;p&gt;On the other hand, &lt;code&gt;event.code&lt;/code&gt; has the benefit of staying always the same, bound to the physical key location, even if the visitor changes languages. So hotkeys that rely on it work well even in case of a language switch.&lt;/p&gt;
&lt;p&gt;Do we want to handle layout-dependant keys? Then &lt;code&gt;event.key&lt;/code&gt; is the way to go.&lt;/p&gt;
&lt;p&gt;Or we want a hotkey to work even after a language switch? Then &lt;code&gt;event.code&lt;/code&gt; may be better.&lt;/p&gt;
&lt;h3 id=&#34;auto-repeat&#34;&gt;Auto-repeat&lt;/h3&gt;
&lt;p&gt;If a key is being pressed for a long enough time, it starts to &amp;ldquo;auto-repeat&amp;rdquo;: the &lt;code&gt;keydown&lt;/code&gt; triggers again and again, and then when it&amp;rsquo;s released we finally get &lt;code&gt;keyup&lt;/code&gt;. So it&amp;rsquo;s kind of normal to have many &lt;code&gt;keydown&lt;/code&gt; and a single &lt;code&gt;keyup&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For events triggered by auto-repeat, the event object has &lt;code&gt;event.repeat&lt;/code&gt; property set to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;default-actions&#34;&gt;Default actions&lt;/h3&gt;
&lt;p&gt;Default actions vary, as there are many possible things that may be initiated by the keyboard.&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A character appears on the screen (the most obvious outcome).&lt;/li&gt;
&lt;li&gt;A character is deleted (&lt;code&gt;key:Delete&lt;/code&gt; key).&lt;/li&gt;
&lt;li&gt;The page is scrolled (&lt;code&gt;key:PageDown&lt;/code&gt; key).&lt;/li&gt;
&lt;li&gt;The browser opens the &amp;ldquo;Save Page&amp;rdquo; dialog (&lt;code&gt;key:Ctrl+S&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&amp;hellip;and so on.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Preventing the default action on &lt;code&gt;keydown&lt;/code&gt; can cancel most of them, with the exception of OS-based special keys. For instance, on Windows &lt;code&gt;key:Alt+F4&lt;/code&gt; closes the current browser window. And there&amp;rsquo;s no way to stop it by preventing the default action in JavaScript.&lt;/p&gt;
&lt;p&gt;For instance, the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; below expects a phone number, so it does not accept keys except digits, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;()&lt;/code&gt; or &lt;code&gt;-&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; checkPhoneKey(key) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; (key &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; key &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;9&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; key &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;+&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; key &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;(&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; key &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; key &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onkeydown&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;return checkPhoneKey(event.key)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;placeholder&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Phone, please&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;tel&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Please note that special keys, such as &lt;code&gt;key:Backspace&lt;/code&gt;, &lt;code&gt;key:Left&lt;/code&gt;, &lt;code&gt;key:Right&lt;/code&gt;, &lt;code&gt;key:Ctrl+V&lt;/code&gt;, do not work in the input. That&amp;rsquo;s a side-effect of the strict filter &lt;code&gt;checkPhoneKey&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s relax it a little bit:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; checkPhoneKey(key) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; (key &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; key &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;9&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; key &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;+&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; key &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;(&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; key &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;)&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; key &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    key &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;ArrowLeft&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; key &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;ArrowRight&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; key &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Delete&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; key &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Backspace&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onkeydown&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;return checkPhoneKey(event.key)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;placeholder&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Phone, please&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;tel&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now arrows and deletion works well.&lt;/p&gt;
&lt;p&gt;&amp;hellip;But we still can enter anything by using a mouse and right-click + Paste. So the filter is not 100% reliable. We can just let it be like that, because most of time it works. Or an alternative approach would be to track the &lt;code&gt;input&lt;/code&gt; event &amp;ndash; it triggers after any modification. There we can check the new value and highlight/modify it when it&amp;rsquo;s invalid.&lt;/p&gt;
&lt;h3 id=&#34;legacy&#34;&gt;Legacy&lt;/h3&gt;
&lt;p&gt;In the past, there was a &lt;code&gt;keypress&lt;/code&gt; event, and also &lt;code&gt;keyCode&lt;/code&gt;, &lt;code&gt;charCode&lt;/code&gt;, &lt;code&gt;which&lt;/code&gt; properties of the event object.&lt;/p&gt;
&lt;p&gt;There were so many browser incompatibilities while working with them, that developers of the specification had no way, other than deprecating all of them and creating new, modern events (described above in this chapter). The old code still works, as browsers keep supporting them, but there&amp;rsquo;s totally no need to use those any more.&lt;/p&gt;
&lt;h3 id=&#34;summary-20&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;Pressing a key always generates a keyboard event, be it symbol keys or special keys like &lt;code&gt;key:Shift&lt;/code&gt; or &lt;code&gt;key:Ctrl&lt;/code&gt; and so on. The only exception is &lt;code&gt;key:Fn&lt;/code&gt; key that sometimes presents on a laptop keyboard. There&amp;rsquo;s no keyboard event for it, because it&amp;rsquo;s often implemented on lower level than OS.&lt;/p&gt;
&lt;p&gt;Keyboard events:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;keydown&lt;/code&gt; &amp;ndash; on pressing the key (auto-repeats if the key is pressed for long),&lt;/li&gt;
&lt;li&gt;&lt;code&gt;keyup&lt;/code&gt; &amp;ndash; on releasing the key.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Main keyboard event properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;code&lt;/code&gt; &amp;ndash; the &amp;ldquo;key code&amp;rdquo; (&lt;code&gt;&amp;quot;KeyA&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;ArrowLeft&amp;quot;&lt;/code&gt; and so on), specific to the physical location of the key on keyboard.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;key&lt;/code&gt; &amp;ndash; the character (&lt;code&gt;&amp;quot;A&amp;quot;&lt;/code&gt;, &lt;code&gt;&amp;quot;a&amp;quot;&lt;/code&gt; and so on), for non-character keys, such as &lt;code&gt;key:Esc&lt;/code&gt;, usually has the same value  as &lt;code&gt;code&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the past, keyboard events were sometimes used to track user input in form fields. That&amp;rsquo;s not reliable, because the input can come from various sources. We have &lt;code&gt;input&lt;/code&gt; and &lt;code&gt;change&lt;/code&gt; events to handle any input (covered later in the chapter &lt;a href=&#34;info:events-change-input&#34;&gt;info:events-change-input&lt;/a&gt;). They trigger after any kind of input, including copy-pasting or speech recognition.&lt;/p&gt;
&lt;p&gt;We should use keyboard events when we really want keyboard. For example, to react on hotkeys or special keys.&lt;/p&gt;
&lt;h2 id=&#34;scrolling&#34;&gt;Scrolling&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;scroll&lt;/code&gt; event allows to react on a page or element scrolling. There are quite a few good things we can do here.&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Show/hide additional controls or information depending on where in the document the user is.&lt;/li&gt;
&lt;li&gt;Load more data when the user scrolls down till the end of the page.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&amp;rsquo;s a small function to show the current scroll:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;window&lt;/span&gt;.addEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;scroll&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;showScroll&amp;#39;&lt;/span&gt;).innerHTML &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;window&lt;/span&gt;.pageYOffset &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;px&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;In action:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Current scroll = &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;showScroll&amp;#34;&lt;/span&gt;&amp;gt;scroll the window&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;b&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;scroll&lt;/code&gt; event works both on the &lt;code&gt;window&lt;/code&gt; and on scrollable elements.&lt;/p&gt;
&lt;h3 id=&#34;prevent-scrolling&#34;&gt;Prevent scrolling&lt;/h3&gt;
&lt;p&gt;How do we make something unscrollable?&lt;/p&gt;
&lt;p&gt;We can&amp;rsquo;t prevent scrolling by using &lt;code&gt;event.preventDefault()&lt;/code&gt; in &lt;code&gt;onscroll&lt;/code&gt; listener, because it triggers &lt;em&gt;after&lt;/em&gt; the scroll has already happened.&lt;/p&gt;
&lt;p&gt;But we can prevent scrolling by &lt;code&gt;event.preventDefault()&lt;/code&gt; on an event that causes the scroll, for instance &lt;code&gt;keydown&lt;/code&gt; event for &lt;code&gt;key:pageUp&lt;/code&gt; and &lt;code&gt;key:pageDown&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If we add an event handler to these events and &lt;code&gt;event.preventDefault()&lt;/code&gt; in it, then the scroll won&amp;rsquo;t start.&lt;/p&gt;
&lt;p&gt;There are many ways to initiate a scroll, so it&amp;rsquo;s more reliable to use CSS, &lt;code&gt;overflow&lt;/code&gt; property.&lt;/p&gt;
&lt;p&gt;Here are few tasks that you can solve or look through to see the applications on &lt;code&gt;onscroll&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;form-properties-and-methods&#34;&gt;Form properties and methods&lt;/h2&gt;
&lt;p&gt;Forms and control elements, such as &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; have a lot of special properties and events.&lt;/p&gt;
&lt;p&gt;Working with forms will be much more convenient when we learn them.&lt;/p&gt;
&lt;h3 id=&#34;navigation-form-and-elements&#34;&gt;Navigation: form and elements&lt;/h3&gt;
&lt;p&gt;Document forms are members of the special collection &lt;code&gt;document.forms&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s a so-called &amp;ldquo;named collection&amp;rdquo;: it&amp;rsquo;s both named and ordered. We can use both the name or the number in the document to get the form.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.forms.my &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; the form &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;with&lt;/span&gt; name&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;my&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.forms[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;] &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; the first form &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; the &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When we have a form, then any element is available in the named collection &lt;code&gt;form.elements&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;form&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;my&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;one&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;two&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;form&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// get the form
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; form &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.forms.my; &lt;span style=&#34;color:#6272a4&#34;&gt;// &amp;lt;form name=&amp;#34;my&amp;#34;&amp;gt; element
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// get the element
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; elem &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; form.elements.one; &lt;span style=&#34;color:#6272a4&#34;&gt;// &amp;lt;input name=&amp;#34;one&amp;#34;&amp;gt; element
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(elem.value); &lt;span style=&#34;color:#6272a4&#34;&gt;// 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There may be multiple elements with the same name, that&amp;rsquo;s often the case with radio buttons.&lt;/p&gt;
&lt;p&gt;In that case &lt;code&gt;form.elements[name]&lt;/code&gt; is a collection, for instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;form&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;radio&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;age&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;10&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;radio&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;age&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;20&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;form&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; form &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.forms[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; ageElems &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; form.elements.age;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(ageElems[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;]); &lt;span style=&#34;color:#6272a4&#34;&gt;// [object HTMLInputElement]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;These navigation properties do not depend on the tag structure. All control elements, no matter how deep they are in the form, are available in &lt;code&gt;form.elements&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A form may have one or many &lt;code&gt;&amp;lt;fieldset&amp;gt;&lt;/code&gt; elements inside it. They also have &lt;code&gt;elements&lt;/code&gt; property that lists form controls inside them.&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;form&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;form&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;fieldset&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;userFields&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;legend&lt;/span&gt;&amp;gt;info&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;legend&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;login&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;fieldset&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;form&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(form.elements.login); &lt;span style=&#34;color:#6272a4&#34;&gt;// &amp;lt;input name=&amp;#34;login&amp;#34;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; fieldset &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; form.elements.userFields;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(fieldset); &lt;span style=&#34;color:#6272a4&#34;&gt;// HTMLFieldSetElement
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// we can get the input by name both from the form and from the fieldset
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    alert(fieldset.elements.login &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; form.elements.login); &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There&amp;rsquo;s a shorter notation: we can access the element as &lt;code&gt;form[index/name]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In other words, instead of &lt;code&gt;form.elements.login&lt;/code&gt; we can write &lt;code&gt;form.login&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That also works, but there&amp;rsquo;s a minor issue: if we access an element, and then change its &lt;code&gt;name&lt;/code&gt;, then it is still available under the old name (as well as under the new one).&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s easy to see in an example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;form&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;form&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;login&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;form&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(form.elements.login &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; form.login); &lt;span style=&#34;color:#6272a4&#34;&gt;// true, the same &amp;lt;input&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  form.login.name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// change the name of the input
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// form.elements updated the name:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  alert(form.elements.login); &lt;span style=&#34;color:#6272a4&#34;&gt;// undefined
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  alert(form.elements.username); &lt;span style=&#34;color:#6272a4&#34;&gt;// input
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// form allows both names: the new one and the old one
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  alert(form.username &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; form.login); &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s usually not a problem, because we rarely change names of form elements.&lt;/p&gt;
&lt;h3 id=&#34;backreference-elementform&#34;&gt;Backreference: element.form&lt;/h3&gt;
&lt;p&gt;For any element, the form is available as &lt;code&gt;element.form&lt;/code&gt;. So a form references all elements, and elements reference the form.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the picture:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;form-navigation.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;form&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;form&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;login&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;form&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// form -&amp;gt; element
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; login &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; form.login;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// element -&amp;gt; form
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  alert(login.form); &lt;span style=&#34;color:#6272a4&#34;&gt;// HTMLFormElement
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;form-elements&#34;&gt;Form elements&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s talk about form controls.&lt;/p&gt;
&lt;h4 id=&#34;input-and-textarea&#34;&gt;input and textarea&lt;/h4&gt;
&lt;p&gt;We can access their value as &lt;code&gt;input.value&lt;/code&gt; (string) or &lt;code&gt;input.checked&lt;/code&gt; (boolean) for checkboxes.&lt;/p&gt;
&lt;p&gt;Like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;input.value &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;New value&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;textarea.value &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;New text&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;input.checked &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// for a checkbox or radio button
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Please note that even though &lt;code&gt;&amp;lt;textarea&amp;gt;...&amp;lt;/textarea&amp;gt;&lt;/code&gt; holds its value as nested HTML, we should never use &lt;code&gt;textarea.innerHTML&lt;/code&gt; to access it.&lt;/p&gt;
&lt;p&gt;It stores only the HTML that was initially on the page, not the current value.&lt;/p&gt;
&lt;h4 id=&#34;select-and-option&#34;&gt;select and option&lt;/h4&gt;
&lt;p&gt;A &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; element has 3 important properties:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;select.options&lt;/code&gt; &amp;ndash; the collection of &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; subelements,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select.value&lt;/code&gt; &amp;ndash; the value of the currently selected &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select.selectedIndex&lt;/code&gt; &amp;ndash; the number of the currently selected &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;They provide three different ways of setting a value for a &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Find the corresponding &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; element and set &lt;code&gt;option.selected&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Set &lt;code&gt;select.value&lt;/code&gt; to the value.&lt;/li&gt;
&lt;li&gt;Set &lt;code&gt;select.selectedIndex&lt;/code&gt; to the number of the option.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first way is the most obvious, but &lt;code&gt;(2)&lt;/code&gt; and &lt;code&gt;(3)&lt;/code&gt; are usually more convenient.&lt;/p&gt;
&lt;p&gt;Here is an example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;select&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;option&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;apple&amp;#34;&lt;/span&gt;&amp;gt;Apple&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;option&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;option&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;pear&amp;#34;&lt;/span&gt;&amp;gt;Pear&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;option&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;option&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;banana&amp;#34;&lt;/span&gt;&amp;gt;Banana&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;option&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;select&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// all three lines do the same thing
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  select.options[&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;].selected &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  select.selectedIndex &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  select.value &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;banana&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Unlike most other controls, &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; allows to select multiple options at once if it has &lt;code&gt;multiple&lt;/code&gt; attribute. That&amp;rsquo;s feature is rarely used. In that case we need to use the first way: add/remove the &lt;code&gt;selected&lt;/code&gt; property from &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; subelements.&lt;/p&gt;
&lt;p&gt;We can get their collection as &lt;code&gt;select.options&lt;/code&gt;, for instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;select&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;multiple&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;option&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;blues&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;selected&lt;/span&gt;&amp;gt;Blues&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;option&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;option&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;rock&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;selected&lt;/span&gt;&amp;gt;Rock&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;option&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;option&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;classic&amp;#34;&lt;/span&gt;&amp;gt;Classic&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;option&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;select&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// get all selected values from multi-select
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; selected &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Array&lt;/span&gt;.from(select.options)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .filter(option =&amp;gt; option.selected)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    .map(option =&amp;gt; option.value);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(selected); &lt;span style=&#34;color:#6272a4&#34;&gt;// blues,rock  
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The full specification of the &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; element is available in the specification &lt;a href=&#34;https://html.spec.whatwg.org/multipage/forms.html#the-select-element&#34;&gt;https://html.spec.whatwg.org/multipage/forms.html#the-select-element&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;new-option&#34;&gt;new Option&lt;/h4&gt;
&lt;p&gt;This is rarely used on its own. But there&amp;rsquo;s still an interesting thing.&lt;/p&gt;
&lt;p&gt;In the &lt;a href=&#34;https://html.spec.whatwg.org/multipage/forms.html#the-option-element&#34;&gt;specification&lt;/a&gt; there&amp;rsquo;s a nice short syntax to create &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; elements:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;option &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Option(text, value, defaultSelected, selected);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;text&lt;/code&gt; &amp;ndash; the text inside the option,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;value&lt;/code&gt; &amp;ndash; the option value,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defaultSelected&lt;/code&gt; &amp;ndash; if &lt;code&gt;true&lt;/code&gt;, then &lt;code&gt;selected&lt;/code&gt; HTML-attribute is created,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;selected&lt;/code&gt; &amp;ndash; if &lt;code&gt;true&lt;/code&gt;, then the option is selected.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There may be a small confusion about &lt;code&gt;defaultSelected&lt;/code&gt; and &lt;code&gt;selected&lt;/code&gt;. That&amp;rsquo;s simple: &lt;code&gt;defaultSelected&lt;/code&gt; sets HTML-attribute, that we can get using &lt;code&gt;option.getAttribute(&#39;selected&#39;)&lt;/code&gt;. And &lt;code&gt;selected&lt;/code&gt; - whether the option is selected or not, that&amp;rsquo;s more important. Usually both values are either set to &lt;code&gt;true&lt;/code&gt; or not set (same as &lt;code&gt;false&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; option &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Option(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Text&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// creates &amp;lt;option value=&amp;#34;value&amp;#34;&amp;gt;Text&amp;lt;/option&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The same element selected:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; option &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Option(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Text&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Option elements have properties:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;option.selected&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Is the option selected.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;option.index&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;The number of the option among the others in its &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;option.text&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Text content of the option (seen by the visitor).&lt;/dd&gt;
&lt;/dl&gt;
&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Specification: &lt;a href=&#34;https://html.spec.whatwg.org/multipage/forms.html&#34;&gt;https://html.spec.whatwg.org/multipage/forms.html&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;summary-21&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;Form navigation:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;document.forms&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;A form is available as &lt;code&gt;document.forms[name/index]&lt;/code&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;form.elements&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Form elements are available as &lt;code&gt;form.elements[name/index]&lt;/code&gt;, or can use just &lt;code&gt;form[name/index]&lt;/code&gt;. The &lt;code&gt;elements&lt;/code&gt; property also works for &lt;code&gt;&amp;lt;fieldset&amp;gt;&lt;/code&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;element.form&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Elements reference their form in the &lt;code&gt;form&lt;/code&gt; property.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Value is available as &lt;code&gt;input.value&lt;/code&gt;, &lt;code&gt;textarea.value&lt;/code&gt;, &lt;code&gt;select.value&lt;/code&gt; etc, or &lt;code&gt;input.checked&lt;/code&gt; for checkboxes and radio buttons.&lt;/p&gt;
&lt;p&gt;For &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; we can also get the value by the index &lt;code&gt;select.selectedIndex&lt;/code&gt; or through the options collection &lt;code&gt;select.options&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;These are the basics to start working with forms. We&amp;rsquo;ll meet many examples further in the tutorial.&lt;/p&gt;
&lt;p&gt;In the next chapter we&amp;rsquo;ll cover &lt;code&gt;focus&lt;/code&gt; and &lt;code&gt;blur&lt;/code&gt; events that may occur on any element, but are mostly handled on forms.&lt;/p&gt;
&lt;h2 id=&#34;focusing-focusblur&#34;&gt;Focusing: focus/blur&lt;/h2&gt;
&lt;p&gt;An element receives a focus when the user either clicks on it or uses the &lt;code&gt;key:Tab&lt;/code&gt; key on the keyboard. There&amp;rsquo;s also an &lt;code&gt;autofocus&lt;/code&gt; HTML attribute that puts the focus into an element by default when a page loads and other means of getting a focus.&lt;/p&gt;
&lt;p&gt;Focusing on an element generally means: &amp;ldquo;prepare to accept the data here&amp;rdquo;, so that&amp;rsquo;s the moment when we can run the code to initialize the required functionality.&lt;/p&gt;
&lt;p&gt;The moment of losing the focus (&amp;ldquo;blur&amp;rdquo;) can be even more important. That&amp;rsquo;s when a user clicks somewhere else or presses &lt;code&gt;key:Tab&lt;/code&gt; to go to the next form field, or there are other means as well.&lt;/p&gt;
&lt;p&gt;Losing the focus generally means: &amp;ldquo;the data has been entered&amp;rdquo;, so we can run the code to check it or even to save it to the server and so on.&lt;/p&gt;
&lt;p&gt;There are important peculiarities when working with focus events. We&amp;rsquo;ll do the best to cover them further on.&lt;/p&gt;
&lt;h3 id=&#34;events-focusblur&#34;&gt;Events focus/blur&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;focus&lt;/code&gt; event is called on focusing, and &lt;code&gt;blur&lt;/code&gt; &amp;ndash; when the element loses the focus.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s use them for validation of an input field.&lt;/p&gt;
&lt;p&gt;In the example below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;blur&lt;/code&gt; handler checks if the field the email is entered, and if not &amp;ndash; shows an error.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;focus&lt;/code&gt; handler hides the error message (on &lt;code&gt;blur&lt;/code&gt; it will be checked again):&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;style&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .&lt;span style=&#34;color:#50fa7b&#34;&gt;invalid&lt;/span&gt; { &lt;span style=&#34;color:#ff79c6&#34;&gt;border-color&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;red&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  #error { &lt;span style=&#34;color:#ff79c6&#34;&gt;color&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;red&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;style&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Your email please: &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;input&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;error&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;input.onblur &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;!&lt;/span&gt;input.value.includes(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;@&amp;#39;&lt;/span&gt;)) { &lt;span style=&#34;color:#6272a4&#34;&gt;// not email
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    input.classList.add(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;invalid&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    error.innerHTML &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Please enter a correct email.&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;input.onfocus &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.classList.contains(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;invalid&amp;#39;&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// remove the &amp;#34;error&amp;#34; indication, because the user wants to re-enter something
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.classList.remove(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;invalid&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    error.innerHTML &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Modern HTML allows us to do many validations using input attributes: &lt;code&gt;required&lt;/code&gt;, &lt;code&gt;pattern&lt;/code&gt; and so on. And sometimes they are just what we need. JavaScript can be used when we want more flexibility. Also we could automatically send the changed value to the server if it&amp;rsquo;s correct.&lt;/p&gt;
&lt;h3 id=&#34;methods-focusblur&#34;&gt;Methods focus/blur&lt;/h3&gt;
&lt;p&gt;Methods &lt;code&gt;elem.focus()&lt;/code&gt; and &lt;code&gt;elem.blur()&lt;/code&gt; set/unset the focus on the element.&lt;/p&gt;
&lt;p&gt;For instance, let&amp;rsquo;s make the visitor unable to leave the input if the value is invalid:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;style&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .&lt;span style=&#34;color:#50fa7b&#34;&gt;error&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;background&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;red&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;style&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Your email please: &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;email&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;input&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;width:220px&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;placeholder&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;make email invalid and try to focus here&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  input.onblur &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.value.includes(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;@&amp;#39;&lt;/span&gt;)) { &lt;span style=&#34;color:#6272a4&#34;&gt;// not email
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#6272a4&#34;&gt;// show the error
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.classList.add(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;error&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#6272a4&#34;&gt;// ...and put the focus back
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;      input.focus();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.classList.remove(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;error&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It works in all browsers except Firefox (&lt;a href=&#34;https://bugzilla.mozilla.org/show_bug.cgi?id=53579&#34;&gt;bug&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;If we enter something into the input and then try to use &lt;code&gt;key:Tab&lt;/code&gt; or click away from the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;, then &lt;code&gt;onblur&lt;/code&gt; returns the focus back.&lt;/p&gt;
&lt;p&gt;Please note that we can&amp;rsquo;t &amp;ldquo;prevent losing focus&amp;rdquo; by calling &lt;code&gt;event.preventDefault()&lt;/code&gt; in &lt;code&gt;onblur&lt;/code&gt;, because &lt;code&gt;onblur&lt;/code&gt; works &lt;em&gt;after&lt;/em&gt; the element lost the focus.&lt;/p&gt;
&lt;p&gt;A focus loss can occur for many reasons.&lt;/p&gt;
&lt;p&gt;One of them is when the visitor clicks somewhere else. But also JavaScript itself may cause it, for instance:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An &lt;code&gt;alert&lt;/code&gt; moves focus to itself, so it causes the focus loss at the element (&lt;code&gt;blur&lt;/code&gt; event), and when the &lt;code&gt;alert&lt;/code&gt; is dismissed, the focus comes back (&lt;code&gt;focus&lt;/code&gt; event).&lt;/li&gt;
&lt;li&gt;If an element is removed from DOM, then it also causes the focus loss. If it is reinserted later, then the focus doesn&amp;rsquo;t return.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These features sometimes cause &lt;code&gt;focus/blur&lt;/code&gt; handlers to misbehave &amp;ndash; to trigger when they are not needed.&lt;/p&gt;
&lt;p&gt;The best recipe is to be careful when using these events. If we want to track user-initiated focus-loss, then we should avoid causing it ourselves.&lt;/p&gt;
&lt;h3 id=&#34;allow-focusing-on-any-element-tabindex&#34;&gt;Allow focusing on any element: tabindex&lt;/h3&gt;
&lt;p&gt;By default many elements do not support focusing.&lt;/p&gt;
&lt;p&gt;The list varies a bit between browsers, but one thing is always correct: &lt;code&gt;focus/blur&lt;/code&gt; support is guaranteed for elements that a visitor can interact with: &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; and so on.&lt;/p&gt;
&lt;p&gt;From the other hand, elements that exist to format something, such as &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; &amp;ndash; are unfocusable by default. The method &lt;code&gt;elem.focus()&lt;/code&gt; doesn&amp;rsquo;t work on them, and &lt;code&gt;focus/blur&lt;/code&gt; events are never triggered.&lt;/p&gt;
&lt;p&gt;This can be changed using HTML-attribute &lt;code&gt;tabindex&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Any element becomes focusable if it has &lt;code&gt;tabindex&lt;/code&gt;. The value of the attribute is the order number of the element when &lt;code&gt;key:Tab&lt;/code&gt; (or something like that) is used to switch between them.&lt;/p&gt;
&lt;p&gt;That is: if we have two elements, the first has &lt;code&gt;tabindex=&amp;quot;1&amp;quot;&lt;/code&gt;, and the second has &lt;code&gt;tabindex=&amp;quot;2&amp;quot;&lt;/code&gt;, then pressing &lt;code&gt;key:Tab&lt;/code&gt; while in the first element &amp;ndash; moves the focus into the second one.&lt;/p&gt;
&lt;p&gt;The switch order is: elements with &lt;code&gt;tabindex&lt;/code&gt; from &lt;code&gt;1&lt;/code&gt; and above go first (in the &lt;code&gt;tabindex&lt;/code&gt; order), and then elements without &lt;code&gt;tabindex&lt;/code&gt; (e.g. a regular &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Elements with matching &lt;code&gt;tabindex&lt;/code&gt; are switched in the document source order (the default order).&lt;/p&gt;
&lt;p&gt;There are two special values:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;tabindex=&amp;quot;0&amp;quot;&lt;/code&gt; puts an element among those without &lt;code&gt;tabindex&lt;/code&gt;. That is, when we switch elements, elements with &lt;code&gt;tabindex=0&lt;/code&gt; go after elements with &lt;code&gt;tabindex ≥ 1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Usually it&amp;rsquo;s used to make an element focusable, but keep the default switching order. To make an element a part of the form on par with &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;tabindex=&amp;quot;-1&amp;quot;&lt;/code&gt; allows only programmatic focusing on an element. The &lt;code&gt;key:Tab&lt;/code&gt; key ignores such elements, but method &lt;code&gt;elem.focus()&lt;/code&gt; works.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For instance, here&amp;rsquo;s a list. Click the first item and press &lt;code&gt;key:Tab&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Click the first item and press Tab. Keep track of the order. Please note that many subsequent Tabs can move the focus out of the iframe with the example.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;ul&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;tabindex&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&amp;gt;One&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;tabindex&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;&amp;gt;Zero&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;tabindex&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;&amp;gt;Two&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;tabindex&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;-1&amp;#34;&lt;/span&gt;&amp;gt;Minus one&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;ul&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;style&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt; { &lt;span style=&#34;color:#ff79c6&#34;&gt;cursor&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;pointer&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  :focus { &lt;span style=&#34;color:#ff79c6&#34;&gt;outline&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;dashed&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;green&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;style&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The order is like this: &lt;code&gt;1 - 2 - 0&lt;/code&gt;. Normally, &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; does not support focusing, but &lt;code&gt;tabindex&lt;/code&gt; full enables it, along with events and styling with &lt;code&gt;:focus&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can add &lt;code&gt;tabindex&lt;/code&gt; from JavaScript by using the &lt;code&gt;elem.tabIndex&lt;/code&gt; property. That has the same effect.&lt;/p&gt;
&lt;h3 id=&#34;delegation-focusinfocusout&#34;&gt;Delegation: focusin/focusout&lt;/h3&gt;
&lt;p&gt;Events &lt;code&gt;focus&lt;/code&gt; and &lt;code&gt;blur&lt;/code&gt; do not bubble.&lt;/p&gt;
&lt;p&gt;For instance, we can&amp;rsquo;t put &lt;code&gt;onfocus&lt;/code&gt; on the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; to highlight it, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!-- on focusing in the form -- add the class --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;form&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onfocus&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;this.className=&amp;#39;focused&amp;#39;&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;surname&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Surname&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;form&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;style&lt;/span&gt;&amp;gt; .&lt;span style=&#34;color:#50fa7b&#34;&gt;focused&lt;/span&gt; { &lt;span style=&#34;color:#ff79c6&#34;&gt;outline&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;solid&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;red&lt;/span&gt;; } &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;style&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The example above doesn&amp;rsquo;t work, because when user focuses on an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;, the &lt;code&gt;focus&lt;/code&gt; event triggers on that input only. It doesn&amp;rsquo;t bubble up. So &lt;code&gt;form.onfocus&lt;/code&gt; never triggers.&lt;/p&gt;
&lt;p&gt;There are two solutions.&lt;/p&gt;
&lt;p&gt;First, there&amp;rsquo;s a funny historical feature: &lt;code&gt;focus/blur&lt;/code&gt; do not bubble up, but propagate down on the capturing phase.&lt;/p&gt;
&lt;p&gt;This will work:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;form&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;form&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;surname&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Surname&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;form&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;style&lt;/span&gt;&amp;gt; .&lt;span style=&#34;color:#50fa7b&#34;&gt;focused&lt;/span&gt; { &lt;span style=&#34;color:#ff79c6&#34;&gt;outline&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;solid&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;red&lt;/span&gt;; } &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;style&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// put the handler on capturing phase (last argument true)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  form.addEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;focus&amp;#34;&lt;/span&gt;, () =&amp;gt; form.classList.add(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;focused&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  form.addEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;blur&amp;#34;&lt;/span&gt;, () =&amp;gt; form.classList.remove(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;focused&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Second, there are &lt;code&gt;focusin&lt;/code&gt; and &lt;code&gt;focusout&lt;/code&gt; events &amp;ndash; exactly the same as &lt;code&gt;focus/blur&lt;/code&gt;, but they bubble.&lt;/p&gt;
&lt;p&gt;Note that they must be assigned using &lt;code&gt;elem.addEventListener&lt;/code&gt;, not &lt;code&gt;on&amp;lt;event&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So here&amp;rsquo;s another working variant:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;form&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;form&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;surname&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Surname&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;form&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;style&lt;/span&gt;&amp;gt; .&lt;span style=&#34;color:#50fa7b&#34;&gt;focused&lt;/span&gt; { &lt;span style=&#34;color:#ff79c6&#34;&gt;outline&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;solid&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;red&lt;/span&gt;; } &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;style&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  form.addEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;focusin&amp;#34;&lt;/span&gt;, () =&amp;gt; form.classList.add(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;focused&amp;#39;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  form.addEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;focusout&amp;#34;&lt;/span&gt;, () =&amp;gt; form.classList.remove(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;focused&amp;#39;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;summary-22&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;Events &lt;code&gt;focus&lt;/code&gt; and &lt;code&gt;blur&lt;/code&gt; trigger on focusing/losing focus on the element.&lt;/p&gt;
&lt;p&gt;Their specials are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;They do not bubble. Can use capturing state instead or &lt;code&gt;focusin/focusout&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Most elements do not support focus by default. Use &lt;code&gt;tabindex&lt;/code&gt; to make anything focusable.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The current focused element is available as &lt;code&gt;document.activeElement&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;events-change-input-cut-copy-paste&#34;&gt;Events: change, input, cut, copy, paste&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s cover various events that accompany data updates.&lt;/p&gt;
&lt;h3 id=&#34;event-change&#34;&gt;Event: change&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;change&lt;/code&gt; event triggers when the element has finished changing.&lt;/p&gt;
&lt;p&gt;For text inputs that means that the event occurs when it loses focus.&lt;/p&gt;
&lt;p&gt;For instance, while we are typing in the text field below &amp;ndash; there&amp;rsquo;s no event. But when we move the focus somewhere else, for instance, click on a button &amp;ndash; there will be a &lt;code&gt;change&lt;/code&gt; event:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onchange&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert(this.value)&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;button&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Button&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For other elements: &lt;code&gt;select&lt;/code&gt;, &lt;code&gt;input type=checkbox/radio&lt;/code&gt; it triggers right after the selection changes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;select&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onchange&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert(this.value)&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;option&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&amp;gt;Select something&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;option&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;option&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&amp;gt;Option 1&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;option&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;option&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;&amp;gt;Option 2&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;option&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;option&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;&amp;gt;Option 3&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;option&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;select&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;event-input&#34;&gt;Event: input&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;input&lt;/code&gt; event triggers every time after a value is modified by the user.&lt;/p&gt;
&lt;p&gt;Unlike keyboard events, it triggers on any value change, even those that does not involve keyboard actions: pasting with a mouse or using speech recognition to dictate the text.&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;input&amp;#34;&lt;/span&gt;&amp;gt; oninput: &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;result&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  input.oninput &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    result.innerHTML &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; input.value;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If we want to handle every modification of an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; then this event is the best choice.&lt;/p&gt;
&lt;p&gt;On the other hand, &lt;code&gt;input&lt;/code&gt; event doesn&amp;rsquo;t trigger on keyboard input and other actions that do not involve value change, e.g. pressing arrow keys &lt;code&gt;key:⇦&lt;/code&gt; &lt;code&gt;key:⇨&lt;/code&gt; while in the input.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;input&lt;/code&gt; event occurs after the value is modified.&lt;/p&gt;
&lt;p&gt;So we can&amp;rsquo;t use &lt;code&gt;event.preventDefault()&lt;/code&gt; there &amp;ndash; it&amp;rsquo;s just too late, there would be no effect.&lt;/p&gt;
&lt;h3 id=&#34;events-cut-copy-paste&#34;&gt;Events: cut, copy, paste&lt;/h3&gt;
&lt;p&gt;These events occur on cutting/copying/pasting a value.&lt;/p&gt;
&lt;p&gt;They belong to &lt;a href=&#34;https://www.w3.org/TR/clipboard-apis/#clipboard-event-interfaces&#34;&gt;ClipboardEvent&lt;/a&gt; class and provide access to the data that is copied/pasted.&lt;/p&gt;
&lt;p&gt;We also can use &lt;code&gt;event.preventDefault()&lt;/code&gt; to abort the action, then nothing gets copied/pasted.&lt;/p&gt;
&lt;p&gt;For instance, the code below prevents all such events and shows what we are trying to cut/copy/paste:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;input&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  input.oncut &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; input.oncopy &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; input.onpaste &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(event) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(event.type &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39; - &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; event.clipboardData.getData(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Please note, that it&amp;rsquo;s possible to copy/paste not just text, but everything. For instance, we can copy a file in the OS file manager, and paste it.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s a list of methods &lt;a href=&#34;https://www.w3.org/TR/clipboard-apis/#dfn-datatransfer&#34;&gt;in the specification&lt;/a&gt; that can work with different data types including files, read/write to the clipboard.&lt;/p&gt;
&lt;p&gt;But please note that clipboard is a &amp;ldquo;global&amp;rdquo; OS-level thing. Most browsers allow read/write access to the clipboard only in the scope of certain user actions for the safety, e.g. in &lt;code&gt;onclick&lt;/code&gt; event handlers.&lt;/p&gt;
&lt;p&gt;Also it&amp;rsquo;s forbidden to generate &amp;ldquo;custom&amp;rdquo; clipboard events with &lt;code&gt;dispatchEvent&lt;/code&gt; in all browsers except Firefox.&lt;/p&gt;
&lt;h3 id=&#34;summary-23&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;Data change events:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Event&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Specials&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;change&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;A value was changed.&lt;/td&gt;
&lt;td&gt;For text inputs triggers on focus loss.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;input&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;For text inputs on every change.&lt;/td&gt;
&lt;td&gt;Triggers immediately unlike &lt;code&gt;change&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cut/copy/paste&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Cut/copy/paste actions.&lt;/td&gt;
&lt;td&gt;The action can be prevented. The &lt;code&gt;event.clipboardData&lt;/code&gt; property gives read/write access to the clipboard.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;forms-event-and-method-submit&#34;&gt;Forms: event and method submit&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;submit&lt;/code&gt; event triggers when the form is submitted, it is usually used to validate the form before sending it to the server or to abort the submission and process it in JavaScript.&lt;/p&gt;
&lt;p&gt;The method &lt;code&gt;form.submit()&lt;/code&gt; allows to initiate form sending from JavaScript. We can use it to dynamically create and send our own forms to server.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s see more details of them.&lt;/p&gt;
&lt;h3 id=&#34;event-submit&#34;&gt;Event: submit&lt;/h3&gt;
&lt;p&gt;There are two main ways to submit a form:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The first &amp;ndash; to click &lt;code&gt;&amp;lt;input type=&amp;quot;submit&amp;quot;&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;input type=&amp;quot;image&amp;quot;&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The second &amp;ndash; press &lt;code&gt;key:Enter&lt;/code&gt; on an input field.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Both actions lead to &lt;code&gt;submit&lt;/code&gt; event on the form. The handler can check the data, and if there are errors, show them and call &lt;code&gt;event.preventDefault()&lt;/code&gt;, then the form won&amp;rsquo;t be sent to the server.&lt;/p&gt;
&lt;p&gt;In the form below:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Go into the text field and press &lt;code&gt;key:Enter&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Click &lt;code&gt;&amp;lt;input type=&amp;quot;submit&amp;quot;&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Both actions show &lt;code&gt;alert&lt;/code&gt; and the form is not sent anywhere due to &lt;code&gt;return false&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;form&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onsubmit&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert(&amp;#39;submit!&amp;#39;);return false&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  First: Enter in the input field &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;br&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Second: Click &amp;#34;submit&amp;#34;: &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;submit&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Submit&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;form&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When a form is sent using &lt;code&gt;key:Enter&lt;/code&gt; on an input field, a &lt;code&gt;click&lt;/code&gt; event triggers on the &lt;code&gt;&amp;lt;input type=&amp;quot;submit&amp;quot;&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s rather funny, because there was no click at all.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the demo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;form&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onsubmit&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;return false&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;text&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;size&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;30&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Focus here and press enter&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;submit&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Submit&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onclick&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;alert(&amp;#39;click&amp;#39;)&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;form&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;method-submit&#34;&gt;Method: submit&lt;/h3&gt;
&lt;p&gt;To submit a form to the server manually, we can call &lt;code&gt;form.submit()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then the &lt;code&gt;submit&lt;/code&gt; event is not generated. It is assumed that if the programmer calls &lt;code&gt;form.submit()&lt;/code&gt;, then the script already did all related processing.&lt;/p&gt;
&lt;p&gt;Sometimes that&amp;rsquo;s used to manually create and send a form, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; form &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.createElement(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;form&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;form.action &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;https://google.com/search&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;form.method &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;form.innerHTML &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;lt;input name=&amp;#34;q&amp;#34; value=&amp;#34;test&amp;#34;&amp;gt;&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// the form must be in the document to submit it
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.append(form);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;form.submit();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;page-domcontentloaded-load-beforeunload-unload&#34;&gt;Page: DOMContentLoaded, load, beforeunload, unload&lt;/h2&gt;
&lt;p&gt;The lifecycle of an HTML page has three important events:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DOMContentLoaded&lt;/code&gt; &amp;ndash; the browser fully loaded HTML, and the DOM tree is built, but external resources like pictures &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; and stylesheets may be not yet loaded.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;load&lt;/code&gt; &amp;ndash; not only HTML is loaded, but also all the external resources: images, styles etc.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;beforeunload/unload&lt;/code&gt; &amp;ndash; the user is leaving the page.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each event may be useful:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DOMContentLoaded&lt;/code&gt; event &amp;ndash; DOM is ready, so the handler can lookup DOM nodes, initialize the interface.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;load&lt;/code&gt; event &amp;ndash; external resources are loaded, so styles are applied, image sizes are known etc.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;beforeunload&lt;/code&gt; event &amp;ndash; the user is leaving: we can check if the user saved the changes and ask them whether they really want to leave.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unload&lt;/code&gt; &amp;ndash; the user almost left, but we still can initiate some operations, such as sending out statistics.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;rsquo;s explore the details of these events.&lt;/p&gt;
&lt;h3 id=&#34;domcontentloaded&#34;&gt;DOMContentLoaded&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;DOMContentLoaded&lt;/code&gt; event happens on the &lt;code&gt;document&lt;/code&gt; object.&lt;/p&gt;
&lt;p&gt;We must use &lt;code&gt;addEventListener&lt;/code&gt; to catch it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.addEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;DOMContentLoaded&amp;#34;&lt;/span&gt;, ready);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// not &amp;#34;document.onDOMContentLoaded = ...&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; ready() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;DOM is ready&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// image is not yet loaded (unless was cached), so the size is 0x0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;`Image size: &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;img.offsetWidth&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;img.offsetHeight&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.addEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;DOMContentLoaded&amp;#34;&lt;/span&gt;, ready);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;img&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;img&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://en.js.cx/clipart/train.gif?speed=1&amp;amp;cache=0&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the example the &lt;code&gt;DOMContentLoaded&lt;/code&gt; handler runs when the document is loaded, so it can see all the elements, including &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; below.&lt;/p&gt;
&lt;p&gt;But it doesn&amp;rsquo;t wait for the image to load. So &lt;code&gt;alert&lt;/code&gt; shows zero sizes.&lt;/p&gt;
&lt;p&gt;At first sight, the &lt;code&gt;DOMContentLoaded&lt;/code&gt; event is very simple. The DOM tree is ready &amp;ndash; here&amp;rsquo;s the event. There are few peculiarities though.&lt;/p&gt;
&lt;h4 id=&#34;domcontentloaded-and-scripts&#34;&gt;DOMContentLoaded and scripts&lt;/h4&gt;
&lt;p&gt;When the browser processes an HTML-document and comes across a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag, it needs to execute before continuing building the DOM. That&amp;rsquo;s a precaution, as scripts may want to modify DOM, and even &lt;code&gt;document.write&lt;/code&gt; into it, so &lt;code&gt;DOMContentLoaded&lt;/code&gt; has to wait.&lt;/p&gt;
&lt;p&gt;So DOMContentLoaded definitely happens after such scripts:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.addEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;DOMContentLoaded&amp;#34;&lt;/span&gt;, () =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;DOM ready!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.3.0/lodash.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Library loaded, inline script executed&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the example above, we first see &amp;ldquo;Library loaded&amp;hellip;&amp;rdquo;, and then &amp;ldquo;DOM ready!&amp;rdquo; (all scripts are executed).&lt;/p&gt;
&lt;p&gt;There are two exceptions from this rule:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Scripts with the &lt;code&gt;async&lt;/code&gt; attribute, that we&amp;rsquo;ll cover &lt;a href=&#34;info:script-async-defer&#34;&gt;a bit later&lt;/a&gt;, don&amp;rsquo;t block &lt;code&gt;DOMContentLoaded&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Scripts that are generated dynamically with &lt;code&gt;document.createElement(&#39;script&#39;)&lt;/code&gt; and then added to the webpage also don&amp;rsquo;t block this event.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;domcontentloaded-and-styles&#34;&gt;DOMContentLoaded and styles&lt;/h4&gt;
&lt;p&gt;External style sheets don&amp;rsquo;t affect DOM, so &lt;code&gt;DOMContentLoaded&lt;/code&gt; does not wait for them.&lt;/p&gt;
&lt;p&gt;But there&amp;rsquo;s a pitfall. If we have a script after the style, then that script must wait until the stylesheet loads:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;text/css&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;style.css&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// the script doesn&amp;#39;t not execute until the stylesheet is loaded
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  alert(getComputedStyle(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body).marginTop);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The reason for this is that the script may want to get coordinates and other style-dependent properties of elements, like in the example above. Naturally, it has to wait for styles to load.&lt;/p&gt;
&lt;p&gt;As &lt;code&gt;DOMContentLoaded&lt;/code&gt; waits for scripts, it now waits for styles before them as well.&lt;/p&gt;
&lt;h4 id=&#34;built-in-browser-autofill&#34;&gt;Built-in browser autofill&lt;/h4&gt;
&lt;p&gt;Firefox, Chrome and Opera autofill forms on &lt;code&gt;DOMContentLoaded&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For instance, if the page has a form with login and password, and the browser remembered the values, then on &lt;code&gt;DOMContentLoaded&lt;/code&gt; it may try to autofill them (if approved by the user).&lt;/p&gt;
&lt;p&gt;So if &lt;code&gt;DOMContentLoaded&lt;/code&gt; is postponed by long-loading scripts, then autofill also awaits. You probably saw that on some sites (if you use browser autofill) &amp;ndash; the login/password fields don&amp;rsquo;t get autofilled immediately, but there&amp;rsquo;s a delay till the page fully loads. That&amp;rsquo;s actually the delay until the &lt;code&gt;DOMContentLoaded&lt;/code&gt; event.&lt;/p&gt;
&lt;h3 id=&#34;windowonload-window-onload&#34;&gt;window.onload [#window-onload]&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;load&lt;/code&gt; event on the &lt;code&gt;window&lt;/code&gt; object triggers when the whole page is loaded including styles, images and other resources. This event is available via the &lt;code&gt;onload&lt;/code&gt; property.&lt;/p&gt;
&lt;p&gt;The example below correctly shows image sizes, because &lt;code&gt;window.onload&lt;/code&gt; waits for all images:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;window&lt;/span&gt;.onload &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() { &lt;span style=&#34;color:#6272a4&#34;&gt;// same as window.addEventListener(&amp;#39;load&amp;#39;, (event) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Page loaded&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// image is loaded at this time
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;`Image size: &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;img.offsetWidth&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;img.offsetHeight&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;img&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;img&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://en.js.cx/clipart/train.gif?speed=1&amp;amp;cache=0&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;windowonunload&#34;&gt;window.onunload&lt;/h3&gt;
&lt;p&gt;When a visitor leaves the page, the &lt;code&gt;unload&lt;/code&gt; event triggers on &lt;code&gt;window&lt;/code&gt;. We can do something there that doesn&amp;rsquo;t involve a delay, like closing related popup windows.&lt;/p&gt;
&lt;p&gt;The notable exception is sending analytics.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say we gather data about how the page is used: mouse clicks, scrolls, viewed page areas, and so on.&lt;/p&gt;
&lt;p&gt;Naturally, &lt;code&gt;unload&lt;/code&gt; event is when the user leaves us, and we&amp;rsquo;d like to save the data on our server.&lt;/p&gt;
&lt;p&gt;There exists a special &lt;code&gt;navigator.sendBeacon(url, data)&lt;/code&gt; method for such needs, described in the specification &lt;a href=&#34;https://w3c.github.io/beacon/&#34;&gt;https://w3c.github.io/beacon/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It sends the data in background. The transition to another page is not delayed: the browser leaves the page, but still performs &lt;code&gt;sendBeacon&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s how to use it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; analyticsData &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color:#6272a4&#34;&gt;/* object with gathered data */&lt;/span&gt; };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;window&lt;/span&gt;.addEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;unload&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  navigator.sendBeacon(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;/analytics&amp;#34;&lt;/span&gt;, JSON.stringify(analyticsData));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;The request is sent as POST.&lt;/li&gt;
&lt;li&gt;We can send not only a string, but also forms and other formats, as described in the chapter &lt;a href=&#34;info:fetch&#34;&gt;info:fetch&lt;/a&gt;, but usually it&amp;rsquo;s a stringified object.&lt;/li&gt;
&lt;li&gt;The data is limited by 64kb.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When the &lt;code&gt;sendBeacon&lt;/code&gt; request is finished, the browser probably has already left the document, so there&amp;rsquo;s no way to get server response (which is usually empty for analytics).&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s also a &lt;code&gt;keepalive&lt;/code&gt; flag for doing such &amp;ldquo;after-page-left&amp;rdquo; requests in  &lt;a href=&#34;info:fetch&#34;&gt;fetch&lt;/a&gt; method for generic network requests. You can find more information in the chapter &lt;a href=&#34;info:fetch-api&#34;&gt;info:fetch-api&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If we want to cancel the transition to another page, we can&amp;rsquo;t do it here. But we can use another event &amp;ndash; &lt;code&gt;onbeforeunload&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;windowonbeforeunload-windowonbeforeunload&#34;&gt;window.onbeforeunload [#window.onbeforeunload]&lt;/h3&gt;
&lt;p&gt;If a visitor initiated navigation away from the page or tries to close the window, the &lt;code&gt;beforeunload&lt;/code&gt; handler asks for additional confirmation.&lt;/p&gt;
&lt;p&gt;If we cancel the event, the browser may ask the visitor if they are sure.&lt;/p&gt;
&lt;p&gt;You can try it by running this code and then reloading the page:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;window&lt;/span&gt;.onbeforeunload &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For historical reasons, returning a non-empty string also counts as canceling the event. Some time ago browsers used to show it as a message, but as the &lt;a href=&#34;https://html.spec.whatwg.org/#unloading-documents&#34;&gt;modern specification&lt;/a&gt; says, they shouldn&amp;rsquo;t.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s an example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;window&lt;/span&gt;.onbeforeunload &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;There are unsaved changes. Leave now?&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The behavior was changed, because some webmasters abused this event handler by showing misleading and annoying messages. So right now old browsers still may show it as a message, but aside of that &amp;ndash; there&amp;rsquo;s no way to customize the message shown to the user.&lt;/p&gt;
&lt;h3 id=&#34;readystate&#34;&gt;readyState&lt;/h3&gt;
&lt;p&gt;What happens if we set the &lt;code&gt;DOMContentLoaded&lt;/code&gt; handler after the document is loaded?&lt;/p&gt;
&lt;p&gt;Naturally, it never runs.&lt;/p&gt;
&lt;p&gt;There are cases when we are not sure whether the document is ready or not. We&amp;rsquo;d like our function to execute when the DOM is loaded, be it now or later.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;document.readyState&lt;/code&gt; property tells us about the current loading state.&lt;/p&gt;
&lt;p&gt;There are 3 possible values:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;loading&amp;quot;&lt;/code&gt; &amp;ndash; the document is loading.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;interactive&amp;quot;&lt;/code&gt; &amp;ndash; the document was fully read.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;complete&amp;quot;&lt;/code&gt; &amp;ndash; the document was fully read and all resources (like images) are loaded too.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So we can check &lt;code&gt;document.readyState&lt;/code&gt; and setup a handler or execute the code immediately if it&amp;rsquo;s ready.&lt;/p&gt;
&lt;p&gt;Like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; work() { &lt;span style=&#34;color:#6272a4&#34;&gt;/*...*/&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.readyState &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;loading&amp;#39;&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// loading yet, wait for the event
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.addEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;DOMContentLoaded&amp;#39;&lt;/span&gt;, work);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// DOM is ready!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  work();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There&amp;rsquo;s also the &lt;code&gt;readystatechange&lt;/code&gt; event that triggers when the state changes, so we can print all these states like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// current state
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;console.log(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.readyState);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// print state changes
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.addEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;readystatechange&amp;#39;&lt;/span&gt;, () =&amp;gt; console.log(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.readyState));
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;readystatechange&lt;/code&gt; event is an alternative mechanics of tracking the document loading state, it appeared long ago. Nowadays, it is rarely used.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s see the full events flow for the completeness.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a document with &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; and handlers that log events:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;initial readyState:&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.readyState);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.addEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;readystatechange&amp;#39;&lt;/span&gt;, () =&amp;gt; log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;readyState:&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.readyState));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.addEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;DOMContentLoaded&amp;#39;&lt;/span&gt;, () =&amp;gt; log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;DOMContentLoaded&amp;#39;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;window&lt;/span&gt;.onload &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; () =&amp;gt; log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;window onload&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;iframe&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;iframe.html&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;onload&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;log(&amp;#39;iframe onload&amp;#39;)&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;iframe&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;img&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;http://en.js.cx/clipart/train.gif&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;img&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  img.onload &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; () =&amp;gt; log(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;img onload&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The working example is &lt;a href=&#34;sandbox:readystate&#34;&gt;in the sandbox&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The typical output:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;[1] initial readyState:loading&lt;/li&gt;
&lt;li&gt;[2] readyState:interactive&lt;/li&gt;
&lt;li&gt;[2] DOMContentLoaded&lt;/li&gt;
&lt;li&gt;[3] iframe onload&lt;/li&gt;
&lt;li&gt;[4] img onload&lt;/li&gt;
&lt;li&gt;[4] readyState:complete&lt;/li&gt;
&lt;li&gt;[4] window onload&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The numbers in square brackets denote the approximate time of when it happens. Events labeled with the same digit happen approximately at the same time (+- a few ms).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;document.readyState&lt;/code&gt; becomes &lt;code&gt;interactive&lt;/code&gt; right before &lt;code&gt;DOMContentLoaded&lt;/code&gt;. These two things actually mean the same.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.readyState&lt;/code&gt; becomes &lt;code&gt;complete&lt;/code&gt; when all resources (&lt;code&gt;iframe&lt;/code&gt; and &lt;code&gt;img&lt;/code&gt;) are loaded. Here we can see that it happens in about the same time as &lt;code&gt;img.onload&lt;/code&gt; (&lt;code&gt;img&lt;/code&gt; is the last resource) and &lt;code&gt;window.onload&lt;/code&gt;. Switching to &lt;code&gt;complete&lt;/code&gt; state means the same as &lt;code&gt;window.onload&lt;/code&gt;. The difference is that &lt;code&gt;window.onload&lt;/code&gt; always works after all other &lt;code&gt;load&lt;/code&gt; handlers.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;summary-24&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;Page load events:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;DOMContentLoaded&lt;/code&gt; event triggers on &lt;code&gt;document&lt;/code&gt; when the DOM is ready. We can apply JavaScript to elements at this stage.
&lt;ul&gt;
&lt;li&gt;Script such as &lt;code&gt;&amp;lt;script&amp;gt;...&amp;lt;/script&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;script src=&amp;quot;...&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt; block DOMContentLoaded, the browser waits for them to execute.&lt;/li&gt;
&lt;li&gt;Images and other resources may also still continue loading.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;load&lt;/code&gt; event on &lt;code&gt;window&lt;/code&gt; triggers when the page and all resources are loaded. We rarely use it, because there&amp;rsquo;s usually no need to wait for so long.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;beforeunload&lt;/code&gt; event on &lt;code&gt;window&lt;/code&gt; triggers when the user wants to leave the page. If we cancel the event, browser asks whether the user really wants to leave (e.g we have unsaved changes).&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;unload&lt;/code&gt; event on &lt;code&gt;window&lt;/code&gt; triggers when the user is finally leaving, in the handler we can only do simple things that do not involve delays or asking a user. Because of that limitation, it&amp;rsquo;s rarely used. We can send out a network request with &lt;code&gt;navigator.sendBeacon&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.readyState&lt;/code&gt; is the current state of the document, changes can be tracked in the &lt;code&gt;readystatechange&lt;/code&gt; event:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;loading&lt;/code&gt; &amp;ndash; the document is loading.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;interactive&lt;/code&gt; &amp;ndash; the document is parsed, happens at about the same time as &lt;code&gt;DOMContentLoaded&lt;/code&gt;, but before it.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;complete&lt;/code&gt; &amp;ndash; the document and resources are loaded, happens at about the same time as &lt;code&gt;window.onload&lt;/code&gt;, but before it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;scripts-async-defer&#34;&gt;Scripts: async, defer&lt;/h2&gt;
&lt;p&gt;In modern websites, scripts are often &amp;ldquo;heavier&amp;rdquo; than HTML: their download size is larger, and processing time is also longer.&lt;/p&gt;
&lt;p&gt;When the browser loads HTML and comes across a &lt;code&gt;&amp;lt;script&amp;gt;...&amp;lt;/script&amp;gt;&lt;/code&gt; tag, it can&amp;rsquo;t continue building the DOM. It must execute the script right now. The same happens for external scripts &lt;code&gt;&amp;lt;script src=&amp;quot;...&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;: the browser must wait until the script downloads, execute it, and only after process the rest of the page.&lt;/p&gt;
&lt;p&gt;That leads to two important issues:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Scripts can&amp;rsquo;t see DOM elements below them, so they can&amp;rsquo;t add handlers etc.&lt;/li&gt;
&lt;li&gt;If there&amp;rsquo;s a bulky script at the top of the page, it &amp;ldquo;blocks the page&amp;rdquo;. Users can&amp;rsquo;t see the page content till it downloads and runs:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;...content before script...&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://javascript.info/article/script-async-defer/long.js?speed=1&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!-- This isn&amp;#39;t visible until the script loads --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;...content after script...&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are some workarounds to that. For instance, we can put a script at the bottom of the page. Then it can see elements above it, and it doesn&amp;rsquo;t block the page content from showing:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ...all content is above the script...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://javascript.info/article/script-async-defer/long.js?speed=1&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But this solution is far from perfect. For example, the browser notices the script (and can start downloading it) only after it downloaded the full HTML document. For long HTML documents, that may be a noticeable delay.&lt;/p&gt;
&lt;p&gt;Such things are invisible for people using very fast connections, but many people in the world still have slow internet speeds and use a far-from-perfect mobile internet connection.&lt;/p&gt;
&lt;p&gt;Luckily, there are two &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; attributes that solve the problem for us: &lt;code&gt;defer&lt;/code&gt; and &lt;code&gt;async&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;defer&#34;&gt;defer&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;defer&lt;/code&gt; attribute tells the browser that it should go on working with the page, and load the script &amp;ldquo;in background&amp;rdquo;, then run the script when it loads.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the same example as above, but with &lt;code&gt;defer&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;...content before script...&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://javascript.info/article/script-async-defer/long.js?speed=1&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!-- visible immediately --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;...content after script...&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Scripts with &lt;code&gt;defer&lt;/code&gt; never block the page.&lt;/li&gt;
&lt;li&gt;Scripts with &lt;code&gt;defer&lt;/code&gt; always execute when the DOM is ready, but before &lt;code&gt;DOMContentLoaded&lt;/code&gt; event.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following example demonstrates that:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;...content before scripts...&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.addEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;DOMContentLoaded&amp;#39;&lt;/span&gt;, () =&amp;gt; alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;DOM ready after defer!&amp;#34;&lt;/span&gt;)); &lt;span style=&#34;color:#6272a4&#34;&gt;// (2)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://javascript.info/article/script-async-defer/long.js?speed=1&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;...content after scripts...&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;The page content shows up immediately.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DOMContentLoaded&lt;/code&gt; waits for the deferred script. It only triggers when the script &lt;code&gt;(2)&lt;/code&gt; is downloaded and executed.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Deferred scripts keep their relative order, just like regular scripts.&lt;/p&gt;
&lt;p&gt;So, if we have a long script first, and then a smaller one, then the latter one waits.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://javascript.info/article/script-async-defer/long.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://javascript.info/article/script-async-defer/small.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Browsers scan the page for scripts and download them in parallel, to improve performance. So in the example above both scripts download in parallel. The &lt;code&gt;small.js&lt;/code&gt; probably makes it first.&lt;/p&gt;
&lt;p&gt;But the specification requires scripts to execute in the document order, so it waits for &lt;code&gt;long.js&lt;/code&gt; to execute.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;defer&lt;/code&gt; attribute is ignored if the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag has no &lt;code&gt;src&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;async&#34;&gt;async&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;async&lt;/code&gt; attribute means that a script is completely independent:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The page doesn&amp;rsquo;t wait for async scripts, the contents are processed and displayed.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DOMContentLoaded&lt;/code&gt; and async scripts don&amp;rsquo;t wait for each other:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DOMContentLoaded&lt;/code&gt; may happen both before an async script (if an async script finishes loading after the page is complete)&lt;/li&gt;
&lt;li&gt;&amp;hellip;or after an async script (if an async script is short or was in HTTP-cache)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Other scripts don&amp;rsquo;t wait for &lt;code&gt;async&lt;/code&gt; scripts, and &lt;code&gt;async&lt;/code&gt; scripts don&amp;rsquo;t wait for them.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, if we have several &lt;code&gt;async&lt;/code&gt; scripts, they may execute in any order. Whatever loads first &amp;ndash; runs first:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;...content before scripts...&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.addEventListener(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;DOMContentLoaded&amp;#39;&lt;/span&gt;, () =&amp;gt; alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;DOM ready!&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://javascript.info/article/script-async-defer/long.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://javascript.info/article/script-async-defer/small.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;...content after scripts...&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;The page content shows up immediately: &lt;code&gt;async&lt;/code&gt; doesn&amp;rsquo;t block it.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DOMContentLoaded&lt;/code&gt; may happen both before and after &lt;code&gt;async&lt;/code&gt;, no guarantees here.&lt;/li&gt;
&lt;li&gt;Async scripts don&amp;rsquo;t wait for each other. A smaller script &lt;code&gt;small.js&lt;/code&gt; goes second, but probably loads before &lt;code&gt;long.js&lt;/code&gt;, so runs first. That&amp;rsquo;s called a &amp;ldquo;load-first&amp;rdquo; order.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Async scripts are great when we integrate an independent third-party script into the page: counters, ads and so on, as they don&amp;rsquo;t depend on our scripts, and our scripts shouldn&amp;rsquo;t wait for them:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&amp;lt;!-- Google Analytics is usually added like this --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://google-analytics.com/analytics.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;dynamic-scripts&#34;&gt;Dynamic scripts&lt;/h3&gt;
&lt;p&gt;We can also add a script dynamically using JavaScript:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; script &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.createElement(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;script&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;script.src &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;/article/script-async-defer/long.js&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.append(script); &lt;span style=&#34;color:#6272a4&#34;&gt;// (*)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The script starts loading as soon as it&amp;rsquo;s appended to the document &lt;code&gt;(*)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dynamic scripts behave as &amp;ldquo;async&amp;rdquo; by default.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;That is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;They don&amp;rsquo;t wait for anything, nothing waits for them.&lt;/li&gt;
&lt;li&gt;The script that loads first &amp;ndash; runs first (&amp;ldquo;load-first&amp;rdquo; order).&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; script &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.createElement(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;script&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;script.src &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;/article/script-async-defer/long.js&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;script.&lt;span style=&#34;color:#ff79c6&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.append(script);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For example, here we add two scripts. Without &lt;code&gt;script.async=false&lt;/code&gt; they would execute in load-first order (the &lt;code&gt;small.js&lt;/code&gt; probably first). But with that flag the order is &amp;ldquo;as in the document&amp;rdquo;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; loadScript(src) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; script &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.createElement(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;script&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  script.src &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; src;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  script.&lt;span style=&#34;color:#ff79c6&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.body.append(script);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// long.js runs first because of async=false
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;loadScript(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;/article/script-async-defer/long.js&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;loadScript(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;/article/script-async-defer/small.js&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;summary-25&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;Both &lt;code&gt;async&lt;/code&gt; and &lt;code&gt;defer&lt;/code&gt; have one common thing: downloading of such scripts doesn&amp;rsquo;t block page rendering. So the user can read page content and get acquainted with the page immediately.&lt;/p&gt;
&lt;p&gt;But there are also essential differences between them:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Order&lt;/th&gt;
&lt;th&gt;&lt;code&gt;DOMContentLoaded&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;async&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Load-first order&lt;/em&gt;. Their document order doesn&amp;rsquo;t matter &amp;ndash; which loads first&lt;/td&gt;
&lt;td&gt;Irrelevant. May load and execute while the document has not yet been fully downloaded. That happens if scripts are small or cached, and the document is long enough.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;defer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;Document order&lt;/em&gt; (as they go in the document).&lt;/td&gt;
&lt;td&gt;Execute after the document is loaded and parsed (they wait if needed), right before &lt;code&gt;DOMContentLoaded&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Please note that if you&amp;rsquo;re using &lt;code&gt;defer&lt;/code&gt;, then the page is visible &lt;em&gt;before&lt;/em&gt; the script loads.&lt;/p&gt;
&lt;p&gt;So the user may read the page, but some graphical components are probably not ready yet.&lt;/p&gt;
&lt;p&gt;There should be &amp;ldquo;loading&amp;rdquo; indications in the proper places, and disabled buttons should show as such, so the user can clearly see what&amp;rsquo;s ready and what&amp;rsquo;s not.&lt;/p&gt;
&lt;p&gt;In practice, &lt;code&gt;defer&lt;/code&gt; is used for scripts that need the whole DOM and/or their relative execution order is important. And  &lt;code&gt;async&lt;/code&gt; is used for independent scripts, like counters or ads. And their relative execution order does not matter.&lt;/p&gt;
&lt;h2 id=&#34;resource-loading-onload-and-onerror&#34;&gt;Resource loading: onload and onerror&lt;/h2&gt;
&lt;p&gt;The browser allows us to track the loading of external resources &amp;ndash; scripts, iframes, pictures and so on.&lt;/p&gt;
&lt;p&gt;There are two events for it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;onload&lt;/code&gt; &amp;ndash; successful load,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;onerror&lt;/code&gt; &amp;ndash; an error occurred.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;loading-a-script&#34;&gt;Loading a script&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s say we need to load a third-party script and call a function that resides there.&lt;/p&gt;
&lt;p&gt;We can load it dynamically, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; script &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.createElement(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;script&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;script.src &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;my.js&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.head.append(script);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;hellip;But how to run the function that is declared inside that script? We need to wait until the script loads, and only then we can call it.&lt;/p&gt;
&lt;p&gt;For our own scripts we could use &lt;a href=&#34;info:modules&#34;&gt;JavaScript modules&lt;/a&gt; here, but they are not widely adopted by third-party libraries.&lt;/p&gt;
&lt;h4 id=&#34;scriptonload&#34;&gt;script.onload&lt;/h4&gt;
&lt;p&gt;The main helper is the &lt;code&gt;load&lt;/code&gt; event. It triggers after the script was loaded and executed.&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; script &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.createElement(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;script&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// can load any script, from any domain
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;script.src &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.3.0/lodash.js&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.head.append(script);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;script.onload &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// the script creates a helper function &amp;#34;_&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  alert(_); &lt;span style=&#34;color:#6272a4&#34;&gt;// the function is available
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So in &lt;code&gt;onload&lt;/code&gt; we can use script variables, run functions etc.&lt;/p&gt;
&lt;p&gt;&amp;hellip;And what if the loading failed? For instance, there&amp;rsquo;s no such script (error 404) or the server is down (unavailable).&lt;/p&gt;
&lt;h4 id=&#34;scriptonerror&#34;&gt;script.onerror&lt;/h4&gt;
&lt;p&gt;Errors that occur during the loading of the script can be tracked in an &lt;code&gt;error&lt;/code&gt; event.&lt;/p&gt;
&lt;p&gt;For instance, let&amp;rsquo;s request a script that doesn&amp;rsquo;t exist:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; script &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.createElement(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;script&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;script.src &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://example.com/404.js&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// no such script
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.head.append(script);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;script.onerror &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Error loading &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.src); &lt;span style=&#34;color:#6272a4&#34;&gt;// Error loading https://example.com/404.js
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Please note that we can&amp;rsquo;t get HTTP error details here. We don&amp;rsquo;t know if it was an error 404 or 500 or something else. Just that the loading failed.&lt;/p&gt;
&lt;p&gt;Events &lt;code&gt;onload&lt;/code&gt;/&lt;code&gt;onerror&lt;/code&gt; track only the loading itself.&lt;/p&gt;
&lt;p&gt;Errors that may occur during script processing and execution are out of scope for these events. That is: if a script loaded successfully, then &lt;code&gt;onload&lt;/code&gt; triggers, even if it has programming errors in it. To track script errors, one can use &lt;code&gt;window.onerror&lt;/code&gt; global handler.&lt;/p&gt;
&lt;h3 id=&#34;other-resources&#34;&gt;Other resources&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;load&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt; events also work for other resources, basically for any resource that has an external &lt;code&gt;src&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; img &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.createElement(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;img&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;img.src &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://js.cx/clipart/train.gif&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// (*)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;img.onload &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;`Image loaded, size &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;img.width&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;x&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;img.height&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;img.onerror &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Error occurred while loading image&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are some notes though:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Most resources start loading when they are added to the document. But &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; is an exception. It starts loading when it gets a src &lt;code&gt;(*)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;For &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;, the &lt;code&gt;iframe.onload&lt;/code&gt; event triggers when the iframe loading finished, both for successful load and in case of an error.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That&amp;rsquo;s for historical reasons.&lt;/p&gt;
&lt;h3 id=&#34;crossorigin-policy&#34;&gt;Crossorigin policy&lt;/h3&gt;
&lt;p&gt;There&amp;rsquo;s a rule: scripts from one site can&amp;rsquo;t access contents of the other site. So, e.g. a script at &lt;code&gt;https://facebook.com&lt;/code&gt; can&amp;rsquo;t read the user&amp;rsquo;s mailbox at &lt;code&gt;https://gmail.com&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Or, to be more precise, one origin (domain/port/protocol triplet) can&amp;rsquo;t access the content from another one. So even if we have a subdomain, or just another port, these are different origins with no access to each other.&lt;/p&gt;
&lt;p&gt;This rule also affects resources from other domains.&lt;/p&gt;
&lt;p&gt;If we&amp;rsquo;re using a script from another domain, and there&amp;rsquo;s an error in it, we can&amp;rsquo;t get error details.&lt;/p&gt;
&lt;p&gt;For example, let&amp;rsquo;s take a script &lt;code&gt;error.js&lt;/code&gt; that consists of a single (bad) function call:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// 📁 error.js
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;noSuchFunction();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now load it from the same site where it&amp;rsquo;s located:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;window&lt;/span&gt;.onerror &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(message, url, line, col, errorObj) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;message&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;url&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;, &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;line&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;col&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;/article/onload-onerror/crossorigin/error.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can see a good error report, like this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Uncaught ReferenceError: noSuchFunction is not defined
https://javascript.info/article/onload-onerror/crossorigin/error.js, 1:1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now let&amp;rsquo;s load the same script from another domain:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;window&lt;/span&gt;.onerror &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(message, url, line, col, errorObj) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;message&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;url&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;, &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;line&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;col&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://cors.javascript.info/article/onload-onerror/crossorigin/error.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The report is different, like this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Script error.
, 0:0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Details may vary depending on the browser, but the idea is the same: any information about the internals of a script, including error stack traces, is hidden. Exactly because it&amp;rsquo;s from another domain.&lt;/p&gt;
&lt;p&gt;Why do we need error details?&lt;/p&gt;
&lt;p&gt;There are many services (and we can build our own) that listen for global errors using &lt;code&gt;window.onerror&lt;/code&gt;, save errors and provide an interface to access and analyze them. That&amp;rsquo;s great, as we can see real errors, triggered by our users. But if a script comes from another origin, then there&amp;rsquo;s not much information about errors in it, as we&amp;rsquo;ve just seen.&lt;/p&gt;
&lt;p&gt;Similar cross-origin policy (CORS) is enforced for other types of resources as well.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To allow cross-origin access, the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag needs to have the &lt;code&gt;crossorigin&lt;/code&gt; attribute, plus the remote server must provide special headers.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There are three levels of cross-origin access:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;No &lt;code&gt;crossorigin&lt;/code&gt; attribute&lt;/strong&gt; &amp;ndash; access prohibited.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;crossorigin=&amp;quot;anonymous&amp;quot;&lt;/code&gt;&lt;/strong&gt; &amp;ndash; access allowed if the server responds with the header &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; with &lt;code&gt;*&lt;/code&gt; or our origin. Browser does not send authorization information and cookies to remote server.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;crossorigin=&amp;quot;use-credentials&amp;quot;&lt;/code&gt;&lt;/strong&gt; &amp;ndash; access allowed if the server sends back the header &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; with our origin and &lt;code&gt;Access-Control-Allow-Credentials: true&lt;/code&gt;. Browser sends authorization information and cookies to remote server.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can read more about cross-origin access in the chapter &lt;a href=&#34;info:fetch-crossorigin&#34;&gt;info:fetch-crossorigin&lt;/a&gt;. It describes the &lt;code&gt;fetch&lt;/code&gt; method for network requests, but the policy is exactly the same.&lt;/p&gt;
&lt;p&gt;Such thing as &amp;ldquo;cookies&amp;rdquo; is out of our current scope, but you can read about them in the chapter &lt;a href=&#34;info:cookie&#34;&gt;info:cookie&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In our case, we didn&amp;rsquo;t have any crossorigin attribute. So the cross-origin access was prohibited. Let&amp;rsquo;s add it.&lt;/p&gt;
&lt;p&gt;We can choose between &lt;code&gt;&amp;quot;anonymous&amp;quot;&lt;/code&gt; (no cookies sent, one server-side header needed) and &lt;code&gt;&amp;quot;use-credentials&amp;quot;&lt;/code&gt; (sends cookies too, two server-side headers needed).&lt;/p&gt;
&lt;p&gt;If we don&amp;rsquo;t care about cookies, then &lt;code&gt;&amp;quot;anonymous&amp;quot;&lt;/code&gt; is the way to go:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;window&lt;/span&gt;.onerror &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(message, url, line, col, errorObj) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;message&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;url&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;, &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;line&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;col&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;crossorigin&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;anonymous&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://cors.javascript.info/article/onload-onerror/crossorigin/error.js&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, assuming that the server provides an &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; header, everything&amp;rsquo;s fine. We have the full error report.&lt;/p&gt;
&lt;h3 id=&#34;summary-26&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;Images &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;, external styles, scripts and other resources provide &lt;code&gt;load&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt; events to track their loading:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;load&lt;/code&gt; triggers on a successful load,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;error&lt;/code&gt; triggers on a failed load.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The only exception is &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;: for historical reasons it always triggers &lt;code&gt;load&lt;/code&gt;, for any load completion, even if the page is not found.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;readystatechange&lt;/code&gt; event also works for resources, but is rarely used, because &lt;code&gt;load/error&lt;/code&gt; events are simpler.&lt;/p&gt;
&lt;h2 id=&#34;mutation-observer&#34;&gt;Mutation observer&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;MutationObserver&lt;/code&gt; is a built-in object that observes a DOM element and fires a callback in case of changes.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll first take a look at the syntax, and then explore a real-world use case, to see where such thing may be useful.&lt;/p&gt;
&lt;h3 id=&#34;syntax&#34;&gt;Syntax&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;MutationObserver&lt;/code&gt; is easy to use.&lt;/p&gt;
&lt;p&gt;First, we create an observer with a callback-function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; observer &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; MutationObserver(callback);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And then attach it to a DOM node:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;observer.observe(node, config);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;config&lt;/code&gt; is an object with boolean options &amp;ldquo;what kind of changes to react on&amp;rdquo;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;childList&lt;/code&gt; &amp;ndash; changes in the direct children of &lt;code&gt;node&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;subtree&lt;/code&gt; &amp;ndash; in all descendants of &lt;code&gt;node&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;attributes&lt;/code&gt; &amp;ndash; attributes of &lt;code&gt;node&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;attributeFilter&lt;/code&gt; &amp;ndash; an array of attribute names, to observe only selected ones.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;characterData&lt;/code&gt; &amp;ndash; whether to observe &lt;code&gt;node.data&lt;/code&gt; (text content),&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Few other options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;attributeOldValue&lt;/code&gt; &amp;ndash; if &lt;code&gt;true&lt;/code&gt;, pass both the old and the new value of attribute to callback (see below), otherwise only the new one (needs &lt;code&gt;attributes&lt;/code&gt; option),&lt;/li&gt;
&lt;li&gt;&lt;code&gt;characterDataOldValue&lt;/code&gt; &amp;ndash; if &lt;code&gt;true&lt;/code&gt;, pass both the old and the new value of &lt;code&gt;node.data&lt;/code&gt; to callback (see below), otherwise only the new one (needs &lt;code&gt;characterData&lt;/code&gt; option).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then after any changes, the &lt;code&gt;callback&lt;/code&gt; is executed: changes are passed in the first argument as a list of &lt;a href=&#34;https://dom.spec.whatwg.org/#mutationrecord&#34;&gt;MutationRecord&lt;/a&gt; objects, and the observer itself as the second argument.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://dom.spec.whatwg.org/#mutationrecord&#34;&gt;MutationRecord&lt;/a&gt; objects have properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;type&lt;/code&gt; &amp;ndash; mutation type, one of
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;attributes&amp;quot;&lt;/code&gt;: attribute modified&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;characterData&amp;quot;&lt;/code&gt;: data modified, used for text nodes,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;childList&amp;quot;&lt;/code&gt;: child elements added/removed,&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;target&lt;/code&gt; &amp;ndash; where the change occurred: an element for &lt;code&gt;&amp;quot;attributes&amp;quot;&lt;/code&gt;, or text node for &lt;code&gt;&amp;quot;characterData&amp;quot;&lt;/code&gt;, or an element for a &lt;code&gt;&amp;quot;childList&amp;quot;&lt;/code&gt; mutation,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;addedNodes/removedNodes&lt;/code&gt;  &amp;ndash; nodes that were added/removed,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;previousSibling/nextSibling&lt;/code&gt; &amp;ndash; the previous and next sibling to added/removed nodes,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;attributeName/attributeNamespace&lt;/code&gt; &amp;ndash; the name/namespace (for XML) of the changed attribute,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;oldValue&lt;/code&gt; &amp;ndash; the previous value, only for attribute or text changes, if the corresponding option is set &lt;code&gt;attributeOldValue&lt;/code&gt;/&lt;code&gt;characterDataOldValue&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, here&amp;rsquo;s a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with a &lt;code&gt;contentEditable&lt;/code&gt; attribute. That attribute allows us to focus on it and edit.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;contentEditable&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;elem&amp;#34;&lt;/span&gt;&amp;gt;Click and &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;b&lt;/span&gt;&amp;gt;edit&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;b&lt;/span&gt;&amp;gt;, please&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; observer &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; MutationObserver(mutationRecords =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  console.log(mutationRecords); &lt;span style=&#34;color:#6272a4&#34;&gt;// console.log(the changes)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// observe everything except attributes
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;observer.observe(elem, {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  childList&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#6272a4&#34;&gt;// observe direct children
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  subtree&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;, &lt;span style=&#34;color:#6272a4&#34;&gt;// and lower descendants too
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  characterDataOldValue&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;// pass old data to callback
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If we run this code in the browser, then focus on the given &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; and change the text inside &lt;code&gt;&amp;lt;b&amp;gt;edit&amp;lt;/b&amp;gt;&lt;/code&gt;, &lt;code&gt;console.log&lt;/code&gt; will show one mutation:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mutationRecords &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; [{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  type&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;characterData&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  oldValue&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;edit&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  target&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;text node&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// other properties empty
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;}];
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If we make more complex editing operations, e.g. remove the &lt;code&gt;&amp;lt;b&amp;gt;edit&amp;lt;/b&amp;gt;&lt;/code&gt;, the mutation event may contain multiple mutation records:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mutationRecords &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; [{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  type&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;childList&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  target&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;div#elem&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  removedNodes&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; [&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;b&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  nextSibling&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;text node&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  previousSibling&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;text node&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// other properties empty
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;}, {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  type&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;characterData&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  target&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;text node&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// ...mutation details depend on how the browser handles such removal
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// it may coalesce two adjacent text nodes &amp;#34;edit &amp;#34; and &amp;#34;, please&amp;#34; into one node
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// or it may leave them separate text nodes
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;}];
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, &lt;code&gt;MutationObserver&lt;/code&gt; allows to react on any changes within DOM subtree.&lt;/p&gt;
&lt;h3 id=&#34;usage-for-integration&#34;&gt;Usage for integration&lt;/h3&gt;
&lt;p&gt;When such thing may be useful?&lt;/p&gt;
&lt;p&gt;Imagine the situation when you need to add a third-party script that contains useful functionality, but also does something unwanted, e.g. shows ads &lt;code&gt;&amp;lt;div class=&amp;quot;ads&amp;quot;&amp;gt;Unwanted ads&amp;lt;/div&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Naturally, the third-party script provides no mechanisms to remove it.&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;MutationObserver&lt;/code&gt;, we can detect when the unwanted element appears in our DOM and remove it.&lt;/p&gt;
&lt;p&gt;There are other situations when a third-party script adds something into our document, and we&amp;rsquo;d like to detect, when it happens, to adapt our page, dynamically resize something etc.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MutationObserver&lt;/code&gt; allows to implement this.&lt;/p&gt;
&lt;h3 id=&#34;usage-for-architecture&#34;&gt;Usage for architecture&lt;/h3&gt;
&lt;p&gt;There are also situations when &lt;code&gt;MutationObserver&lt;/code&gt; is good from architectural standpoint.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say we&amp;rsquo;re making a website about programming. Naturally, articles and other materials may contain source code snippets.&lt;/p&gt;
&lt;p&gt;Such snippet in an HTML markup looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;pre&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;language-javascript&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;code&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  // here&amp;#39;s the code
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  let hello = &amp;#34;world&amp;#34;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;code&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;pre&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Also we&amp;rsquo;ll use a JavaScript highlighting library on our site, e.g. &lt;a href=&#34;https://prismjs.com/&#34;&gt;Prism.js&lt;/a&gt;. A call to &lt;code&gt;Prism.highlightElem(pre)&lt;/code&gt; examines the contents of such &lt;code&gt;pre&lt;/code&gt; elements and adds into them special tags and styles for colored syntax highlighting, similar to what you see in examples here, at this page.&lt;/p&gt;
&lt;p&gt;When exactly to run that highlighting method? We can do it on &lt;code&gt;DOMContentLoaded&lt;/code&gt; event, or at the bottom of the page. At that moment we have our DOM ready, can search for elements &lt;code&gt;pre[class*=&amp;quot;language&amp;quot;]&lt;/code&gt; and call &lt;code&gt;Prism.highlightElem&lt;/code&gt; on them:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// highlight all code snippets on the page
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.querySelectorAll(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;pre[class*=&amp;#34;language&amp;#34;]&amp;#39;&lt;/span&gt;).forEach(Prism.highlightElem);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Everything&amp;rsquo;s simple so far, right? There are &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; code snippets in HTML, we highlight them.&lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s go on. Let&amp;rsquo;s say we&amp;rsquo;re going to dynamically fetch materials from a server. We&amp;rsquo;ll study methods for that &lt;a href=&#34;info:fetch&#34;&gt;later in the tutorial&lt;/a&gt;. For now it only matters that we fetch an HTML article from a webserver and display it on demand:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; article &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;/* fetch new content from server */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;articleElem.innerHTML &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; article;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The new &lt;code&gt;article&lt;/code&gt; HTML may contain code snippets. We need to call &lt;code&gt;Prism.highlightElem&lt;/code&gt; on them, otherwise they won&amp;rsquo;t get highlighted.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Where and when to call &lt;code&gt;Prism.highlightElem&lt;/code&gt; for a dynamically loaded article?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We could append that call to the code that loads an article, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; article &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;/* fetch new content from server */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;articleElem.innerHTML &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; article;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; snippets &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; articleElem.querySelectorAll(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;pre[class*=&amp;#34;language-&amp;#34;]&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;snippets.forEach(Prism.highlightElem);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;hellip;But imagine, we have many places in the code where we load contents: articles, quizzes, forum posts. Do we need to put the highlighting call everywhere? That&amp;rsquo;s not very convenient, and also easy to forget.&lt;/p&gt;
&lt;p&gt;And what if the content is loaded by a third-party module? E.g. we have a forum written by someone else, that loads contents dynamically, and we&amp;rsquo;d like to add syntax highlighting to it. No one likes to patch third-party scripts.&lt;/p&gt;
&lt;p&gt;Luckily, there&amp;rsquo;s another option.&lt;/p&gt;
&lt;p&gt;We can use &lt;code&gt;MutationObserver&lt;/code&gt; to automatically detect when code snippets are inserted in the page and highlight them.&lt;/p&gt;
&lt;p&gt;So we&amp;rsquo;ll handle the highlighting functionality in one place, relieving us from the need to integrate it.&lt;/p&gt;
&lt;h4 id=&#34;dynamic-highlight-demo&#34;&gt;Dynamic highlight demo&lt;/h4&gt;
&lt;p&gt;Here&amp;rsquo;s the working example.&lt;/p&gt;
&lt;p&gt;If you run this code, it starts observing the element below and highlighting any code snippets that appear there:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; observer &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; MutationObserver(mutations =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; mutation &lt;span style=&#34;color:#ff79c6&#34;&gt;of&lt;/span&gt; mutations) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// examine new nodes, is there anything to highlight?
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; node &lt;span style=&#34;color:#ff79c6&#34;&gt;of&lt;/span&gt; mutation.addedNodes) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#6272a4&#34;&gt;// we track only elements, skip other nodes (e.g. text nodes)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;!&lt;/span&gt;(node &lt;span style=&#34;color:#ff79c6&#34;&gt;instanceof&lt;/span&gt; HTMLElement)) &lt;span style=&#34;color:#ff79c6&#34;&gt;continue&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#6272a4&#34;&gt;// check the inserted element for being a code snippet
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (node.matches(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;pre[class*=&amp;#34;language-&amp;#34;]&amp;#39;&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Prism.highlightElement(node);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#6272a4&#34;&gt;// or maybe there&amp;#39;s a code snippet somewhere in its subtree?
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; elem &lt;span style=&#34;color:#ff79c6&#34;&gt;of&lt;/span&gt; node.querySelectorAll(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;pre[class*=&amp;#34;language-&amp;#34;]&amp;#39;&lt;/span&gt;)) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Prism.highlightElement(elem);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; demoElem &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;highlight-demo&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;observer.observe(demoElem, {childList&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;, subtree&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here, below, there&amp;rsquo;s an HTML-element and JavaScript that dynamically fills it using &lt;code&gt;innerHTML&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Please run the previous code (above, observes that element), and then the code below. You&amp;rsquo;ll see how &lt;code&gt;MutationObserver&lt;/code&gt; detects and highlights the snippet.&lt;/p&gt;
&lt;p id=&#34;highlight-demo&#34; style=&#34;border: 1px solid #ddd&#34;&gt;A demo-element with &lt;code&gt;id=&#34;highlight-demo&#34;&lt;/code&gt;, run the code above to observe it.&lt;/p&gt;
&lt;p&gt;The following code populates its &lt;code&gt;innerHTML&lt;/code&gt;, that causes the &lt;code&gt;MutationObserver&lt;/code&gt; to react and highlight its contents:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; demoElem &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.getElementById(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;highlight-demo&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// dynamically insert content with code snippets
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;demoElem.innerHTML &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;`A code snippet is below:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;  &amp;lt;pre class=&amp;#34;language-javascript&amp;#34;&amp;gt;&amp;lt;code&amp;gt; let hello = &amp;#34;world!&amp;#34;; &amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;  &amp;lt;div&amp;gt;Another one:&amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;  &amp;lt;div&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;    &amp;lt;pre class=&amp;#34;language-css&amp;#34;&amp;gt;&amp;lt;code&amp;gt;.class { margin: 5px; } &amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;  &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we have &lt;code&gt;MutationObserver&lt;/code&gt; that can track all highlighting in observed elements or the whole &lt;code&gt;document&lt;/code&gt;. We can add/remove code snippets in HTML without thinking about it.&lt;/p&gt;
&lt;h3 id=&#34;additional-methods&#34;&gt;Additional methods&lt;/h3&gt;
&lt;p&gt;There&amp;rsquo;s a method to stop observing the node:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;observer.disconnect()&lt;/code&gt; &amp;ndash; stops the observation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When we stop the observing, it might be possible that some changes were not processed by the observer yet.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;observer.takeRecords()&lt;/code&gt; &amp;ndash; gets a list of unprocessed mutation records, those that happened, but the callback did not handle them.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These methods can be used together, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// we&amp;#39;d like to stop tracking changes
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;observer.disconnect();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// handle unprocessed some mutations
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; mutationRecords &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; observer.takeRecords();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Observers use weak references to nodes internally. That is: if a node is removed from DOM, and becomes unreachable, then it becomes garbage collected.&lt;/p&gt;
&lt;p&gt;The mere fact that a DOM node is observed doesn&amp;rsquo;t prevent the garbage collection.&lt;/p&gt;
&lt;h3 id=&#34;summary-27&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;MutationObserver&lt;/code&gt; can react on changes in DOM: attributes, added/removed elements, text content.&lt;/p&gt;
&lt;p&gt;We can use it to track changes introduced by other parts of our code, as well as to integrate with third-party scripts.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MutationObserver&lt;/code&gt; can track any changes. The config &amp;ldquo;what to observe&amp;rdquo; options are used for optimizations, not to spend resources on unneeded callback invocations.&lt;/p&gt;
&lt;p&gt;libs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;d3&lt;/li&gt;
&lt;li&gt;domtree&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;selection-and-range&#34;&gt;Selection and Range&lt;/h2&gt;
&lt;p&gt;In this chapter we&amp;rsquo;ll cover selection in the document, as well as selection in form fields, such as &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;JavaScript can get the existing selection, select/deselect both as a whole or partially, remove the selected part from the document, wrap it into a tag, and so on.&lt;/p&gt;
&lt;p&gt;You can get ready to use recipes at the end, in &amp;ldquo;Summary&amp;rdquo; section. But you&amp;rsquo;ll get much more if you read the whole chapter. The underlying &lt;code&gt;Range&lt;/code&gt; and &lt;code&gt;Selection&lt;/code&gt; objects are easy to grasp, and then you&amp;rsquo;ll need no recipes to make them do what you want.&lt;/p&gt;
&lt;h3 id=&#34;range&#34;&gt;Range&lt;/h3&gt;
&lt;p&gt;The basic concept of selection is &lt;a href=&#34;https://dom.spec.whatwg.org/#ranges&#34;&gt;Range&lt;/a&gt;: basically, a pair of &amp;ldquo;boundary points&amp;rdquo;: range start and range end.&lt;/p&gt;
&lt;p&gt;Each point represented as a parent DOM node with the relative offset from its start. If the parent node is an element node, then the offset is a child number, for a text node it&amp;rsquo;s the position in the text. Examples to follow.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s select something.&lt;/p&gt;
&lt;p&gt;First, we can create a range (the constructor has no parameters):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; range &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Range();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then we can set the selection boundaries using &lt;code&gt;range.setStart(node, offset)&lt;/code&gt; and &lt;code&gt;range.setEnd(node, offset)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For example, consider this fragment of HTML:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;p&amp;#34;&lt;/span&gt;&amp;gt;Example: &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;italic&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt; and &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;b&lt;/span&gt;&amp;gt;bold&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;b&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here&amp;rsquo;s its DOM structure, note that here text nodes are important for us:&lt;/p&gt;
&lt;div class=&#34;select-p-domtree&#34;&gt;&lt;/div&gt;
&lt;script&gt;
let selectPDomtree = {
  &#34;name&#34;: &#34;P&#34;,
  &#34;nodeType&#34;: 1,
  &#34;children&#34;: [{
    &#34;name&#34;: &#34;#text&#34;,
    &#34;nodeType&#34;: 3,
    &#34;content&#34;: &#34;Example: &#34;
  }, {
    &#34;name&#34;: &#34;I&#34;,
    &#34;nodeType&#34;: 1,
    &#34;children&#34;: [{
      &#34;name&#34;: &#34;#text&#34;,
      &#34;nodeType&#34;: 3,
      &#34;content&#34;: &#34;italic&#34;
    }]
  }, {
    &#34;name&#34;: &#34;#text&#34;,
    &#34;nodeType&#34;: 3,
    &#34;content&#34;: &#34; and &#34;
  }, {
    &#34;name&#34;: &#34;B&#34;,
    &#34;nodeType&#34;: 1,
    &#34;children&#34;: [{
      &#34;name&#34;: &#34;#text&#34;,
      &#34;nodeType&#34;: 3,
      &#34;content&#34;: &#34;bold&#34;
    }]
  }]
}

drawHtmlTree(selectPDomtree, &#39;div.select-p-domtree&#39;, 690, 320);
&lt;/script&gt;
&lt;p&gt;Let&amp;rsquo;s select &lt;code&gt;&amp;quot;Example: &amp;lt;i&amp;gt;italic&amp;lt;/i&amp;gt;&amp;quot;&lt;/code&gt;. That&amp;rsquo;s two first children of &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; (counting text nodes):&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;range-example-p-0-1.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;p&amp;#34;&lt;/span&gt;&amp;gt;Example: &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;italic&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt; and &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;b&lt;/span&gt;&amp;gt;bold&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;b&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; range &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Range();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  range.setStart(p, &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  range.setEnd(p, &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// toString of a range returns its content as text (without tags)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  alert(range); &lt;span style=&#34;color:#6272a4&#34;&gt;// Example: italic
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// apply this range for document selection (explained later)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.getSelection().addRange(range);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;range.setStart(p, 0)&lt;/code&gt; &amp;ndash; sets the start at the 0th child of &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; (that&amp;rsquo;s the text node &lt;code&gt;&amp;quot;Example: &amp;quot;&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;range.setEnd(p, 2)&lt;/code&gt; &amp;ndash; spans the range up to (but not including) 2nd child of &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; (that&amp;rsquo;s the text node &lt;code&gt;&amp;quot; and &amp;quot;&lt;/code&gt;, but as the end is not included, so the last selected node is &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&amp;rsquo;s a more flexible test stand where you try more variants:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;p&amp;#34;&lt;/span&gt;&amp;gt;Example: &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;italic&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt; and &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;b&lt;/span&gt;&amp;gt;bold&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;b&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;From &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;start&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;number&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;1&lt;/span&gt;&amp;gt; – To &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;end&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;number&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;4&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;button&amp;#34;&lt;/span&gt;&amp;gt;Click to select&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  button.onclick &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; () =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; range &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Range();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    range.setStart(p, start.value);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    range.setEnd(p, end.value);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// apply the selection, explained later
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.getSelection().removeAllRanges();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.getSelection().addRange(range);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;E.g. selecting from &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;4&lt;/code&gt; gives range &lt;code&gt;&amp;lt;i&amp;gt;italic&amp;lt;/i&amp;gt; and &amp;lt;b&amp;gt;bold&amp;lt;/b&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;range-example-p-1-3.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;We don&amp;rsquo;t have to use the same node in &lt;code&gt;setStart&lt;/code&gt; and &lt;code&gt;setEnd&lt;/code&gt;. A range may span across many unrelated nodes. It&amp;rsquo;s only important that the end is after the start.&lt;/p&gt;
&lt;h4 id=&#34;selecting-parts-of-text-nodes&#34;&gt;Selecting parts of text nodes&lt;/h4&gt;
&lt;p&gt;Let&amp;rsquo;s select the text partially, like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;range-example-p-2-b-3.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s also possible, we just need to set the start and the end as a relative offset in text nodes.&lt;/p&gt;
&lt;p&gt;We need to create a range, that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;starts from position 2 in &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; first child (taking all but two first letters of &amp;ldquo;Ex&lt;b&gt;ample:&lt;/b&gt; &amp;ldquo;)&lt;/li&gt;
&lt;li&gt;ends at the position 3 in &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt; first child (taking first three letters of &amp;ldquo;&lt;b&gt;bol&lt;/b&gt;d&amp;rdquo;, but no more):&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;p&amp;#34;&lt;/span&gt;&amp;gt;Example: &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;italic&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt; and &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;b&lt;/span&gt;&amp;gt;bold&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;b&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; range &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Range();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  range.setStart(p.firstChild, &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  range.setEnd(p.querySelector(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;).firstChild, &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(range); &lt;span style=&#34;color:#6272a4&#34;&gt;// ample: italic and bol
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// use this range for selection (explained later)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;window&lt;/span&gt;.getSelection().addRange(range);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The range object has following properties:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;range-example-p-2-b-3-range.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;startContainer&lt;/code&gt;, &lt;code&gt;startOffset&lt;/code&gt; &amp;ndash; node and offset of the start,
&lt;ul&gt;
&lt;li&gt;in the example above: first text node inside &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;endContainer&lt;/code&gt;, &lt;code&gt;endOffset&lt;/code&gt; &amp;ndash; node and offset of the end,
&lt;ul&gt;
&lt;li&gt;in the example above: first text node inside &lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt; and &lt;code&gt;3&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;collapsed&lt;/code&gt; &amp;ndash; boolean, &lt;code&gt;true&lt;/code&gt; if the range starts and ends on the same point (so there&amp;rsquo;s no content inside the range),
&lt;ul&gt;
&lt;li&gt;in the example above: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;commonAncestorContainer&lt;/code&gt; &amp;ndash; the nearest common ancestor of all nodes within the range,
&lt;ul&gt;
&lt;li&gt;in the example above: &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;range-methods&#34;&gt;Range methods&lt;/h3&gt;
&lt;p&gt;There are many convenience methods to manipulate ranges.&lt;/p&gt;
&lt;p&gt;Set range start:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;setStart(node, offset)&lt;/code&gt; set start at: position &lt;code&gt;offset&lt;/code&gt; in &lt;code&gt;node&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setStartBefore(node)&lt;/code&gt; set start at: right before &lt;code&gt;node&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setStartAfter(node)&lt;/code&gt; set start at: right after &lt;code&gt;node&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Set range end (similar methods):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;setEnd(node, offset)&lt;/code&gt; set end at: position &lt;code&gt;offset&lt;/code&gt; in &lt;code&gt;node&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setEndBefore(node)&lt;/code&gt; set end at: right before &lt;code&gt;node&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setEndAfter(node)&lt;/code&gt; set end at: right after &lt;code&gt;node&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;As it was demonstrated, &lt;code&gt;node&lt;/code&gt; can be both a text or element node: for text nodes &lt;code&gt;offset&lt;/code&gt; skips that many of characters, while for element nodes that many child nodes.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Others:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;selectNode(node)&lt;/code&gt; set range to select the whole &lt;code&gt;node&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;selectNodeContents(node)&lt;/code&gt; set range to select the whole &lt;code&gt;node&lt;/code&gt; contents&lt;/li&gt;
&lt;li&gt;&lt;code&gt;collapse(toStart)&lt;/code&gt; if &lt;code&gt;toStart=true&lt;/code&gt; set end=start, otherwise set start=end, thus collapsing the range&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cloneRange()&lt;/code&gt; creates a new range with the same start/end&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To manipulate the content within the range:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;deleteContents()&lt;/code&gt; &amp;ndash; remove range content from the document&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extractContents()&lt;/code&gt; &amp;ndash; remove range content from the document and return as &lt;a href=&#34;info:modifying-document#document-fragment&#34;&gt;DocumentFragment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cloneContents()&lt;/code&gt; &amp;ndash; clone range content and return as &lt;a href=&#34;info:modifying-document#document-fragment&#34;&gt;DocumentFragment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;insertNode(node)&lt;/code&gt; &amp;ndash; insert &lt;code&gt;node&lt;/code&gt; into the document at the beginning of the range&lt;/li&gt;
&lt;li&gt;&lt;code&gt;surroundContents(node)&lt;/code&gt; &amp;ndash; wrap &lt;code&gt;node&lt;/code&gt; around range content. For this to work, the range must contain both opening and closing tags for all elements inside it: no partial ranges like &lt;code&gt;&amp;lt;i&amp;gt;abc&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With these methods we can do basically anything with selected nodes.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the test stand to see them in action:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Click buttons to run methods on the selection, &amp;#34;resetExample&amp;#34; to reset it.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;p&amp;#34;&lt;/span&gt;&amp;gt;Example: &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;italic&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt; and &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;b&lt;/span&gt;&amp;gt;bold&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;b&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;result&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; range &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Range();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// Each demonstrated method is represented here:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; methods &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    deleteContents() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      range.deleteContents()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    extractContents() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; content &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; range.extractContents();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      result.innerHTML &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      result.append(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;extracted: &amp;#34;&lt;/span&gt;, content);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cloneContents() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; content &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; range.cloneContents();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      result.innerHTML &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      result.append(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;cloned: &amp;#34;&lt;/span&gt;, content);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    insertNode() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; newNode &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.createElement(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;u&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      newNode.innerHTML &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;NEW NODE&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      range.insertNode(newNode);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    surroundContents() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; newNode &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.createElement(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;u&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;try&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        range.surroundContents(newNode);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      } &lt;span style=&#34;color:#ff79c6&#34;&gt;catch&lt;/span&gt;(e) { alert(e) }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    resetExample() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      p.innerHTML &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;`Example: &amp;lt;i&amp;gt;italic&amp;lt;/i&amp;gt; and &amp;lt;b&amp;gt;bold&amp;lt;/b&amp;gt;`&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      result.innerHTML &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      range.setStart(p.firstChild, &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      range.setEnd(p.querySelector(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;).firstChild, &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;window&lt;/span&gt;.getSelection().removeAllRanges();  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;window&lt;/span&gt;.getSelection().addRange(range);  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; method &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; methods) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.write(&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&amp;lt;div&amp;gt;&amp;lt;button onclick=&amp;#34;methods.&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;method&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;()&amp;#34;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;method&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;lt;/button&amp;gt;&amp;lt;/div&amp;gt;`&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  methods.resetExample();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There also exist methods to compare ranges, but these are rarely used. When you need them, please refer to the &lt;a href=&#34;https://dom.spec.whatwg.org/#interface-range&#34;&gt;spec&lt;/a&gt; or &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Range&#34;&gt;MDN manual&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;selection&#34;&gt;Selection&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Range&lt;/code&gt; is a generic object for managing selection ranges. We may create such objects, pass them around &amp;ndash; they do not visually select anything on their own.&lt;/p&gt;
&lt;p&gt;The document selection is represented by &lt;code&gt;Selection&lt;/code&gt; object, that can be obtained as &lt;code&gt;window.getSelection()&lt;/code&gt; or &lt;code&gt;document.getSelection()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A selection may include zero or more ranges. At least, the &lt;a href=&#34;https://www.w3.org/TR/selection-api/&#34;&gt;Selection API specification&lt;/a&gt; says so. In practice though, only Firefox allows to select multiple ranges in the document by using &lt;code&gt;key:Ctrl+click&lt;/code&gt; (&lt;code&gt;key:Cmd+click&lt;/code&gt; for Mac).&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a screenshot of a selection with 3 ranges, made in Firefox:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;selection-firefox.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Other browsers support at maximum 1 range. As we&amp;rsquo;ll see, some of &lt;code&gt;Selection&lt;/code&gt; methods imply that there may be many ranges, but again, in all browsers except Firefox, there&amp;rsquo;s at maximum 1.&lt;/p&gt;
&lt;h3 id=&#34;selection-properties&#34;&gt;Selection properties&lt;/h3&gt;
&lt;p&gt;Similar to a range, a selection has a start, called &amp;ldquo;anchor&amp;rdquo;, and the end, called &amp;ldquo;focus&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;The main selection properties are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;anchorNode&lt;/code&gt; &amp;ndash; the node where the selection starts,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;anchorOffset&lt;/code&gt; &amp;ndash; the offset in &lt;code&gt;anchorNode&lt;/code&gt; where the selection starts,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;focusNode&lt;/code&gt; &amp;ndash; the node where the selection ends,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;focusOffset&lt;/code&gt; &amp;ndash; the offset in &lt;code&gt;focusNode&lt;/code&gt; where the selection ends,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isCollapsed&lt;/code&gt; &amp;ndash; &lt;code&gt;true&lt;/code&gt; if selection selects nothing (empty range), or doesn&amp;rsquo;t exist.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rangeCount&lt;/code&gt; &amp;ndash; count of ranges in the selection, maximum &lt;code&gt;1&lt;/code&gt; in all browsers except Firefox.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are many ways to select the content, depending on the user agent: mouse, hotkeys, taps on a mobile etc.&lt;/p&gt;
&lt;p&gt;Some of them, such as a mouse, allow the same selection can be created in two directions: &amp;ldquo;left-to-right&amp;rdquo; and &amp;ldquo;right-to-left&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;If the start (anchor) of the selection goes in the document before the end (focus), this selection is said to have &amp;ldquo;forward&amp;rdquo; direction.&lt;/p&gt;
&lt;p&gt;E.g. if the user starts selecting with mouse and goes from &amp;ldquo;Example&amp;rdquo; to &amp;ldquo;italic&amp;rdquo;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;selection-direction-forward.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Otherwise, if they go from the end of &amp;ldquo;italic&amp;rdquo; to &amp;ldquo;Example&amp;rdquo;, the selection is directed &amp;ldquo;backward&amp;rdquo;, its focus will be before the anchor:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;selection-direction-backward.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s different from &lt;code&gt;Range&lt;/code&gt; objects that are always directed forward: the range start can&amp;rsquo;t be after its end.&lt;/p&gt;
&lt;h3 id=&#34;selection-events&#34;&gt;Selection events&lt;/h3&gt;
&lt;p&gt;There are events on to keep track of selection:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;elem.onselectstart&lt;/code&gt; &amp;ndash; when a selection starts on &lt;code&gt;elem&lt;/code&gt;, e.g. the user starts moving mouse with pressed button.
&lt;ul&gt;
&lt;li&gt;Preventing the default action makes the selection not start.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.onselectionchange&lt;/code&gt; &amp;ndash; whenever a selection changes.
&lt;ul&gt;
&lt;li&gt;Please note: this handler can be set only on &lt;code&gt;document&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;selection-tracking-demo&#34;&gt;Selection tracking demo&lt;/h4&gt;
&lt;p&gt;Here&amp;rsquo;s a small demo that shows selection boundaries dynamically as it changes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;p&amp;#34;&lt;/span&gt;&amp;gt;Select me: &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;italic&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt; and &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;b&lt;/span&gt;&amp;gt;bold&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;b&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;From &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;from&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;disabled&lt;/span&gt;&amp;gt; – To &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;to&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;disabled&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.onselectionchange &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; {anchorNode, anchorOffset, focusNode, focusOffset} &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.getSelection();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    from.value &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;anchorNode &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; anchorNode.data&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;anchorOffset&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    to.value &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;focusNode &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; focusNode.data&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;focusOffset&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;selection-getting-demo&#34;&gt;Selection getting demo&lt;/h4&gt;
&lt;p&gt;To get the whole selection:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;As text: just call &lt;code&gt;document.getSelection().toString()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;As DOM nodes: get the underlying ranges and call their &lt;code&gt;cloneContents()&lt;/code&gt; method (only first range if we don&amp;rsquo;t support Firefox multiselection).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And here&amp;rsquo;s the demo of getting the selection both as text and as DOM nodes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;p&amp;#34;&lt;/span&gt;&amp;gt;Select me: &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;italic&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt; and &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;b&lt;/span&gt;&amp;gt;bold&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;b&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Cloned: &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;cloned&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;br&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;As text: &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;astext&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.onselectionchange &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; selection &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.getSelection();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    cloned.innerHTML &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; astext.innerHTML &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// Clone DOM nodes from ranges (we support multiselect here)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; selection.rangeCount; i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      cloned.append(selection.getRangeAt(i).cloneContents());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// Get as text
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    astext.innerHTML &lt;span style=&#34;color:#ff79c6&#34;&gt;+=&lt;/span&gt; selection;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;selection-methods&#34;&gt;Selection methods&lt;/h3&gt;
&lt;p&gt;Selection methods to add/remove ranges:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getRangeAt(i)&lt;/code&gt; &amp;ndash; get i-th range, starting from &lt;code&gt;0&lt;/code&gt;. In all browsers except firefox, only &lt;code&gt;0&lt;/code&gt; is used.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;addRange(range)&lt;/code&gt; &amp;ndash; add &lt;code&gt;range&lt;/code&gt; to selection. All browsers except Firefox ignore the call, if the selection already has an associated range.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;removeRange(range)&lt;/code&gt; &amp;ndash; remove &lt;code&gt;range&lt;/code&gt; from the selection.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;removeAllRanges()&lt;/code&gt; &amp;ndash; remove all ranges.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;empty()&lt;/code&gt; &amp;ndash; alias to &lt;code&gt;removeAllRanges&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, there are convenience methods to manipulate the selection range directly, without &lt;code&gt;Range&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;collapse(node, offset)&lt;/code&gt; &amp;ndash; replace selected range with a new one that starts and ends at the given &lt;code&gt;node&lt;/code&gt;, at position &lt;code&gt;offset&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setPosition(node, offset)&lt;/code&gt; &amp;ndash; alias to &lt;code&gt;collapse&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;collapseToStart()&lt;/code&gt; - collapse (replace with an empty range) to selection start,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;collapseToEnd()&lt;/code&gt; - collapse to selection end,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extend(node, offset)&lt;/code&gt; - move focus of the selection to the given &lt;code&gt;node&lt;/code&gt;, position &lt;code&gt;offset&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setBaseAndExtent(anchorNode, anchorOffset, focusNode, focusOffset)&lt;/code&gt; - replace selection range with the given start &lt;code&gt;anchorNode/anchorOffset&lt;/code&gt; and end &lt;code&gt;focusNode/focusOffset&lt;/code&gt;. All content in-between them is selected.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;selectAllChildren(node)&lt;/code&gt; &amp;ndash; select all children of the &lt;code&gt;node&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;deleteFromDocument()&lt;/code&gt; &amp;ndash; remove selected content from the document.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;containsNode(node, allowPartialContainment = false)&lt;/code&gt; &amp;ndash; checks whether the selection contains &lt;code&gt;node&lt;/code&gt; (partially if the second argument is &lt;code&gt;true&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, for many tasks we can call &lt;code&gt;Selection&lt;/code&gt; methods, no need to access the underlying &lt;code&gt;Range&lt;/code&gt; object.&lt;/p&gt;
&lt;p&gt;For example, selecting the whole contents of the paragraph &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;p&amp;#34;&lt;/span&gt;&amp;gt;Select me: &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;italic&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt; and &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;b&lt;/span&gt;&amp;gt;bold&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;b&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// select from 0th child of &amp;lt;p&amp;gt; to the last child
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.getSelection().setBaseAndExtent(p, &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;, p, p.childNodes.length);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The same thing using ranges:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;p&amp;#34;&lt;/span&gt;&amp;gt;Select me: &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;italic&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt; and &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;b&lt;/span&gt;&amp;gt;bold&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;b&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; range &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Range();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  range.selectNodeContents(p); &lt;span style=&#34;color:#6272a4&#34;&gt;// or selectNode(p) to select the &amp;lt;p&amp;gt; tag too
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.getSelection().removeAllRanges(); &lt;span style=&#34;color:#6272a4&#34;&gt;// clear existing selection if any
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.getSelection().addRange(range);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If the selection already exists, empty it first with &lt;code&gt;removeAllRanges()&lt;/code&gt;. And then add ranges. Otherwise, all browsers except Firefox ignore new ranges.&lt;/p&gt;
&lt;p&gt;The exception is some selection methods, that replace the existing selection, like &lt;code&gt;setBaseAndExtent&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;selection-in-form-controls&#34;&gt;Selection in form controls&lt;/h3&gt;
&lt;p&gt;Form elements, such as &lt;code&gt;input&lt;/code&gt; and &lt;code&gt;textarea&lt;/code&gt; provide &lt;a href=&#34;https://html.spec.whatwg.org/#textFieldSelection&#34;&gt;special API for selection&lt;/a&gt;, without &lt;code&gt;Selection&lt;/code&gt; or &lt;code&gt;Range&lt;/code&gt; objects. As an input value is a pure text, not HTML, there&amp;rsquo;s no need for such objects, everything&amp;rsquo;s much simpler.&lt;/p&gt;
&lt;p&gt;Properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;input.selectionStart&lt;/code&gt; &amp;ndash; position of selection start (writeable),&lt;/li&gt;
&lt;li&gt;&lt;code&gt;input.selectionEnd&lt;/code&gt; &amp;ndash; position of selection end (writeable),&lt;/li&gt;
&lt;li&gt;&lt;code&gt;input.selectionDirection&lt;/code&gt; &amp;ndash; selection direction, one of: &amp;ldquo;forward&amp;rdquo;, &amp;ldquo;backward&amp;rdquo; or &amp;ldquo;none&amp;rdquo; (if e.g. selected with a double mouse click),&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Events:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;input.onselect&lt;/code&gt; &amp;ndash; triggers when something is selected.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;input.select()&lt;/code&gt; &amp;ndash; selects everything in the text control (can be &lt;code&gt;textarea&lt;/code&gt; instead of &lt;code&gt;input&lt;/code&gt;),&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;input.setSelectionRange(start, end, [direction])&lt;/code&gt; &amp;ndash; change the selection to span from position &lt;code&gt;start&lt;/code&gt; till &lt;code&gt;end&lt;/code&gt;, in the given direction (optional).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;input.setRangeText(replacement, [start], [end], [selectionMode])&lt;/code&gt; &amp;ndash; replace a range of text with the new text.&lt;/p&gt;
&lt;p&gt;Optional arguments &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt;, if provided, set the range start and end, otherwise user selection is used.&lt;/p&gt;
&lt;p&gt;The last argument, &lt;code&gt;selectionMode&lt;/code&gt;, determines how the selection will be set after the text has been replaced. The possible values are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;select&amp;quot;&lt;/code&gt; &amp;ndash; the newly inserted text will be selected.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;start&amp;quot;&lt;/code&gt; &amp;ndash; the selection range collapses just before the inserted text (the cursor will be immediately before it).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;end&amp;quot;&lt;/code&gt; &amp;ndash; the selection range collapses just after the inserted text (the cursor will be right after it).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;preserve&amp;quot;&lt;/code&gt; &amp;ndash; attempts to preserve the selection. This is the default.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now let&amp;rsquo;s see these methods in action.&lt;/p&gt;
&lt;h4 id=&#34;example-tracking-selection&#34;&gt;Example: tracking selection&lt;/h4&gt;
&lt;p&gt;For example, this code uses &lt;code&gt;onselect&lt;/code&gt; event to track selection:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;textarea&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;area&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;width:80%;height:60px&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Selecting in this text updates values below.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;textarea&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;br&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;From &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;from&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;disabled&lt;/span&gt;&amp;gt; – To &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;to&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;disabled&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  area.onselect &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    from.value &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; area.selectionStart;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    to.value &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; area.selectionEnd;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Please note:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;onselect&lt;/code&gt; triggers when something is selected, but not when the selection is removed.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;document.onselectionchange&lt;/code&gt; event should not trigger for selections inside a form control, according to the &lt;a href=&#34;https://w3c.github.io/selection-api/#dfn-selectionchange&#34;&gt;spec&lt;/a&gt;, as it&amp;rsquo;s not related to &lt;code&gt;document&lt;/code&gt; selection and ranges. Some browsers generate it, but we shouldn&amp;rsquo;t rely on it.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;example-moving-cursor&#34;&gt;Example: moving cursor&lt;/h4&gt;
&lt;p&gt;We can change &lt;code&gt;selectionStart&lt;/code&gt; and &lt;code&gt;selectionEnd&lt;/code&gt;, that sets the selection.&lt;/p&gt;
&lt;p&gt;An important edge case is when &lt;code&gt;selectionStart&lt;/code&gt; and &lt;code&gt;selectionEnd&lt;/code&gt; equal each other. Then it&amp;rsquo;s exactly the cursor position. Or, to rephrase, when nothing is selected, the selection is collapsed at the cursor position.&lt;/p&gt;
&lt;p&gt;So, by setting &lt;code&gt;selectionStart&lt;/code&gt; and &lt;code&gt;selectionEnd&lt;/code&gt; to the same value, we move the cursor.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;textarea&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;area&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;width:80%;height:60px&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Focus on me, the cursor will be at position 10.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;textarea&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  area.onfocus &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; () =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// zero delay setTimeout to run after browser &amp;#34;focus&amp;#34; action finishes
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    setTimeout(() =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#6272a4&#34;&gt;// we can set any selection
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#6272a4&#34;&gt;// if start=end, the cursor it exactly at that place
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;      area.selectionStart &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; area.selectionEnd &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;example-modifying-selection&#34;&gt;Example: modifying selection&lt;/h4&gt;
&lt;p&gt;To modify the content of the selection, we can use &lt;code&gt;input.setRangeText()&lt;/code&gt; method. Of course, we can read &lt;code&gt;selectionStart/End&lt;/code&gt; and, with the knowledge of the selection, change the corresponding substring of &lt;code&gt;value&lt;/code&gt;, but &lt;code&gt;setRangeText&lt;/code&gt; is more powerful and often more convenient.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s a somewhat complex method. In its simplest one-argument form it replaces the user selected range and removes the selection.&lt;/p&gt;
&lt;p&gt;For example, here the user selection will be wrapped by &lt;code&gt;*...*&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;input&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;width:200px&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Select here and click the button&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;button&amp;#34;&lt;/span&gt;&amp;gt;Wrap selection in stars *...*&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;button.onclick &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; () =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (input.selectionStart &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; input.selectionEnd) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// nothing is selected
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; selected &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; input.value.slice(input.selectionStart, input.selectionEnd);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  input.setRangeText(&lt;span style=&#34;color:#f1fa8c&#34;&gt;`*&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;selected&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;*`&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With more arguments, we can set range &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In this example we find &lt;code&gt;&amp;quot;THIS&amp;quot;&lt;/code&gt; in the input text, replace it and keep the replacement selected:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;input&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;width:200px&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Replace THIS in text&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;button&amp;#34;&lt;/span&gt;&amp;gt;Replace THIS&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;button.onclick &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; () =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; pos &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; input.value.indexOf(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;THIS&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (pos &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    input.setRangeText(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;*THIS*&amp;#34;&lt;/span&gt;, pos, pos &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;select&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    input.focus(); &lt;span style=&#34;color:#6272a4&#34;&gt;// focus to make selection visible
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;example-insert-at-cursor&#34;&gt;Example: insert at cursor&lt;/h4&gt;
&lt;p&gt;If nothing is selected, or we use equal &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; in &lt;code&gt;setRangeText&lt;/code&gt;, then the new text is just inserted, nothing is removed.&lt;/p&gt;
&lt;p&gt;We can also insert something &amp;ldquo;at the cursor&amp;rdquo; using &lt;code&gt;setRangeText&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a button that inserts &lt;code&gt;&amp;quot;HELLO&amp;quot;&lt;/code&gt; at the cursor position and puts the cursor immediately after it. If the selection is not empty, then it gets replaced (we can detect it by comparing &lt;code&gt;selectionStart!=selectionEnd&lt;/code&gt; and do something else instead):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;input&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;width:200px&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Text Text Text Text Text&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;button&amp;#34;&lt;/span&gt;&amp;gt;Insert &amp;#34;HELLO&amp;#34; at cursor&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;button&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  button.onclick &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; () =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    input.setRangeText(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;HELLO&amp;#34;&lt;/span&gt;, input.selectionStart, input.selectionEnd, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;end&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    input.focus();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;making-unselectable&#34;&gt;Making unselectable&lt;/h3&gt;
&lt;p&gt;To make something unselectable, there are three ways:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Use CSS property &lt;code&gt;user-select: none&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;style&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;#elem {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;user-select&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;none&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;style&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;Selectable &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;elem&amp;#34;&lt;/span&gt;&amp;gt;Unselectable&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt; Selectable&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This doesn&amp;rsquo;t allow the selection to start at &lt;code&gt;elem&lt;/code&gt;. But the user may start the selection elsewhere and include &lt;code&gt;elem&lt;/code&gt; into it.&lt;/p&gt;
&lt;p&gt;Then &lt;code&gt;elem&lt;/code&gt; will become a part of &lt;code&gt;document.getSelection()&lt;/code&gt;, so the selection actually happens, but its content is usually ignored in copy-paste.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Prevent default action in &lt;code&gt;onselectstart&lt;/code&gt; or &lt;code&gt;mousedown&lt;/code&gt; events.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;Selectable &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;elem&amp;#34;&lt;/span&gt;&amp;gt;Unselectable&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt; Selectable&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  elem.onselectstart &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; () =&amp;gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This prevents starting the selection on &lt;code&gt;elem&lt;/code&gt;, but the visitor may start it at another element, then extend to &lt;code&gt;elem&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s convenient when there&amp;rsquo;s another event handler on the same action that triggers the select (e.g. &lt;code&gt;mousedown&lt;/code&gt;). So we disable the selection to avoid conflict, still allowing &lt;code&gt;elem&lt;/code&gt; contents to be copied.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We can also clear the selection post-factum after it happens with &lt;code&gt;document.getSelection().empty()&lt;/code&gt;. That&amp;rsquo;s rarely used, as this causes unwanted blinking as the selection appears-disappears.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;references-1&#34;&gt;References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://dom.spec.whatwg.org/#ranges&#34;&gt;DOM spec: Range&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.w3.org/TR/selection-api/#dom-globaleventhandlers-onselectstart&#34;&gt;Selection API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#textFieldSelection&#34;&gt;HTML spec: APIs for the text control selections&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;summary-28&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;We covered two different APIs for selections:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;For document: &lt;code&gt;Selection&lt;/code&gt; and &lt;code&gt;Range&lt;/code&gt; objects.&lt;/li&gt;
&lt;li&gt;For &lt;code&gt;input&lt;/code&gt;, &lt;code&gt;textarea&lt;/code&gt;: additional methods and properties.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The second API is very simple, as it works with text.&lt;/p&gt;
&lt;p&gt;The most used recipes are probably:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Getting the selection:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; selection &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.getSelection();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; cloned &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;/* element to clone the selected nodes to */&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// then apply Range methods to selection.getRangeAt(0)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// or, like here, to all ranges to support multi-select
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; selection.rangeCount; i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  cloned.append(selection.getRangeAt(i).cloneContents());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;Setting the selection:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; selection &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.getSelection();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// directly:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;selection.setBaseAndExtent(...from...to...);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// or we can create a range and:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;selection.removeAllRanges();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;selection.addRange(range);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And finally, about the cursor. The cursor position in editable elements, like &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; is always at the start or the end of the selection. We can use it  to get cursor position or to move the cursor by setting &lt;code&gt;elem.selectionStart&lt;/code&gt; and &lt;code&gt;elem.selectionEnd&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;event-loop-microtasks-and-macrotasks&#34;&gt;Event loop: microtasks and macrotasks&lt;/h2&gt;
&lt;p&gt;Browser JavaScript execution flow, as well as in Node.js, is based on an &lt;em&gt;event loop&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Understanding how event loop works is important for optimizations, and sometimes for the right architecture.&lt;/p&gt;
&lt;p&gt;In this chapter we first cover theoretical details about how things work, and then see practical applications of that knowledge.&lt;/p&gt;
&lt;h3 id=&#34;event-loop&#34;&gt;Event Loop&lt;/h3&gt;
&lt;p&gt;The concept of &lt;em&gt;event loop&lt;/em&gt; is very simple. There&amp;rsquo;s an endless loop, when JavaScript engine waits for tasks, executes them and then sleeps waiting for more tasks.&lt;/p&gt;
&lt;p&gt;The general algorithm of the engine:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;While there are tasks:
&lt;ul&gt;
&lt;li&gt;execute them, starting with the oldest task.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sleep until a task appears, then go to 1.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That&amp;rsquo;s a formalization for what we see when browsing a page. JavaScript engine does nothing most of the time, only runs if a script/handler/event activates.&lt;/p&gt;
&lt;p&gt;Examples of tasks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When an external script &lt;code&gt;&amp;lt;script src=&amp;quot;...&amp;quot;&amp;gt;&lt;/code&gt; loads, the task is to execute it.&lt;/li&gt;
&lt;li&gt;When a user moves their mouse, the task is to dispatch &lt;code&gt;mousemove&lt;/code&gt; event and execute handlers.&lt;/li&gt;
&lt;li&gt;When the time is due for a scheduled &lt;code&gt;setTimeout&lt;/code&gt;, the task is to run its callback.&lt;/li&gt;
&lt;li&gt;&amp;hellip;and so on.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tasks are set &amp;ndash; the engine handles them &amp;ndash; then waits for more tasks (while sleeping and consuming close to zero CPU).&lt;/p&gt;
&lt;p&gt;It may happen that a task comes while the engine is busy, then it&amp;rsquo;s enqueued.&lt;/p&gt;
&lt;p&gt;The tasks form a queue, so-called &amp;ldquo;macrotask queue&amp;rdquo; (v8 term):&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;eventLoop.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;For instance, while the engine is busy executing a &lt;code&gt;script&lt;/code&gt;, a user may move their mouse causing &lt;code&gt;mousemove&lt;/code&gt;, and &lt;code&gt;setTimeout&lt;/code&gt; may be due and so on, these tasks form a queue, as illustrated on the picture above.&lt;/p&gt;
&lt;p&gt;Tasks from the queue are processed on &amp;ldquo;first come – first served&amp;rdquo; basis. When the engine browser is done with the &lt;code&gt;script&lt;/code&gt;, it handles &lt;code&gt;mousemove&lt;/code&gt; event, then &lt;code&gt;setTimeout&lt;/code&gt; handler, and so on.&lt;/p&gt;
&lt;p&gt;So far, quite simple, right?&lt;/p&gt;
&lt;p&gt;Two more details:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Rendering never happens while the engine executes a task. Doesn&amp;rsquo;t matter if the task takes a long time. Changes to DOM are painted only after the task is complete.&lt;/li&gt;
&lt;li&gt;If a task takes too long, the browser can&amp;rsquo;t do other tasks, process user events, so after a time it raises an alert like &amp;ldquo;Page Unresponsive&amp;rdquo; suggesting to kill the task with the whole page. That happens when there are a lot of complex calculations or a programming error leading to infinite loop.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That was a theory. Now let&amp;rsquo;s see how we can apply that knowledge.&lt;/p&gt;
&lt;h3 id=&#34;use-case-1-splitting-cpu-hungry-tasks&#34;&gt;Use-case 1: splitting CPU-hungry tasks&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s say we have a CPU-hungry task.&lt;/p&gt;
&lt;p&gt;For example, syntax-highlighting (used to colorize code examples on this page) is quite CPU-heavy. To highlight the code, it performs the analysis, creates many colored elements, adds them to the document &amp;ndash; for a large amount of text that takes a lot of time.&lt;/p&gt;
&lt;p&gt;While the engine is busy with syntax highlighting, it can&amp;rsquo;t do other DOM-related stuff, process user events, etc. It may even cause the browser to &amp;ldquo;hiccup&amp;rdquo; or even &amp;ldquo;hang&amp;rdquo; for a bit, which is unacceptable.&lt;/p&gt;
&lt;p&gt;We can avoid problems by splitting the big task into pieces. Highlight first 100 lines, then schedule &lt;code&gt;setTimeout&lt;/code&gt; (with zero-delay) for the next 100 lines, and so on.&lt;/p&gt;
&lt;p&gt;To demonstrate this approach, for the sake of simplicity, instead of text-highlighting, let&amp;rsquo;s take a function that counts from &lt;code&gt;1&lt;/code&gt; to &lt;code&gt;1000000000&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you run the code below, the engine will &amp;ldquo;hang&amp;rdquo; for some time. For server-side JS that&amp;rsquo;s clearly noticeable, and if you are running it in-browser, then try to click other buttons on the page &amp;ndash; you&amp;rsquo;ll see that no other events get handled until the counting finishes.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; start &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Date&lt;/span&gt;.now();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; count() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// do a heavy job
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; j &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1e9&lt;/span&gt;; j&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Done in &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Date&lt;/span&gt;.now() &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; start) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;ms&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;count();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The browser may even show a &amp;ldquo;the script takes too long&amp;rdquo; warning.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s split the job using nested &lt;code&gt;setTimeout&lt;/code&gt; calls:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; start &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Date&lt;/span&gt;.now();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; count() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// do a piece of the heavy job (*)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;do&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } &lt;span style=&#34;color:#ff79c6&#34;&gt;while&lt;/span&gt; (i &lt;span style=&#34;color:#ff79c6&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1e6&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1e9&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Done in &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Date&lt;/span&gt;.now() &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; start) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;ms&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    setTimeout(count); &lt;span style=&#34;color:#6272a4&#34;&gt;// schedule the new call (**)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;count();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now the browser interface is fully functional during the &amp;ldquo;counting&amp;rdquo; process.&lt;/p&gt;
&lt;p&gt;A single run of &lt;code&gt;count&lt;/code&gt; does a part of the job &lt;code&gt;(*)&lt;/code&gt;, and then re-schedules itself &lt;code&gt;(**)&lt;/code&gt; if needed:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;First run counts: &lt;code&gt;i=1...1000000&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Second run counts: &lt;code&gt;i=1000001..2000000&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&amp;hellip;and so on.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now, if a new side task (e.g. &lt;code&gt;onclick&lt;/code&gt; event) appears while the engine is busy executing part 1, it gets queued and then executes when part 1 finished, before the next part. Periodic returns to the event loop between &lt;code&gt;count&lt;/code&gt; executions provide just enough &amp;ldquo;air&amp;rdquo; for the JavaScript engine to do something else, to react to other user actions.&lt;/p&gt;
&lt;p&gt;The notable thing is that both variants &amp;ndash; with and without splitting the job by &lt;code&gt;setTimeout&lt;/code&gt; &amp;ndash; are comparable in speed. There&amp;rsquo;s not much difference in the overall counting time.&lt;/p&gt;
&lt;p&gt;To make them closer, let&amp;rsquo;s make an improvement.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll move the scheduling to the beginning of the &lt;code&gt;count()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; start &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Date&lt;/span&gt;.now();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; count() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// move the scheduling to the beginning
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1e9&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1e6&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    setTimeout(count); &lt;span style=&#34;color:#6272a4&#34;&gt;// schedule the new call
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;do&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } &lt;span style=&#34;color:#ff79c6&#34;&gt;while&lt;/span&gt; (i &lt;span style=&#34;color:#ff79c6&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1e6&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1e9&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Done in &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Date&lt;/span&gt;.now() &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; start) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;ms&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;count();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now when we start to &lt;code&gt;count()&lt;/code&gt; and see that we&amp;rsquo;ll need to &lt;code&gt;count()&lt;/code&gt; more, we schedule that immediately, before doing the job.&lt;/p&gt;
&lt;p&gt;If you run it, it&amp;rsquo;s easy to notice that it takes significantly less time.&lt;/p&gt;
&lt;p&gt;Why?&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s simple: as you remember, there&amp;rsquo;s the in-browser minimal delay of 4ms for many nested &lt;code&gt;setTimeout&lt;/code&gt; calls. Even if we set &lt;code&gt;0&lt;/code&gt;, it&amp;rsquo;s &lt;code&gt;4ms&lt;/code&gt; (or a bit more). So the earlier we schedule it - the faster it runs.&lt;/p&gt;
&lt;p&gt;Finally, we&amp;rsquo;ve split a CPU-hungry task into parts - now it doesn&amp;rsquo;t block the user interface. And its overall execution time isn&amp;rsquo;t much longer.&lt;/p&gt;
&lt;h3 id=&#34;use-case-2-progress-indication&#34;&gt;Use case 2: progress indication&lt;/h3&gt;
&lt;p&gt;Another benefit of splitting heavy tasks for browser scripts is that we can show progress indication.&lt;/p&gt;
&lt;p&gt;Usually the browser renders after the currently running code is complete. Doesn&amp;rsquo;t matter if the task takes a long time. Changes to DOM are painted only after the task is finished.&lt;/p&gt;
&lt;p&gt;On one hand, that&amp;rsquo;s great, because our function may create many elements, add them one-by-one to the document and change their styles &amp;ndash; the visitor won&amp;rsquo;t see any &amp;ldquo;intermediate&amp;rdquo;, unfinished state. An important thing, right?&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the demo, the changes to &lt;code&gt;i&lt;/code&gt; won&amp;rsquo;t show up until the function finishes, so we&amp;rsquo;ll see only the last value:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;progress&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; count() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1e6&lt;/span&gt;; i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      progress.innerHTML &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  count();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;hellip;But we also may want to show something during the task, e.g. a progress bar.&lt;/p&gt;
&lt;p&gt;If we split the heavy task into pieces using &lt;code&gt;setTimeout&lt;/code&gt;, then changes are painted out in-between them.&lt;/p&gt;
&lt;p&gt;This looks prettier:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;progress&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; count() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// do a piece of the heavy job (*)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;do&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      progress.innerHTML &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#ff79c6&#34;&gt;while&lt;/span&gt; (i &lt;span style=&#34;color:#ff79c6&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1e3&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1e7&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      setTimeout(count);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  count();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; shows increasing values of &lt;code&gt;i&lt;/code&gt;, a kind of a progress bar.&lt;/p&gt;
&lt;h3 id=&#34;use-case-3-doing-something-after-the-event&#34;&gt;Use case 3: doing something after the event&lt;/h3&gt;
&lt;p&gt;In an event handler we may decide to postpone some actions until the event bubbled up and was handled on all levels. We can do that by wrapping the code in zero delay &lt;code&gt;setTimeout&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the chapter &lt;a href=&#34;info:dispatch-events&#34;&gt;info:dispatch-events&lt;/a&gt; we saw an example: custom event &lt;code&gt;menu-open&lt;/code&gt; is dispatched in &lt;code&gt;setTimeout&lt;/code&gt;, so that it happens after the &amp;ldquo;click&amp;rdquo; event is fully handled.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;menu.onclick &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// create a custom event with the clicked menu item data
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; customEvent &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; CustomEvent(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;menu-open&amp;#34;&lt;/span&gt;, {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    bubbles&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// dispatch the custom event asynchronously
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  setTimeout(() =&amp;gt; menu.dispatchEvent(customEvent));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;macrotasks-and-microtasks&#34;&gt;Macrotasks and Microtasks&lt;/h3&gt;
&lt;p&gt;Along with &lt;em&gt;macrotasks&lt;/em&gt;, described in this chapter, there exist &lt;em&gt;microtasks&lt;/em&gt;, mentioned in the chapter &lt;a href=&#34;info:microtask-queue&#34;&gt;info:microtask-queue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Microtasks come solely from our code. They are usually created by promises: an execution of &lt;code&gt;.then/catch/finally&lt;/code&gt; handler becomes a microtask. Microtasks are used &amp;ldquo;under the cover&amp;rdquo; of &lt;code&gt;await&lt;/code&gt; as well, as it&amp;rsquo;s another form of promise handling.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s also a special function &lt;code&gt;queueMicrotask(func)&lt;/code&gt; that queues &lt;code&gt;func&lt;/code&gt; for execution in the microtask queue.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Immediately after every &lt;em&gt;macrotask&lt;/em&gt;, the engine executes all tasks from &lt;em&gt;microtask&lt;/em&gt; queue, prior to running any other macrotasks or rendering or anything else.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For instance, take a look:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;setTimeout(() =&amp;gt; alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;timeout&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Promise&lt;/span&gt;.resolve()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .then(() =&amp;gt; alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;promise&amp;#34;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;code&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What&amp;rsquo;s going to be the order here?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;code&lt;/code&gt; shows first, because it&amp;rsquo;s a regular synchronous call.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;promise&lt;/code&gt; shows second, because &lt;code&gt;.then&lt;/code&gt; passes through the microtask queue, and runs after the current code.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;timeout&lt;/code&gt; shows last, because it&amp;rsquo;s a macrotask.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The richer event loop picture looks like this (order is from top to bottom, that is: the script first, then microtasks, rendering and so on):&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;eventLoop-full.svg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;All microtasks are completed before any other event handling or rendering or any other macrotask takes place.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s important, as it guarantees that the application environment is basically the same (no mouse coordinate changes, no new network data, etc) between microtasks.&lt;/p&gt;
&lt;p&gt;If we&amp;rsquo;d like to execute a function asynchronously (after the current code), but before changes are rendered or new events handled, we can schedule it with &lt;code&gt;queueMicrotask&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s an example with &amp;ldquo;counting progress bar&amp;rdquo;, similar to the one shown previously, but &lt;code&gt;queueMicrotask&lt;/code&gt; is used instead of &lt;code&gt;setTimeout&lt;/code&gt;. You can see that it renders at the very end. Just like the synchronous code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;progress&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; count() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// do a piece of the heavy job (*)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;do&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      progress.innerHTML &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; i;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#ff79c6&#34;&gt;while&lt;/span&gt; (i &lt;span style=&#34;color:#ff79c6&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1e3&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1e6&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      queueMicrotask(count);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  count();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;summary-29&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;The more detailed algorithm of the event loop (though still simplified compare to the &lt;a href=&#34;https://html.spec.whatwg.org/multipage/webappapis.html#event-loop-processing-model&#34;&gt;specification&lt;/a&gt;):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Dequeue and run the oldest task from the &lt;em&gt;macrotask&lt;/em&gt; queue (e.g. &amp;ldquo;script&amp;rdquo;).&lt;/li&gt;
&lt;li&gt;Execute all &lt;em&gt;microtasks&lt;/em&gt;:
&lt;ul&gt;
&lt;li&gt;While the microtask queue is not empty:
&lt;ul&gt;
&lt;li&gt;Dequeue and run the oldest microtask.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Render changes if any.&lt;/li&gt;
&lt;li&gt;If the macrotask queue is empty, wait till a macrotask appears.&lt;/li&gt;
&lt;li&gt;Go to step 1.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To schedule a new &lt;em&gt;macrotask&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use zero delayed &lt;code&gt;setTimeout(f)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That may be used to split a big calculation-heavy task into pieces, for the browser to be able to react on user events and show progress between them.&lt;/p&gt;
&lt;p&gt;Also, used in event handlers to schedule an action after the event is fully handled (bubbling done).&lt;/p&gt;
&lt;p&gt;To schedule a new &lt;em&gt;microtask&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;queueMicrotask(f)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Also promise handlers go through the microtask queue.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There&amp;rsquo;s no UI or network event handling between microtasks: they run immediately one after another.&lt;/p&gt;
&lt;p&gt;So one may want to &lt;code&gt;queueMicrotask&lt;/code&gt; to execute a function asynchronously, but within the environment state.&lt;/p&gt;
&lt;p&gt;For long heavy calculations that shouldn&amp;rsquo;t block the event loop, we can use &lt;a href=&#34;https://html.spec.whatwg.org/multipage/workers.html&#34;&gt;Web Workers&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s a way to run code in another, parallel thread.&lt;/p&gt;
&lt;p&gt;Web Workers can exchange messages with the main process, but they have their own variables, and their own event loop.&lt;/p&gt;
&lt;p&gt;Web Workers do not have access to DOM, so they are useful, mainly, for calculations, to use multiple CPU cores simultaneously.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;That&amp;rsquo;s Alot! We thank the authors from &lt;a href=&#34;https://javascript.info/&#34;&gt;https://javascript.info/&lt;/a&gt; For supporting this lesson, and without them, I don&amp;rsquo;t think It would be possible to do such a huge work! In the next tutorial, We&amp;rsquo;ll discuss how we can interact With websites in order to make our modern development success.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Web Code Minification</title>
<link>https://blog.nushankodikara.com/blog/web-code-minification/</link>
<pubDate>Sat, 25 Jul 2020 06:00:00 +0530</pubDate>
      
      <guid>https://blog.nushankodikara.com/blog/web-code-minification/</guid>
<description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Code minification is a process modern web developers use on developments to speed up the loading of the codes, reduce the code size and decrease the ability to reverse-engineer the code. And it&amp;rsquo;s pretty easy to use too, but sadly not most of the developers know how to do it themselves. Let&amp;rsquo;s Explore Shall we.&lt;/p&gt;
&lt;h2 id=&#34;minification&#34;&gt;Minification&lt;/h2&gt;
&lt;p&gt;Now, We use an online tool for this process, &lt;a href=&#34;https://www.willpeavy.com/tools/minifier/&#34;&gt;https://www.willpeavy.com/tools/minifier/&lt;/a&gt; Goto this website for the tool, and It&amp;rsquo;s pretty simple to use but highly effective. Let&amp;rsquo;s consider a huge HTML code like this.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200725_01.jpg&#34; alt=&#34;Minifier&#34;&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s see how we can minify the code.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;lang&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;en&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;data-theme&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;light&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;head&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;title&lt;/span&gt;&amp;gt;Tecinpact | Page&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;title&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;charset&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;utf-8&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;generator&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;content&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Hugo 0.73.0&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;viewport&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;content&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;width=device-width,initial-scale=1,viewport-fit=cover&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;description&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;content&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Welcome Visitor! here you can find out new technologies, Reviews, suggestions about technologies and step-by-step guides to the EASY World. If you need any help, Just contact Me.&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;stylesheet&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;https://www.tecinpact.tk/css/style.min.67cd718c0a3c8009c771494d381fb7128246a454bd0518fed97cb65d257db948.css&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;integrity&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sha256-Z81xjAo8gAnHcUlNOB+3EoJGpFS9BRj+2Xy2XSV9uUg=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;crossorigin&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;anonymous&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;text/css&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;stylesheet&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;integrity&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;sha384-wvfXpqpZZVQGK6TAh5PVlGOfQNHSoD2xbE+QkPxCAFlNEevoEH3Sl0sibVcOQVnN&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;crossorigin&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;anonymous&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;shortcut icon&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;https://www.tecinpact.tk/favicons/favicon.ico&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;image/x-icon&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;apple-touch-icon&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;sizes&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;180x180&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;https://www.tecinpact.tk/favicons/apple-touch-icon.png&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;icon&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;image/png&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;sizes&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;32x32&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;https://www.tecinpact.tk/favicons/favicon-32x32.png&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;icon&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;image/png&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;sizes&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;16x16&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;https://www.tecinpact.tk/favicons/favicon-16x16.png&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;canonical&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;https://www.tecinpact.tk/&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;text/javascript&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;https://www.tecinpact.tk/js/anatole-header.min.c275265a259296f3dd50e8236a77fcbcadb1dbb9597d3045c675dcc2c7c58a93.js&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;integrity&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sha256-wnUmWiWSlvPdUOgjanf8vK2x27lZfTBFxnXcwsfFipM=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;crossorigin&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;anonymous&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;twitter:card&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;content&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;summary_large_image&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;twitter:image&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;content&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://www.tecinpact.tk/images/site-feature-image.png&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;twitter:title&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;content&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Page&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;twitter:description&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;content&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;TECINPACT Technology Guide&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;head&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sidebar animated fadeInDown&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;logo-title&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;title&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;img&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;https://www.tecinpact.tk/images/profile.jpg&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;alt&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;profile picture&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/&lt;/span&gt;&amp;gt;I&amp;#39;m Nushan Kodikara&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;description&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;Welcome Visitor! here you can find out new technologies, Reviews, suggestions about technologies and step-by-step guides to the EASY World. If you need any help, Just contact Me.&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;ul&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;social-links&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;https://www.facebook.com/Tecinpact&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;me&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;aria-label&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;Facebook&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fa fa-2x fa-facebook&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;aria-hidden&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;true&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;https://twitter.com/Tecinpact&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;me&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;aria-label&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;Twitter&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fa fa-2x fa-twitter&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;aria-hidden&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;true&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;https://github.com/Tecinpact&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;me&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;aria-label&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;GitHub&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fa fa-2x fa-github&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;aria-hidden&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;true&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;https://t.me/tecinpact&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;me&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;aria-label&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;Telegram&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fa fa-2x fa-telegram&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;aria-hidden&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;true&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;https://wa.me/94719988189&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;me&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;aria-label&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;Whatsapp&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fa fa-2x fa-whatsapp&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;aria-hidden&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;true&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;https://www.instagram.com/Tecinpact&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;me&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;aria-label&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;instagram&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fa fa-2x fa-instagram&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;aria-hidden&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;true&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;mailto:tecinpactagencies@gmail.com&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;me&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;aria-label&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;e-mail&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fa fa-2x fa-envelope&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;aria-hidden&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;true&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;ul&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;footer&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;by_farbox&lt;/span&gt;&amp;gt;&amp;amp;copy; Tecinpact 2020&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;main&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;page-top animated fadeInDown&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;ul&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;nav&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;current&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/&lt;/span&gt;&amp;gt;Home&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/post/&lt;/span&gt;&amp;gt;Posts&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/about/&lt;/span&gt;&amp;gt;About&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/portfolio/&lt;/span&gt;&amp;gt;Portfolio&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/search/&lt;/span&gt;&amp;gt;Search&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;ul&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;themeswitcher&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;theme-switch&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;title&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Switch Theme&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fa fa-adjust fa-fw&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;aria-hidden&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;true&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;autopagerize_page_element&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;content&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;post animated fadeInDown&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-title&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/post/js-for-modern-web-development/&lt;/span&gt;&amp;gt;Js for Modern Web Development&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-content&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;p_part&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;Introduction Here we are at the end of the modern web development course, At the right basics of the language which make the web interactive and functional.&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/post/js-for-modern-web-development/&lt;/span&gt;&amp;gt;[Read More]&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;p_part&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-footer&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;meta&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;info&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fa fa-sun-o&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;date&lt;/span&gt;&amp;gt;Thu, Jul 23, 2020&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/web-development/&lt;/span&gt;&amp;gt;web development&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/html/&lt;/span&gt;&amp;gt;HTML&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/zero-to-hero/&lt;/span&gt;&amp;gt;Zero To Hero&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/crash-course/&lt;/span&gt;&amp;gt;Crash Course&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;post animated fadeInDown&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-title&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/post/download-youtube-videos-2020/&lt;/span&gt;&amp;gt;Download Youtube Videos 2020&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-content&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;p_part&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;Introduction Let&amp;amp;rsquo;s be real, We need to download Youtube Videos for so many reasons, Maybe mp3 from youtube, And we still don&amp;amp;rsquo;t have a clear way, But today I&amp;amp;rsquo;m here to change that, I Found some interesting apps and websites which can download From youtube directly as video or Audio.&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/post/download-youtube-videos-2020/&lt;/span&gt;&amp;gt;[Read More]&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;p_part&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-footer&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;meta&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;info&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fa fa-sun-o&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;date&lt;/span&gt;&amp;gt;Wed, Jul 22, 2020&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/android/&lt;/span&gt;&amp;gt;Android&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/windows/&lt;/span&gt;&amp;gt;Windows&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/mac/&lt;/span&gt;&amp;gt;Mac&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/ios/&lt;/span&gt;&amp;gt;IOS&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/youtube/&lt;/span&gt;&amp;gt;Youtube&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;post animated fadeInDown&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-title&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/post/scss-for-modern-web-development/&lt;/span&gt;&amp;gt;Scss for Modern Web Development (Supercharged CSS)&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-content&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;p_part&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;Introduction If you noticed, I Didn&amp;amp;rsquo;t mentioned css for browser types in our previous CSS tutorial, The case is, I don&amp;amp;rsquo;t want to, SCSS is doing everything for us so why should we even bother?&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/post/scss-for-modern-web-development/&lt;/span&gt;&amp;gt;[Read More]&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;p_part&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-footer&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;meta&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;info&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fa fa-sun-o&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;date&lt;/span&gt;&amp;gt;Tue, Jul 21, 2020&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/web-development/&lt;/span&gt;&amp;gt;web development&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/scss/&lt;/span&gt;&amp;gt;SCSS&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/zero-to-hero/&lt;/span&gt;&amp;gt;Zero To Hero&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/crash-course/&lt;/span&gt;&amp;gt;Crash Course&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;post animated fadeInDown&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-title&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/post/create-an-eco-system-with-join/&lt;/span&gt;&amp;gt;Create an Eco System With Join by joaoapps&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-content&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;p_part&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;Introduction Let&amp;amp;rsquo;s be real, We all like to work in one place but access all of our devices, Apple has a solution for this but what if you don&amp;amp;rsquo;t have an apple eco system?&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/post/create-an-eco-system-with-join/&lt;/span&gt;&amp;gt;[Read More]&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;p_part&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-footer&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;meta&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;info&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fa fa-sun-o&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;date&lt;/span&gt;&amp;gt;Mon, Jul 20, 2020&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/android/&lt;/span&gt;&amp;gt;Android&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/windows/&lt;/span&gt;&amp;gt;Windows&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/ecosystem/&lt;/span&gt;&amp;gt;EcoSystem&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/apple/&lt;/span&gt;&amp;gt;Apple&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;post animated fadeInDown&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-title&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/post/storage-free-cloud-life-2020/&lt;/span&gt;&amp;gt;Storage Free Cloud Life 2020&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-content&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;p_part&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;Introduction Storage, in other words, Information had evolved in to almost to be a basic need of modern human life, Everything form studies, household things, social awareness programs and pretty much anything you name, has a digital counterpart that stored somewhere in the world, And as humans, we have to constantly phrase and read them to keep up with the modern society, and sometimes, It&amp;amp;rsquo;s a pain.&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/post/storage-free-cloud-life-2020/&lt;/span&gt;&amp;gt;[Read More]&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;p_part&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-footer&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;meta&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;info&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fa fa-sun-o&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;date&lt;/span&gt;&amp;gt;Sun, Jul 19, 2020&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;post animated fadeInDown&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-title&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/post/css-for-modern-web-development/&lt;/span&gt;&amp;gt;CSS for Modern Web Development (Zero-To-Hero)&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-content&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;p_part&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;Introduction Well well, here we are in the section of styling our HTML Page, if you don&amp;amp;rsquo;t know what HTML is, Check HERE for the HTML Course on modern web development, Today we&amp;amp;rsquo;re using CSS and HTML knowledge to create a beautiful looking website.&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/post/css-for-modern-web-development/&lt;/span&gt;&amp;gt;[Read More]&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;p_part&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-footer&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;meta&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;info&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fa fa-sun-o&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;date&lt;/span&gt;&amp;gt;Sat, Jul 18, 2020&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/web-development/&lt;/span&gt;&amp;gt;web development&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/css/&lt;/span&gt;&amp;gt;CSS&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/zero-to-hero/&lt;/span&gt;&amp;gt;Zero To Hero&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/crash-course/&lt;/span&gt;&amp;gt;Crash Course&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;post animated fadeInDown&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-title&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/post/adobe-softwares-ultimate-list-with-crack-2020/&lt;/span&gt;&amp;gt;Ultimate Adobe Softwares List With Universal Crack 2020&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-content&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;p_part&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;Introduction We all have used adobe software in some point of our lives and wandered how many others there are to explore.&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/post/adobe-softwares-ultimate-list-with-crack-2020/&lt;/span&gt;&amp;gt;[Read More]&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;p_part&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-footer&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;meta&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;info&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fa fa-sun-o&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;date&lt;/span&gt;&amp;gt;Fri, Jul 17, 2020&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/windows/&lt;/span&gt;&amp;gt;Windows&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/software-review/&lt;/span&gt;&amp;gt;Software Review&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/android/&lt;/span&gt;&amp;gt;Android&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/mac/&lt;/span&gt;&amp;gt;Mac&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/ios/&lt;/span&gt;&amp;gt;IOS&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/adobe/&lt;/span&gt;&amp;gt;Adobe&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/cracked/&lt;/span&gt;&amp;gt;Cracked&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;post animated fadeInDown&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-title&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/post/photoshop-trending-autumn-effect-2020/&lt;/span&gt;&amp;gt;Photoshop Trending Autumn Effect 2020&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-content&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;p_part&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;Introduction Autumn effect is something now getting in trend on social medias, It&amp;amp;rsquo;s a simple filter but most of the softwares get it wrong and making a messed up look but untrained eye isn&amp;amp;rsquo;t going to notice that until doing some post processing.&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/post/photoshop-trending-autumn-effect-2020/&lt;/span&gt;&amp;gt;[Read More]&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;p_part&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-footer&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;meta&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;info&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fa fa-sun-o&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;date&lt;/span&gt;&amp;gt;Fri, Jul 17, 2020&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/photoshop-effects/&lt;/span&gt;&amp;gt;Photoshop Effects&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/photoshop/&lt;/span&gt;&amp;gt;Photoshop&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/photoshop-quick-effects/&lt;/span&gt;&amp;gt;Photoshop Quick Effects&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;post animated fadeInDown&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-title&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/post/python-ultimate-crash-course-2020/&lt;/span&gt;&amp;gt;Python Ultimate Crash Course (Zero-To-Hero)&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-content&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;p_part&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;Introduction Python is one of most popular and most powerful and one of the fastest programming languages until now, Millions upon millions developers use python in their projects to script easily.&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/post/python-ultimate-crash-course-2020/&lt;/span&gt;&amp;gt;[Read More]&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;p_part&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-footer&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;meta&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;info&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fa fa-sun-o&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;date&lt;/span&gt;&amp;gt;Thu, Jul 16, 2020&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/programming/&lt;/span&gt;&amp;gt;Programming&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/software-development/&lt;/span&gt;&amp;gt;Software Development&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/zero-to-hero/&lt;/span&gt;&amp;gt;Zero To Hero&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/crash-course/&lt;/span&gt;&amp;gt;Crash Course&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;post animated fadeInDown&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-title&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/post/google-drive-serverless-web-hosting-2020/&lt;/span&gt;&amp;gt;Google Drive Serverless Web Hosting 2020&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-content&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;p_part&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;Introduction Serverless web hosting getting popular day by day, with the rise of static websites, So here today, I&amp;amp;rsquo;m going to show you how to host your created website ( HTML JS And CSS files ) In the google drive, and setting up a proper domain name for it using Freenom and netlify.&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/post/google-drive-serverless-web-hosting-2020/&lt;/span&gt;&amp;gt;[Read More]&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;p_part&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-footer&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;meta&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;info&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fa fa-sun-o&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;date&lt;/span&gt;&amp;gt;Wed, Jul 15, 2020&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/web-development/&lt;/span&gt;&amp;gt;Web development&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/static-sites/&lt;/span&gt;&amp;gt;Static Sites&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                        &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;pagination&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;ul&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;pagination&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;page-item&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;page-link&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;aria-label&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;First&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;aria-hidden&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;true&lt;/span&gt;&amp;gt;&amp;amp;#171;&amp;amp;#171;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;page-item disabled&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;page-link&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;aria-label&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;Previous&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;aria-hidden&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;true&lt;/span&gt;&amp;gt;&amp;amp;#171;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;page-item active&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;page-link&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/&lt;/span&gt;&amp;gt;1&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;page-item&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;page-link&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/page/2/&lt;/span&gt;&amp;gt;2&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;page-item&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/page/2/&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;page-link&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;aria-label&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;Next&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;aria-hidden&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;true&lt;/span&gt;&amp;gt;&amp;amp;#187;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                     &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;page-item&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/page/2/&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;page-link&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;aria-label&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;Last&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;aria-hidden&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;true&lt;/span&gt;&amp;gt;&amp;amp;#187;&amp;amp;#187;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;ul&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;text/javascript&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;https://www.tecinpact.tk/js/jquery.min.86b1e8f819ee2d9099a783e50b49dff24282545fc40773861f9126b921532e4c.js&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;integrity&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sha256-hrHo+BnuLZCZp4PlC0nf8kKCVF/EB3OGH5EmuSFTLkw=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;crossorigin&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;anonymous&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;text/javascript&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;https://www.tecinpact.tk/js/bundle.min.0f9c74cb78f13d1f15f33daff4037c70354f98acfbb97a6f61708966675c3cae.js&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;integrity&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sha256-D5x0y3jxPR8V8z2v9AN8cDVPmKz7uXpvYXCJZmdcPK4=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;crossorigin&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;anonymous&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;text/javascript&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;https://www.tecinpact.tk/js/medium-zoom.min.92f21c856129f84aeb719459b3e6ac621a3032fd7b180a18c04e1d12083f8aba.js&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;integrity&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sha256-kvIchWEp+ErrcZRZs+asYhowMv17GAoYwE4dEgg/iro=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;crossorigin&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;anonymous&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;application/javascript&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; doNotTrack&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;!&lt;/span&gt;doNotTrack){&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;window&lt;/span&gt;.ga&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;window&lt;/span&gt;.ga&lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(){(ga.q&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;ga.q&lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt;[]).push(arguments)};ga.l&lt;span style=&#34;color:#ff79c6&#34;&gt;=+&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Date&lt;/span&gt;;ga(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;create&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;UA-172360495-1&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;auto&amp;#39;&lt;/span&gt;);ga(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;send&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;pageview&amp;#39;&lt;/span&gt;);}&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;https://www.google-analytics.com/analytics.js&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now This is the code of our main page, I know it&amp;rsquo;s huge but I also need a huge but working code to demonstrate it to you. And now Let&amp;rsquo;s Minify it using the tool. copy the whole code and paste in the compression section and press the minify button And you&amp;rsquo;re completed.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;lang&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;en&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;data-theme&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;light&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;head&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;title&lt;/span&gt;&amp;gt;Tecinpact | Page&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;title&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;charset&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;utf-8&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;generator&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;content&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Hugo 0.73.0&amp;#34;&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;viewport&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;content&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;width=device-width,initial-scale=1,viewport-fit=cover&amp;#34;&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;description&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;content&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Welcome Visitor! here you can find out new technologies, Reviews, suggestions about technologies and step-by-step guides to the EASY World. If you need any help, Just contact Me.&amp;#34;&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;stylesheet&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;https://www.tecinpact.tk/css/style.min.67cd718c0a3c8009c771494d381fb7128246a454bd0518fed97cb65d257db948.css&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;integrity&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sha256-Z81xjAo8gAnHcUlNOB+3EoJGpFS9BRj+2Xy2XSV9uUg=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;crossorigin&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;anonymous&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;text/css&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;stylesheet&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;integrity&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;sha384-wvfXpqpZZVQGK6TAh5PVlGOfQNHSoD2xbE+QkPxCAFlNEevoEH3Sl0sibVcOQVnN&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;crossorigin&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;anonymous&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;shortcut icon&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;https://www.tecinpact.tk/favicons/favicon.ico&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;image/x-icon&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;apple-touch-icon&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;sizes&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;180x180&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;https://www.tecinpact.tk/favicons/apple-touch-icon.png&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;icon&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;image/png&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;sizes&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;32x32&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;https://www.tecinpact.tk/favicons/favicon-32x32.png&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;icon&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;image/png&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;sizes&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;16x16&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;https://www.tecinpact.tk/favicons/favicon-16x16.png&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;canonical&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;https://www.tecinpact.tk/&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;text/javascript&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;https://www.tecinpact.tk/js/anatole-header.min.c275265a259296f3dd50e8236a77fcbcadb1dbb9597d3045c675dcc2c7c58a93.js&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;integrity&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sha256-wnUmWiWSlvPdUOgjanf8vK2x27lZfTBFxnXcwsfFipM=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;crossorigin&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;anonymous&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;twitter:card&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;content&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;summary_large_image&amp;#34;&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;twitter:image&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;content&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;https://www.tecinpact.tk/images/site-feature-image.png&amp;#34;&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;twitter:title&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;content&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Page&amp;#34;&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;twitter:description&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;content&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;TECINPACT Technology Guide&amp;#34;&lt;/span&gt;&amp;gt; &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;head&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sidebar animated fadeInDown&amp;#34;&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;logo-title&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;title&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;img&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;https://www.tecinpact.tk/images/profile.jpg&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;alt&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;profile picture&amp;#34;&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/&lt;/span&gt;&amp;gt;I&amp;#39;m Nushan Kodikara&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;description&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;Welcome Visitor! here you can find out new technologies, Reviews, suggestions about technologies and step-by-step guides to the EASY World. If you need any help, Just contact Me.&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;ul&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;social-links&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;https://www.facebook.com/Tecinpact&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;me&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;aria-label&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;Facebook&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fa fa-2x fa-facebook&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;aria-hidden&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;true&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;https://twitter.com/Tecinpact&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;me&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;aria-label&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;Twitter&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fa fa-2x fa-twitter&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;aria-hidden&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;true&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;https://github.com/Tecinpact&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;me&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;aria-label&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;GitHub&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fa fa-2x fa-github&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;aria-hidden&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;true&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;https://t.me/tecinpact&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;me&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;aria-label&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;Telegram&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fa fa-2x fa-telegram&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;aria-hidden&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;true&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;https://wa.me/94719988189&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;me&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;aria-label&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;Whatsapp&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fa fa-2x fa-whatsapp&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;aria-hidden&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;true&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;https://www.instagram.com/Tecinpact&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;me&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;aria-label&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;instagram&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fa fa-2x fa-instagram&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;aria-hidden&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;true&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;mailto:tecinpactagencies@gmail.com&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;me&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;aria-label&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;e-mail&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fa fa-2x fa-envelope&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;aria-hidden&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;true&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;ul&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;footer&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;by_farbox&lt;/span&gt;&amp;gt;&amp;amp;copy; Tecinpact 2020&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;main&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;page-top animated fadeInDown&amp;#34;&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;ul&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;nav&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;current&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/&lt;/span&gt;&amp;gt;Home&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/post/&lt;/span&gt;&amp;gt;Posts&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/about/&lt;/span&gt;&amp;gt;About&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/portfolio/&lt;/span&gt;&amp;gt;Portfolio&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/search/&lt;/span&gt;&amp;gt;Search&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;ul&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;themeswitcher&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;theme-switch&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;title&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Switch Theme&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fa fa-adjust fa-fw&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;aria-hidden&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;true&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;autopagerize_page_element&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;content&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;post animated fadeInDown&amp;#34;&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-title&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/post/js-for-modern-web-development/&lt;/span&gt;&amp;gt;Js for Modern Web Development&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt;&amp;gt; &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-content&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;p_part&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;Introduction Here we are at the end of the modern web development course, At the right basics of the language which make the web interactive and functional.&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/post/js-for-modern-web-development/&lt;/span&gt;&amp;gt;[Read More]&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt; &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;p_part&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-footer&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;meta&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;info&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fa fa-sun-o&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;date&lt;/span&gt;&amp;gt;Thu, Jul 23, 2020&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/web-development/&lt;/span&gt;&amp;gt;web development&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/html/&lt;/span&gt;&amp;gt;HTML&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/zero-to-hero/&lt;/span&gt;&amp;gt;Zero To Hero&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/crash-course/&lt;/span&gt;&amp;gt;Crash Course&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt; &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;post animated fadeInDown&amp;#34;&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-title&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/post/download-youtube-videos-2020/&lt;/span&gt;&amp;gt;Download Youtube Videos 2020&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt;&amp;gt; &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-content&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;p_part&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;Introduction Let&amp;amp;rsquo;s be real, We need to download Youtube Videos for so many reasons, Maybe mp3 from youtube, And we still don&amp;amp;rsquo;t have a clear way, But today I&amp;amp;rsquo;m here to change that, I Found some interesting apps and websites which can download From youtube directly as video or Audio.&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/post/download-youtube-videos-2020/&lt;/span&gt;&amp;gt;[Read More]&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt; &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;p_part&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-footer&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;meta&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;info&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fa fa-sun-o&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;date&lt;/span&gt;&amp;gt;Wed, Jul 22, 2020&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/android/&lt;/span&gt;&amp;gt;Android&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/windows/&lt;/span&gt;&amp;gt;Windows&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/mac/&lt;/span&gt;&amp;gt;Mac&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/ios/&lt;/span&gt;&amp;gt;IOS&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/youtube/&lt;/span&gt;&amp;gt;Youtube&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt; &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;post animated fadeInDown&amp;#34;&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-title&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/post/scss-for-modern-web-development/&lt;/span&gt;&amp;gt;Scss for Modern Web Development (Supercharged CSS)&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt;&amp;gt; &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-content&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;p_part&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;Introduction If you noticed, I Didn&amp;amp;rsquo;t mentioned css for browser types in our previous CSS tutorial, The case is, I don&amp;amp;rsquo;t want to, SCSS is doing everything for us so why should we even bother?&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/post/scss-for-modern-web-development/&lt;/span&gt;&amp;gt;[Read More]&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt; &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;p_part&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-footer&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;meta&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;info&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fa fa-sun-o&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;date&lt;/span&gt;&amp;gt;Tue, Jul 21, 2020&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/web-development/&lt;/span&gt;&amp;gt;web development&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/scss/&lt;/span&gt;&amp;gt;SCSS&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/zero-to-hero/&lt;/span&gt;&amp;gt;Zero To Hero&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/crash-course/&lt;/span&gt;&amp;gt;Crash Course&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt; &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;post animated fadeInDown&amp;#34;&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-title&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/post/create-an-eco-system-with-join/&lt;/span&gt;&amp;gt;Create an Eco System With Join by joaoapps&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt;&amp;gt; &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-content&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;p_part&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;Introduction Let&amp;amp;rsquo;s be real, We all like to work in one place but access all of our devices, Apple has a solution for this but what if you don&amp;amp;rsquo;t have an apple eco system?&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/post/create-an-eco-system-with-join/&lt;/span&gt;&amp;gt;[Read More]&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt; &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;p_part&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-footer&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;meta&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;info&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fa fa-sun-o&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;date&lt;/span&gt;&amp;gt;Mon, Jul 20, 2020&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/android/&lt;/span&gt;&amp;gt;Android&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/windows/&lt;/span&gt;&amp;gt;Windows&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/ecosystem/&lt;/span&gt;&amp;gt;EcoSystem&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/apple/&lt;/span&gt;&amp;gt;Apple&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt; &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;post animated fadeInDown&amp;#34;&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-title&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/post/storage-free-cloud-life-2020/&lt;/span&gt;&amp;gt;Storage Free Cloud Life 2020&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt;&amp;gt; &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-content&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;p_part&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;Introduction Storage, in other words, Information had evolved in to almost to be a basic need of modern human life, Everything form studies, household things, social awareness programs and pretty much anything you name, has a digital counterpart that stored somewhere in the world, And as humans, we have to constantly phrase and read them to keep up with the modern society, and sometimes, It&amp;amp;rsquo;s a pain.&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/post/storage-free-cloud-life-2020/&lt;/span&gt;&amp;gt;[Read More]&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt; &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;p_part&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-footer&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;meta&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;info&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fa fa-sun-o&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;date&lt;/span&gt;&amp;gt;Sun, Jul 19, 2020&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;post animated fadeInDown&amp;#34;&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-title&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/post/css-for-modern-web-development/&lt;/span&gt;&amp;gt;CSS for Modern Web Development (Zero-To-Hero)&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt;&amp;gt; &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-content&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;p_part&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;Introduction Well well, here we are in the section of styling our HTML Page, if you don&amp;amp;rsquo;t know what HTML is, Check HERE for the HTML Course on modern web development, Today we&amp;amp;rsquo;re using CSS and HTML knowledge to create a beautiful looking website.&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/post/css-for-modern-web-development/&lt;/span&gt;&amp;gt;[Read More]&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt; &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;p_part&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-footer&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;meta&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;info&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fa fa-sun-o&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;date&lt;/span&gt;&amp;gt;Sat, Jul 18, 2020&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/web-development/&lt;/span&gt;&amp;gt;web development&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/css/&lt;/span&gt;&amp;gt;CSS&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/zero-to-hero/&lt;/span&gt;&amp;gt;Zero To Hero&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/crash-course/&lt;/span&gt;&amp;gt;Crash Course&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt; &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;post animated fadeInDown&amp;#34;&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-title&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/post/adobe-softwares-ultimate-list-with-crack-2020/&lt;/span&gt;&amp;gt;Ultimate Adobe Softwares List With Universal Crack 2020&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt;&amp;gt; &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-content&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;p_part&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;Introduction We all have used adobe software in some point of our lives and wandered how many others there are to explore.&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/post/adobe-softwares-ultimate-list-with-crack-2020/&lt;/span&gt;&amp;gt;[Read More]&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt; &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;p_part&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-footer&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;meta&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;info&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fa fa-sun-o&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;date&lt;/span&gt;&amp;gt;Fri, Jul 17, 2020&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/windows/&lt;/span&gt;&amp;gt;Windows&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/software-review/&lt;/span&gt;&amp;gt;Software Review&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/android/&lt;/span&gt;&amp;gt;Android&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/mac/&lt;/span&gt;&amp;gt;Mac&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/ios/&lt;/span&gt;&amp;gt;IOS&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/adobe/&lt;/span&gt;&amp;gt;Adobe&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/cracked/&lt;/span&gt;&amp;gt;Cracked&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt; &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;post animated fadeInDown&amp;#34;&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-title&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/post/photoshop-trending-autumn-effect-2020/&lt;/span&gt;&amp;gt;Photoshop Trending Autumn Effect 2020&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt;&amp;gt; &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-content&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;p_part&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;Introduction Autumn effect is something now getting in trend on social medias, It&amp;amp;rsquo;s a simple filter but most of the softwares get it wrong and making a messed up look but untrained eye isn&amp;amp;rsquo;t going to notice that until doing some post processing.&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/post/photoshop-trending-autumn-effect-2020/&lt;/span&gt;&amp;gt;[Read More]&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt; &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;p_part&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-footer&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;meta&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;info&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fa fa-sun-o&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;date&lt;/span&gt;&amp;gt;Fri, Jul 17, 2020&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/photoshop-effects/&lt;/span&gt;&amp;gt;Photoshop Effects&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/photoshop/&lt;/span&gt;&amp;gt;Photoshop&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/photoshop-quick-effects/&lt;/span&gt;&amp;gt;Photoshop Quick Effects&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt; &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;post animated fadeInDown&amp;#34;&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-title&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/post/python-ultimate-crash-course-2020/&lt;/span&gt;&amp;gt;Python Ultimate Crash Course (Zero-To-Hero)&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt;&amp;gt; &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-content&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;p_part&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;Introduction Python is one of most popular and most powerful and one of the fastest programming languages until now, Millions upon millions developers use python in their projects to script easily.&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/post/python-ultimate-crash-course-2020/&lt;/span&gt;&amp;gt;[Read More]&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt; &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;p_part&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-footer&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;meta&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;info&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fa fa-sun-o&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;date&lt;/span&gt;&amp;gt;Thu, Jul 16, 2020&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/programming/&lt;/span&gt;&amp;gt;Programming&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/software-development/&lt;/span&gt;&amp;gt;Software Development&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/zero-to-hero/&lt;/span&gt;&amp;gt;Zero To Hero&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/crash-course/&lt;/span&gt;&amp;gt;Crash Course&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt; &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;post animated fadeInDown&amp;#34;&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-title&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/post/google-drive-serverless-web-hosting-2020/&lt;/span&gt;&amp;gt;Google Drive Serverless Web Hosting 2020&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt;&amp;gt; &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-content&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;p_part&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;Introduction Serverless web hosting getting popular day by day, with the rise of static websites, So here today, I&amp;amp;rsquo;m going to show you how to host your created website ( HTML JS And CSS files ) In the google drive, and setting up a proper domain name for it using Freenom and netlify.&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/post/google-drive-serverless-web-hosting-2020/&lt;/span&gt;&amp;gt;[Read More]&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt; &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;p_part&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;post-footer&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;meta&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;info&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;fa fa-sun-o&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;i&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;date&lt;/span&gt;&amp;gt;Wed, Jul 15, 2020&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/web-development/&lt;/span&gt;&amp;gt;Web development&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;tag&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/tags/static-sites/&lt;/span&gt;&amp;gt;Static Sites&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt; &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;pagination&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;ul&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;pagination&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;page-item&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;page-link&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;aria-label&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;First&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;aria-hidden&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;true&lt;/span&gt;&amp;gt;&amp;amp;#171;&amp;amp;#171;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;page-item disabled&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;page-link&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;aria-label&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;Previous&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;aria-hidden&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;true&lt;/span&gt;&amp;gt;&amp;amp;#171;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;page-item active&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;page-link&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/&lt;/span&gt;&amp;gt;1&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;page-item&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;page-link&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/page/2/&lt;/span&gt;&amp;gt;2&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;page-item&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/page/2/&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;page-link&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;aria-label&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;Next&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;aria-hidden&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;true&lt;/span&gt;&amp;gt;&amp;amp;#187;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;page-item&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;/page/2/&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;page-link&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;aria-label&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;Last&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;aria-hidden&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;true&lt;/span&gt;&amp;gt;&amp;amp;#187;&amp;amp;#187;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;span&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;li&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;ul&lt;/span&gt;&amp;gt; &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;text/javascript&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;https://www.tecinpact.tk/js/jquery.min.86b1e8f819ee2d9099a783e50b49dff24282545fc40773861f9126b921532e4c.js&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;integrity&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sha256-hrHo+BnuLZCZp4PlC0nf8kKCVF/EB3OGH5EmuSFTLkw=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;crossorigin&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;anonymous&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;text/javascript&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;https://www.tecinpact.tk/js/bundle.min.0f9c74cb78f13d1f15f33daff4037c70354f98acfbb97a6f61708966675c3cae.js&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;integrity&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sha256-D5x0y3jxPR8V8z2v9AN8cDVPmKz7uXpvYXCJZmdcPK4=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;crossorigin&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;anonymous&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;text/javascript&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;https://www.tecinpact.tk/js/medium-zoom.min.92f21c856129f84aeb719459b3e6ac621a3032fd7b180a18c04e1d12083f8aba.js&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;integrity&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;sha256-kvIchWEp+ErrcZRZs+asYhowMv17GAoYwE4dEgg/iro=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;crossorigin&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;anonymous&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;application/javascript&lt;/span&gt;&amp;gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; doNotTrack&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;!&lt;/span&gt;doNotTrack){&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;window&lt;/span&gt;.ga&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;window&lt;/span&gt;.ga&lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(){(ga.q&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;ga.q&lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt;[]).push(arguments)};ga.l&lt;span style=&#34;color:#ff79c6&#34;&gt;=+&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Date&lt;/span&gt;;ga(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;create&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;UA-172360495-1&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;auto&amp;#39;&lt;/span&gt;);ga(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;send&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;pageview&amp;#39;&lt;/span&gt;);}&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;async&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;https://www.google-analytics.com/analytics.js&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;script&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;body&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now notice the code get compressed? this is a simple but effective way to improve your site&amp;rsquo;s loading speed. And That&amp;rsquo;s what in the top code but compressed. I know I know that looks cute and believe it or not, That works. You can use this with HTML CSS and JS and all of your files combined, That&amp;rsquo;s allot of space to save on.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This is something like a joke, I know. But it really works. Even you can check my site out using ctrl + U on desktop PCs, and you can explore the code of my website. It dramatically improves on SEO, Loading time and many more on your website. I Hope, It&amp;rsquo;ll get in handy for your next project.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Single line CSS Tricks (Part 1)</title>
<link>https://blog.nushankodikara.com/blog/1line-css-tricks-part1/</link>
<pubDate>Fri, 24 Jul 2020 06:00:00 +0530</pubDate>
      
      <guid>https://blog.nushankodikara.com/blog/1line-css-tricks-part1/</guid>
<description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;CSS is the main styler over the internet, We all can&amp;rsquo;t use everything on css and because it&amp;rsquo;s a huge base, We&amp;rsquo;re probably lost somewhere inside it, So today, Let&amp;rsquo;s explore some creative and simple to use but effective single line codes for your next project. You can visit the CSS Full course &lt;a href=&#34;https://blog.nushankodikara.com/post/css-for-modern-web-development/&#34;&gt;HERE&lt;/a&gt; And without much explanations, Let&amp;rsquo;s get in to the post.&lt;/p&gt;
&lt;h2 id=&#34;01-super-centered&#34;&gt;01. Super Centered&lt;/h2&gt;
&lt;p&gt;We can do so much things to make a code centered, But have you use the place-items property of the grid layout? Here&amp;rsquo;s how to use it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200724_01.png&#34; alt=&#34;CSS Style&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;parent&amp;#34;&lt;/span&gt; &amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;box&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;contenteditable&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Hello World
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .&lt;span style=&#34;color:#50fa7b&#34;&gt;parent&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;display&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;grid&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    place-items: &lt;span style=&#34;color:#ff79c6&#34;&gt;center&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;## &lt;span style=&#34;color:#ff79c6&#34;&gt;02&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;The&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;Easy&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;Card&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;We&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;all&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;have&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;moment&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;which&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;we&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;need&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;create&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;some&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;responsive&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;cards&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;on&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;CSS&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;but&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;how&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;are&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;we&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;going&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;that&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;depends&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;on&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;our&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;knowledge&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;on&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;CSS&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;But&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;had&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;you&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;ever&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;came&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;across&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;technique&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;Use&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;the&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;stretching&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;code&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;you&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;want&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;stretch&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;the&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;cards&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;to&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;fit&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;the&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;container&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;or&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;use&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;the&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;no&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;stretching&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;code&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;![&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;CSS&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;Style&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;](/&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;uploads&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;20200724_02&lt;/span&gt;.&lt;span style=&#34;color:#50fa7b&#34;&gt;png&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;```&lt;span style=&#34;color:#ff79c6&#34;&gt;html&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;parent white&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;box green&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;box green&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;box green&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .&lt;span style=&#34;color:#50fa7b&#34;&gt;parent&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;display&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;flex&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;flex-wrap&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;wrap&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;justify-content&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;center&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .&lt;span style=&#34;color:#50fa7b&#34;&gt;box&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;flex&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;150&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;/*  Stretching: */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;flex&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;150&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;/*  No stretching: */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;margin&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;03-easy-side-bar&#34;&gt;03. Easy Side bar&lt;/h2&gt;
&lt;p&gt;This is how you can add a simple but elegant side bar to your HTML document without a much effort&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200724_03.png&#34; alt=&#34;CSS Style&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;parent&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;section yellow&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;contenteditable&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Min: 150px / Max: 25%
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;section purple&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;contenteditable&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      This element takes the second grid position (1fr), meaning
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      it takes up the rest of the remaining space.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .&lt;span style=&#34;color:#50fa7b&#34;&gt;parent&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;display&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;grid&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;grid-template-columns&lt;/span&gt;: &lt;span style=&#34;color:#50fa7b&#34;&gt;minmax&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;150&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;25&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;) &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;fr;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;04-pancake-stack&#34;&gt;04. Pancake Stack&lt;/h2&gt;
&lt;p&gt;This is a common occurrence in modern web development, but had it been this easy to set up?&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200724_04.png&#34; alt=&#34;CSS Style&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;parent&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;header&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;blue section&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;contenteditable&lt;/span&gt;&amp;gt;Header&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;header&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;coral section&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;contenteditable&lt;/span&gt;&amp;gt;Main&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;main&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;footer&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;purple section&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;contenteditable&lt;/span&gt;&amp;gt;Footer Content&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;footer&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .&lt;span style=&#34;color:#50fa7b&#34;&gt;parent&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;display&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;grid&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;grid-template-rows&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;fr &lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;05-classic-holy-grail-layout&#34;&gt;05. Classic Holy Grail Layout&lt;/h2&gt;
&lt;p&gt;As the name suggest, It&amp;rsquo;s a all time classic, less seen these days but there are many Auctions which this presents.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200724_05.png&#34; alt=&#34;CSS Style&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;parent&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;header&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;pink section&amp;#34;&lt;/span&gt;&amp;gt;Header&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;header&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;left-side blue section&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;contenteditable&lt;/span&gt;&amp;gt;Left Sidebar&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;section coral&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;contenteditable&lt;/span&gt;&amp;gt; Main Content&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;main&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;right-side yellow section&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;contenteditable&lt;/span&gt;&amp;gt;Right Sidebar&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;footer&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;green section&amp;#34;&lt;/span&gt;&amp;gt;Footer&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;footer&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .&lt;span style=&#34;color:#50fa7b&#34;&gt;parent&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;display&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;grid&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;grid-template&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;fr &lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;fr &lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;header&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;padding&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;rem&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;grid-column&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .&lt;span style=&#34;color:#50fa7b&#34;&gt;left-side&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;grid-column&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;main&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;grid-column&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .&lt;span style=&#34;color:#50fa7b&#34;&gt;right-side&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;grid-column&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;footer&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;grid-column&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;06-12-span-grid&#34;&gt;06. 12-Span Grid&lt;/h2&gt;
&lt;p&gt;We don&amp;rsquo;t always use bootstrap or a framework like that, We can implement the 12-span grid without much effort like this.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200724_06.png&#34; alt=&#34;CSS Style&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;parent white&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;span-12 green section&amp;#34;&lt;/span&gt;&amp;gt;Span 12&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;span-6 coral section&amp;#34;&lt;/span&gt;&amp;gt;Span 6&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;span-4 blue section&amp;#34;&lt;/span&gt;&amp;gt;Span 4&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;span-2 yellow section&amp;#34;&lt;/span&gt;&amp;gt;Span 2&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .&lt;span style=&#34;color:#50fa7b&#34;&gt;parent&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;display&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;grid&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;grid-template-columns&lt;/span&gt;: &lt;span style=&#34;color:#50fa7b&#34;&gt;repeat&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;fr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .&lt;span style=&#34;color:#50fa7b&#34;&gt;span-12&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;grid-column&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; span &lt;span style=&#34;color:#bd93f9&#34;&gt;12&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .&lt;span style=&#34;color:#50fa7b&#34;&gt;span-6&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;grid-column&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; span &lt;span style=&#34;color:#bd93f9&#34;&gt;6&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .&lt;span style=&#34;color:#50fa7b&#34;&gt;span-4&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;grid-column&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; span &lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .&lt;span style=&#34;color:#50fa7b&#34;&gt;span-2&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;grid-column&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; span &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;/* centering text */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .&lt;span style=&#34;color:#50fa7b&#34;&gt;section&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;display&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;grid&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    place-items: &lt;span style=&#34;color:#ff79c6&#34;&gt;center&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;text-align&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;center&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;07-ram-repeat-auto-minmax&#34;&gt;07. RAM (Repeat, Auto, Minmax)&lt;/h2&gt;
&lt;p&gt;Now what&amp;rsquo;s this? Imagine this as a responsive grid layout for like a photo gallery or for a post gallery, anyway for a gallery.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200724_07.png&#34; alt=&#34;CSS Style&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;parent white&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;box pink&amp;#34;&lt;/span&gt;&amp;gt;1&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;box purple&amp;#34;&lt;/span&gt;&amp;gt;2&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;box blue&amp;#34;&lt;/span&gt;&amp;gt;3&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;box green&amp;#34;&lt;/span&gt;&amp;gt;4&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .&lt;span style=&#34;color:#50fa7b&#34;&gt;parent&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;display&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;grid&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;grid-gap&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;rem&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;grid-template-columns&lt;/span&gt;: &lt;span style=&#34;color:#50fa7b&#34;&gt;repeat&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;fit, &lt;span style=&#34;color:#50fa7b&#34;&gt;minmax&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;150&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;fr));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;08-line-up&#34;&gt;08. Line Up&lt;/h2&gt;
&lt;p&gt;This is the perfect grid for a post set, for a blog or anything formal. Check this out and use your imaginative mindset for good use.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200724_08.png&#34; alt=&#34;CSS Style&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;parent white&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;card yellow&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt;&amp;gt;Title - Card 1&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;contenteditable&lt;/span&gt;&amp;gt;Medium length description with a few more words here.&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;visual pink&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;card yellow&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt;&amp;gt;Title - Card 2&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;contenteditable&lt;/span&gt;&amp;gt;Long Description. Lorem ipsum dolor sit, amet consectetur adipisicing elit.&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;visual blue&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;card yellow&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt;&amp;gt;Title - Card 3&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;contenteditable&lt;/span&gt;&amp;gt;Short Description.&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;visual green&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .&lt;span style=&#34;color:#50fa7b&#34;&gt;ex8&lt;/span&gt; .&lt;span style=&#34;color:#50fa7b&#34;&gt;parent&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;height&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;auto&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;display&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;grid&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;grid-gap&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;rem&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;grid-template-columns&lt;/span&gt;: &lt;span style=&#34;color:#50fa7b&#34;&gt;repeat&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;fr);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .&lt;span style=&#34;color:#50fa7b&#34;&gt;ex8&lt;/span&gt; .&lt;span style=&#34;color:#50fa7b&#34;&gt;visual&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;height&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;px&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;width&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .&lt;span style=&#34;color:#50fa7b&#34;&gt;ex8&lt;/span&gt; .&lt;span style=&#34;color:#50fa7b&#34;&gt;card&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;display&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;flex&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;flex-direction&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;column&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;padding&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;rem&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;justify-content&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;space-between&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .&lt;span style=&#34;color:#50fa7b&#34;&gt;ex8&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;h3&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;margin&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;09-clamping-posts&#34;&gt;09. Clamping Posts&lt;/h2&gt;
&lt;p&gt;This is best suite for a feature post style thing in my opinion, Look for yourself. and you&amp;rsquo;ll maybe use it in your next project.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200724_09.png&#34; alt=&#34;CSS Style&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;parent white&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;card purple&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h1&lt;/span&gt;&amp;gt;Title Here&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h1&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;visual yellow&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;Descriptive Text. Lorem ipsum dolor sit, amet consectetur adipisicing elit. Sed est error repellat veritatis.&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .&lt;span style=&#34;color:#50fa7b&#34;&gt;parent&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;display&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;grid&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    place-items: &lt;span style=&#34;color:#ff79c6&#34;&gt;center&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .&lt;span style=&#34;color:#50fa7b&#34;&gt;card&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;width&lt;/span&gt;: &lt;span style=&#34;color:#50fa7b&#34;&gt;clamp&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;23&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;ch&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;46&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;ch&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;display&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;flex&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;flex-direction&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;column&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;padding&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;rem&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;10-keep-the-aspect&#34;&gt;10. Keep the Aspect&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s be real, there are sometimes we need to hold an aspect ratio for an element which we don&amp;rsquo;t know the parent container&amp;rsquo;s dimensions, Now we can use this for it&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200724_10.png&#34; alt=&#34;CSS Style&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;parent white&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;card blue&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;h1&lt;/span&gt;&amp;gt;Video Title&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;h1&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;visual green&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &amp;lt;&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;Descriptive Text. This demo works in Chromium 84+.&amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;p&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#ff79c6&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .&lt;span style=&#34;color:#50fa7b&#34;&gt;parent&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;display&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;grid&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    place-items: &lt;span style=&#34;color:#ff79c6&#34;&gt;center&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .&lt;span style=&#34;color:#50fa7b&#34;&gt;visual&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    aspect-ratio: &lt;span style=&#34;color:#bd93f9&#34;&gt;16&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;9&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  .&lt;span style=&#34;color:#50fa7b&#34;&gt;card&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;width&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;50&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;%&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;display&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;flex&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;flex-direction&lt;/span&gt;: &lt;span style=&#34;color:#ff79c6&#34;&gt;column&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;padding&lt;/span&gt;: &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;rem&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;You could be an expert on css, maybe a beginner or whatever, Did you saw this coming? I use them daily in my projects and They are like bread and butter. I hope you&amp;rsquo;ll use them in your next project.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Js for Modern Web Development (Part 1)</title>
<link>https://blog.nushankodikara.com/blog/js-for-modern-web-development/</link>
<pubDate>Thu, 23 Jul 2020 11:52:24 +0530</pubDate>
      
      <guid>https://blog.nushankodikara.com/blog/js-for-modern-web-development/</guid>
<description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Here we are at the end of the modern web development course, At the right basics of the language which make the web interactive and functional. JS Is the back-born of the modern Internet, Why do I say so? Because we can do literally Anything you imagine. Without further explanation, Let&amp;rsquo;s start with the course. Before getting here, Please follow &lt;a href=&#34;https://blog.nushankodikara.com/post/html-for-modern-web-development/&#34;&gt;HTML&lt;/a&gt; &lt;a href=&#34;https://blog.nushankodikara.com/post/css-for-modern-web-development/&#34;&gt;CSS&lt;/a&gt; and &lt;a href=&#34;https://blog.nushankodikara.com/post/scss-for-modern-web-development/&#34;&gt;SCSS&lt;/a&gt; guides.&lt;/p&gt;
&lt;h2 id=&#34;hello-world&#34;&gt;Hello, world!&lt;/h2&gt;
&lt;p&gt;Javascript is fully functional with HTML and CSS, so first, Let&amp;rsquo;s create our demo document with HTML CSS And JS. I&amp;rsquo;m creating 3 files in the root folder. index.html, style.css, style.scss and index.js And linking the css in the head, and the JS in the bottom of the body. pro tip Always link your js in the end of the body tag, so the JS would be load after the HTML elements and you won&amp;rsquo;t face any DOM issues regarding load time or so, I&amp;rsquo;ll explain later and also you can link JS in head but I don&amp;rsquo;t recommend it. Let&amp;rsquo;s do it in the ways of modern web development.&lt;/p&gt;
&lt;p&gt;Now, Javascript files can be linked using script element and using a src attribute. Now that out to the way&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200723_01.png&#34; alt=&#34;Root&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200723_02.png&#34; alt=&#34;Root&#34;&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s start with our first code. Remember we don&amp;rsquo;t have a specific curve to learn JS so we burst in. Hold tight and let&amp;rsquo;s explore.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m placing an empty h1 element in the HTML page with the id of hello&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;!DOCTYPE html&amp;gt;
  &amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
  
  &amp;lt;head&amp;gt;
      &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;style.css&amp;quot;&amp;gt;
      &amp;lt;title&amp;gt;JS Document&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  
  &amp;lt;body&amp;gt;
      &amp;lt;h1 id=&amp;quot;hello&amp;quot;&amp;gt;&amp;lt;/h1&amp;gt;
      &amp;lt;script src=&amp;quot;index.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
  
  &amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Using SCSS I&amp;rsquo;m giving the body a grid display and item alignment of center&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  body {
      display: grid;
      place-items: center;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now for our JS file, I&amp;rsquo;m placing down a function which can find elements by ID and using that I&amp;rsquo;m changing the inner HTML of that element to Hello World&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  document.getElementById(&amp;quot;hello&amp;quot;).innerHTML = &amp;quot;Hello World&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now you should get something like this as the output&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200723_03.png&#34; alt=&#34;Root&#34;&gt;&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s All for the hello world! And Welcome to the Javascript community.&lt;/p&gt;
&lt;h2 id=&#34;before-coding&#34;&gt;Before coding&lt;/h2&gt;
&lt;p&gt;JS has some limitations and node.js makes those limitations go away, with that we&amp;rsquo;re using JS as a full fledge programming language and we&amp;rsquo;ll explore the possibilities in another tutorial.&lt;/p&gt;
&lt;h2 id=&#34;code-structure&#34;&gt;Code structure&lt;/h2&gt;
&lt;p&gt;The first thing we&amp;rsquo;ll study is the building blocks of code.&lt;/p&gt;
&lt;h3 id=&#34;statements&#34;&gt;Statements&lt;/h3&gt;
&lt;p&gt;Statements are syntax constructs and commands that perform actions.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ve already seen a statement, &lt;code&gt;alert(&#39;Hello, world!&#39;)&lt;/code&gt;, which shows the message &amp;ldquo;Hello, world!&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;We can have as many statements in our code as we want. Statements can be separated with a semicolon.&lt;/p&gt;
&lt;p&gt;For example, here we split &amp;ldquo;Hello World&amp;rdquo; into two alerts:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt;); alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;World&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Usually, statements are written on separate lines to make the code more readable:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;World&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;semicolons-semicolon&#34;&gt;Semicolons [#semicolon]&lt;/h3&gt;
&lt;p&gt;A semicolon may be omitted in most cases when a line break exists.&lt;/p&gt;
&lt;p&gt;This would also work:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;World&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here, JavaScript interprets the line break as an &amp;ldquo;implicit&amp;rdquo; semicolon. This is called an &lt;a href=&#34;https://tc39.github.io/ecma262/#sec-automatic-semicolon-insertion&#34;&gt;automatic semicolon insertion&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In most cases, a newline implies a semicolon. But &amp;ldquo;in most cases&amp;rdquo; does not mean &amp;ldquo;always&amp;rdquo;!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There are cases when a newline does not mean a semicolon. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The code outputs &lt;code&gt;6&lt;/code&gt; because JavaScript does not insert semicolons here. It is intuitively obvious that if the line ends with a plus &lt;code&gt;&amp;quot;+&amp;quot;&lt;/code&gt;, then it is an &amp;ldquo;incomplete expression&amp;rdquo;, so the semicolon is not required. And in this case that works as intended.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;But there are situations where JavaScript &amp;ldquo;fails&amp;rdquo; to assume a semicolon where it is really needed.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Errors which occur in such cases are quite hard to find and fix.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re curious to see a concrete example of such an error, check this code out:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;].forEach(alert)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;No need to think about the meaning of the brackets &lt;code&gt;[]&lt;/code&gt; and &lt;code&gt;forEach&lt;/code&gt; yet. We&amp;rsquo;ll study them later. For now, just remember the result of the code: it shows &lt;code&gt;1&lt;/code&gt; then &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, let&amp;rsquo;s add an &lt;code&gt;alert&lt;/code&gt; before the code and &lt;em&gt;not&lt;/em&gt; finish it with a semicolon:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;There will be an error&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;].forEach(alert)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now if we run the code, only the first &lt;code&gt;alert&lt;/code&gt; is shown and then we have an error!&lt;/p&gt;
&lt;p&gt;But everything is fine again if we add a semicolon after &lt;code&gt;alert&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;All fine now&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;].forEach(alert)  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we have the &amp;ldquo;All fine now&amp;rdquo; message followed by &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The error in the no-semicolon variant occurs because JavaScript does not assume a semicolon before square brackets &lt;code&gt;[...]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So, because the semicolon is not auto-inserted, the code in the first example is treated as a single statement. Here&amp;rsquo;s how the engine sees it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;There will be an error&amp;#34;&lt;/span&gt;)[&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;].forEach(alert)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But it should be two separate statements, not one. Such a merging in this case is just wrong, hence the error. This can happen in other situations.&lt;/p&gt;
&lt;p&gt;We recommend putting semicolons between statements even if they are separated by newlines. This rule is widely adopted by the community. Let&amp;rsquo;s note once again &amp;ndash; &lt;em&gt;it is possible&lt;/em&gt; to leave out semicolons most of the time. But it&amp;rsquo;s safer &amp;ndash; especially for a beginner &amp;ndash; to use them.&lt;/p&gt;
&lt;h3 id=&#34;comments-code-comments&#34;&gt;Comments [#code-comments]&lt;/h3&gt;
&lt;p&gt;As time goes on, programs become more and more complex. It becomes necessary to add &lt;em&gt;comments&lt;/em&gt; which describe what the code does and why.&lt;/p&gt;
&lt;p&gt;Comments can be put into any place of a script. They don&amp;rsquo;t affect its execution because the engine simply ignores them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;One-line comments start with two forward slash characters &lt;code&gt;//&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The rest of the line is a comment. It may occupy a full line of its own or follow a statement.&lt;/p&gt;
&lt;p&gt;Like here:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// This comment occupies a line of its own
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;World&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#6272a4&#34;&gt;// This comment follows the statement
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Multiline comments start with a forward slash and an asterisk &lt;code&gt;/*&lt;/code&gt; and end with an asterisk and a forward slash &lt;code&gt;*/&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/* An example with two messages.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;This is a multiline comment.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;World&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The content of comments is ignored, so if we put code inside &lt;code&gt;/* &amp;hellip; */&lt;/code&gt;, it won&amp;rsquo;t execute.&lt;/p&gt;
&lt;p&gt;Sometimes it can be handy to temporarily disable a part of code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/* Commenting out the code
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;alert(&amp;#39;Hello&amp;#39;);
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;World&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In most editors, a line of code can be commented out by pressing the &lt;code&gt;key:Ctrl+/&lt;/code&gt; hotkey for a single-line comment and something like &lt;code&gt;key:Ctrl+Shift+/&lt;/code&gt; &amp;ndash; for multiline comments (select a piece of code and press the hotkey). For Mac, try &lt;code&gt;key:Cmd&lt;/code&gt; instead of &lt;code&gt;key:Ctrl&lt;/code&gt; and &lt;code&gt;key:Option&lt;/code&gt; instead of &lt;code&gt;key:Shift&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There may not be &lt;code&gt;/*...*/&lt;/code&gt; inside another &lt;code&gt;/*...*/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Such code will die with an error:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;  /* nested comment ?!? */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt;/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;World&amp;#39;&lt;/span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Please, don&amp;rsquo;t hesitate to comment your code.&lt;/p&gt;
&lt;p&gt;Comments increase the overall code footprint, but that&amp;rsquo;s not a problem at all. There are many tools which minify code before publishing to a production server. They remove comments, so they don&amp;rsquo;t appear in the working scripts. Therefore, comments do not have negative effects on production at all.&lt;/p&gt;
&lt;p&gt;Later in the tutorial there will be a chapter &lt;a href=&#34;info:code-quality&#34;&gt;info:code-quality&lt;/a&gt; that also explains how to write better comments.&lt;/p&gt;
&lt;h2 id=&#34;the-modern-mode-use-strict&#34;&gt;The modern mode, &amp;ldquo;use strict&amp;rdquo;&lt;/h2&gt;
&lt;p&gt;For a long time, JavaScript evolved without compatibility issues. New features were added to the language while old functionality didn&amp;rsquo;t change.&lt;/p&gt;
&lt;p&gt;That had the benefit of never breaking existing code. But the downside was that any mistake or an imperfect decision made by JavaScript&amp;rsquo;s creators got stuck in the language forever.&lt;/p&gt;
&lt;p&gt;This was the case until 2009 when ECMAScript 5 (ES5) appeared. It added new features to the language and modified some of the existing ones. To keep the old code working, most such modifications are off by default. You need to explicitly enable them with a special directive: &lt;code&gt;&amp;quot;use strict&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;use-strict&#34;&gt;&amp;ldquo;use strict&amp;rdquo;&lt;/h3&gt;
&lt;p&gt;The directive looks like a string: &lt;code&gt;&amp;quot;use strict&amp;quot;&lt;/code&gt; or &lt;code&gt;&#39;use strict&#39;&lt;/code&gt;. When it is located at the top of a script, the whole script works the &amp;ldquo;modern&amp;rdquo; way.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;use strict&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// this code works the modern way
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Quite soon we&amp;rsquo;re going to learn functions (a way to group commands), so let&amp;rsquo;s note in advance that &lt;code&gt;&amp;quot;use strict&amp;quot;&lt;/code&gt; can be put at the beginning of a function. Doing that enables strict mode in that function only. But usually people use it for the whole script.&lt;/p&gt;
&lt;p&gt;Please make sure that &lt;code&gt;&amp;quot;use strict&amp;quot;&lt;/code&gt; is at the top of your scripts, otherwise strict mode may not be enabled.&lt;/p&gt;
&lt;p&gt;Strict mode isn&amp;rsquo;t enabled here:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;some code&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// &amp;#34;use strict&amp;#34; below is ignored--it must be at the top
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;use strict&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// strict mode is not activated
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Only comments may appear above &lt;code&gt;&amp;quot;use strict&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There is no directive like &lt;code&gt;&amp;quot;no use strict&amp;quot;&lt;/code&gt; that reverts the engine to old behavior.&lt;/p&gt;
&lt;p&gt;Once we enter strict mode, there&amp;rsquo;s no going back.&lt;/p&gt;
&lt;h3 id=&#34;browser-console&#34;&gt;Browser console&lt;/h3&gt;
&lt;p&gt;When you use a &lt;a href=&#34;info:devtools&#34;&gt;developer console&lt;/a&gt; to run code, please note that it doesn&amp;rsquo;t &lt;code&gt;use strict&lt;/code&gt; by default.&lt;/p&gt;
&lt;p&gt;Sometimes, when &lt;code&gt;use strict&lt;/code&gt; makes a difference, you&amp;rsquo;ll get incorrect results.&lt;/p&gt;
&lt;p&gt;So, how to actually &lt;code&gt;use strict&lt;/code&gt; in the console?&lt;/p&gt;
&lt;p&gt;First, you can try to press &lt;code&gt;key:Shift+Enter&lt;/code&gt; to input multiple lines, and put &lt;code&gt;use strict&lt;/code&gt; on top, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;use strict&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;Shift&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;Enter &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; a newline&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;//  ...your code
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;Enter to run&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It works in most browsers, namely Firefox and Chrome.&lt;/p&gt;
&lt;p&gt;If it doesn&amp;rsquo;t, e.g. in an old browser, there&amp;rsquo;s an ugly, but reliable way to ensure &lt;code&gt;use strict&lt;/code&gt;. Put it inside this kind of wrapper:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;use strict&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// ...your code here...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;})()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;should-we-use-strict&#34;&gt;Should we &amp;ldquo;use strict&amp;rdquo;?&lt;/h3&gt;
&lt;p&gt;The question may sound obvious, but it&amp;rsquo;s not so.&lt;/p&gt;
&lt;p&gt;One could recommend to start scripts with &lt;code&gt;&amp;quot;use strict&amp;quot;&lt;/code&gt;&amp;hellip; But you know what&amp;rsquo;s cool?&lt;/p&gt;
&lt;p&gt;Modern JavaScript supports &amp;ldquo;classes&amp;rdquo; and &amp;ldquo;modules&amp;rdquo; - advanced language structures (we&amp;rsquo;ll surely get to them), that enable &lt;code&gt;use strict&lt;/code&gt; automatically. So we don&amp;rsquo;t need to add the &lt;code&gt;&amp;quot;use strict&amp;quot;&lt;/code&gt; directive, if we use them.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;So, for now &lt;code&gt;&amp;quot;use strict&amp;quot;;&lt;/code&gt; is a welcome guest at the top of your scripts. Later, when your code is all in classes and modules, you may omit it.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As of now, we&amp;rsquo;ve got to know about &lt;code&gt;use strict&lt;/code&gt; in general.&lt;/p&gt;
&lt;p&gt;In the next chapters, as we learn language features, we&amp;rsquo;ll see the differences between the strict and old modes. Luckily, there aren&amp;rsquo;t many and they actually make our lives better.&lt;/p&gt;
&lt;p&gt;All examples in this tutorial assume strict mode unless (very rarely) specified otherwise.&lt;/p&gt;
&lt;h2 id=&#34;variables&#34;&gt;Variables&lt;/h2&gt;
&lt;p&gt;Most of the time, a JavaScript application needs to work with information. Here are two examples:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;An online shop &amp;ndash; the information might include goods being sold and a shopping cart.&lt;/li&gt;
&lt;li&gt;A chat application &amp;ndash; the information might include users, messages, and much more.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Variables are used to store this information.&lt;/p&gt;
&lt;h3 id=&#34;a-variable&#34;&gt;A variable&lt;/h3&gt;
&lt;p&gt;A &lt;a href=&#34;https://en.wikipedia.org/wiki/Variable_(computer_science)&#34;&gt;variable&lt;/a&gt; is a &amp;ldquo;named storage&amp;rdquo; for data. We can use variables to store goodies, visitors, and other data.&lt;/p&gt;
&lt;p&gt;To create a variable in JavaScript, use the &lt;code&gt;let&lt;/code&gt; keyword.&lt;/p&gt;
&lt;p&gt;The statement below creates (in other words: &lt;em&gt;declares&lt;/em&gt;) a variable with the name &amp;ldquo;message&amp;rdquo;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; message;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, we can put some data into it by using the assignment operator &lt;code&gt;=&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; message;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;message &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// store the string
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The string is now saved into the memory area associated with the variable. We can access it using the variable name:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; message;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;message &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Hello!&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(message); &lt;span style=&#34;color:#6272a4&#34;&gt;// shows the variable content
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To be concise, we can combine the variable declaration and assignment into a single line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; message &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Hello!&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// define the variable and assign the value
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(message); &lt;span style=&#34;color:#6272a4&#34;&gt;// Hello!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can also declare multiple variables in one line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;John&amp;#39;&lt;/span&gt;, age &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;25&lt;/span&gt;, message &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That might seem shorter, but we don&amp;rsquo;t recommend it. For the sake of better readability, please use a single line per variable.&lt;/p&gt;
&lt;p&gt;The multiline variant is a bit longer, but easier to read:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;John&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; age &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;25&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; message &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Some people also define multiple variables in this multiline style:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;John&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  age &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;25&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  message &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;hellip;Or even in the &amp;ldquo;comma-first&amp;rdquo; style:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;John&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  , age &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;25&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  , message &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Technically, all these variants do the same thing. So, it&amp;rsquo;s a matter of personal taste and aesthetics.&lt;/p&gt;
&lt;p&gt;In older scripts, you may also find another keyword: &lt;code&gt;var&lt;/code&gt; instead of &lt;code&gt;let&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;var&lt;/span&gt; message &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;var&lt;/code&gt; keyword is &lt;em&gt;almost&lt;/em&gt; the same as &lt;code&gt;let&lt;/code&gt;. It also declares a variable, but in a slightly different, &amp;ldquo;old-school&amp;rdquo; way.&lt;/p&gt;
&lt;p&gt;There are subtle differences between &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;var&lt;/code&gt;, but they do not matter for us yet. We&amp;rsquo;ll cover them in detail in the chapter &lt;a href=&#34;info:var&#34;&gt;info:var&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;a-real-life-analogy&#34;&gt;A real-life analogy&lt;/h3&gt;
&lt;p&gt;We can easily grasp the concept of a &amp;ldquo;variable&amp;rdquo; if we imagine it as a &amp;ldquo;box&amp;rdquo; for data, with a uniquely-named sticker on it.&lt;/p&gt;
&lt;p&gt;For instance, the variable &lt;code&gt;message&lt;/code&gt; can be imagined as a box labeled &lt;code&gt;&amp;quot;message&amp;quot;&lt;/code&gt; with the value &lt;code&gt;&amp;quot;Hello!&amp;quot;&lt;/code&gt; in it:&lt;/p&gt;
&lt;p&gt;We can put any value in the box.&lt;/p&gt;
&lt;p&gt;We can also change it as many times as we want:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; message;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;message &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Hello!&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;message &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;World!&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// value changed
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(message);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When the value is changed, the old data is removed from the variable:&lt;/p&gt;
&lt;p&gt;We can also declare two variables and copy data from one into the other.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; hello &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Hello world!&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; message;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// copy &amp;#39;Hello world&amp;#39; from hello into message
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;message &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; hello;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// now two variables hold the same data
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert(hello); &lt;span style=&#34;color:#6272a4&#34;&gt;// Hello world!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert(message); &lt;span style=&#34;color:#6272a4&#34;&gt;// Hello world!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A variable should be declared only once.&lt;/p&gt;
&lt;p&gt;A repeated declaration of the same variable is an error:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; message &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;This&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// repeated &amp;#39;let&amp;#39; leads to an error
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; message &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;That&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// SyntaxError: &amp;#39;message&amp;#39; has already been declared
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, we should declare a variable once and then refer to it without &lt;code&gt;let&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s interesting to note that there exist &lt;a href=&#34;https://en.wikipedia.org/wiki/Functional_programming&#34;&gt;functional&lt;/a&gt; programming languages, like &lt;a href=&#34;http://www.scala-lang.org/&#34;&gt;Scala&lt;/a&gt; or &lt;a href=&#34;http://www.erlang.org/&#34;&gt;Erlang&lt;/a&gt; that forbid changing variable values.&lt;/p&gt;
&lt;p&gt;In such languages, once the value is stored &amp;ldquo;in the box&amp;rdquo;, it&amp;rsquo;s there forever. If we need to store something else, the language forces us to create a new box (declare a new variable). We can&amp;rsquo;t reuse the old one.&lt;/p&gt;
&lt;p&gt;Though it may seem a little odd at first sight, these languages are quite capable of serious development. More than that, there are areas like parallel computations where this limitation confers certain benefits. Studying such a language (even if you&amp;rsquo;re not planning to use it soon) is recommended to broaden the mind.&lt;/p&gt;
&lt;h3 id=&#34;variable-naming-variable-naming&#34;&gt;Variable naming [#variable-naming]&lt;/h3&gt;
&lt;p&gt;There are two limitations on variable names in JavaScript:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The name must contain only letters, digits, or the symbols &lt;code&gt;$&lt;/code&gt; and &lt;code&gt;_&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The first character must not be a digit.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Examples of valid names:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; userName;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; test123;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When the name contains multiple words, &lt;a href=&#34;https://en.wikipedia.org/wiki/CamelCase&#34;&gt;camelCase&lt;/a&gt; is commonly used. That is: words go one after another, each word except first starting with a capital letter: &lt;code&gt;myVeryLongName&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What&amp;rsquo;s interesting &amp;ndash; the dollar sign &lt;code&gt;&#39;$&#39;&lt;/code&gt; and the underscore &lt;code&gt;&#39;_&#39;&lt;/code&gt; can also be used in names. They are regular symbols, just like letters, without any special meaning.&lt;/p&gt;
&lt;p&gt;These names are valid:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; $ &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// declared a variable with the name &amp;#34;$&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; _ &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// and now a variable with the name &amp;#34;_&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert($ &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; _); &lt;span style=&#34;color:#6272a4&#34;&gt;// 3
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Examples of incorrect variable names:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;a; &lt;span style=&#34;color:#6272a4&#34;&gt;// cannot start with a digit
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; my&lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;name; &lt;span style=&#34;color:#6272a4&#34;&gt;// hyphens &amp;#39;-&amp;#39; aren&amp;#39;t allowed in the name
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Variables named &lt;code&gt;apple&lt;/code&gt; and &lt;code&gt;AppLE&lt;/code&gt; are two different variables.&lt;/p&gt;
&lt;p&gt;It is possible to use any language, including cyrillic letters or even hieroglyphs, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; имя &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;...&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; 我 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;...&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Technically, there is no error here. Such names are allowed, but there is an international convention to use English in variable names. Even if we&amp;rsquo;re writing a small script, it may have a long life ahead. People from other countries may need to read it some time.&lt;/p&gt;
&lt;p&gt;There is a &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Keywords&#34;&gt;list of reserved words&lt;/a&gt;, which cannot be used as variable names because they are used by the language itself.&lt;/p&gt;
&lt;p&gt;For example: &lt;code&gt;let&lt;/code&gt;, &lt;code&gt;class&lt;/code&gt;, &lt;code&gt;return&lt;/code&gt;, and &lt;code&gt;function&lt;/code&gt; are reserved.&lt;/p&gt;
&lt;p&gt;The code below gives a syntax error:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// can&amp;#39;t name a variable &amp;#34;let&amp;#34;, error!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// also can&amp;#39;t name it &amp;#34;return&amp;#34;, error!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Normally, we need to define a variable before using it. But in the old times, it was technically possible to create a variable by a mere assignment of the value without using &lt;code&gt;let&lt;/code&gt;. This still works now if we don&amp;rsquo;t put &lt;code&gt;use strict&lt;/code&gt; in our scripts to maintain compatibility with old scripts.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// note: no &amp;#34;use strict&amp;#34; in this example
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;num &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// the variable &amp;#34;num&amp;#34; is created if it didn&amp;#39;t exist
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(num); &lt;span style=&#34;color:#6272a4&#34;&gt;// 5
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is a bad practice and would cause an error in strict mode:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;use strict&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;num &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// error: num is not defined
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;constants&#34;&gt;Constants&lt;/h3&gt;
&lt;p&gt;To declare a constant (unchanging) variable, use &lt;code&gt;const&lt;/code&gt; instead of &lt;code&gt;let&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; myBirthday &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;18.04.1982&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Variables declared using &lt;code&gt;const&lt;/code&gt; are called &amp;ldquo;constants&amp;rdquo;. They cannot be reassigned. An attempt to do so would cause an error:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; myBirthday &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;18.04.1982&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;myBirthday &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;01.01.2001&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// error, can&amp;#39;t reassign the constant!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When a programmer is sure that a variable will never change, they can declare it with &lt;code&gt;const&lt;/code&gt; to guarantee and clearly communicate that fact to everyone.&lt;/p&gt;
&lt;h4 id=&#34;uppercase-constants&#34;&gt;Uppercase constants&lt;/h4&gt;
&lt;p&gt;There is a widespread practice to use constants as aliases for difficult-to-remember values that are known prior to execution.&lt;/p&gt;
&lt;p&gt;Such constants are named using capital letters and underscores.&lt;/p&gt;
&lt;p&gt;For instance, let&amp;rsquo;s make constants for colors in so-called &amp;ldquo;web&amp;rdquo; (hexadecimal) format:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; COLOR_RED &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;#F00&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; COLOR_GREEN &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;#0F0&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; COLOR_BLUE &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;#00F&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; COLOR_ORANGE &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;#FF7F00&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// ...when we need to pick a color
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; color &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; COLOR_ORANGE;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(color); &lt;span style=&#34;color:#6272a4&#34;&gt;// #FF7F00
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Benefits:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;COLOR_ORANGE&lt;/code&gt; is much easier to remember than &lt;code&gt;&amp;quot;#FF7F00&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;It is much easier to mistype &lt;code&gt;&amp;quot;#FF7F00&amp;quot;&lt;/code&gt; than &lt;code&gt;COLOR_ORANGE&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;When reading the code, &lt;code&gt;COLOR_ORANGE&lt;/code&gt; is much more meaningful than &lt;code&gt;#FF7F00&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When should we use capitals for a constant and when should we name it normally? Let&amp;rsquo;s make that clear.&lt;/p&gt;
&lt;p&gt;Being a &amp;ldquo;constant&amp;rdquo; just means that a variable&amp;rsquo;s value never changes. But there are constants that are known prior to execution (like a hexadecimal value for red) and there are constants that are &lt;em&gt;calculated&lt;/em&gt; in run-time, during the execution, but do not change after their initial assignment.&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; pageLoadTime &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;/* time taken by a webpage to load */&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The value of &lt;code&gt;pageLoadTime&lt;/code&gt; is not known prior to the page load, so it&amp;rsquo;s named normally. But it&amp;rsquo;s still a constant because it doesn&amp;rsquo;t change after assignment.&lt;/p&gt;
&lt;p&gt;In other words, capital-named constants are only used as aliases for &amp;ldquo;hard-coded&amp;rdquo; values.&lt;/p&gt;
&lt;h3 id=&#34;name-things-right&#34;&gt;Name things right&lt;/h3&gt;
&lt;p&gt;Talking about variables, there&amp;rsquo;s one more extremely important thing.&lt;/p&gt;
&lt;p&gt;A variable name should have a clean, obvious meaning, describing the data that it stores.&lt;/p&gt;
&lt;p&gt;Variable naming is one of the most important and complex skills in programming. A quick glance at variable names can reveal which code was written by a beginner versus an experienced developer.&lt;/p&gt;
&lt;p&gt;In a real project, most of the time is spent modifying and extending an existing code base rather than writing something completely separate from scratch. When we return to some code after doing something else for a while, it&amp;rsquo;s much easier to find information that is well-labeled. Or, in other words, when the variables have good names.&lt;/p&gt;
&lt;p&gt;Please spend time thinking about the right name for a variable before declaring it. Doing so will repay you handsomely.&lt;/p&gt;
&lt;p&gt;Some good-to-follow rules are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use human-readable names like &lt;code&gt;userName&lt;/code&gt; or &lt;code&gt;shoppingCart&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Stay away from abbreviations or short names like &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;c&lt;/code&gt;, unless you really know what you&amp;rsquo;re doing.&lt;/li&gt;
&lt;li&gt;Make names maximally descriptive and concise. Examples of bad names are &lt;code&gt;data&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt;. Such names say nothing. It&amp;rsquo;s only okay to use them if the context of the code makes it exceptionally obvious which data or value the variable is referencing.&lt;/li&gt;
&lt;li&gt;Agree on terms within your team and in your own mind. If a site visitor is called a &amp;ldquo;user&amp;rdquo; then we should name related variables &lt;code&gt;currentUser&lt;/code&gt; or &lt;code&gt;newUser&lt;/code&gt; instead of &lt;code&gt;currentVisitor&lt;/code&gt; or &lt;code&gt;newManInTown&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sounds simple? Indeed it is, but creating descriptive and concise variable names in practice is not. Go for it.&lt;/p&gt;
&lt;p&gt;And the last note. There are some lazy programmers who, instead of declaring new variables, tend to reuse existing ones.&lt;/p&gt;
&lt;p&gt;As a result, their variables are like boxes into which people throw different things without changing their stickers. What&amp;rsquo;s inside the box now? Who knows? We need to come closer and check.&lt;/p&gt;
&lt;p&gt;Such programmers save a little bit on variable declaration but lose ten times more on debugging.&lt;/p&gt;
&lt;p&gt;An extra variable is good, not evil.&lt;/p&gt;
&lt;p&gt;Modern JavaScript minifiers and browsers optimize code well enough, so it won&amp;rsquo;t create performance issues. Using different variables for different values can even help the engine optimize your code.&lt;/p&gt;
&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;We can declare variables to store data by using the &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, or &lt;code&gt;const&lt;/code&gt; keywords.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;let&lt;/code&gt; &amp;ndash; is a modern variable declaration.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;var&lt;/code&gt; &amp;ndash; is an old-school variable declaration. Normally we don&amp;rsquo;t use it at all, but we&amp;rsquo;ll cover subtle differences from &lt;code&gt;let&lt;/code&gt; in the chapter &lt;a href=&#34;info:var&#34;&gt;info:var&lt;/a&gt;, just in case you need them.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const&lt;/code&gt; &amp;ndash; is like &lt;code&gt;let&lt;/code&gt;, but the value of the variable can&amp;rsquo;t be changed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Variables should be named in a way that allows us to easily understand what&amp;rsquo;s inside them.&lt;/p&gt;
&lt;h2 id=&#34;data-types&#34;&gt;Data types&lt;/h2&gt;
&lt;p&gt;A value in JavaScript is always of a certain type. For example, a string or a number.&lt;/p&gt;
&lt;p&gt;There are eight basic data types in JavaScript. Here, we&amp;rsquo;ll cover them in general and in the next chapters we&amp;rsquo;ll talk about each of them in detail.&lt;/p&gt;
&lt;p&gt;We can put any type in a variable. For example, a variable can at one moment be a string and then store a number:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// no error
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; message &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;message &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;123456&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Programming languages that allow such things, such as JavaScript, are called &amp;ldquo;dynamically typed&amp;rdquo;, meaning that there exist data types, but variables are not bound to any of them.&lt;/p&gt;
&lt;h3 id=&#34;number&#34;&gt;Number&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; n &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;123&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;n &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;12.345&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;em&gt;number&lt;/em&gt; type represents both integer and floating point numbers.&lt;/p&gt;
&lt;p&gt;There are many operations for numbers, e.g. multiplication &lt;code&gt;*&lt;/code&gt;, division &lt;code&gt;/&lt;/code&gt;, addition &lt;code&gt;+&lt;/code&gt;, subtraction &lt;code&gt;-&lt;/code&gt;, and so on.&lt;/p&gt;
&lt;p&gt;Besides regular numbers, there are so-called &amp;ldquo;special numeric values&amp;rdquo; which also belong to this data type: &lt;code&gt;Infinity&lt;/code&gt;, &lt;code&gt;-Infinity&lt;/code&gt; and &lt;code&gt;NaN&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Infinity&lt;/code&gt; represents the mathematical &lt;a href=&#34;https://en.wikipedia.org/wiki/Infinity&#34;&gt;Infinity&lt;/a&gt; ∞. It is a special value that&amp;rsquo;s greater than any number.&lt;/p&gt;
&lt;p&gt;We can get it as a result of division by zero:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// Infinity
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or just reference it directly:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#ff79c6&#34;&gt;Infinity&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// Infinity
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;NaN&lt;/code&gt; represents a computational error. It is a result of an incorrect or an undefined mathematical operation, for instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;not a number&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// NaN, such division is erroneous
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;NaN&lt;/code&gt; is sticky. Any further operation on &lt;code&gt;NaN&lt;/code&gt; returns &lt;code&gt;NaN&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;not a number&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// NaN
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, if there&amp;rsquo;s a &lt;code&gt;NaN&lt;/code&gt; somewhere in a mathematical expression, it propagates to the whole result.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Doing maths is &amp;ldquo;safe&amp;rdquo; in JavaScript. We can do anything: divide by zero, treat non-numeric strings as numbers, etc.&lt;/p&gt;
&lt;p&gt;The script will never stop with a fatal error (&amp;ldquo;die&amp;rdquo;). At worst, we&amp;rsquo;ll get &lt;code&gt;NaN&lt;/code&gt; as the result.&lt;/p&gt;
&lt;p&gt;Special numeric values formally belong to the &amp;ldquo;number&amp;rdquo; type. Of course they are not numbers in the common sense of this word.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll see more about working with numbers in the chapter &lt;a href=&#34;info:number&#34;&gt;info:number&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;bigint&#34;&gt;BigInt&lt;/h3&gt;
&lt;p&gt;In JavaScript, the &amp;ldquo;number&amp;rdquo; type cannot represent integer values larger than &lt;code&gt;(2&lt;sup&gt;53&lt;/sup&gt;-1)&lt;/code&gt; (that&amp;rsquo;s &lt;code&gt;9007199254740991&lt;/code&gt;), or less than &lt;code&gt;-(2&lt;sup&gt;53&lt;/sup&gt;-1)&lt;/code&gt; for negatives. It&amp;rsquo;s a technical limitation caused by their internal representation.&lt;/p&gt;
&lt;p&gt;For most purposes that&amp;rsquo;s quite enough, but sometimes we need really big numbers, e.g. for cryptography or microsecond-precision timestamps.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;BigInt&lt;/code&gt; type was recently added to the language to represent integers of arbitrary length.&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;BigInt&lt;/code&gt; value is created by appending &lt;code&gt;n&lt;/code&gt; to the end of an integer:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// the &amp;#34;n&amp;#34; at the end means it&amp;#39;s a BigInt
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; bigInt &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1234567890123456789012345678901234567890&lt;/span&gt;n;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As &lt;code&gt;BigInt&lt;/code&gt; numbers are rarely needed, we don&amp;rsquo;t cover them here, but devoted them a separate chapter &lt;a href=&#34;info:bigint&#34;&gt;info:bigint&lt;/a&gt;. Read it when you need such big numbers.&lt;/p&gt;
&lt;p&gt;Right now &lt;code&gt;BigInt&lt;/code&gt; is supported in Firefox/Chrome/Edge, but not in Safari/IE.&lt;/p&gt;
&lt;h3 id=&#34;string&#34;&gt;String&lt;/h3&gt;
&lt;p&gt;A string in JavaScript must be surrounded by quotes.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; str &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; str2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Single quotes are ok too&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; phrase &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;`can embed another &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;str&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In JavaScript, there are 3 types of quotes.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Double quotes: &lt;code&gt;&amp;quot;Hello&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Single quotes: &lt;code&gt;&#39;Hello&#39;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Backticks: &lt;code&gt;`Hello`&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Double and single quotes are &amp;ldquo;simple&amp;rdquo; quotes. There&amp;rsquo;s practically no difference between them in JavaScript.&lt;/p&gt;
&lt;p&gt;Backticks are &amp;ldquo;extended functionality&amp;rdquo; quotes. They allow us to embed variables and expressions into a string by wrapping them in &lt;code&gt;${…}&lt;/code&gt;, for example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// embed a variable
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;`Hello, &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;name&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;!`&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// Hello, John!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// embed an expression
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;`the result is &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// the result is 3
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The expression inside &lt;code&gt;${…}&lt;/code&gt; is evaluated and the result becomes a part of the string. We can put anything in there: a variable like &lt;code&gt;name&lt;/code&gt; or an arithmetical expression like &lt;code&gt;1 + 2&lt;/code&gt; or something more complex.&lt;/p&gt;
&lt;p&gt;Please note that this can only be done in backticks. Other quotes don&amp;rsquo;t have this embedding functionality!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;the result is ${1 + 2}&amp;#34;&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// the result is ${1 + 2} (double quotes do nothing)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&amp;rsquo;ll cover strings more thoroughly in the chapter &lt;a href=&#34;info:string&#34;&gt;info:string&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In some languages, there is a special &amp;ldquo;character&amp;rdquo; type for a single character. For example, in the C language and in Java it is called &amp;ldquo;char&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;In JavaScript, there is no such type. There&amp;rsquo;s only one type: &lt;code&gt;string&lt;/code&gt;. A string may consist of only one character or many of them.&lt;/p&gt;
&lt;h3 id=&#34;boolean-logical-type&#34;&gt;Boolean (logical type)&lt;/h3&gt;
&lt;p&gt;The boolean type has only two values: &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This type is commonly used to store yes/no values: &lt;code&gt;true&lt;/code&gt; means &amp;ldquo;yes, correct&amp;rdquo;, and &lt;code&gt;false&lt;/code&gt; means &amp;ldquo;no, incorrect&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; nameFieldChecked &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// yes, name field is checked
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; ageFieldChecked &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// no, age field is not checked
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Boolean values also come as a result of comparisons:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; isGreater &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( isGreater ); &lt;span style=&#34;color:#6272a4&#34;&gt;// true (the comparison result is &amp;#34;yes&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&amp;rsquo;ll cover booleans more deeply in the chapter &lt;a href=&#34;info:logical-operators&#34;&gt;info:logical-operators&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;the-null-value&#34;&gt;The &amp;ldquo;null&amp;rdquo; value&lt;/h3&gt;
&lt;p&gt;The special &lt;code&gt;null&lt;/code&gt; value does not belong to any of the types described above.&lt;/p&gt;
&lt;p&gt;It forms a separate type of its own which contains only the &lt;code&gt;null&lt;/code&gt; value:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; age &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In JavaScript, &lt;code&gt;null&lt;/code&gt; is not a &amp;ldquo;reference to a non-existing object&amp;rdquo; or a &amp;ldquo;null pointer&amp;rdquo; like in some other languages.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s just a special value which represents &amp;ldquo;nothing&amp;rdquo;, &amp;ldquo;empty&amp;rdquo; or &amp;ldquo;value unknown&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;The code above states that &lt;code&gt;age&lt;/code&gt; is unknown.&lt;/p&gt;
&lt;h3 id=&#34;the-undefined-value&#34;&gt;The &amp;ldquo;undefined&amp;rdquo; value&lt;/h3&gt;
&lt;p&gt;The special value &lt;code&gt;undefined&lt;/code&gt; also stands apart. It makes a type of its own, just like &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The meaning of &lt;code&gt;undefined&lt;/code&gt; is &amp;ldquo;value is not assigned&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;If a variable is declared, but not assigned, then its value is &lt;code&gt;undefined&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; age;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(age); &lt;span style=&#34;color:#6272a4&#34;&gt;// shows &amp;#34;undefined&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Technically, it is possible to explicitly assign &lt;code&gt;undefined&lt;/code&gt; to a variable:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; age &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// change the value to undefined
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;age &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;undefined&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(age); &lt;span style=&#34;color:#6272a4&#34;&gt;// &amp;#34;undefined&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;hellip;But we don&amp;rsquo;t recommend doing that. Normally, one uses &lt;code&gt;null&lt;/code&gt; to assign an &amp;ldquo;empty&amp;rdquo; or &amp;ldquo;unknown&amp;rdquo; value to a variable, while &lt;code&gt;undefined&lt;/code&gt; is reserved as a default initial value for unassigned things.&lt;/p&gt;
&lt;h3 id=&#34;objects-and-symbols&#34;&gt;Objects and Symbols&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;object&lt;/code&gt; type is special.&lt;/p&gt;
&lt;p&gt;All other types are called &amp;ldquo;primitive&amp;rdquo; because their values can contain only a single thing (be it a string or a number or whatever). In contrast, objects are used to store collections of data and more complex entities.&lt;/p&gt;
&lt;p&gt;Being that important, objects deserve a special treatment. We&amp;rsquo;ll deal with them later in the chapter &lt;a href=&#34;info:object&#34;&gt;info:object&lt;/a&gt;, after we learn more about primitives.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;symbol&lt;/code&gt; type is used to create unique identifiers for objects. We have to mention it here for the sake of completeness, but also postpone the details till we know objects.&lt;/p&gt;
&lt;h3 id=&#34;the-typeof-operator-type-typeof&#34;&gt;The typeof operator [#type-typeof]&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;typeof&lt;/code&gt; operator returns the type of the argument. It&amp;rsquo;s useful when we want to process values of different types differently or just want to do a quick check.&lt;/p&gt;
&lt;p&gt;It supports two forms of syntax:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;As an operator: &lt;code&gt;typeof x&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;As a function: &lt;code&gt;typeof(x)&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In other words, it works with parentheses or without them. The result is the same.&lt;/p&gt;
&lt;p&gt;The call to &lt;code&gt;typeof x&lt;/code&gt; returns a string with the type name:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;typeof&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;undefined&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;// &amp;#34;undefined&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;typeof&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;// &amp;#34;number&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;typeof&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;n &lt;span style=&#34;color:#6272a4&#34;&gt;// &amp;#34;bigint&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;typeof&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;// &amp;#34;boolean&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;typeof&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;// &amp;#34;string&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;typeof&lt;/span&gt; Symbol(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#6272a4&#34;&gt;// &amp;#34;symbol&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;typeof&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Math&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;// &amp;#34;object&amp;#34;  (1)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;typeof&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;// &amp;#34;object&amp;#34;  (2)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;typeof&lt;/span&gt; alert &lt;span style=&#34;color:#6272a4&#34;&gt;// &amp;#34;function&amp;#34;  (3)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The last three lines may need additional explanation:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Math&lt;/code&gt; is a built-in object that provides mathematical operations. We will learn it in the chapter &lt;a href=&#34;info:number&#34;&gt;info:number&lt;/a&gt;. Here, it serves just as an example of an object.&lt;/li&gt;
&lt;li&gt;The result of &lt;code&gt;typeof null&lt;/code&gt; is &lt;code&gt;&amp;quot;object&amp;quot;&lt;/code&gt;. That&amp;rsquo;s an officially recognized error in &lt;code&gt;typeof&lt;/code&gt; behavior, coming from the early days of JavaScript and kept for compatibility. Definitely, &lt;code&gt;null&lt;/code&gt; is not an object. It is a special value with a separate type of its own.&lt;/li&gt;
&lt;li&gt;The result of &lt;code&gt;typeof alert&lt;/code&gt; is &lt;code&gt;&amp;quot;function&amp;quot;&lt;/code&gt;, because &lt;code&gt;alert&lt;/code&gt; is a function. We&amp;rsquo;ll study functions in the next chapters where we&amp;rsquo;ll also see that there&amp;rsquo;s no special &amp;ldquo;function&amp;rdquo; type in JavaScript. Functions belong to the object type. But &lt;code&gt;typeof&lt;/code&gt; treats them differently, returning &lt;code&gt;&amp;quot;function&amp;quot;&lt;/code&gt;. That also comes from the early days of JavaScript. Technically, such behavior isn&amp;rsquo;t correct, but can be convenient in practice.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;summary-1&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;There are 8 basic data types in JavaScript.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;number&lt;/code&gt; for numbers of any kind: integer or floating-point, integers are limited by ±2&lt;sup&gt;53&lt;/sup&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bigint&lt;/code&gt; is for integer numbers of arbitrary length.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;string&lt;/code&gt; for strings. A string may have zero or more characters, there&amp;rsquo;s no separate single-character type.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boolean&lt;/code&gt; for &lt;code&gt;true&lt;/code&gt;/&lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;null&lt;/code&gt; for unknown values &amp;ndash; a standalone type that has a single value &lt;code&gt;null&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;undefined&lt;/code&gt; for unassigned values &amp;ndash; a standalone type that has a single value &lt;code&gt;undefined&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;object&lt;/code&gt; for more complex data structures.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;symbol&lt;/code&gt; for unique identifiers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;typeof&lt;/code&gt; operator allows us to see which type is stored in a variable.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Two forms: &lt;code&gt;typeof x&lt;/code&gt; or &lt;code&gt;typeof(x)&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Returns a string with the name of the type, like &lt;code&gt;&amp;quot;string&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;For &lt;code&gt;null&lt;/code&gt; returns &lt;code&gt;&amp;quot;object&amp;quot;&lt;/code&gt; &amp;ndash; this is an error in the language, it&amp;rsquo;s not actually an object.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the next chapters, we&amp;rsquo;ll concentrate on primitive values and once we&amp;rsquo;re familiar with them, we&amp;rsquo;ll move on to objects.&lt;/p&gt;
&lt;h2 id=&#34;interaction-alert-prompt-confirm&#34;&gt;Interaction: alert, prompt, confirm&lt;/h2&gt;
&lt;p&gt;As we&amp;rsquo;ll be using the browser as our demo environment, let&amp;rsquo;s see a couple of functions to interact with the user: &lt;code&gt;alert&lt;/code&gt;, &lt;code&gt;prompt&lt;/code&gt; and &lt;code&gt;confirm&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;alert&#34;&gt;alert&lt;/h3&gt;
&lt;p&gt;This one we&amp;rsquo;ve seen already. It shows a message and waits for the user to press &amp;ldquo;OK&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The mini-window with the message is called a &lt;em&gt;modal window&lt;/em&gt;. The word &amp;ldquo;modal&amp;rdquo; means that the visitor can&amp;rsquo;t interact with the rest of the page, press other buttons, etc, until they have dealt with the window. In this case &amp;ndash; until they press &amp;ldquo;OK&amp;rdquo;.&lt;/p&gt;
&lt;h3 id=&#34;prompt&#34;&gt;prompt&lt;/h3&gt;
&lt;p&gt;The function &lt;code&gt;prompt&lt;/code&gt; accepts two arguments:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;result &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; prompt(title, [&lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It shows a modal window with a text message, an input field for the visitor, and the buttons OK/Cancel.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;title&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;The text to show the visitor.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;default&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;An optional second parameter, the initial value for the input field.&lt;/dd&gt;
&lt;/dl&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;The square brackets around `default` in the syntax above denote that the parameter as optional, not required.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The visitor can type something in the prompt input field and press OK. Then we get that text in the &lt;code&gt;result&lt;/code&gt;. Or they can cancel the input by pressing Cancel or hitting the &lt;code&gt;key:Esc&lt;/code&gt; key, then we get &lt;code&gt;null&lt;/code&gt; as the &lt;code&gt;result&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The call to &lt;code&gt;prompt&lt;/code&gt; returns the text from the input field or &lt;code&gt;null&lt;/code&gt; if the input was canceled.&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; age &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; prompt(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;How old are you?&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;`You are &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;age&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt; years old!`&lt;/span&gt;); &lt;span style=&#34;color:#6272a4&#34;&gt;// You are 100 years old!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The second parameter is optional, but if we don&amp;rsquo;t supply it, Internet Explorer will insert the text &lt;code&gt;&amp;quot;undefined&amp;quot;&lt;/code&gt; into the prompt.&lt;/p&gt;
&lt;p&gt;Run this code in Internet Explorer to see:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; test &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; prompt(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Test&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, for prompts to look good in IE, we recommend always providing the second argument:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; test &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; prompt(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Test&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#6272a4&#34;&gt;// &amp;lt;-- for IE
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;confirm&#34;&gt;confirm&lt;/h3&gt;
&lt;p&gt;The syntax:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;result &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; confirm(question);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The function &lt;code&gt;confirm&lt;/code&gt; shows a modal window with a &lt;code&gt;question&lt;/code&gt; and two buttons: OK and Cancel.&lt;/p&gt;
&lt;p&gt;The result is &lt;code&gt;true&lt;/code&gt; if OK is pressed and &lt;code&gt;false&lt;/code&gt; otherwise.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; isBoss &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; confirm(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Are you the boss?&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( isBoss ); &lt;span style=&#34;color:#6272a4&#34;&gt;// true if OK is pressed
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;summary-2&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;We covered 3 browser-specific functions to interact with visitors:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;alert&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;shows a message.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;prompt&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;shows a message asking the user to input text. It returns the text or, if Cancel button or &lt;code&gt;key:Esc&lt;/code&gt; is clicked, &lt;code&gt;null&lt;/code&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;confirm&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;shows a message and waits for the user to press &amp;ldquo;OK&amp;rdquo; or &amp;ldquo;Cancel&amp;rdquo;. It returns &lt;code&gt;true&lt;/code&gt; for OK and &lt;code&gt;false&lt;/code&gt; for Cancel/&lt;code&gt;key:Esc&lt;/code&gt;.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;All these methods are modal: they pause script execution and don&amp;rsquo;t allow the visitor to interact with the rest of the page until the window has been dismissed.&lt;/p&gt;
&lt;p&gt;There are two limitations shared by all the methods above:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The exact location of the modal window is determined by the browser. Usually, it&amp;rsquo;s in the center.&lt;/li&gt;
&lt;li&gt;The exact look of the window also depends on the browser. We can&amp;rsquo;t modify it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That is the price for simplicity. There are other ways to show nicer windows and richer interaction with the visitor, but if &amp;ldquo;bells and whistles&amp;rdquo; do not matter much, these methods work just fine.&lt;/p&gt;
&lt;h2 id=&#34;type-conversions&#34;&gt;Type Conversions&lt;/h2&gt;
&lt;p&gt;Most of the time, operators and functions automatically convert the values given to them to the right type.&lt;/p&gt;
&lt;p&gt;For example, &lt;code&gt;alert&lt;/code&gt; automatically converts any value to a string to show it. Mathematical operations convert values to numbers.&lt;/p&gt;
&lt;p&gt;There are also cases when we need to explicitly convert a value to the expected type.&lt;/p&gt;
&lt;p&gt;In this chapter, we won&amp;rsquo;t cover objects. For now we&amp;rsquo;ll just be talking about primitives.&lt;/p&gt;
&lt;p&gt;Later, after we learn about objects, in the chapter &lt;a href=&#34;info:object-toprimitive&#34;&gt;info:object-toprimitive&lt;/a&gt; we&amp;rsquo;ll see how objects fit in.&lt;/p&gt;
&lt;h3 id=&#34;string-conversion&#34;&gt;String Conversion&lt;/h3&gt;
&lt;p&gt;String conversion happens when we need the string form of a value.&lt;/p&gt;
&lt;p&gt;For example, &lt;code&gt;alert(value)&lt;/code&gt; does it to show the value.&lt;/p&gt;
&lt;p&gt;We can also call the &lt;code&gt;String(value)&lt;/code&gt; function to convert a value to a string:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; value &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(&lt;span style=&#34;color:#ff79c6&#34;&gt;typeof&lt;/span&gt; value); &lt;span style=&#34;color:#6272a4&#34;&gt;// boolean
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;value &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;String&lt;/span&gt;(value); &lt;span style=&#34;color:#6272a4&#34;&gt;// now value is a string &amp;#34;true&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert(&lt;span style=&#34;color:#ff79c6&#34;&gt;typeof&lt;/span&gt; value); &lt;span style=&#34;color:#6272a4&#34;&gt;// string
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;String conversion is mostly obvious. A &lt;code&gt;false&lt;/code&gt; becomes &lt;code&gt;&amp;quot;false&amp;quot;&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt; becomes &lt;code&gt;&amp;quot;null&amp;quot;&lt;/code&gt;, etc.&lt;/p&gt;
&lt;h3 id=&#34;numeric-conversion&#34;&gt;Numeric Conversion&lt;/h3&gt;
&lt;p&gt;Numeric conversion happens in mathematical functions and expressions automatically.&lt;/p&gt;
&lt;p&gt;For example, when division &lt;code&gt;/&lt;/code&gt; is applied to non-numbers:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;6&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// 3, strings are converted to numbers
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can use the &lt;code&gt;Number(value)&lt;/code&gt; function to explicitly convert a &lt;code&gt;value&lt;/code&gt; to a number:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; str &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;123&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(&lt;span style=&#34;color:#ff79c6&#34;&gt;typeof&lt;/span&gt; str); &lt;span style=&#34;color:#6272a4&#34;&gt;// string
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; num &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Number&lt;/span&gt;(str); &lt;span style=&#34;color:#6272a4&#34;&gt;// becomes a number 123
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(&lt;span style=&#34;color:#ff79c6&#34;&gt;typeof&lt;/span&gt; num); &lt;span style=&#34;color:#6272a4&#34;&gt;// number
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Explicit conversion is usually required when we read a value from a string-based source like a text form but expect a number to be entered.&lt;/p&gt;
&lt;p&gt;If the string is not a valid number, the result of such a conversion is &lt;code&gt;NaN&lt;/code&gt;. For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; age &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Number&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;an arbitrary string instead of a number&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(age); &lt;span style=&#34;color:#6272a4&#34;&gt;// NaN, conversion failed
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Numeric conversion rules:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Becomes&amp;hellip;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;true and false&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1&lt;/code&gt; and &lt;code&gt;0&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Whitespaces from the start and end are removed. If the remaining string is empty, the result is &lt;code&gt;0&lt;/code&gt;. Otherwise, the number is &amp;ldquo;read&amp;rdquo; from the string. An error gives &lt;code&gt;NaN&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Number&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;   123   &amp;#34;&lt;/span&gt;) ); &lt;span style=&#34;color:#6272a4&#34;&gt;// 123
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Number&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;123z&amp;#34;&lt;/span&gt;) );      &lt;span style=&#34;color:#6272a4&#34;&gt;// NaN (error reading a number at &amp;#34;z&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Number&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;) );        &lt;span style=&#34;color:#6272a4&#34;&gt;// 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Number&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;) );       &lt;span style=&#34;color:#6272a4&#34;&gt;// 0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Please note that &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt; behave differently here: &lt;code&gt;null&lt;/code&gt; becomes zero while &lt;code&gt;undefined&lt;/code&gt; becomes &lt;code&gt;NaN&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Most mathematical operators also perform such conversion, we&amp;rsquo;ll see that in the next chapter.&lt;/p&gt;
&lt;h3 id=&#34;boolean-conversion&#34;&gt;Boolean Conversion&lt;/h3&gt;
&lt;p&gt;Boolean conversion is the simplest one.&lt;/p&gt;
&lt;p&gt;It happens in logical operations (later we&amp;rsquo;ll meet condition tests and other similar things) but can also be performed explicitly with a call to &lt;code&gt;Boolean(value)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The conversion rule:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Values that are intuitively &amp;ldquo;empty&amp;rdquo;, like &lt;code&gt;0&lt;/code&gt;, an empty string, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;, and &lt;code&gt;NaN&lt;/code&gt;, become &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Other values become &lt;code&gt;true&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Boolean&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;) ); &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Boolean&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;) ); &lt;span style=&#34;color:#6272a4&#34;&gt;// false
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Boolean&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;) ); &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Boolean&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;) ); &lt;span style=&#34;color:#6272a4&#34;&gt;// false
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Some languages (namely PHP) treat &lt;code&gt;&amp;quot;0&amp;quot;&lt;/code&gt; as &lt;code&gt;false&lt;/code&gt;. But in JavaScript, a non-empty string is always &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Boolean&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;) ); &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Boolean&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;) ); &lt;span style=&#34;color:#6272a4&#34;&gt;// spaces, also true (any non-empty string is true)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;summary-3&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;The three most widely used type conversions are to string, to number, and to boolean.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;String Conversion&lt;/code&gt;&lt;/strong&gt; &amp;ndash; Occurs when we output something. Can be performed with &lt;code&gt;String(value)&lt;/code&gt;. The conversion to string is usually obvious for primitive values.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;Numeric Conversion&lt;/code&gt;&lt;/strong&gt; &amp;ndash; Occurs in math operations. Can be performed with &lt;code&gt;Number(value)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The conversion follows the rules:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Becomes&amp;hellip;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;NaN&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;true / false&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1 / 0&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The string is read &amp;ldquo;as is&amp;rdquo;, whitespaces from both sides are ignored. An empty string becomes &lt;code&gt;0&lt;/code&gt;. An error gives &lt;code&gt;NaN&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;Boolean Conversion&lt;/code&gt;&lt;/strong&gt; &amp;ndash; Occurs in logical operations. Can be performed with &lt;code&gt;Boolean(value)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Follows the rules:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;th&gt;Becomes&amp;hellip;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;0&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any other value&lt;/td&gt;
&lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Most of these rules are easy to understand and memorize. The notable exceptions where people usually make mistakes are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;undefined&lt;/code&gt; is &lt;code&gt;NaN&lt;/code&gt; as a number, not &lt;code&gt;0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;0&amp;quot;&lt;/code&gt; and space-only strings like &lt;code&gt;&amp;quot;   &amp;quot;&lt;/code&gt; are true as a boolean.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Objects aren&amp;rsquo;t covered here. We&amp;rsquo;ll return to them later in the chapter &lt;a href=&#34;info:object-toprimitive&#34;&gt;info:object-toprimitive&lt;/a&gt; that is devoted exclusively to objects after we learn more basic things about JavaScript.&lt;/p&gt;
&lt;h2 id=&#34;basic-operators-maths&#34;&gt;Basic operators, maths&lt;/h2&gt;
&lt;p&gt;We know many operators from school. They are things like addition &lt;code&gt;+&lt;/code&gt;, multiplication &lt;code&gt;*&lt;/code&gt;, subtraction &lt;code&gt;-&lt;/code&gt;, and so on.&lt;/p&gt;
&lt;p&gt;In this chapter, we’ll start with simple operators, then concentrate on JavaScript-specific aspects, not covered by school arithmetic.&lt;/p&gt;
&lt;h3 id=&#34;terms-unary-binary-operand&#34;&gt;Terms: &amp;ldquo;unary&amp;rdquo;, &amp;ldquo;binary&amp;rdquo;, &amp;ldquo;operand&amp;rdquo;&lt;/h3&gt;
&lt;p&gt;Before we move on, let&amp;rsquo;s grasp some common terminology.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;An operand&lt;/em&gt; &amp;ndash; is what operators are applied to. For instance, in the multiplication of &lt;code&gt;5 * 2&lt;/code&gt; there are two operands: the left operand is &lt;code&gt;5&lt;/code&gt; and the right operand is &lt;code&gt;2&lt;/code&gt;. Sometimes, people call these &amp;ldquo;arguments&amp;rdquo; instead of &amp;ldquo;operands&amp;rdquo;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An operator is &lt;em&gt;unary&lt;/em&gt; if it has a single operand. For example, the unary negation &lt;code&gt;-&lt;/code&gt; reverses the sign of a number:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; x &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;x;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( x ); &lt;span style=&#34;color:#6272a4&#34;&gt;// -1, unary negation was applied
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An operator is &lt;em&gt;binary&lt;/em&gt; if it has two operands. The same minus exists in binary form as well:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; x &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, y &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( y &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; x ); &lt;span style=&#34;color:#6272a4&#34;&gt;// 2, binary minus subtracts values
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Formally, in the examples above we have two different operators that share the same symbol: the negation operator, a unary operator that reverses the sign, and the subtraction operator, a binary operator that subtracts one number from another.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;maths&#34;&gt;Maths&lt;/h3&gt;
&lt;p&gt;The following math operations are supported:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Addition &lt;code&gt;+&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;Subtraction &lt;code&gt;-&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;Multiplication &lt;code&gt;*&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;Division &lt;code&gt;/&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;Remainder &lt;code&gt;%&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;Exponentiation &lt;code&gt;**&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first four are straightforward, while &lt;code&gt;%&lt;/code&gt; and &lt;code&gt;**&lt;/code&gt; need a few words about them.&lt;/p&gt;
&lt;h4 id=&#34;remainder-&#34;&gt;Remainder %&lt;/h4&gt;
&lt;p&gt;The remainder operator &lt;code&gt;%&lt;/code&gt;, despite its appearance, is not related to percents.&lt;/p&gt;
&lt;p&gt;The result of &lt;code&gt;a % b&lt;/code&gt; is the &lt;a href=&#34;https://en.wikipedia.org/wiki/Remainder&#34;&gt;remainder&lt;/a&gt; of the integer division of &lt;code&gt;a&lt;/code&gt; by &lt;code&gt;b&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// 1, a remainder of 5 divided by 2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#bd93f9&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// 2, a remainder of 8 divided by 3
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;exponentiation-&#34;&gt;Exponentiation **&lt;/h4&gt;
&lt;p&gt;The exponentiation operator &lt;code&gt;a ** b&lt;/code&gt; multiplies &lt;code&gt;a&lt;/code&gt; by itself &lt;code&gt;b&lt;/code&gt; times.&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// 4  (2 multiplied by itself 2 times)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// 8  (2 * 2 * 2, 3 times)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;**&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// 16 (2 * 2 * 2 * 2, 4 times)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Mathematically, the exponentiation is defined for non-integer numbers as well. For example, a square root is an exponentiation by &lt;code&gt;1/2&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;**&lt;/span&gt; (&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;) ); &lt;span style=&#34;color:#6272a4&#34;&gt;// 2 (power of 1/2 is the same as a square root)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#bd93f9&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;**&lt;/span&gt; (&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;) ); &lt;span style=&#34;color:#6272a4&#34;&gt;// 2 (power of 1/3 is the same as a cubic root)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;string-concatenation-with-binary-&#34;&gt;String concatenation with binary +&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s meet features of JavaScript operators that are beyond school arithmetics.&lt;/p&gt;
&lt;p&gt;Usually, the plus operator &lt;code&gt;+&lt;/code&gt; sums numbers.&lt;/p&gt;
&lt;p&gt;But, if the binary &lt;code&gt;+&lt;/code&gt; is applied to strings, it merges (concatenates) them:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; s &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;my&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(s); &lt;span style=&#34;color:#6272a4&#34;&gt;// mystring
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that if any of the operands is a string, then the other one is converted to a string too.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// &amp;#34;12&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// &amp;#34;21&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;See, it doesn&amp;rsquo;t matter whether the first operand is a string or the second one.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a more complex example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// &amp;#34;41&amp;#34; and not &amp;#34;221&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here, operators work one after another. The first &lt;code&gt;+&lt;/code&gt; sums two numbers, so it returns &lt;code&gt;4&lt;/code&gt;, then the next &lt;code&gt;+&lt;/code&gt; adds the string &lt;code&gt;1&lt;/code&gt; to it, so it&amp;rsquo;s like &lt;code&gt;4 + &#39;1&#39; = 41&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The binary &lt;code&gt;+&lt;/code&gt; is the only operator that supports strings in such a way. Other arithmetic operators work only with numbers and always convert their operands to numbers.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the demo for subtraction and division:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#bd93f9&#34;&gt;6&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// 4, converts &amp;#39;2&amp;#39; to a number
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;6&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// 3, converts both operands to numbers
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;numeric-conversion-unary-&#34;&gt;Numeric conversion, unary +&lt;/h3&gt;
&lt;p&gt;The plus &lt;code&gt;+&lt;/code&gt; exists in two forms: the binary form that we used above and the unary form.&lt;/p&gt;
&lt;p&gt;The unary plus or, in other words, the plus operator &lt;code&gt;+&lt;/code&gt; applied to a single value, doesn&amp;rsquo;t do anything to numbers. But if the operand is not a number, the unary plus converts it into a number.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// No effect on numbers
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; x &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;x ); &lt;span style=&#34;color:#6272a4&#34;&gt;// 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; y &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;y ); &lt;span style=&#34;color:#6272a4&#34;&gt;// -2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Converts non-numbers
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; );   &lt;span style=&#34;color:#6272a4&#34;&gt;// 0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It actually does the same thing as &lt;code&gt;Number(...)&lt;/code&gt;, but is shorter.&lt;/p&gt;
&lt;p&gt;The need to convert strings to numbers arises very often. For example, if we are getting values from HTML form fields, they are usually strings. What if we want to sum them?&lt;/p&gt;
&lt;p&gt;The binary plus would add them as strings:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; apples &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; oranges &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( apples &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; oranges ); &lt;span style=&#34;color:#6272a4&#34;&gt;// &amp;#34;23&amp;#34;, the binary plus concatenates strings
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If we want to treat them as numbers, we need to convert and then sum them:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; apples &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; oranges &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// both values converted to numbers before the binary plus
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;apples &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;oranges ); &lt;span style=&#34;color:#6272a4&#34;&gt;// 5
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// the longer variant
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// alert( Number(apples) + Number(oranges) ); // 5
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;From a mathematician&amp;rsquo;s standpoint, the abundance of pluses may seem strange. But from a programmer&amp;rsquo;s standpoint, there&amp;rsquo;s nothing special: unary pluses are applied first, they convert strings to numbers, and then the binary plus sums them up.&lt;/p&gt;
&lt;p&gt;Why are unary pluses applied to values before the binary ones? As we&amp;rsquo;re going to see, that&amp;rsquo;s because of their &lt;em&gt;higher precedence&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&#34;operator-precedence&#34;&gt;Operator precedence&lt;/h3&gt;
&lt;p&gt;If an expression has more than one operator, the execution order is defined by their &lt;em&gt;precedence&lt;/em&gt;, or, in other words, the default priority order of operators.&lt;/p&gt;
&lt;p&gt;From school, we all know that the multiplication in the expression &lt;code&gt;1 + 2 * 2&lt;/code&gt; should be calculated before the addition. That&amp;rsquo;s exactly the precedence thing. The multiplication is said to have &lt;em&gt;a higher precedence&lt;/em&gt; than the addition.&lt;/p&gt;
&lt;p&gt;Parentheses override any precedence, so if we&amp;rsquo;re not satisfied with the default order, we can use them to change it. For example, write &lt;code&gt;(1 + 2) * 2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There are many operators in JavaScript. Every operator has a corresponding precedence number. The one with the larger number executes first. If the precedence is the same, the execution order is from left to right.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s an extract from the &lt;a href=&#34;https://developer.mozilla.org/en/JavaScript/Reference/operators/operator_precedence&#34;&gt;precedence table&lt;/a&gt; (you don&amp;rsquo;t need to remember this, but note that unary operators are higher than corresponding binary ones):&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Precedence&lt;/th&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Sign&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;unary plus&lt;/td&gt;
&lt;td&gt;&lt;code&gt;+&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;td&gt;unary negation&lt;/td&gt;
&lt;td&gt;&lt;code&gt;-&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;exponentiation&lt;/td&gt;
&lt;td&gt;&lt;code&gt;**&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;multiplication&lt;/td&gt;
&lt;td&gt;&lt;code&gt;*&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;division&lt;/td&gt;
&lt;td&gt;&lt;code&gt;/&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;addition&lt;/td&gt;
&lt;td&gt;&lt;code&gt;+&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;subtraction&lt;/td&gt;
&lt;td&gt;&lt;code&gt;-&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;assignment&lt;/td&gt;
&lt;td&gt;&lt;code&gt;=&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;As we can see, the &amp;ldquo;unary plus&amp;rdquo; has a priority of &lt;code&gt;17&lt;/code&gt; which is higher than the &lt;code&gt;13&lt;/code&gt; of &amp;ldquo;addition&amp;rdquo; (binary plus). That&amp;rsquo;s why, in the expression &lt;code&gt;&amp;quot;+apples + +oranges&amp;quot;&lt;/code&gt;, unary pluses work before the addition.&lt;/p&gt;
&lt;h3 id=&#34;assignment&#34;&gt;Assignment&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s note that an assignment &lt;code&gt;=&lt;/code&gt; is also an operator. It is listed in the precedence table with the very low priority of &lt;code&gt;3&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s why, when we assign a variable, like &lt;code&gt;x = 2 * 2 + 1&lt;/code&gt;, the calculations are done first and then the &lt;code&gt;=&lt;/code&gt; is evaluated, storing the result in &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; x &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( x ); &lt;span style=&#34;color:#6272a4&#34;&gt;// 5
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;assignment--returns-a-value&#34;&gt;Assignment = returns a value&lt;/h4&gt;
&lt;p&gt;The fact of &lt;code&gt;=&lt;/code&gt; being an operator, not a &amp;ldquo;magical&amp;rdquo; language construct has an interesting implication.&lt;/p&gt;
&lt;p&gt;Most operators in JavaScript return a value. That&amp;rsquo;s obvious for &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;-&lt;/code&gt;, but also true for &lt;code&gt;=&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The call &lt;code&gt;x = value&lt;/code&gt; writes the &lt;code&gt;value&lt;/code&gt; into &lt;code&gt;x&lt;/code&gt; &lt;em&gt;and then returns it&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a demo that uses an assignment as part of a more complex expression:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; a &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; b &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; c &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; (a &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; b &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( a ); &lt;span style=&#34;color:#6272a4&#34;&gt;// 3
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( c ); &lt;span style=&#34;color:#6272a4&#34;&gt;// 0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the example above, the result of expression &lt;code&gt;(a = b + 1)&lt;/code&gt; is the value which was assigned to &lt;code&gt;a&lt;/code&gt; (that is &lt;code&gt;3&lt;/code&gt;). It is then used for further evaluations.&lt;/p&gt;
&lt;p&gt;Funny code, isn&amp;rsquo;t it? We should understand how it works, because sometimes we see it in JavaScript libraries.&lt;/p&gt;
&lt;p&gt;Although, please don&amp;rsquo;t write the code like that. Such tricks definitely don&amp;rsquo;t make code clearer or readable.&lt;/p&gt;
&lt;h4 id=&#34;chaining-assignments&#34;&gt;Chaining assignments&lt;/h4&gt;
&lt;p&gt;Another interesting feature is the ability to chain assignments:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; a, b, c;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; b &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; c &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( a ); &lt;span style=&#34;color:#6272a4&#34;&gt;// 4
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( b ); &lt;span style=&#34;color:#6272a4&#34;&gt;// 4
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( c ); &lt;span style=&#34;color:#6272a4&#34;&gt;// 4
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Chained assignments evaluate from right to left. First, the rightmost expression &lt;code&gt;2 + 2&lt;/code&gt; is evaluated and then assigned to the variables on the left: &lt;code&gt;c&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt;. At the end, all the variables share a single value.&lt;/p&gt;
&lt;p&gt;Once again, for the purposes of readability it&amp;rsquo;s better to split such code into few lines:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;c &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;b &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; c;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; c;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s easier to read, especially when eye-scanning the code fast.&lt;/p&gt;
&lt;h3 id=&#34;modify-in-place&#34;&gt;Modify-in-place&lt;/h3&gt;
&lt;p&gt;We often need to apply an operator to a variable and store the new result in that same variable.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; n &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;n &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;n &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; n &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This notation can be shortened using the operators &lt;code&gt;+=&lt;/code&gt; and &lt;code&gt;*=&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; n &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;n &lt;span style=&#34;color:#ff79c6&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// now n = 7 (same as n = n + 5)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;n &lt;span style=&#34;color:#ff79c6&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// now n = 14 (same as n = n * 2)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( n ); &lt;span style=&#34;color:#6272a4&#34;&gt;// 14
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Short &amp;ldquo;modify-and-assign&amp;rdquo; operators exist for all arithmetical and bitwise operators: &lt;code&gt;/=&lt;/code&gt;, &lt;code&gt;-=&lt;/code&gt;, etc.&lt;/p&gt;
&lt;p&gt;Such operators have the same precedence as a normal assignment, so they run after most other calculations:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; n &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;n &lt;span style=&#34;color:#ff79c6&#34;&gt;*=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( n ); &lt;span style=&#34;color:#6272a4&#34;&gt;// 16  (right part evaluated first, same as n *= 8)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;incrementdecrement&#34;&gt;Increment/decrement&lt;/h3&gt;
&lt;!-- Can&#39;t use -- in title, because the built-in parser turns it into a &#39;long dash&#39; – --&gt;
&lt;p&gt;Increasing or decreasing a number by one is among the most common numerical operations.&lt;/p&gt;
&lt;p&gt;So, there are special operators for it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Increment&lt;/strong&gt; &lt;code&gt;++&lt;/code&gt; increases a variable by 1:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; counter &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;counter&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;;        &lt;span style=&#34;color:#6272a4&#34;&gt;// works the same as counter = counter + 1, but is shorter
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( counter ); &lt;span style=&#34;color:#6272a4&#34;&gt;// 3
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Decrement&lt;/strong&gt; &lt;code&gt;--&lt;/code&gt; decreases a variable by 1:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; counter &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;counter&lt;span style=&#34;color:#ff79c6&#34;&gt;--&lt;/span&gt;;        &lt;span style=&#34;color:#6272a4&#34;&gt;// works the same as counter = counter - 1, but is shorter
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( counter ); &lt;span style=&#34;color:#6272a4&#34;&gt;// 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-warn&#34; data-lang=&#34;warn&#34;&gt;Increment/decrement can only be applied to variables. Trying to use it on a value like `5++` will give an error.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The operators &lt;code&gt;++&lt;/code&gt; and &lt;code&gt;--&lt;/code&gt; can be placed either before or after a variable.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When the operator goes after the variable, it is in &amp;ldquo;postfix form&amp;rdquo;: &lt;code&gt;counter++&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &amp;ldquo;prefix form&amp;rdquo; is when the operator goes before the variable: &lt;code&gt;++counter&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both of these statements do the same thing: increase &lt;code&gt;counter&lt;/code&gt; by &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Is there any difference? Yes, but we can only see it if we use the returned value of &lt;code&gt;++/--&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s clarify. As we know, all operators return a value. Increment/decrement is no exception. The prefix form returns the new value while the postfix form returns the old value (prior to increment/decrement).&lt;/p&gt;
&lt;p&gt;To see the difference, here&amp;rsquo;s an example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; counter &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; a &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;counter; &lt;span style=&#34;color:#6272a4&#34;&gt;// (*)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(a); &lt;span style=&#34;color:#6272a4&#34;&gt;// 2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the line &lt;code&gt;(*)&lt;/code&gt;, the &lt;em&gt;prefix&lt;/em&gt; form &lt;code&gt;++counter&lt;/code&gt; increments &lt;code&gt;counter&lt;/code&gt; and returns the new value, &lt;code&gt;2&lt;/code&gt;. So, the &lt;code&gt;alert&lt;/code&gt; shows &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, let&amp;rsquo;s use the postfix form:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; counter &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; a &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; counter&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// (*) changed ++counter to counter++
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(a); &lt;span style=&#34;color:#6272a4&#34;&gt;// 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the line &lt;code&gt;(*)&lt;/code&gt;, the &lt;em&gt;postfix&lt;/em&gt; form &lt;code&gt;counter++&lt;/code&gt; also increments &lt;code&gt;counter&lt;/code&gt; but returns the &lt;em&gt;old&lt;/em&gt; value (prior to increment). So, the &lt;code&gt;alert&lt;/code&gt; shows &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To summarize:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If the result of increment/decrement is not used, there is no difference in which form to use:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; counter &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;counter&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;counter;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( counter ); &lt;span style=&#34;color:#6272a4&#34;&gt;// 2, the lines above did the same
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If we&amp;rsquo;d like to increase a value &lt;em&gt;and&lt;/em&gt; immediately use the result of the operator, we need the prefix form:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; counter &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;counter ); &lt;span style=&#34;color:#6272a4&#34;&gt;// 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If we&amp;rsquo;d like to increment a value but use its previous value, we need the postfix form:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; counter &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( counter&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// 0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The operators &lt;code&gt;++/--&lt;/code&gt; can be used inside expressions as well. Their precedence is higher than most other arithmetical operations.&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; counter &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;counter ); &lt;span style=&#34;color:#6272a4&#34;&gt;// 4
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Compare with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; counter &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; counter&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// 2, because counter++ returns the &amp;#34;old&amp;#34; value
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Though technically okay, such notation usually makes code less readable. One line does multiple things &amp;ndash; not good.&lt;/p&gt;
&lt;p&gt;While reading code, a fast &amp;ldquo;vertical&amp;rdquo; eye-scan can easily miss something like &lt;code&gt;counter++&lt;/code&gt; and it won&amp;rsquo;t be obvious that the variable increased.&lt;/p&gt;
&lt;p&gt;We advise a style of &amp;ldquo;one line &amp;ndash; one action&amp;rdquo;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; counter &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; counter );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;counter&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;bitwise-operators&#34;&gt;Bitwise operators&lt;/h3&gt;
&lt;p&gt;Bitwise operators treat arguments as 32-bit integer numbers and work on the level of their binary representation.&lt;/p&gt;
&lt;p&gt;These operators are not JavaScript-specific. They are supported in most programming languages.&lt;/p&gt;
&lt;p&gt;The list of operators:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AND ( &lt;code&gt;&amp;amp;&lt;/code&gt; )&lt;/li&gt;
&lt;li&gt;OR ( &lt;code&gt;|&lt;/code&gt; )&lt;/li&gt;
&lt;li&gt;XOR ( &lt;code&gt;^&lt;/code&gt; )&lt;/li&gt;
&lt;li&gt;NOT ( &lt;code&gt;~&lt;/code&gt; )&lt;/li&gt;
&lt;li&gt;LEFT SHIFT ( &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; )&lt;/li&gt;
&lt;li&gt;RIGHT SHIFT ( &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; )&lt;/li&gt;
&lt;li&gt;ZERO-FILL RIGHT SHIFT ( &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; )&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These operators are used very rarely, when we need to fiddle with numbers on the very lowest (bitwise) level. We won&amp;rsquo;t need these operators any time soon, as web development has little use of them, but in some special areas, such as cryptography, they are useful. You can read the &lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators&#34;&gt;Bitwise Operators&lt;/a&gt; article on MDN when a need arises.&lt;/p&gt;
&lt;h3 id=&#34;comma&#34;&gt;Comma&lt;/h3&gt;
&lt;p&gt;The comma operator &lt;code&gt;,&lt;/code&gt; is one of the rarest and most unusual operators. Sometimes, it&amp;rsquo;s used to write shorter code, so we need to know it in order to understand what&amp;rsquo;s going on.&lt;/p&gt;
&lt;p&gt;The comma operator allows us to evaluate several expressions, dividing them with a comma &lt;code&gt;,&lt;/code&gt;. Each of them is evaluated but only the result of the last one is returned.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; a &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( a ); &lt;span style=&#34;color:#6272a4&#34;&gt;// 7 (the result of 3 + 4)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here, the first expression &lt;code&gt;1 + 2&lt;/code&gt; is evaluated and its result is thrown away. Then, &lt;code&gt;3 + 4&lt;/code&gt; is evaluated and returned as the result.&lt;/p&gt;
&lt;p&gt;Please note that the comma operator has very low precedence, lower than &lt;code&gt;=&lt;/code&gt;, so parentheses are important in the example above.&lt;/p&gt;
&lt;p&gt;Without them: &lt;code&gt;a = 1 + 2, 3 + 4&lt;/code&gt; evaluates &lt;code&gt;+&lt;/code&gt; first, summing the numbers into &lt;code&gt;a = 3, 7&lt;/code&gt;, then the assignment operator &lt;code&gt;=&lt;/code&gt; assigns &lt;code&gt;a = 3&lt;/code&gt;, and the rest is ignored. It&amp;rsquo;s like &lt;code&gt;(a = 1 + 2), 3 + 4&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Why do we need an operator that throws away everything except the last expression?&lt;/p&gt;
&lt;p&gt;Sometimes, people use it in more complex constructs to put several actions in one line.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// three operations in one line
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (a &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, b &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;, c &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; b; a &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;; a&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Such tricks are used in many JavaScript frameworks. That&amp;rsquo;s why we&amp;rsquo;re mentioning them. But usually they don&amp;rsquo;t improve code readability so we should think well before using them.&lt;/p&gt;
&lt;h2 id=&#34;comparisons&#34;&gt;Comparisons&lt;/h2&gt;
&lt;p&gt;We know many comparison operators from maths.&lt;/p&gt;
&lt;p&gt;In JavaScript they are written like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Greater/less than: &lt;code&gt;a &amp;gt; b&lt;/code&gt;, &lt;code&gt;a &amp;lt; b&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Greater/less than or equals: &lt;code&gt;a &amp;gt;= b&lt;/code&gt;, &lt;code&gt;a &amp;lt;= b&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Equals: &lt;code&gt;a == b&lt;/code&gt;, please note the double equality sign &lt;code&gt;==&lt;/code&gt; means the equality test, while a single one &lt;code&gt;a = b&lt;/code&gt; means an assignment.&lt;/li&gt;
&lt;li&gt;Not equals. In maths the notation is &lt;code&gt;≠&lt;/code&gt;, but in JavaScript it&amp;rsquo;s written as &lt;code&gt;a != b&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this article we&amp;rsquo;ll learn more about different types of comparisons, how JavaScript makes them, including important peculiarities.&lt;/p&gt;
&lt;p&gt;At the end you&amp;rsquo;ll find a good recipe to avoid &amp;ldquo;javascript quirks&amp;rdquo;-related issues.&lt;/p&gt;
&lt;h3 id=&#34;boolean-is-the-result&#34;&gt;Boolean is the result&lt;/h3&gt;
&lt;p&gt;All comparison operators return a boolean value:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;true&lt;/code&gt; &amp;ndash; means &amp;ldquo;yes&amp;rdquo;, &amp;ldquo;correct&amp;rdquo; or &amp;ldquo;the truth&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;false&lt;/code&gt; &amp;ndash; means &amp;ldquo;no&amp;rdquo;, &amp;ldquo;wrong&amp;rdquo; or &amp;ldquo;not the truth&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; );  &lt;span style=&#34;color:#6272a4&#34;&gt;// true (correct)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// false (wrong)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// true (correct)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A comparison result can be assigned to a variable, just like any value:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; result &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// assign the result of the comparison
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( result ); &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;string-comparison&#34;&gt;String comparison&lt;/h3&gt;
&lt;p&gt;To see whether a string is greater than another, JavaScript uses the so-called &amp;ldquo;dictionary&amp;rdquo; or &amp;ldquo;lexicographical&amp;rdquo; order.&lt;/p&gt;
&lt;p&gt;In other words, strings are compared letter-by-letter.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Z&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Glow&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Glee&amp;#39;&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Bee&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Be&amp;#39;&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The algorithm to compare two strings is simple:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Compare the first character of both strings.&lt;/li&gt;
&lt;li&gt;If the first character from the first string is greater (or less) than the other string&amp;rsquo;s, then the first string is greater (or less) than the second. We&amp;rsquo;re done.&lt;/li&gt;
&lt;li&gt;Otherwise, if both strings&amp;rsquo; first characters are the same, compare the second characters the same way.&lt;/li&gt;
&lt;li&gt;Repeat until the end of either string.&lt;/li&gt;
&lt;li&gt;If both strings end at the same length, then they are equal. Otherwise, the longer string is greater.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the examples above, the comparison &lt;code&gt;&#39;Z&#39; &amp;gt; &#39;A&#39;&lt;/code&gt; gets to a result at the first step while the strings &lt;code&gt;&amp;quot;Glow&amp;quot;&lt;/code&gt; and &lt;code&gt;&amp;quot;Glee&amp;quot;&lt;/code&gt; are compared character-by-character:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;G&lt;/code&gt; is the same as &lt;code&gt;G&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;l&lt;/code&gt; is the same as &lt;code&gt;l&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;o&lt;/code&gt; is greater than &lt;code&gt;e&lt;/code&gt;. Stop here. The first string is greater.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The comparison algorithm given above is roughly equivalent to the one used in dictionaries or phone books, but it&amp;rsquo;s not exactly the same.&lt;/p&gt;
&lt;p&gt;For instance, case matters. A capital letter &lt;code&gt;&amp;quot;A&amp;quot;&lt;/code&gt; is not equal to the lowercase &lt;code&gt;&amp;quot;a&amp;quot;&lt;/code&gt;. Which one is greater? The lowercase &lt;code&gt;&amp;quot;a&amp;quot;&lt;/code&gt;. Why? Because the lowercase character has a greater index in the internal encoding table JavaScript uses (Unicode). We&amp;rsquo;ll get back to specific details and consequences of this in the chapter &lt;a href=&#34;info:string&#34;&gt;info:string&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;comparison-of-different-types&#34;&gt;Comparison of different types&lt;/h3&gt;
&lt;p&gt;When comparing values of different types, JavaScript converts the values to numbers.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// true, string &amp;#39;2&amp;#39; becomes a number 2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;01&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// true, string &amp;#39;01&amp;#39; becomes a number 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For boolean values, &lt;code&gt;true&lt;/code&gt; becomes &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; becomes &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It is possible that at the same time:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Two values are equal.&lt;/li&gt;
&lt;li&gt;One of them is &lt;code&gt;true&lt;/code&gt; as a boolean and the other one is &lt;code&gt;false&lt;/code&gt; as a boolean.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; a &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Boolean&lt;/span&gt;(a) ); &lt;span style=&#34;color:#6272a4&#34;&gt;// false
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; b &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Boolean&lt;/span&gt;(b) ); &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(a &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; b); &lt;span style=&#34;color:#6272a4&#34;&gt;// true!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;From JavaScript&amp;rsquo;s standpoint, this result is quite normal. An equality check converts values using the numeric conversion (hence &lt;code&gt;&amp;quot;0&amp;quot;&lt;/code&gt; becomes &lt;code&gt;0&lt;/code&gt;), while the explicit &lt;code&gt;Boolean&lt;/code&gt; conversion uses another set of rules.&lt;/p&gt;
&lt;h3 id=&#34;strict-equality&#34;&gt;Strict equality&lt;/h3&gt;
&lt;p&gt;A regular equality check &lt;code&gt;==&lt;/code&gt; has a problem. It cannot differentiate &lt;code&gt;0&lt;/code&gt; from &lt;code&gt;false&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The same thing happens with an empty string:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This happens because operands of different types are converted to numbers by the equality operator &lt;code&gt;==&lt;/code&gt;. An empty string, just like &lt;code&gt;false&lt;/code&gt;, becomes a zero.&lt;/p&gt;
&lt;p&gt;What to do if we&amp;rsquo;d like to differentiate &lt;code&gt;0&lt;/code&gt; from &lt;code&gt;false&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A strict equality operator &lt;code&gt;===&lt;/code&gt; checks the equality without type conversion.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In other words, if &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; are of different types, then &lt;code&gt;a === b&lt;/code&gt; immediately returns &lt;code&gt;false&lt;/code&gt; without an attempt to convert them.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s try it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// false, because the types are different
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There is also a &amp;ldquo;strict non-equality&amp;rdquo; operator &lt;code&gt;!==&lt;/code&gt; analogous to &lt;code&gt;!=&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The strict equality operator is a bit longer to write, but makes it obvious what&amp;rsquo;s going on and leaves less room for errors.&lt;/p&gt;
&lt;h3 id=&#34;comparison-with-null-and-undefined&#34;&gt;Comparison with null and undefined&lt;/h3&gt;
&lt;p&gt;There&amp;rsquo;s a non-intuitive behavior when &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; are compared to other values.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;For a strict equality check &lt;code&gt;===&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;These values are different, because each of them is a different type.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;undefined&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// false
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/dd&gt;
&lt;dt&gt;For a non-strict check &lt;code&gt;==&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;There&amp;rsquo;s a special rule. These two are a &amp;ldquo;sweet couple&amp;rdquo;: they equal each other (in the sense of &lt;code&gt;==&lt;/code&gt;), but not any other value.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;undefined&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/dd&gt;
&lt;dt&gt;For maths and other comparisons &lt;code&gt;&amp;lt; &amp;gt; &amp;lt;= &amp;gt;=&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;code&gt;null/undefined&lt;/code&gt; are converted to numbers: &lt;code&gt;null&lt;/code&gt; becomes &lt;code&gt;0&lt;/code&gt;, while &lt;code&gt;undefined&lt;/code&gt; becomes &lt;code&gt;NaN&lt;/code&gt;.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Now let&amp;rsquo;s see some funny things that happen when we apply these rules. And, what&amp;rsquo;s more important, how to not fall into a trap with them.&lt;/p&gt;
&lt;h4 id=&#34;strange-result-null-vs-0&#34;&gt;Strange result: null vs 0&lt;/h4&gt;
&lt;p&gt;Let&amp;rsquo;s compare &lt;code&gt;null&lt;/code&gt; with a zero:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; );  &lt;span style=&#34;color:#6272a4&#34;&gt;// (1) false
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// (2) false
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// (3) true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Mathematically, that&amp;rsquo;s strange. The last result states that &amp;ldquo;&lt;code&gt;null&lt;/code&gt; is greater than or equal to zero&amp;rdquo;, so in one of the comparisons above it must be &lt;code&gt;true&lt;/code&gt;, but they are both false.&lt;/p&gt;
&lt;p&gt;The reason is that an equality check &lt;code&gt;==&lt;/code&gt; and comparisons &lt;code&gt;&amp;gt; &amp;lt; &amp;gt;= &amp;lt;=&lt;/code&gt; work differently. Comparisons convert &lt;code&gt;null&lt;/code&gt; to a number, treating it as &lt;code&gt;0&lt;/code&gt;. That&amp;rsquo;s why (3) &lt;code&gt;null &amp;gt;= 0&lt;/code&gt; is true and (1) &lt;code&gt;null &amp;gt; 0&lt;/code&gt; is false.&lt;/p&gt;
&lt;p&gt;On the other hand, the equality check &lt;code&gt;==&lt;/code&gt; for &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;null&lt;/code&gt; is defined such that, without any conversions, they equal each other and don&amp;rsquo;t equal anything else. That&amp;rsquo;s why (2) &lt;code&gt;null == 0&lt;/code&gt; is false.&lt;/p&gt;
&lt;h4 id=&#34;an-incomparable-undefined&#34;&gt;An incomparable undefined&lt;/h4&gt;
&lt;p&gt;The value &lt;code&gt;undefined&lt;/code&gt; shouldn&amp;rsquo;t be compared to other values:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#ff79c6&#34;&gt;undefined&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// false (1)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#ff79c6&#34;&gt;undefined&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// false (2)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#ff79c6&#34;&gt;undefined&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// false (3)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Why does it dislike zero so much? Always false!&lt;/p&gt;
&lt;p&gt;We get these results because:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Comparisons &lt;code&gt;(1)&lt;/code&gt; and &lt;code&gt;(2)&lt;/code&gt; return &lt;code&gt;false&lt;/code&gt; because &lt;code&gt;undefined&lt;/code&gt; gets converted to &lt;code&gt;NaN&lt;/code&gt; and &lt;code&gt;NaN&lt;/code&gt; is a special numeric value which returns &lt;code&gt;false&lt;/code&gt; for all comparisons.&lt;/li&gt;
&lt;li&gt;The equality check &lt;code&gt;(3)&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt; because &lt;code&gt;undefined&lt;/code&gt; only equals &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;, and no other value.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;avoid-problems&#34;&gt;Avoid problems&lt;/h4&gt;
&lt;p&gt;Why did we go over these examples? Should we remember these peculiarities all the time? Well, not really. Actually, these tricky things will gradually become familiar over time, but there&amp;rsquo;s a solid way to avoid problems with them:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Treat any comparison with &lt;code&gt;undefined/null&lt;/code&gt; except the strict equality &lt;code&gt;===&lt;/code&gt; with exceptional care.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t use comparisons &lt;code&gt;&amp;gt;= &amp;gt; &amp;lt; &amp;lt;=&lt;/code&gt; with a variable which may be &lt;code&gt;null/undefined&lt;/code&gt;, unless you&amp;rsquo;re really sure of what you&amp;rsquo;re doing. If a variable can have these values, check for them separately.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;summary-4&#34;&gt;Summary&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Comparison operators return a boolean value.&lt;/li&gt;
&lt;li&gt;Strings are compared letter-by-letter in the &amp;ldquo;dictionary&amp;rdquo; order.&lt;/li&gt;
&lt;li&gt;When values of different types are compared, they get converted to numbers (with the exclusion of a strict equality check).&lt;/li&gt;
&lt;li&gt;The values &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt; equal &lt;code&gt;==&lt;/code&gt; each other and do not equal any other value.&lt;/li&gt;
&lt;li&gt;Be careful when using comparisons like &lt;code&gt;&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;&lt;/code&gt; with variables that can occasionally be &lt;code&gt;null/undefined&lt;/code&gt;. Checking for &lt;code&gt;null/undefined&lt;/code&gt; separately is a good idea.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;conditional-branching-if-&#34;&gt;Conditional branching: if, &amp;lsquo;?&amp;rsquo;&lt;/h2&gt;
&lt;p&gt;Sometimes, we need to perform different actions based on different conditions.&lt;/p&gt;
&lt;p&gt;To do that, we can use the &lt;code&gt;if&lt;/code&gt; statement and the conditional operator &lt;code&gt;?&lt;/code&gt;, that&amp;rsquo;s also called a &amp;ldquo;question mark&amp;rdquo; operator.&lt;/p&gt;
&lt;h3 id=&#34;the-if-statement&#34;&gt;The &amp;ldquo;if&amp;rdquo; statement&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;if(...)&lt;/code&gt; statement evaluates a condition in parentheses and, if the result is &lt;code&gt;true&lt;/code&gt;, executes a block of code.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; year &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; prompt(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;In which year was ECMAScript-2015 specification published?&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (year &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2015&lt;/span&gt;) alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;You are right!&amp;#39;&lt;/span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the example above, the condition is a simple equality check (&lt;code&gt;year == 2015&lt;/code&gt;), but it can be much more complex.&lt;/p&gt;
&lt;p&gt;If we want to execute more than one statement, we have to wrap our code block inside curly braces:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (year &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2015&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;That&amp;#39;s correct!&amp;#34;&lt;/span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;You&amp;#39;re so smart!&amp;#34;&lt;/span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We recommend wrapping your code block with curly braces &lt;code&gt;{}&lt;/code&gt; every time you use an &lt;code&gt;if&lt;/code&gt; statement, even if there is only one statement to execute. Doing so improves readability.&lt;/p&gt;
&lt;h3 id=&#34;boolean-conversion-1&#34;&gt;Boolean conversion&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;if (…)&lt;/code&gt; statement evaluates the expression in its parentheses and converts the result to a boolean.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s recall the conversion rules from the chapter &lt;a href=&#34;info:type-conversions&#34;&gt;info:type-conversions&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A number &lt;code&gt;0&lt;/code&gt;, an empty string &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;, and &lt;code&gt;NaN&lt;/code&gt; all become &lt;code&gt;false&lt;/code&gt;. Because of that they are called &amp;ldquo;falsy&amp;rdquo; values.&lt;/li&gt;
&lt;li&gt;Other values become &lt;code&gt;true&lt;/code&gt;, so they are called &amp;ldquo;truthy&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, the code under this condition would never execute:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;) { &lt;span style=&#34;color:#6272a4&#34;&gt;// 0 is falsy
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;hellip;and inside this condition &amp;ndash; it always will:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;) { &lt;span style=&#34;color:#6272a4&#34;&gt;// 1 is truthy
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can also pass a pre-evaluated boolean value to &lt;code&gt;if&lt;/code&gt;, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; cond &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; (year &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2015&lt;/span&gt;); &lt;span style=&#34;color:#6272a4&#34;&gt;// equality evaluates to true or false
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (cond) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;the-else-clause&#34;&gt;The &amp;ldquo;else&amp;rdquo; clause&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;if&lt;/code&gt; statement may contain an optional &amp;ldquo;else&amp;rdquo; block. It executes when the condition is false.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; year &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; prompt(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;In which year was the ECMAScript-2015 specification published?&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (year &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2015&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;You guessed it right!&amp;#39;&lt;/span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;How can you be so wrong?&amp;#39;&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// any value except 2015
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;several-conditions-else-if&#34;&gt;Several conditions: &amp;ldquo;else if&amp;rdquo;&lt;/h3&gt;
&lt;p&gt;Sometimes, we&amp;rsquo;d like to test several variants of a condition. The &lt;code&gt;else if&lt;/code&gt; clause lets us do that.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; year &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; prompt(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;In which year was the ECMAScript-2015 specification published?&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (year &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2015&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Too early...&amp;#39;&lt;/span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (year &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2015&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Too late&amp;#39;&lt;/span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Exactly!&amp;#39;&lt;/span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the code above, JavaScript first checks &lt;code&gt;year &amp;lt; 2015&lt;/code&gt;. If that is falsy, it goes to the next condition &lt;code&gt;year &amp;gt; 2015&lt;/code&gt;. If that is also falsy, it shows the last &lt;code&gt;alert&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There can be more &lt;code&gt;else if&lt;/code&gt; blocks. The final &lt;code&gt;else&lt;/code&gt; is optional.&lt;/p&gt;
&lt;h3 id=&#34;conditional-operator-&#34;&gt;Conditional operator &amp;lsquo;?&amp;rsquo;&lt;/h3&gt;
&lt;p&gt;Sometimes, we need to assign a variable depending on a condition.&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; accessAllowed;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; age &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; prompt(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;How old are you?&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (age &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;18&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  accessAllowed &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  accessAllowed &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(accessAllowed);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The so-called &amp;ldquo;conditional&amp;rdquo; or &amp;ldquo;question mark&amp;rdquo; operator lets us do that in a shorter and simpler way.&lt;/p&gt;
&lt;p&gt;The operator is represented by a question mark &lt;code&gt;?&lt;/code&gt;. Sometimes it&amp;rsquo;s called &amp;ldquo;ternary&amp;rdquo;, because the operator has three operands. It is actually the one and only operator in JavaScript which has that many.&lt;/p&gt;
&lt;p&gt;The syntax is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; result &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; condition &lt;span style=&#34;color:#ff79c6&#34;&gt;?&lt;/span&gt; value1 &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; value2;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;condition&lt;/code&gt; is evaluated: if it&amp;rsquo;s truthy then &lt;code&gt;value1&lt;/code&gt; is returned, otherwise &amp;ndash; &lt;code&gt;value2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; accessAllowed &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; (age &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;18&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Technically, we can omit the parentheses around &lt;code&gt;age &amp;gt; 18&lt;/code&gt;. The question mark operator has a low precedence, so it executes after the comparison &lt;code&gt;&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This example will do the same thing as the previous one:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// the comparison operator &amp;#34;age &amp;gt; 18&amp;#34; executes first anyway
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// (no need to wrap it into parentheses)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; accessAllowed &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; age &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But parentheses make the code more readable, so we recommend using them.&lt;/p&gt;
&lt;p&gt;smart
In the example above, you can avoid using the question mark operator because the comparison itself returns &lt;code&gt;true/false&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// the same
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; accessAllowed &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; age &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;18&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;multiple-&#34;&gt;Multiple &amp;lsquo;?&amp;rsquo;&lt;/h3&gt;
&lt;p&gt;A sequence of question mark operators &lt;code&gt;?&lt;/code&gt; can return a value that depends on more than one condition.&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; age &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; prompt(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;age?&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;18&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; message &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; (age &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Hi, baby!&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (age &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;18&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Hello!&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  (age &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Greetings!&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;What an unusual age!&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( message );
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It may be difficult at first to grasp what&amp;rsquo;s going on. But after a closer look, we can see that it&amp;rsquo;s just an ordinary sequence of tests:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The first question mark checks whether &lt;code&gt;age &amp;lt; 3&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If true &amp;ndash; it returns &lt;code&gt;&#39;Hi, baby!&#39;&lt;/code&gt;. Otherwise, it continues to the expression after the colon &amp;lsquo;&amp;quot;:&amp;quot;&amp;rsquo;, checking &lt;code&gt;age &amp;lt; 18&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If that&amp;rsquo;s true &amp;ndash; it returns &lt;code&gt;&#39;Hello!&#39;&lt;/code&gt;. Otherwise, it continues to the expression after the next colon &amp;lsquo;&amp;quot;:&amp;quot;&amp;rsquo;, checking &lt;code&gt;age &amp;lt; 100&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If that&amp;rsquo;s true &amp;ndash; it returns &lt;code&gt;&#39;Greetings!&#39;&lt;/code&gt;. Otherwise, it continues to the expression after the last colon &amp;lsquo;&amp;quot;:&amp;quot;&amp;rsquo;, returning &lt;code&gt;&#39;What an unusual age!&#39;&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here&amp;rsquo;s how this looks using &lt;code&gt;if..else&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (age &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  message &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Hi, baby!&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (age &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;18&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  message &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Hello!&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (age &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  message &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Greetings!&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  message &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;What an unusual age!&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;non-traditional-use-of-&#34;&gt;Non-traditional use of &amp;lsquo;?&amp;rsquo;&lt;/h3&gt;
&lt;p&gt;Sometimes the question mark &lt;code&gt;?&lt;/code&gt; is used as a replacement for &lt;code&gt;if&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; company &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; prompt(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Which company created JavaScript?&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(company &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Netscape&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;?&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Right!&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Wrong.&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Depending on the condition &lt;code&gt;company == &#39;Netscape&#39;&lt;/code&gt;, either the first or the second expression after the &lt;code&gt;?&lt;/code&gt; gets executed and shows an alert.&lt;/p&gt;
&lt;p&gt;We don&amp;rsquo;t assign a result to a variable here. Instead, we execute different code depending on the condition.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;It&amp;rsquo;s not recommended to use the question mark operator in this way.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The notation is shorter than the equivalent &lt;code&gt;if&lt;/code&gt; statement, which appeals to some programmers. But it is less readable.&lt;/p&gt;
&lt;p&gt;Here is the same code using &lt;code&gt;if&lt;/code&gt; for comparison:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; company &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; prompt(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Which company created JavaScript?&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (company &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Netscape&amp;#39;&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Right!&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Wrong.&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Our eyes scan the code vertically. Code blocks which span several lines are easier to understand than a long, horizontal instruction set.&lt;/p&gt;
&lt;p&gt;The purpose of the question mark operator &lt;code&gt;?&lt;/code&gt; is to return one value or another depending on its condition. Please use it for exactly that. Use &lt;code&gt;if&lt;/code&gt; when you need to execute different branches of code.&lt;/p&gt;
&lt;h2 id=&#34;logical-operators&#34;&gt;Logical operators&lt;/h2&gt;
&lt;p&gt;There are three logical operators in JavaScript: &lt;code&gt;||&lt;/code&gt; (OR), &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; (AND), &lt;code&gt;!&lt;/code&gt; (NOT).&lt;/p&gt;
&lt;p&gt;Although they are called &amp;ldquo;logical&amp;rdquo;, they can be applied to values of any type, not only boolean. Their result can also be of any type.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s see the details.&lt;/p&gt;
&lt;h3 id=&#34;-or&#34;&gt;|| (OR)&lt;/h3&gt;
&lt;p&gt;The &amp;ldquo;OR&amp;rdquo; operator is represented with two vertical line symbols:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;result &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; b;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In classical programming, the logical OR is meant to manipulate boolean values only. If any of its arguments are &lt;code&gt;true&lt;/code&gt;, it returns &lt;code&gt;true&lt;/code&gt;, otherwise it returns &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In JavaScript, the operator is a little bit trickier and more powerful. But first, let&amp;rsquo;s see what happens with boolean values.&lt;/p&gt;
&lt;p&gt;There are four possible logical combinations:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt; );   &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt; );  &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt; );  &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// false
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As we can see, the result is always &lt;code&gt;true&lt;/code&gt; except for the case when both operands are &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If an operand is not a boolean, it&amp;rsquo;s converted to a boolean for the evaluation.&lt;/p&gt;
&lt;p&gt;For instance, the number &lt;code&gt;1&lt;/code&gt; is treated as &lt;code&gt;true&lt;/code&gt;, the number &lt;code&gt;0&lt;/code&gt; as &lt;code&gt;false&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;) { &lt;span style=&#34;color:#6272a4&#34;&gt;// works just like if( true || false )
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;truthy!&amp;#39;&lt;/span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Most of the time, OR &lt;code&gt;||&lt;/code&gt; is used in an &lt;code&gt;if&lt;/code&gt; statement to test if &lt;em&gt;any&lt;/em&gt; of the given conditions is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; hour &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;9&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (hour &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; hour &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;18&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;The office is closed.&amp;#39;&lt;/span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can pass more conditions:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; hour &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;12&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; isWeekend &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (hour &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; hour &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;18&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; isWeekend) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;The office is closed.&amp;#39;&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// it is the weekend
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;or--finds-the-first-truthy-value&#34;&gt;OR &amp;ldquo;||&amp;rdquo; finds the first truthy value&lt;/h3&gt;
&lt;p&gt;The logic described above is somewhat classical. Now, let&amp;rsquo;s bring in the &amp;ldquo;extra&amp;rdquo; features of JavaScript.&lt;/p&gt;
&lt;p&gt;The extended algorithm works as follows.&lt;/p&gt;
&lt;p&gt;Given multiple OR&amp;rsquo;ed values:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;result &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; value1 &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; value2 &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; value3;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The OR &lt;code&gt;||&lt;/code&gt; operator does the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Evaluates operands from left to right.&lt;/li&gt;
&lt;li&gt;For each operand, converts it to boolean. If the result is &lt;code&gt;true&lt;/code&gt;, stops and returns the original value of that operand.&lt;/li&gt;
&lt;li&gt;If all operands have been evaluated (i.e. all were &lt;code&gt;false&lt;/code&gt;), returns the last operand.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A value is returned in its original form, without the conversion.&lt;/p&gt;
&lt;p&gt;In other words, a chain of OR &lt;code&gt;&amp;quot;||&amp;quot;&lt;/code&gt; returns the first truthy value or the last one if no truthy value is found.&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// 1 (1 is truthy)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// 1 (1 is the first truthy value)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// 1 (the first truthy value)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#ff79c6&#34;&gt;undefined&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// 0 (all falsy, returns the last value)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This leads to some interesting usage compared to a &amp;ldquo;pure, classical, boolean-only OR&amp;rdquo;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Getting the first truthy value from a list of variables or expressions.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For instance, we have &lt;code&gt;firstName&lt;/code&gt;, &lt;code&gt;lastName&lt;/code&gt; and &lt;code&gt;nickName&lt;/code&gt; variables, all optional.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s use OR &lt;code&gt;||&lt;/code&gt; to choose the one that has the data and show it (or &lt;code&gt;anonymous&lt;/code&gt; if nothing set):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; firstName &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; lastName &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; nickName &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;SuperCoder&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( firstName &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; lastName &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; nickName &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Anonymous&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#6272a4&#34;&gt;// SuperCoder
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If all variables were falsy, &lt;code&gt;Anonymous&lt;/code&gt; would show up.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Short-circuit evaluation.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Another feature of OR &lt;code&gt;||&lt;/code&gt; operator is the so-called &amp;ldquo;short-circuit&amp;rdquo; evaluation.&lt;/p&gt;
&lt;p&gt;It means that &lt;code&gt;||&lt;/code&gt; processes its arguments until the first truthy value is reached, and then the value is returned immediately, without even touching the other argument.&lt;/p&gt;
&lt;p&gt;That importance of this feature becomes obvious if an operand isn&amp;rsquo;t just a value, but an expression with a side effect, such as a variable assignment or a function call.&lt;/p&gt;
&lt;p&gt;In the example below, only the second message is printed:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;not printed&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;printed&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the first line, the OR &lt;code&gt;||&lt;/code&gt; operator stops the evaluation immediately upon seeing &lt;code&gt;true&lt;/code&gt;, so the &lt;code&gt;alert&lt;/code&gt; isn&amp;rsquo;t run.&lt;/p&gt;
&lt;p&gt;Sometimes, people use this feature to execute commands only if the condition on the left part is falsy.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;-and&#34;&gt;&amp;amp;&amp;amp; (AND)&lt;/h3&gt;
&lt;p&gt;The AND operator is represented with two ampersands &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;result &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; b;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In classical programming, AND returns &lt;code&gt;true&lt;/code&gt; if both operands are truthy and &lt;code&gt;false&lt;/code&gt; otherwise:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt; );   &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt; );  &lt;span style=&#34;color:#6272a4&#34;&gt;// false
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt; );  &lt;span style=&#34;color:#6272a4&#34;&gt;// false
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// false
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;An example with &lt;code&gt;if&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; hour &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;12&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; minute &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;30&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (hour &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;12&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; minute &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;30&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;The time is 12:30&amp;#39;&lt;/span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Just as with OR, any value is allowed as an operand of AND:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;) { &lt;span style=&#34;color:#6272a4&#34;&gt;// evaluated as true &amp;amp;&amp;amp; false
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;won&amp;#39;t work, because the result is falsy&amp;#34;&lt;/span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;and--finds-the-first-falsy-value&#34;&gt;AND &amp;ldquo;&amp;amp;&amp;amp;&amp;rdquo; finds the first falsy value&lt;/h3&gt;
&lt;p&gt;Given multiple AND&amp;rsquo;ed values:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;result &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; value1 &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; value2 &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; value3;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The AND &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operator does the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Evaluates operands from left to right.&lt;/li&gt;
&lt;li&gt;For each operand, converts it to a boolean. If the result is &lt;code&gt;false&lt;/code&gt;, stops and returns the original value of that operand.&lt;/li&gt;
&lt;li&gt;If all operands have been evaluated (i.e. all were truthy), returns the last operand.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In other words, AND returns the first falsy value or the last value if none were found.&lt;/p&gt;
&lt;p&gt;The rules above are similar to OR. The difference is that AND returns the first &lt;em&gt;falsy&lt;/em&gt; value while OR returns the first &lt;em&gt;truthy&lt;/em&gt; one.&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// if the first operand is truthy,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// AND returns the second operand:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// 0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// 5
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// if the first operand is falsy,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// AND returns it. The second operand is ignored
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// null
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;no matter what&amp;#34;&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// 0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can also pass several values in a row. See how the first falsy one is returned:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// null
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When all values are truthy, the last value is returned:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// 3, the last one
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The precedence of AND &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operator is higher than OR &lt;code&gt;||&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So the code &lt;code&gt;a &amp;amp;&amp;amp; b || c &amp;amp;&amp;amp; d&lt;/code&gt; is essentially the same as if the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; expressions were in parentheses: &lt;code&gt;(a &amp;amp;&amp;amp; b) || (c &amp;amp;&amp;amp; d)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Sometimes, people use the AND &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operator as a &amp;ldquo;shorter to write &lt;code&gt;if&lt;/code&gt;&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; x &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(x &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Greater than zero!&amp;#39;&lt;/span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The action in the right part of &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; would execute only if the evaluation reaches it. That is, only if &lt;code&gt;(x &amp;gt; 0)&lt;/code&gt; is true.&lt;/p&gt;
&lt;p&gt;So we basically have an analogue for:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; x &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (x &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;) alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Greater than zero!&amp;#39;&lt;/span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Although, the variant with &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; appears shorter, &lt;code&gt;if&lt;/code&gt; is more obvious and tends to be a little bit more readable. So we recommend using every construct for its purpose: use &lt;code&gt;if&lt;/code&gt; if we want if and use &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; if we want AND.&lt;/p&gt;
&lt;h3 id=&#34;-not&#34;&gt;! (NOT)&lt;/h3&gt;
&lt;p&gt;The boolean NOT operator is represented with an exclamation sign &lt;code&gt;!&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The syntax is pretty simple:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;result &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;!&lt;/span&gt;value;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The operator accepts a single argument and does the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Converts the operand to boolean type: &lt;code&gt;true/false&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Returns the inverse value.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#ff79c6&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// false
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#ff79c6&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A double NOT &lt;code&gt;!!&lt;/code&gt; is sometimes used for converting a value to boolean type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#ff79c6&#34;&gt;!!&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;non-empty string&amp;#34;&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#ff79c6&#34;&gt;!!&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// false
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That is, the first NOT converts the value to boolean and returns the inverse, and the second NOT inverses it again. In the end, we have a plain value-to-boolean conversion.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s a little more verbose way to do the same thing &amp;ndash; a built-in &lt;code&gt;Boolean&lt;/code&gt; function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Boolean&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;non-empty string&amp;#34;&lt;/span&gt;) ); &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Boolean&lt;/span&gt;(&lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;) ); &lt;span style=&#34;color:#6272a4&#34;&gt;// false
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The precedence of NOT &lt;code&gt;!&lt;/code&gt; is the highest of all logical operators, so it always executes first, before &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; or &lt;code&gt;||&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;nullish-coalescing-operator-&#34;&gt;Nullish coalescing operator &amp;lsquo;??&amp;rsquo;&lt;/h2&gt;
&lt;p&gt;[recent browser=&amp;ldquo;new&amp;rdquo;]&lt;/p&gt;
&lt;p&gt;The nullish coalescing operator &lt;code&gt;??&lt;/code&gt; provides a short syntax for selecting a first &amp;ldquo;defined&amp;rdquo; variable from the list.&lt;/p&gt;
&lt;p&gt;The result of &lt;code&gt;a ?? b&lt;/code&gt; is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt; if it&amp;rsquo;s not &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;b&lt;/code&gt;, otherwise.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, &lt;code&gt;x = a ?? b&lt;/code&gt; is a short equivalent to:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; (a &lt;span style=&#34;color:#ff79c6&#34;&gt;!==&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; a &lt;span style=&#34;color:#ff79c6&#34;&gt;!==&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;undefined&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;?&lt;/span&gt; a &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; b;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here&amp;rsquo;s a longer example.&lt;/p&gt;
&lt;p&gt;Imagine, we have a user, and there are variables &lt;code&gt;firstName&lt;/code&gt;, &lt;code&gt;lastName&lt;/code&gt; or &lt;code&gt;nickName&lt;/code&gt; for their first name, last name and the nick name. All of them may be undefined, if the user decided not to enter any value.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;d like to display the user name: one of these three variables, or show &amp;ldquo;Anonymous&amp;rdquo; if nothing is set.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s use the &lt;code&gt;??&lt;/code&gt; operator to select the first defined one:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; firstName &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; lastName &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; nickName &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Supercoder&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// show the first not-null/undefined value
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(firstName &lt;span style=&#34;color:#ff79c6&#34;&gt;??&lt;/span&gt; lastName &lt;span style=&#34;color:#ff79c6&#34;&gt;??&lt;/span&gt; nickName &lt;span style=&#34;color:#ff79c6&#34;&gt;??&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Anonymous&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#6272a4&#34;&gt;// Supercoder
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;comparison-with-&#34;&gt;Comparison with ||&lt;/h3&gt;
&lt;p&gt;The OR &lt;code&gt;||&lt;/code&gt; operator can be used in the same way as &lt;code&gt;??&lt;/code&gt;. Actually, we can replace &lt;code&gt;??&lt;/code&gt; with &lt;code&gt;||&lt;/code&gt; in the code above and get the same result, as it was described in the &lt;a href=&#34;info:logical-operators#or-finds-the-first-truthy-value&#34;&gt;previous chapter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The important difference is that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;||&lt;/code&gt; returns the first &lt;em&gt;truthy&lt;/em&gt; value.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;??&lt;/code&gt; returns the first &lt;em&gt;defined&lt;/em&gt; value.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This matters a lot when we&amp;rsquo;d like to treat &lt;code&gt;null/undefined&lt;/code&gt; differently from &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For example, consider this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;height &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; height &lt;span style=&#34;color:#ff79c6&#34;&gt;??&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This sets &lt;code&gt;height&lt;/code&gt; to &lt;code&gt;100&lt;/code&gt; if it&amp;rsquo;s not defined.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s compare it with &lt;code&gt;||&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; height &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(height &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;); &lt;span style=&#34;color:#6272a4&#34;&gt;// 100
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert(height &lt;span style=&#34;color:#ff79c6&#34;&gt;??&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;); &lt;span style=&#34;color:#6272a4&#34;&gt;// 0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here, &lt;code&gt;height || 100&lt;/code&gt; treats zero height as unset, same as &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt; or any other falsy value. So the result is &lt;code&gt;100&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;height ?? 100&lt;/code&gt; returns &lt;code&gt;100&lt;/code&gt; only if &lt;code&gt;height&lt;/code&gt; is exactly &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;. So the &lt;code&gt;alert&lt;/code&gt; shows the height value &lt;code&gt;0&lt;/code&gt; &amp;ldquo;as is&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Which behavior is better depends on a particular use case. When zero height is a valid value, then &lt;code&gt;??&lt;/code&gt; is preferrable.&lt;/p&gt;
&lt;h3 id=&#34;precedence&#34;&gt;Precedence&lt;/h3&gt;
&lt;p&gt;The precedence of the &lt;code&gt;??&lt;/code&gt; operator is rather low: &lt;code&gt;5&lt;/code&gt; in the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence#Table&#34;&gt;MDN table&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So &lt;code&gt;??&lt;/code&gt; is evaluated after most other operations, but before &lt;code&gt;=&lt;/code&gt; and &lt;code&gt;?&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If we need to choose a value with &lt;code&gt;??&lt;/code&gt; in a complex expression, then consider adding parentheses:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; height &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; width &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// important: use parentheses
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; area &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; (height &lt;span style=&#34;color:#ff79c6&#34;&gt;??&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; (width &lt;span style=&#34;color:#ff79c6&#34;&gt;??&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;50&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(area); &lt;span style=&#34;color:#6272a4&#34;&gt;// 5000
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Otherwise, if we omit parentheses, &lt;code&gt;*&lt;/code&gt; has the higher precedence than &lt;code&gt;??&lt;/code&gt; and would run first.&lt;/p&gt;
&lt;p&gt;That would work be the same as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// probably not correct
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; area &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; height &lt;span style=&#34;color:#ff79c6&#34;&gt;??&lt;/span&gt; (&lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; width) &lt;span style=&#34;color:#ff79c6&#34;&gt;??&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;50&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There&amp;rsquo;s also a related language-level limitation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Due to safety reasons, it&amp;rsquo;s forbidden to use &lt;code&gt;??&lt;/code&gt; together with &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt; operators.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The code below triggers a syntax error:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; x &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;??&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// Syntax error
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The limitation is surely debatable, but it was added to the language specification with the purpose to avoid programming mistakes, as people start to switch to &lt;code&gt;??&lt;/code&gt; from &lt;code&gt;||&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Use explicit parentheses to work around it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; x &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;??&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// Works
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(x); &lt;span style=&#34;color:#6272a4&#34;&gt;// 2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;summary-5&#34;&gt;Summary&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The nullish coalescing operator &lt;code&gt;??&lt;/code&gt; provides a short way to choose a &amp;ldquo;defined&amp;rdquo; value from the list.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s used to assign default values to variables:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// set height=100, if height is null or undefined
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;height &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; height &lt;span style=&#34;color:#ff79c6&#34;&gt;??&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;100&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The operator &lt;code&gt;??&lt;/code&gt; has a very low precedence, a bit higher than &lt;code&gt;?&lt;/code&gt; and &lt;code&gt;=&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It&amp;rsquo;s forbidden to use it with &lt;code&gt;||&lt;/code&gt; or &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; without explicit parentheses.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;loops-while-and-for&#34;&gt;Loops: while and for&lt;/h2&gt;
&lt;p&gt;We often need to repeat actions.&lt;/p&gt;
&lt;p&gt;For example, outputting goods from a list one after another or just running the same code for each number from 1 to 10.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Loops&lt;/em&gt; are a way to repeat the same code multiple times.&lt;/p&gt;
&lt;h3 id=&#34;the-while-loop&#34;&gt;The &amp;ldquo;while&amp;rdquo; loop&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;while&lt;/code&gt; loop has the following syntax:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;while&lt;/span&gt; (condition) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// code
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// so-called &amp;#34;loop body&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;While the &lt;code&gt;condition&lt;/code&gt; is truthy, the &lt;code&gt;code&lt;/code&gt; from the loop body is executed.&lt;/p&gt;
&lt;p&gt;For instance, the loop below outputs &lt;code&gt;i&lt;/code&gt; while &lt;code&gt;i &amp;lt; 3&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;while&lt;/span&gt; (i &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;) { &lt;span style=&#34;color:#6272a4&#34;&gt;// shows 0, then 1, then 2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  alert( i );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A single execution of the loop body is called &lt;em&gt;an iteration&lt;/em&gt;. The loop in the example above makes three iterations.&lt;/p&gt;
&lt;p&gt;If &lt;code&gt;i++&lt;/code&gt; was missing from the example above, the loop would repeat (in theory) forever. In practice, the browser provides ways to stop such loops, and in server-side JavaScript, we can kill the process.&lt;/p&gt;
&lt;p&gt;Any expression or variable can be a loop condition, not just comparisons: the condition is evaluated and converted to a boolean by &lt;code&gt;while&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For instance, a shorter way to write &lt;code&gt;while (i != 0)&lt;/code&gt; is &lt;code&gt;while (i)&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;while&lt;/span&gt; (i) { &lt;span style=&#34;color:#6272a4&#34;&gt;// when i becomes 0, the condition becomes falsy, and the loop stops
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert( i );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  i&lt;span style=&#34;color:#ff79c6&#34;&gt;--&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If the loop body has a single statement, we can omit the curly braces &lt;code&gt;{…}&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;while&lt;/span&gt; (i) alert(i&lt;span style=&#34;color:#ff79c6&#34;&gt;--&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;the-dowhile-loop&#34;&gt;The &amp;ldquo;do..while&amp;rdquo; loop&lt;/h3&gt;
&lt;p&gt;The condition check can be moved &lt;em&gt;below&lt;/em&gt; the loop body using the &lt;code&gt;do..while&lt;/code&gt; syntax:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;do&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// loop body
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;} &lt;span style=&#34;color:#ff79c6&#34;&gt;while&lt;/span&gt; (condition);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The loop will first execute the body, then check the condition, and, while it&amp;rsquo;s truthy, execute it again and again.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;do&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert( i );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#ff79c6&#34;&gt;while&lt;/span&gt; (i &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This form of syntax should only be used when you want the body of the loop to execute &lt;strong&gt;at least once&lt;/strong&gt; regardless of the condition being truthy. Usually, the other form is preferred: &lt;code&gt;while(…) {…}&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;the-for-loop&#34;&gt;The &amp;ldquo;for&amp;rdquo; loop&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;for&lt;/code&gt; loop is more complex, but it&amp;rsquo;s also the most commonly used loop.&lt;/p&gt;
&lt;p&gt;It looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (begin; condition; step) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// ... loop body ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s learn the meaning of these parts by example. The loop below runs &lt;code&gt;alert(i)&lt;/code&gt; for &lt;code&gt;i&lt;/code&gt; from &lt;code&gt;0&lt;/code&gt; up to (but not including) &lt;code&gt;3&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;; i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;) { &lt;span style=&#34;color:#6272a4&#34;&gt;// shows 0, then 1, then 2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  alert(i);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s examine the &lt;code&gt;for&lt;/code&gt; statement part-by-part:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;part&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;begin&lt;/td&gt;
&lt;td&gt;&lt;code&gt;i = 0&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Executes once upon entering the loop.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;condition&lt;/td&gt;
&lt;td&gt;&lt;code&gt;i &amp;lt; 3&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Checked before every loop iteration. If false, the loop stops.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;body&lt;/td&gt;
&lt;td&gt;&lt;code&gt;alert(i)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Runs again and again while the condition is truthy.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;step&lt;/td&gt;
&lt;td&gt;&lt;code&gt;i++&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Executes after the body on each iteration.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The general loop algorithm works like this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Run begin
→ (if condition → run body and run step)
→ (if condition → run body and run step)
→ (if condition → run body and run step)
→ ...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That is, &lt;code&gt;begin&lt;/code&gt; executes once, and then it iterates: after each &lt;code&gt;condition&lt;/code&gt; test, &lt;code&gt;body&lt;/code&gt; and &lt;code&gt;step&lt;/code&gt; are executed.&lt;/p&gt;
&lt;p&gt;If you are new to loops, it could help to go back to the example and reproduce how it runs step-by-step on a piece of paper.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s exactly what happens in our case:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// for (let i = 0; i &amp;lt; 3; i++) alert(i)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// run begin
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// if condition → run body and run step
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;) { alert(i); i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// if condition → run body and run step
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;) { alert(i); i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// if condition → run body and run step
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;) { alert(i); i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// ...finish, because now i == 3
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here, the &amp;ldquo;counter&amp;rdquo; variable &lt;code&gt;i&lt;/code&gt; is declared right in the loop. This is called an &amp;ldquo;inline&amp;rdquo; variable declaration. Such variables are visible only inside the loop.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;; i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(i); &lt;span style=&#34;color:#6272a4&#34;&gt;// 0, 1, 2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(i); &lt;span style=&#34;color:#6272a4&#34;&gt;// error, no such variable
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Instead of defining a variable, we could use an existing one:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;; i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;) { &lt;span style=&#34;color:#6272a4&#34;&gt;// use an existing variable
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  alert(i); &lt;span style=&#34;color:#6272a4&#34;&gt;// 0, 1, 2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(i); &lt;span style=&#34;color:#6272a4&#34;&gt;// 3, visible, because declared outside of the loop
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;skipping-parts&#34;&gt;Skipping parts&lt;/h4&gt;
&lt;p&gt;Any part of &lt;code&gt;for&lt;/code&gt; can be skipped.&lt;/p&gt;
&lt;p&gt;For example, we can omit &lt;code&gt;begin&lt;/code&gt; if we don&amp;rsquo;t need to do anything at the loop start.&lt;/p&gt;
&lt;p&gt;Like here:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// we have i already declared and assigned
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (; i &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;; i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;) { &lt;span style=&#34;color:#6272a4&#34;&gt;// no need for &amp;#34;begin&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  alert( i ); &lt;span style=&#34;color:#6272a4&#34;&gt;// 0, 1, 2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can also remove the &lt;code&gt;step&lt;/code&gt; part:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (; i &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert( i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This makes the loop identical to &lt;code&gt;while (i &amp;lt; 3)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can actually remove everything, creating an infinite loop:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (;;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// repeats without limits
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Please note that the two &lt;code&gt;for&lt;/code&gt; semicolons &lt;code&gt;;&lt;/code&gt; must be present. Otherwise, there would be a syntax error.&lt;/p&gt;
&lt;h3 id=&#34;breaking-the-loop&#34;&gt;Breaking the loop&lt;/h3&gt;
&lt;p&gt;Normally, a loop exits when its condition becomes falsy.&lt;/p&gt;
&lt;p&gt;But we can force the exit at any time using the special &lt;code&gt;break&lt;/code&gt; directive.&lt;/p&gt;
&lt;p&gt;For example, the loop below asks the user for a series of numbers, &amp;ldquo;breaking&amp;rdquo; when no number is entered:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; sum &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; value &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;prompt(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Enter a number&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;!&lt;/span&gt;value) &lt;span style=&#34;color:#ff79c6&#34;&gt;break&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// (*)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sum &lt;span style=&#34;color:#ff79c6&#34;&gt;+=&lt;/span&gt; value;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Sum: &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; sum );
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;break&lt;/code&gt; directive is activated at the line &lt;code&gt;(*)&lt;/code&gt; if the user enters an empty line or cancels the input. It stops the loop immediately, passing control to the first line after the loop. Namely, &lt;code&gt;alert&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The combination &amp;ldquo;infinite loop + &lt;code&gt;break&lt;/code&gt; as needed&amp;rdquo; is great for situations when a loop&amp;rsquo;s condition must be checked not in the beginning or end of the loop, but in the middle or even in several places of its body.&lt;/p&gt;
&lt;h3 id=&#34;continue-to-the-next-iteration-continue&#34;&gt;Continue to the next iteration [#continue]&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;continue&lt;/code&gt; directive is a &amp;ldquo;lighter version&amp;rdquo; of &lt;code&gt;break&lt;/code&gt;. It doesn&amp;rsquo;t stop the whole loop. Instead, it stops the current iteration and forces the loop to start a new one (if the condition allows).&lt;/p&gt;
&lt;p&gt;We can use it if we&amp;rsquo;re done with the current iteration and would like to move on to the next one.&lt;/p&gt;
&lt;p&gt;The loop below uses &lt;code&gt;continue&lt;/code&gt; to output only odd values:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;; i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// if true, skip the remaining part of the body
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color:#ff79c6&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;continue&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(i); &lt;span style=&#34;color:#6272a4&#34;&gt;// 1, then 3, 5, 7, 9
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For even values of &lt;code&gt;i&lt;/code&gt;, the &lt;code&gt;continue&lt;/code&gt; directive stops executing the body and passes control to the next iteration of &lt;code&gt;for&lt;/code&gt; (with the next number). So the &lt;code&gt;alert&lt;/code&gt; is only called for odd values.&lt;/p&gt;
&lt;p&gt;A loop that shows odd values could look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;; i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color:#ff79c6&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert( i );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;From a technical point of view, this is identical to the example above. Surely, we can just wrap the code in an &lt;code&gt;if&lt;/code&gt; block instead of using &lt;code&gt;continue&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But as a side-effect, this created one more level of nesting (the &lt;code&gt;alert&lt;/code&gt; call inside the curly braces). If the code inside of &lt;code&gt;if&lt;/code&gt; is longer than a few lines, that may decrease the overall readability.&lt;/p&gt;
&lt;p&gt;Please note that syntax constructs that are not expressions cannot be used with the ternary operator &lt;code&gt;?&lt;/code&gt;. In particular, directives such as &lt;code&gt;break/continue&lt;/code&gt; aren&amp;rsquo;t allowed there.&lt;/p&gt;
&lt;p&gt;For example, if we take this code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(i);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;continue&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;hellip;and rewrite it using a question mark:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(i &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;?&lt;/span&gt; alert(i) &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;continue&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// continue isn&amp;#39;t allowed here
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;hellip;it stops working: there&amp;rsquo;s a syntax error.&lt;/p&gt;
&lt;p&gt;This is just another reason not to use the question mark operator &lt;code&gt;?&lt;/code&gt; instead of &lt;code&gt;if&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;labels-for-breakcontinue&#34;&gt;Labels for break/continue&lt;/h3&gt;
&lt;p&gt;Sometimes we need to break out from multiple nested loops at once.&lt;/p&gt;
&lt;p&gt;For example, in the code below we loop over &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt;, prompting for the coordinates &lt;code&gt;(i, j)&lt;/code&gt; from &lt;code&gt;(0,0)&lt;/code&gt; to &lt;code&gt;(2,2)&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;; i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; j &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;; j&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; input &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; prompt(&lt;span style=&#34;color:#f1fa8c&#34;&gt;`Value at coords (&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;i&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;j&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;)`&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// what if we want to exit from here to Done (below)?
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Done!&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We need a way to stop the process if the user cancels the input.&lt;/p&gt;
&lt;p&gt;The ordinary &lt;code&gt;break&lt;/code&gt; after &lt;code&gt;input&lt;/code&gt; would only break the inner loop. That&amp;rsquo;s not sufficient&amp;ndash;labels, come to the rescue!&lt;/p&gt;
&lt;p&gt;A &lt;em&gt;label&lt;/em&gt; is an identifier with a colon before a loop:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;labelName&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (...) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;break &amp;lt;labelName&amp;gt;&lt;/code&gt; statement in the loop below breaks out to the label:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;outer&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;; i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; j &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;; j &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;; j&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; input &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; prompt(&lt;span style=&#34;color:#f1fa8c&#34;&gt;`Value at coords (&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;i&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;j&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;)`&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// if an empty string or canceled, then break out of both loops
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;!&lt;/span&gt;input) &lt;span style=&#34;color:#ff79c6&#34;&gt;break&lt;/span&gt; outer; &lt;span style=&#34;color:#6272a4&#34;&gt;// (*)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// do something with the value...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Done!&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the code above, &lt;code&gt;break outer&lt;/code&gt; looks upwards for the label named &lt;code&gt;outer&lt;/code&gt; and breaks out of that loop.&lt;/p&gt;
&lt;p&gt;So the control goes straight from &lt;code&gt;(*)&lt;/code&gt; to &lt;code&gt;alert(&#39;Done!&#39;)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can also move the label onto a separate line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;outer&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;; i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;) { ... }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;continue&lt;/code&gt; directive can also be used with a label. In this case, code execution jumps to the next iteration of the labeled loop.&lt;/p&gt;
&lt;p&gt;Labels do not allow us to jump into an arbitrary place in the code.&lt;/p&gt;
&lt;p&gt;For example, it is impossible to do this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;break&lt;/span&gt; label; &lt;span style=&#34;color:#6272a4&#34;&gt;// doesn&amp;#39;t jumps to the label below
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;label&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (...)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A call to &lt;code&gt;break/continue&lt;/code&gt; is only possible from inside a loop and the label must be somewhere above the directive.&lt;/p&gt;
&lt;h3 id=&#34;summary-6&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;We covered 3 types of loops:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;while&lt;/code&gt; &amp;ndash; The condition is checked before each iteration.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;do..while&lt;/code&gt; &amp;ndash; The condition is checked after each iteration.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for (;;)&lt;/code&gt; &amp;ndash; The condition is checked before each iteration, additional settings available.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To make an &amp;ldquo;infinite&amp;rdquo; loop, usually the &lt;code&gt;while(true)&lt;/code&gt; construct is used. Such a loop, just like any other, can be stopped with the &lt;code&gt;break&lt;/code&gt; directive.&lt;/p&gt;
&lt;p&gt;If we don&amp;rsquo;t want to do anything in the current iteration and would like to forward to the next one, we can use the &lt;code&gt;continue&lt;/code&gt; directive.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;break/continue&lt;/code&gt; support labels before the loop. A label is the only way for &lt;code&gt;break/continue&lt;/code&gt; to escape a nested loop to go to an outer one.&lt;/p&gt;
&lt;h2 id=&#34;the-switch-statement&#34;&gt;The &amp;ldquo;switch&amp;rdquo; statement&lt;/h2&gt;
&lt;p&gt;A &lt;code&gt;switch&lt;/code&gt; statement can replace multiple &lt;code&gt;if&lt;/code&gt; checks.&lt;/p&gt;
&lt;p&gt;It gives a more descriptive way to compare a value with multiple variants.&lt;/p&gt;
&lt;h3 id=&#34;the-syntax&#34;&gt;The syntax&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;switch&lt;/code&gt; has one or more &lt;code&gt;case&lt;/code&gt; blocks and an optional default.&lt;/p&gt;
&lt;p&gt;It looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;switch&lt;/span&gt;(x) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;value1&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// if (x === &amp;#39;value1&amp;#39;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    [&lt;span style=&#34;color:#ff79c6&#34;&gt;break&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;value2&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// if (x === &amp;#39;value2&amp;#39;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    [&lt;span style=&#34;color:#ff79c6&#34;&gt;break&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    [&lt;span style=&#34;color:#ff79c6&#34;&gt;break&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;The value of &lt;code&gt;x&lt;/code&gt; is checked for a strict equality to the value from the first &lt;code&gt;case&lt;/code&gt; (that is, &lt;code&gt;value1&lt;/code&gt;) then to the second (&lt;code&gt;value2&lt;/code&gt;) and so on.&lt;/li&gt;
&lt;li&gt;If the equality is found, &lt;code&gt;switch&lt;/code&gt; starts to execute the code starting from the corresponding &lt;code&gt;case&lt;/code&gt;, until the nearest &lt;code&gt;break&lt;/code&gt; (or until the end of &lt;code&gt;switch&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;If no case is matched then the &lt;code&gt;default&lt;/code&gt; code is executed (if it exists).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;an-example&#34;&gt;An example&lt;/h3&gt;
&lt;p&gt;An example of &lt;code&gt;switch&lt;/code&gt; (the executed code is highlighted):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; a &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;switch&lt;/span&gt; (a) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Too small&amp;#39;&lt;/span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Exactly!&amp;#39;&lt;/span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Too large&amp;#39;&lt;/span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;I don&amp;#39;t know such values&amp;#34;&lt;/span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here the &lt;code&gt;switch&lt;/code&gt; starts to compare &lt;code&gt;a&lt;/code&gt; from the first &lt;code&gt;case&lt;/code&gt; variant that is &lt;code&gt;3&lt;/code&gt;. The match fails.&lt;/p&gt;
&lt;p&gt;Then &lt;code&gt;4&lt;/code&gt;. That&amp;rsquo;s a match, so the execution starts from &lt;code&gt;case 4&lt;/code&gt; until the nearest &lt;code&gt;break&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If there is no &lt;code&gt;break&lt;/code&gt; then the execution continues with the next &lt;code&gt;case&lt;/code&gt; without any checks.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;An example without &lt;code&gt;break&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; a &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;switch&lt;/span&gt; (a) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Too small&amp;#39;&lt;/span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Exactly!&amp;#39;&lt;/span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Too big&amp;#39;&lt;/span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;I don&amp;#39;t know such values&amp;#34;&lt;/span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the example above we&amp;rsquo;ll see sequential execution of three &lt;code&gt;alert&lt;/code&gt;s:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Exactly!&amp;#39;&lt;/span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Too big&amp;#39;&lt;/span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;I don&amp;#39;t know such values&amp;#34;&lt;/span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Both &lt;code&gt;switch&lt;/code&gt; and &lt;code&gt;case&lt;/code&gt; allow arbitrary expressions.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; a &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; b &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;switch&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;a) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;case&lt;/span&gt; b &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;this runs, because +a is 1, exactly equals b+1&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;this doesn&amp;#39;t run&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here &lt;code&gt;+a&lt;/code&gt; gives &lt;code&gt;1&lt;/code&gt;, that&amp;rsquo;s compared with &lt;code&gt;b + 1&lt;/code&gt; in &lt;code&gt;case&lt;/code&gt;, and the corresponding code is executed.&lt;/p&gt;
&lt;h3 id=&#34;grouping-of-case&#34;&gt;Grouping of &amp;ldquo;case&amp;rdquo;&lt;/h3&gt;
&lt;p&gt;Several variants of &lt;code&gt;case&lt;/code&gt; which share the same code can be grouped.&lt;/p&gt;
&lt;p&gt;For example, if we want the same code to run for &lt;code&gt;case 3&lt;/code&gt; and &lt;code&gt;case 5&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; a &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;switch&lt;/span&gt; (a) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Right!&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;// (*) grouped two cases
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Wrong!&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Why don&amp;#39;t you take a math class?&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;The result is strange. Really.&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now both &lt;code&gt;3&lt;/code&gt; and &lt;code&gt;5&lt;/code&gt; show the same message.&lt;/p&gt;
&lt;p&gt;The ability to &amp;ldquo;group&amp;rdquo; cases is a side-effect of how &lt;code&gt;switch/case&lt;/code&gt; works without &lt;code&gt;break&lt;/code&gt;. Here the execution of &lt;code&gt;case 3&lt;/code&gt; starts from the line &lt;code&gt;(*)&lt;/code&gt; and goes through &lt;code&gt;case 5&lt;/code&gt;, because there&amp;rsquo;s no &lt;code&gt;break&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;type-matters&#34;&gt;Type matters&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s emphasize that the equality check is always strict. The values must be of the same type to match.&lt;/p&gt;
&lt;p&gt;For example, let&amp;rsquo;s consider the code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; arg &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; prompt(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Enter a value?&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;switch&lt;/span&gt; (arg) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;One or zero&amp;#39;&lt;/span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Two&amp;#39;&lt;/span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Never executes!&amp;#39;&lt;/span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;An unknown value&amp;#39;&lt;/span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;For &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt;, the first &lt;code&gt;alert&lt;/code&gt; runs.&lt;/li&gt;
&lt;li&gt;For &lt;code&gt;2&lt;/code&gt; the second &lt;code&gt;alert&lt;/code&gt; runs.&lt;/li&gt;
&lt;li&gt;But for &lt;code&gt;3&lt;/code&gt;, the result of the &lt;code&gt;prompt&lt;/code&gt; is a string &lt;code&gt;&amp;quot;3&amp;quot;&lt;/code&gt;, which is not strictly equal &lt;code&gt;===&lt;/code&gt; to the number &lt;code&gt;3&lt;/code&gt;. So we&amp;rsquo;ve got a dead code in &lt;code&gt;case 3&lt;/code&gt;! The &lt;code&gt;default&lt;/code&gt; variant will execute.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;functions&#34;&gt;Functions&lt;/h2&gt;
&lt;p&gt;Quite often we need to perform a similar action in many places of the script.&lt;/p&gt;
&lt;p&gt;For example, we need to show a nice-looking message when a visitor logs in, logs out and maybe somewhere else.&lt;/p&gt;
&lt;p&gt;Functions are the main &amp;ldquo;building blocks&amp;rdquo; of the program. They allow the code to be called many times without repetition.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ve already seen examples of built-in functions, like &lt;code&gt;alert(message)&lt;/code&gt;, &lt;code&gt;prompt(message, default)&lt;/code&gt; and &lt;code&gt;confirm(question)&lt;/code&gt;. But we can create functions of our own as well.&lt;/p&gt;
&lt;h3 id=&#34;function-declaration&#34;&gt;Function Declaration&lt;/h3&gt;
&lt;p&gt;To create a function we can use a &lt;em&gt;function declaration&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;It looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; showMessage() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Hello everyone!&amp;#39;&lt;/span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;function&lt;/code&gt; keyword goes first, then goes the &lt;em&gt;name of the function&lt;/em&gt;, then a list of &lt;em&gt;parameters&lt;/em&gt; between the parentheses (comma-separated, empty in the example above) and finally the code of the function, also named &amp;ldquo;the function body&amp;rdquo;, between curly braces.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; name(parameters) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ...body...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Our new function can be called by its name: &lt;code&gt;showMessage()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; showMessage() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Hello everyone!&amp;#39;&lt;/span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;showMessage();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;showMessage();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The call &lt;code&gt;showMessage()&lt;/code&gt; executes the code of the function. Here we will see the message two times.&lt;/p&gt;
&lt;p&gt;This example clearly demonstrates one of the main purposes of functions: to avoid code duplication.&lt;/p&gt;
&lt;p&gt;If we ever need to change the message or the way it is shown, it&amp;rsquo;s enough to modify the code in one place: the function which outputs it.&lt;/p&gt;
&lt;h3 id=&#34;local-variables&#34;&gt;Local variables&lt;/h3&gt;
&lt;p&gt;A variable declared inside a function is only visible inside that function.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; showMessage() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; message &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Hello, I&amp;#39;m JavaScript!&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// local variable
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert( message );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;showMessage(); &lt;span style=&#34;color:#6272a4&#34;&gt;// Hello, I&amp;#39;m JavaScript!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( message ); &lt;span style=&#34;color:#6272a4&#34;&gt;// &amp;lt;-- Error! The variable is local to the function
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;outer-variables&#34;&gt;Outer variables&lt;/h3&gt;
&lt;p&gt;A function can access an outer variable as well, for example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; userName &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;John&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; showMessage() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; message &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Hello, &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; userName;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(message);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;showMessage(); &lt;span style=&#34;color:#6272a4&#34;&gt;// Hello, John
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The function has full access to the outer variable. It can modify it as well.&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; userName &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;John&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; showMessage() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  userName &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Bob&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// (1) changed the outer variable
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; message &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Hello, &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; userName;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(message);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( userName ); &lt;span style=&#34;color:#6272a4&#34;&gt;// John before the function call
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;showMessage();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( userName ); &lt;span style=&#34;color:#6272a4&#34;&gt;// Bob, the value was modified by the function
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The outer variable is only used if there&amp;rsquo;s no local one.&lt;/p&gt;
&lt;p&gt;If a same-named variable is declared inside the function then it &lt;em&gt;shadows&lt;/em&gt; the outer one. For instance, in the code below the function uses the local &lt;code&gt;userName&lt;/code&gt;. The outer one is ignored:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; userName &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;John&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; showMessage() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; userName &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Bob&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// declare a local variable
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; message &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Hello, &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; userName; &lt;span style=&#34;color:#6272a4&#34;&gt;// Bob
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  alert(message);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// the function will create and use its own userName
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;showMessage();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( userName ); &lt;span style=&#34;color:#6272a4&#34;&gt;// John, unchanged, the function did not access the outer variable
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Variables declared outside of any function, such as the outer &lt;code&gt;userName&lt;/code&gt; in the code above, are called &lt;em&gt;global&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Global variables are visible from any function (unless shadowed by locals).&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s a good practice to minimize the use of global variables. Modern code has few or no globals. Most variables reside in their functions. Sometimes though, they can be useful to store project-level data.&lt;/p&gt;
&lt;h3 id=&#34;parameters&#34;&gt;Parameters&lt;/h3&gt;
&lt;p&gt;We can pass arbitrary data to functions using parameters (also called &lt;em&gt;function arguments&lt;/em&gt;) .&lt;/p&gt;
&lt;p&gt;In the example below, the function has two parameters: &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;text&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; showMessage(from, text) { &lt;span style=&#34;color:#6272a4&#34;&gt;// arguments: from, text
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  alert(from &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;: &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; text);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;showMessage(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Ann&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Hello!&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#6272a4&#34;&gt;// Ann: Hello! (*)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;showMessage(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Ann&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;What&amp;#39;s up?&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#6272a4&#34;&gt;// Ann: What&amp;#39;s up? (**)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When the function is called in lines &lt;code&gt;(*)&lt;/code&gt; and &lt;code&gt;(**)&lt;/code&gt;, the given values are copied to local variables &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;text&lt;/code&gt;. Then the function uses them.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s one more example: we have a variable &lt;code&gt;from&lt;/code&gt; and pass it to the function. Please note: the function changes &lt;code&gt;from&lt;/code&gt;, but the change is not seen outside, because a function always gets a copy of the value:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; showMessage(from, text) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  from &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; from &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// make &amp;#34;from&amp;#34; look nicer
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert( from &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;: &amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; text );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; from &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Ann&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;showMessage(from, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#6272a4&#34;&gt;// *Ann*: Hello
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// the value of &amp;#34;from&amp;#34; is the same, the function modified a local copy
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( from ); &lt;span style=&#34;color:#6272a4&#34;&gt;// Ann
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;default-values&#34;&gt;Default values&lt;/h3&gt;
&lt;p&gt;If a parameter is not provided, then its value becomes &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For instance, the aforementioned function &lt;code&gt;showMessage(from, text)&lt;/code&gt; can be called with a single argument:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;showMessage(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Ann&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s not an error. Such a call would output &lt;code&gt;&amp;quot;Ann: undefined&amp;quot;&lt;/code&gt;. There&amp;rsquo;s no &lt;code&gt;text&lt;/code&gt;, so it&amp;rsquo;s assumed that &lt;code&gt;text === undefined&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If we want to use a &amp;ldquo;default&amp;rdquo; &lt;code&gt;text&lt;/code&gt; in this case, then we can specify it after &lt;code&gt;=&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; showMessage(from, text &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;no text given&amp;#34;&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert( from &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; text );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;showMessage(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Ann&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#6272a4&#34;&gt;// Ann: no text given
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now if the &lt;code&gt;text&lt;/code&gt; parameter is not passed, it will get the value &lt;code&gt;&amp;quot;no text given&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Here &lt;code&gt;&amp;quot;no text given&amp;quot;&lt;/code&gt; is a string, but it can be a more complex expression, which is only evaluated and assigned if the parameter is missing. So, this is also possible:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; showMessage(from, text &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; anotherFunction()) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// anotherFunction() only executed if no text given
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// its result becomes the value of text
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In JavaScript, a default parameter is evaluated every time the function is called without the respective parameter.&lt;/p&gt;
&lt;p&gt;In the example above, &lt;code&gt;anotherFunction()&lt;/code&gt; is called every time &lt;code&gt;showMessage()&lt;/code&gt; is called without the &lt;code&gt;text&lt;/code&gt; parameter.&lt;/p&gt;
&lt;h4 id=&#34;alternative-default-parameters&#34;&gt;Alternative default parameters&lt;/h4&gt;
&lt;p&gt;Sometimes it makes sense to set default values for parameters not in the function declaration, but at a later stage, during its execution.&lt;/p&gt;
&lt;p&gt;To check for an omitted parameter, we can compare it with &lt;code&gt;undefined&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; showMessage(text) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (text &lt;span style=&#34;color:#ff79c6&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;undefined&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    text &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;empty message&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(text);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;showMessage(); &lt;span style=&#34;color:#6272a4&#34;&gt;// empty message
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;hellip;Or we could use the &lt;code&gt;||&lt;/code&gt; operator:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// if text parameter is omitted or &amp;#34;&amp;#34; is passed, set it to &amp;#39;empty&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; showMessage(text) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  text &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; text &lt;span style=&#34;color:#ff79c6&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;empty&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Modern JavaScript engines support the &lt;a href=&#34;info:nullish-coalescing-operator&#34;&gt;nullish coalescing operator&lt;/a&gt; &lt;code&gt;??&lt;/code&gt;, it&amp;rsquo;s better when falsy values, such as &lt;code&gt;0&lt;/code&gt;, are considered regular:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// if there&amp;#39;s no &amp;#34;count&amp;#34; parameter, show &amp;#34;unknown&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; showCount(count) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(count &lt;span style=&#34;color:#ff79c6&#34;&gt;??&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;unknown&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;showCount(&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;); &lt;span style=&#34;color:#6272a4&#34;&gt;// 0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;showCount(&lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;); &lt;span style=&#34;color:#6272a4&#34;&gt;// unknown
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;showCount(); &lt;span style=&#34;color:#6272a4&#34;&gt;// unknown
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;returning-a-value&#34;&gt;Returning a value&lt;/h3&gt;
&lt;p&gt;A function can return a value back into the calling code as the result.&lt;/p&gt;
&lt;p&gt;The simplest example would be a function that sums two values:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; sum(a, b) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; b;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; result &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; sum(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( result ); &lt;span style=&#34;color:#6272a4&#34;&gt;// 3
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The directive &lt;code&gt;return&lt;/code&gt; can be in any place of the function. When the execution reaches it, the function stops, and the value is returned to the calling code (assigned to &lt;code&gt;result&lt;/code&gt; above).&lt;/p&gt;
&lt;p&gt;There may be many occurrences of &lt;code&gt;return&lt;/code&gt; in a single function. For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; checkAge(age) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (age &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;18&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; confirm(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Do you have permission from your parents?&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; age &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; prompt(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;How old are you?&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;18&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; ( checkAge(age) ) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Access granted&amp;#39;&lt;/span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Access denied&amp;#39;&lt;/span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It is possible to use &lt;code&gt;return&lt;/code&gt; without a value. That causes the function to exit immediately.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; showMovie(age) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; ( &lt;span style=&#34;color:#ff79c6&#34;&gt;!&lt;/span&gt;checkAge(age) ) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Showing you the movie&amp;#34;&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// (*)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the code above, if &lt;code&gt;checkAge(age)&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;, then &lt;code&gt;showMovie&lt;/code&gt; won&amp;rsquo;t proceed to the &lt;code&gt;alert&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If a function does not return a value, it is the same as if it returns &lt;code&gt;undefined&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; doNothing() { &lt;span style=&#34;color:#6272a4&#34;&gt;/* empty */&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( doNothing() &lt;span style=&#34;color:#ff79c6&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;undefined&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;An empty &lt;code&gt;return&lt;/code&gt; is also the same as &lt;code&gt;return undefined&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; doNothing() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( doNothing() &lt;span style=&#34;color:#ff79c6&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;undefined&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For a long expression in &lt;code&gt;return&lt;/code&gt;, it might be tempting to put it on a separate line, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; (some &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; expression &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; or &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; whatever &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; f(a) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; f(b))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That doesn&amp;rsquo;t work, because JavaScript assumes a semicolon after &lt;code&gt;return&lt;/code&gt;. That&amp;rsquo;ll work the same as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; (some &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; expression &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; or &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; whatever &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; f(a) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; f(b))
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, it effectively becomes an empty return.&lt;/p&gt;
&lt;p&gt;If we want the returned expression to wrap across multiple lines, we should start it at the same line as &lt;code&gt;return&lt;/code&gt;. Or at least put the opening parentheses there as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; (
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  some &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; expression
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; or &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  whatever &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; f(a) &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; f(b)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And it will work just as we expect it to.&lt;/p&gt;
&lt;h3 id=&#34;naming-a-function-function-naming&#34;&gt;Naming a function [#function-naming]&lt;/h3&gt;
&lt;p&gt;Functions are actions. So their name is usually a verb. It should be brief, as accurate as possible and describe what the function does, so that someone reading the code gets an indication of what the function does.&lt;/p&gt;
&lt;p&gt;It is a widespread practice to start a function with a verbal prefix which vaguely describes the action. There must be an agreement within the team on the meaning of the prefixes.&lt;/p&gt;
&lt;p&gt;For instance, functions that start with &lt;code&gt;&amp;quot;show&amp;quot;&lt;/code&gt; usually show something.&lt;/p&gt;
&lt;p&gt;Function starting with&amp;hellip;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;get…&amp;quot;&lt;/code&gt; &amp;ndash; return a value,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;calc…&amp;quot;&lt;/code&gt; &amp;ndash; calculate something,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;create…&amp;quot;&lt;/code&gt; &amp;ndash; create something,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;check…&amp;quot;&lt;/code&gt; &amp;ndash; check something and return a boolean, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Examples of such names:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;showMessage(..)     &lt;span style=&#34;color:#6272a4&#34;&gt;// shows a message
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;getAge(..)          &lt;span style=&#34;color:#6272a4&#34;&gt;// returns the age (gets it somehow)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;calcSum(..)         &lt;span style=&#34;color:#6272a4&#34;&gt;// calculates a sum and returns the result
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;createForm(..)      &lt;span style=&#34;color:#6272a4&#34;&gt;// creates a form (and usually returns it)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;checkPermission(..) &lt;span style=&#34;color:#6272a4&#34;&gt;// checks a permission, returns true/false
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With prefixes in place, a glance at a function name gives an understanding what kind of work it does and what kind of value it returns.&lt;/p&gt;
&lt;p&gt;A function should do exactly what is suggested by its name, no more.&lt;/p&gt;
&lt;p&gt;Two independent actions usually deserve two functions, even if they are usually called together (in that case we can make a 3rd function that calls those two).&lt;/p&gt;
&lt;p&gt;A few examples of breaking this rule:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getAge&lt;/code&gt; &amp;ndash; would be bad if it shows an &lt;code&gt;alert&lt;/code&gt; with the age (should only get).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;createForm&lt;/code&gt; &amp;ndash; would be bad if it modifies the document, adding a form to it (should only create it and return).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;checkPermission&lt;/code&gt; &amp;ndash; would be bad if it displays the &lt;code&gt;access granted/denied&lt;/code&gt; message (should only perform the check and return the result).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These examples assume common meanings of prefixes. You and your team are free to agree on other meanings, but usually they&amp;rsquo;re not much different. In any case, you should have a firm understanding of what a prefix means, what a prefixed function can and cannot do. All same-prefixed functions should obey the rules. And the team should share the knowledge.&lt;/p&gt;
&lt;p&gt;Functions that are used &lt;em&gt;very often&lt;/em&gt; sometimes have ultrashort names.&lt;/p&gt;
&lt;p&gt;For example, the &lt;a href=&#34;http://jquery.com&#34;&gt;jQuery&lt;/a&gt; framework defines a function with &lt;code&gt;$&lt;/code&gt;. The &lt;a href=&#34;http://lodash.com/&#34;&gt;Lodash&lt;/a&gt; library has its core function named &lt;code&gt;_&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;These are exceptions. Generally functions names should be concise and descriptive.&lt;/p&gt;
&lt;h3 id=&#34;functions--comments&#34;&gt;Functions == Comments&lt;/h3&gt;
&lt;p&gt;Functions should be short and do exactly one thing. If that thing is big, maybe it&amp;rsquo;s worth it to split the function into a few smaller functions. Sometimes following this rule may not be that easy, but it&amp;rsquo;s definitely a good thing.&lt;/p&gt;
&lt;p&gt;A separate function is not only easier to test and debug &amp;ndash; its very existence is a great comment!&lt;/p&gt;
&lt;p&gt;For instance, compare the two functions &lt;code&gt;showPrimes(n)&lt;/code&gt; below. Each one outputs &lt;a href=&#34;https://en.wikipedia.org/wiki/Prime_number&#34;&gt;prime numbers&lt;/a&gt; up to &lt;code&gt;n&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The first variant uses a label:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; showPrimes(n) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  nextPrime&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;; i &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; j &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;; j &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; i; j&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (i &lt;span style=&#34;color:#ff79c6&#34;&gt;%&lt;/span&gt; j &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;continue&lt;/span&gt; nextPrime;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert( i ); &lt;span style=&#34;color:#6272a4&#34;&gt;// a prime
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The second variant uses an additional function &lt;code&gt;isPrime(n)&lt;/code&gt; to test for primality:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; showPrimes(n) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;; i &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;!&lt;/span&gt;isPrime(i)) &lt;span style=&#34;color:#ff79c6&#34;&gt;continue&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(i);  &lt;span style=&#34;color:#6272a4&#34;&gt;// a prime
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; isPrime(n) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;; i &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; n; i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; ( n &lt;span style=&#34;color:#ff79c6&#34;&gt;%&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The second variant is easier to understand, isn&amp;rsquo;t it? Instead of the code piece we see a name of the action (&lt;code&gt;isPrime&lt;/code&gt;). Sometimes people refer to such code as &lt;em&gt;self-describing&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;So, functions can be created even if we don&amp;rsquo;t intend to reuse them. They structure the code and make it readable.&lt;/p&gt;
&lt;h3 id=&#34;summary-7&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;A function declaration looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; name(parameters, delimited, by, comma) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;/* code */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Values passed to a function as parameters are copied to its local variables.&lt;/li&gt;
&lt;li&gt;A function may access outer variables. But it works only from inside out. The code outside of the function doesn&amp;rsquo;t see its local variables.&lt;/li&gt;
&lt;li&gt;A function can return a value. If it doesn&amp;rsquo;t, then its result is &lt;code&gt;undefined&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To make the code clean and easy to understand, it&amp;rsquo;s recommended to use mainly local variables and parameters in the function, not outer variables.&lt;/p&gt;
&lt;p&gt;It is always easier to understand a function which gets parameters, works with them and returns a result than a function which gets no parameters, but modifies outer variables as a side-effect.&lt;/p&gt;
&lt;p&gt;Function naming:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A name should clearly describe what the function does. When we see a function call in the code, a good name instantly gives us an understanding what it does and returns.&lt;/li&gt;
&lt;li&gt;A function is an action, so function names are usually verbal.&lt;/li&gt;
&lt;li&gt;There exist many well-known function prefixes like &lt;code&gt;create…&lt;/code&gt;, &lt;code&gt;show…&lt;/code&gt;, &lt;code&gt;get…&lt;/code&gt;, &lt;code&gt;check…&lt;/code&gt; and so on. Use them to hint what a function does.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Functions are the main building blocks of scripts. Now we&amp;rsquo;ve covered the basics, so we actually can start creating and using them. But that&amp;rsquo;s only the beginning of the path. We are going to return to them many times, going more deeply into their advanced features.&lt;/p&gt;
&lt;h2 id=&#34;function-expressions&#34;&gt;Function expressions&lt;/h2&gt;
&lt;p&gt;In JavaScript, a function is not a &amp;ldquo;magical language structure&amp;rdquo;, but a special kind of value.&lt;/p&gt;
&lt;p&gt;The syntax that we used before is called a &lt;em&gt;Function Declaration&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; sayHi() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There is another syntax for creating a function that is called a &lt;em&gt;Function Expression&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;It looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; sayHi &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here, the function is created and assigned to the variable explicitly, like any other value. No matter how the function is defined, it&amp;rsquo;s just a value stored in the variable &lt;code&gt;sayHi&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The meaning of these code samples is the same: &amp;ldquo;create a function and put it into the variable &lt;code&gt;sayHi&lt;/code&gt;&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;We can even print out that value using &lt;code&gt;alert&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; sayHi() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( sayHi ); &lt;span style=&#34;color:#6272a4&#34;&gt;// shows the function code
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Please note that the last line does not run the function, because there are no parentheses after &lt;code&gt;sayHi&lt;/code&gt;. There are programming languages where any mention of a function name causes its execution, but JavaScript is not like that.&lt;/p&gt;
&lt;p&gt;In JavaScript, a function is a value, so we can deal with it as a value. The code above shows its string representation, which is the source code.&lt;/p&gt;
&lt;p&gt;Surely, a function is a special value, in the sense that we can call it like &lt;code&gt;sayHi()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But it&amp;rsquo;s still a value. So we can work with it like with other kinds of values.&lt;/p&gt;
&lt;p&gt;We can copy a function to another variable:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; sayHi() {   &lt;span style=&#34;color:#6272a4&#34;&gt;// (1) create
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; func &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; sayHi;    &lt;span style=&#34;color:#6272a4&#34;&gt;// (2) copy
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;func(); &lt;span style=&#34;color:#6272a4&#34;&gt;// Hello     // (3) run the copy (it works)!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;sayHi(); &lt;span style=&#34;color:#6272a4&#34;&gt;// Hello    //     this still works too (why wouldn&amp;#39;t it)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here&amp;rsquo;s what happens above in detail:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The Function Declaration &lt;code&gt;(1)&lt;/code&gt; creates the function and puts it into the variable named &lt;code&gt;sayHi&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Line &lt;code&gt;(2)&lt;/code&gt; copies it into the variable &lt;code&gt;func&lt;/code&gt;. Please note again: there are no parentheses after &lt;code&gt;sayHi&lt;/code&gt;. If there were, then &lt;code&gt;func = sayHi()&lt;/code&gt; would write  &lt;em&gt;the result of the call&lt;/em&gt; &lt;code&gt;sayHi()&lt;/code&gt; into &lt;code&gt;func&lt;/code&gt;, not &lt;em&gt;the function&lt;/em&gt; &lt;code&gt;sayHi&lt;/code&gt; itself.&lt;/li&gt;
&lt;li&gt;Now the function can be called as both &lt;code&gt;sayHi()&lt;/code&gt; and &lt;code&gt;func()&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note that we could also have used a Function Expression to declare &lt;code&gt;sayHi&lt;/code&gt;, in the first line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; sayHi &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; func &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; sayHi;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Everything would work the same.&lt;/p&gt;
&lt;p&gt;You might wonder, why does Function Expression have a semicolon &lt;code&gt;;&lt;/code&gt; at the end, but Function Declaration does not:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; sayHi() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; sayHi &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The answer is simple:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There&amp;rsquo;s no need for &lt;code&gt;;&lt;/code&gt; at the end of code blocks and syntax structures that use them like &lt;code&gt;if { ... }&lt;/code&gt;, &lt;code&gt;for {  }&lt;/code&gt;, &lt;code&gt;function f { }&lt;/code&gt; etc.&lt;/li&gt;
&lt;li&gt;A Function Expression is used inside the statement: &lt;code&gt;let sayHi = ...;&lt;/code&gt;, as a value. It&amp;rsquo;s not a code block, but rather an assignment. The semicolon &lt;code&gt;;&lt;/code&gt; is recommended at the end of statements, no matter what the value is. So the semicolon here is not related to the Function Expression itself, it just terminates the statement.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;callback-functions&#34;&gt;Callback functions&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s look at more examples of passing functions as values and using function expressions.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll write a function &lt;code&gt;ask(question, yes, no)&lt;/code&gt; with three parameters:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;question&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Text of the question&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;yes&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Function to run if the answer is &amp;ldquo;Yes&amp;rdquo;&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;no&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Function to run if the answer is &amp;ldquo;No&amp;rdquo;&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;The function should ask the &lt;code&gt;question&lt;/code&gt; and, depending on the user&amp;rsquo;s answer, call &lt;code&gt;yes()&lt;/code&gt; or &lt;code&gt;no()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; ask(question, yes, no) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (confirm(question)) yes()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; no();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; showOk() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;You agreed.&amp;#34;&lt;/span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; showCancel() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;You canceled the execution.&amp;#34;&lt;/span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// usage: functions showOk, showCancel are passed as arguments to ask
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;ask(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Do you agree?&amp;#34;&lt;/span&gt;, showOk, showCancel);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In practice, such functions are quite useful. The major difference between a real-life &lt;code&gt;ask&lt;/code&gt; and the example above is that real-life functions use more complex ways to interact with the user than a simple &lt;code&gt;confirm&lt;/code&gt;. In the browser, such function usually draws a nice-looking question window. But that&amp;rsquo;s another story.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The arguments &lt;code&gt;showOk&lt;/code&gt; and &lt;code&gt;showCancel&lt;/code&gt; of &lt;code&gt;ask&lt;/code&gt; are called &lt;em&gt;callback functions&lt;/em&gt; or just &lt;em&gt;callbacks&lt;/em&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The idea is that we pass a function and expect it to be &amp;ldquo;called back&amp;rdquo; later if necessary. In our case, &lt;code&gt;showOk&lt;/code&gt; becomes the callback for &amp;ldquo;yes&amp;rdquo; answer, and &lt;code&gt;showCancel&lt;/code&gt; for &amp;ldquo;no&amp;rdquo; answer.&lt;/p&gt;
&lt;p&gt;We can use Function Expressions to write the same function much shorter:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; ask(question, yes, no) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (confirm(question)) yes()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; no();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ask(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Do you agree?&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() { alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;You agreed.&amp;#34;&lt;/span&gt;); },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() { alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;You canceled the execution.&amp;#34;&lt;/span&gt;); }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here, functions are declared right inside the &lt;code&gt;ask(...)&lt;/code&gt; call. They have no name, and so are called &lt;em&gt;anonymous&lt;/em&gt;. Such functions are not accessible outside of &lt;code&gt;ask&lt;/code&gt; (because they are not assigned to variables), but that&amp;rsquo;s just what we want here.&lt;/p&gt;
&lt;p&gt;Such code appears in our scripts very naturally, it&amp;rsquo;s in the spirit of JavaScript.&lt;/p&gt;
&lt;p&gt;Regular values like strings or numbers represent the &lt;em&gt;data&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A function can be perceived as an &lt;em&gt;action&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;We can pass it between variables and run when we want.&lt;/p&gt;
&lt;h3 id=&#34;function-expression-vs-function-declaration&#34;&gt;Function Expression vs Function Declaration&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s formulate the key differences between Function Declarations and Expressions.&lt;/p&gt;
&lt;p&gt;First, the syntax: how to differentiate between them in the code.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Function Declaration:&lt;/em&gt; a function, declared as a separate statement, in the main code flow.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Function Declaration
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; sum(a, b) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; b;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Function Expression:&lt;/em&gt; a function, created inside an expression or inside another syntax construct. Here, the function is created at the right side of the &amp;ldquo;assignment expression&amp;rdquo; &lt;code&gt;=&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Function Expression
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; sum &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(a, b) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; b;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The more subtle difference is &lt;em&gt;when&lt;/em&gt; a function is created by the JavaScript engine.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A Function Expression is created when the execution reaches it and is usable only from that moment.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Once the execution flow passes to the right side of the assignment &lt;code&gt;let sum = function…&lt;/code&gt; &amp;ndash; here we go, the function is created and can be used (assigned, called, etc. ) from now on.&lt;/p&gt;
&lt;p&gt;Function Declarations are different.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A Function Declaration can be called earlier than it is defined.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For example, a global Function Declaration is visible in the whole script, no matter where it is.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s due to internal algorithms. When JavaScript prepares to run the script, it first looks for global Function Declarations in it and creates the functions. We can think of it as an &amp;ldquo;initialization stage&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;And after all Function Declarations are processed, the code is executed. So it has access to these functions.&lt;/p&gt;
&lt;p&gt;For example, this works:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sayHi(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#6272a4&#34;&gt;// Hello, John
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; sayHi(name) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;`Hello, &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;name&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The Function Declaration &lt;code&gt;sayHi&lt;/code&gt; is created when JavaScript is preparing to start the script and is visible everywhere in it.&lt;/p&gt;
&lt;p&gt;&amp;hellip;If it were a Function Expression, then it wouldn&amp;rsquo;t work:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sayHi(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#6272a4&#34;&gt;// error!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; sayHi &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(name) {  &lt;span style=&#34;color:#6272a4&#34;&gt;// (*) no magic any more
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;`Hello, &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;name&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt; );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Function Expressions are created when the execution reaches them. That would happen only in the line &lt;code&gt;(*)&lt;/code&gt;. Too late.&lt;/p&gt;
&lt;p&gt;Another special feature of Function Declarations is their block scope.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;In strict mode, when a Function Declaration is within a code block, it&amp;rsquo;s visible everywhere inside that block. But not outside of it.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For instance, let&amp;rsquo;s imagine that we need to declare a function &lt;code&gt;welcome()&lt;/code&gt; depending on the &lt;code&gt;age&lt;/code&gt; variable that we get during runtime. And then we plan to use it some time later.&lt;/p&gt;
&lt;p&gt;If we use Function Declaration, it won&amp;rsquo;t work as intended:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; age &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; prompt(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;What is your age?&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;18&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// conditionally declare a function
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (age &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;18&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; welcome() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Hello!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; welcome() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Greetings!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// ...use it later
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;welcome(); &lt;span style=&#34;color:#6272a4&#34;&gt;// Error: welcome is not defined
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s because a Function Declaration is only visible inside the code block in which it resides.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s another example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; age &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;16&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// take 16 as an example
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (age &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;18&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  welcome();               &lt;span style=&#34;color:#6272a4&#34;&gt;// \   (runs)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                           &lt;span style=&#34;color:#6272a4&#34;&gt;//  |
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; welcome() {     &lt;span style=&#34;color:#6272a4&#34;&gt;//  |  
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Hello!&amp;#34;&lt;/span&gt;);       &lt;span style=&#34;color:#6272a4&#34;&gt;//  |  Function Declaration is available
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  }                        &lt;span style=&#34;color:#6272a4&#34;&gt;//  |  everywhere in the block where it&amp;#39;s declared
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;                           &lt;span style=&#34;color:#6272a4&#34;&gt;//  |
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  welcome();               &lt;span style=&#34;color:#6272a4&#34;&gt;// /   (runs)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; welcome() {    
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Greetings!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Here we&amp;#39;re out of curly braces,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// so we can not see Function Declarations made inside of them.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;welcome(); &lt;span style=&#34;color:#6272a4&#34;&gt;// Error: welcome is not defined
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What can we do to make &lt;code&gt;welcome&lt;/code&gt; visible outside of &lt;code&gt;if&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;The correct approach would be to use a Function Expression and assign &lt;code&gt;welcome&lt;/code&gt; to the variable that is declared outside of &lt;code&gt;if&lt;/code&gt; and has the proper visibility.&lt;/p&gt;
&lt;p&gt;This code works as intended:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; age &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; prompt(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;What is your age?&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;18&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; welcome;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (age &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;18&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  welcome &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Hello!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#ff79c6&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  welcome &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Greetings!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;welcome(); &lt;span style=&#34;color:#6272a4&#34;&gt;// ok now
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or we could simplify it even further using a question mark operator &lt;code&gt;?&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; age &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; prompt(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;What is your age?&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;18&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; welcome &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; (age &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;18&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;?&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() { alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Hello!&amp;#34;&lt;/span&gt;); } &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() { alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Greetings!&amp;#34;&lt;/span&gt;); };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;welcome(); &lt;span style=&#34;color:#6272a4&#34;&gt;// ok now
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As a rule of thumb, when we need to declare a function, the first to consider is Function Declaration syntax. It gives more freedom in how to organize our code, because we can call such functions before they are declared.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s also better for readability, as it&amp;rsquo;s easier to look up &lt;code&gt;function f(…) {…}&lt;/code&gt; in the code than &lt;code&gt;let f = function(…) {…};&lt;/code&gt;. Function Declarations are more &amp;ldquo;eye-catching&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;&amp;hellip;But if a Function Declaration does not suit us for some reason, or we need a conditional declaration (we&amp;rsquo;ve just seen an example), then Function Expression should be used.&lt;/p&gt;
&lt;h3 id=&#34;summary-8&#34;&gt;Summary&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Functions are values. They can be assigned, copied or declared in any place of the code.&lt;/li&gt;
&lt;li&gt;If the function is declared as a separate statement in the main code flow, that&amp;rsquo;s called a &amp;ldquo;Function Declaration&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;If the function is created as a part of an expression, it&amp;rsquo;s called a &amp;ldquo;Function Expression&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Function Declarations are processed before the code block is executed. They are visible everywhere in the block.&lt;/li&gt;
&lt;li&gt;Function Expressions are created when the execution flow reaches them.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In most cases when we need to declare a function, a Function Declaration is preferable, because it is visible prior to the declaration itself. That gives us more flexibility in code organization, and is usually more readable.&lt;/p&gt;
&lt;p&gt;So we should use a Function Expression only when a Function Declaration is not fit for the task. We&amp;rsquo;ve seen a couple of examples of that in this chapter, and will see more in the future.&lt;/p&gt;
&lt;h2 id=&#34;arrow-functions-the-basics&#34;&gt;Arrow functions, the basics&lt;/h2&gt;
&lt;p&gt;There&amp;rsquo;s another very simple and concise syntax for creating functions, that&amp;rsquo;s often better than Function Expressions.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s called &amp;ldquo;arrow functions&amp;rdquo;, because it looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; func &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; (arg1, arg2, ...argN) =&amp;gt; expression
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;hellip;This creates a function &lt;code&gt;func&lt;/code&gt; that accepts arguments &lt;code&gt;arg1..argN&lt;/code&gt;, then evaluates the &lt;code&gt;expression&lt;/code&gt; on the right side with their use and returns its result.&lt;/p&gt;
&lt;p&gt;In other words, it&amp;rsquo;s the shorter version of:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; func &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(arg1, arg2, ...argN) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; expression;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s see a concrete example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; sum &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; (a, b) =&amp;gt; a &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; b;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/* This arrow function is a shorter form of:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;let sum = function(a, b) {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;  return a + b;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( sum(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;) ); &lt;span style=&#34;color:#6272a4&#34;&gt;// 3
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can, see &lt;code&gt;(a, b) =&amp;gt; a + b&lt;/code&gt; means a function that accepts two arguments named &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;. Upon the execution, it evaluates the expression &lt;code&gt;a + b&lt;/code&gt; and returns the result.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If we have only one argument, then parentheses around parameters can be omitted, making that even shorter.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; n =&amp;gt; n &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// roughly the same as: let double = function(n) { return n * 2 }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#ff79c6&#34;&gt;double&lt;/span&gt;(&lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;) ); &lt;span style=&#34;color:#6272a4&#34;&gt;// 6
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If there are no arguments, parentheses will be empty (but they should be present):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; sayHi &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; () =&amp;gt; alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Hello!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sayHi();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Arrow functions can be used in the same way as Function Expressions.&lt;/p&gt;
&lt;p&gt;For instance, to dynamically create a function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; age &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; prompt(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;What is your age?&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;18&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; welcome &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; (age &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;18&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;?&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  () =&amp;gt; alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  () =&amp;gt; alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Greetings!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;welcome();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Arrow functions may appear unfamiliar and not very readable at first, but that quickly changes as the eyes get used to the structure.&lt;/p&gt;
&lt;p&gt;They are very convenient for simple one-line actions, when we&amp;rsquo;re just too lazy to write many words.&lt;/p&gt;
&lt;h3 id=&#34;multiline-arrow-functions&#34;&gt;Multiline arrow functions&lt;/h3&gt;
&lt;p&gt;The examples above took arguments from the left of &lt;code&gt;=&amp;gt;&lt;/code&gt; and evaluated the right-side expression with them.&lt;/p&gt;
&lt;p&gt;Sometimes we need something a little bit more complex, like multiple expressions or statements. It is also possible, but we should enclose them in curly braces. Then use a normal &lt;code&gt;return&lt;/code&gt; within them.&lt;/p&gt;
&lt;p&gt;Like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; sum &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; (a, b) =&amp;gt; {  &lt;span style=&#34;color:#6272a4&#34;&gt;// the curly brace opens a multiline function
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; result &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; b;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; result; &lt;span style=&#34;color:#6272a4&#34;&gt;// if we use curly braces, then we need an explicit &amp;#34;return&amp;#34; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( sum(&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;) ); &lt;span style=&#34;color:#6272a4&#34;&gt;// 3
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here we praised arrow functions for brevity. But that&amp;rsquo;s not all!&lt;/p&gt;
&lt;p&gt;Arrow functions have other interesting features.&lt;/p&gt;
&lt;p&gt;To study them in-depth, we first need to get to know some other aspects of JavaScript, so we&amp;rsquo;ll return to arrow functions later in the chapter &lt;a href=&#34;info:arrow-functions&#34;&gt;info:arrow-functions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For now, we can already use arrow functions for one-line actions and callbacks.&lt;/p&gt;
&lt;h3 id=&#34;summary-9&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;Arrow functions are handy for one-liners. They come in two flavors:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Without curly braces: &lt;code&gt;(...args) =&amp;gt; expression&lt;/code&gt; &amp;ndash; the right side is an expression: the function evaluates it and returns the result.&lt;/li&gt;
&lt;li&gt;With curly braces: &lt;code&gt;(...args) =&amp;gt; { body }&lt;/code&gt; &amp;ndash; brackets allow us to write multiple statements inside the function, but we need an explicit &lt;code&gt;return&lt;/code&gt; to return something.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;javascript-specials&#34;&gt;JavaScript specials&lt;/h2&gt;
&lt;p&gt;This chapter briefly recaps the features of JavaScript that we&amp;rsquo;ve learned by now, paying special attention to subtle moments.&lt;/p&gt;
&lt;h3 id=&#34;code-structure-1&#34;&gt;Code structure&lt;/h3&gt;
&lt;p&gt;Statements are delimited with a semicolon:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt;); alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;World&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Usually, a line-break is also treated as a delimiter, so that would also work:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;World&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s called &amp;ldquo;automatic semicolon insertion&amp;rdquo;. Sometimes it doesn&amp;rsquo;t work, for instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;There will be an error after this message&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[&lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;].forEach(alert)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Most codestyle guides agree that we should put a semicolon after each statement.&lt;/p&gt;
&lt;p&gt;Semicolons are not required after code blocks &lt;code&gt;{...}&lt;/code&gt; and syntax constructs with them like loops:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; f() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// no semicolon needed after function declaration
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt;(;;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// no semicolon needed after the loop
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;hellip;But even if we can put an &amp;ldquo;extra&amp;rdquo; semicolon somewhere, that&amp;rsquo;s not an error. It will be ignored.&lt;/p&gt;
&lt;p&gt;More in: &lt;a href=&#34;info:structure&#34;&gt;info:structure&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;strict-mode&#34;&gt;Strict mode&lt;/h3&gt;
&lt;p&gt;To fully enable all features of modern JavaScript, we should start scripts with &lt;code&gt;&amp;quot;use strict&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;use strict&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The directive must be at the top of a script or at the beginning of a function body.&lt;/p&gt;
&lt;p&gt;Without &lt;code&gt;&amp;quot;use strict&amp;quot;&lt;/code&gt;, everything still works, but some features behave in the old-fashion, &amp;ldquo;compatible&amp;rdquo; way. We&amp;rsquo;d generally prefer the modern behavior.&lt;/p&gt;
&lt;p&gt;Some modern features of the language (like classes that we&amp;rsquo;ll study in the future) enable strict mode implicitly.&lt;/p&gt;
&lt;p&gt;More in: &lt;a href=&#34;info:strict-mode&#34;&gt;info:strict-mode&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;variables-1&#34;&gt;Variables&lt;/h3&gt;
&lt;p&gt;Can be declared using:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;let&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const&lt;/code&gt; (constant, can&amp;rsquo;t be changed)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;var&lt;/code&gt; (old-style, will see later)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A variable name can include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Letters and digits, but the first character may not be a digit.&lt;/li&gt;
&lt;li&gt;Characters &lt;code&gt;$&lt;/code&gt; and &lt;code&gt;_&lt;/code&gt; are normal, on par with letters.&lt;/li&gt;
&lt;li&gt;Non-Latin alphabets and hieroglyphs are also allowed, but commonly not used.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Variables are dynamically typed. They can store any value:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; x &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are 8 data types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;number&lt;/code&gt; for both floating-point and integer numbers,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bigint&lt;/code&gt; for integer numbers of arbitrary length,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;string&lt;/code&gt; for strings,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boolean&lt;/code&gt; for logical values: &lt;code&gt;true/false&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;null&lt;/code&gt; &amp;ndash; a type with a single value &lt;code&gt;null&lt;/code&gt;, meaning &amp;ldquo;empty&amp;rdquo; or &amp;ldquo;does not exist&amp;rdquo;,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;undefined&lt;/code&gt; &amp;ndash; a type with a single value &lt;code&gt;undefined&lt;/code&gt;, meaning &amp;ldquo;not assigned&amp;rdquo;,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;object&lt;/code&gt; and &lt;code&gt;symbol&lt;/code&gt; &amp;ndash; for complex data structures and unique identifiers, we haven&amp;rsquo;t learnt them yet.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;typeof&lt;/code&gt; operator returns the type for a value, with two exceptions:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;typeof&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;object&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;// error in the language
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;typeof&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(){} &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;function&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;// functions are treated specially
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;More in: &lt;a href=&#34;info:variables&#34;&gt;info:variables&lt;/a&gt; and &lt;a href=&#34;info:types&#34;&gt;info:types&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;interaction&#34;&gt;Interaction&lt;/h3&gt;
&lt;p&gt;We&amp;rsquo;re using a browser as a working environment, so basic UI functions will be:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;a href=&#34;mdn:api/Window/prompt&#34;&gt;&lt;code&gt;prompt(question, [default])&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Ask a &lt;code&gt;question&lt;/code&gt;, and return either what the visitor entered or &lt;code&gt;null&lt;/code&gt; if they clicked &amp;ldquo;cancel&amp;rdquo;.&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;mdn:api/Window/confirm&#34;&gt;&lt;code&gt;confirm(question)&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Ask a &lt;code&gt;question&lt;/code&gt; and suggest to choose between Ok and Cancel. The choice is returned as &lt;code&gt;true/false&lt;/code&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;a href=&#34;mdn:api/Window/alert&#34;&gt;&lt;code&gt;alert(message)&lt;/code&gt;&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Output a &lt;code&gt;message&lt;/code&gt;.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;All these functions are &lt;em&gt;modal&lt;/em&gt;, they pause the code execution and prevent the visitor from interacting with the page until they answer.&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; userName &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; prompt(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Your name?&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Alice&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; isTeaWanted &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; confirm(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Do you want some tea?&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Visitor: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; userName ); &lt;span style=&#34;color:#6272a4&#34;&gt;// Alice
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Tea wanted: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; isTeaWanted ); &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;More in: &lt;a href=&#34;info:alert-prompt-confirm&#34;&gt;info:alert-prompt-confirm&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;operators&#34;&gt;Operators&lt;/h3&gt;
&lt;p&gt;JavaScript supports the following operators:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;Arithmetical&lt;/dt&gt;
&lt;dd&gt;Regular: &lt;code&gt;* + - /&lt;/code&gt;, also &lt;code&gt;%&lt;/code&gt; for the remainder and &lt;code&gt;**&lt;/code&gt; for power of a number.
&lt;p&gt;The binary plus &lt;code&gt;+&lt;/code&gt; concatenates strings. And if any of the operands is a string, the other one is converted to string too:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;1&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// &amp;#39;12&amp;#39;, string
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;2&amp;#39;&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// &amp;#39;12&amp;#39;, string
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/dd&gt;
&lt;dt&gt;Assignments&lt;/dt&gt;
&lt;dd&gt;There is a simple assignment: &lt;code&gt;a = b&lt;/code&gt; and combined ones like &lt;code&gt;a *= 2&lt;/code&gt;.&lt;/dd&gt;
&lt;dt&gt;Bitwise&lt;/dt&gt;
&lt;dd&gt;Bitwise operators work with 32-bit integers at the lowest, bit-level: see the &lt;a href=&#34;mdn:/JavaScript/Reference/Operators/Bitwise_Operators&#34;&gt;docs&lt;/a&gt; when they are needed.&lt;/dd&gt;
&lt;dt&gt;Conditional&lt;/dt&gt;
&lt;dd&gt;The only operator with three parameters: &lt;code&gt;cond ? resultA : resultB&lt;/code&gt;. If &lt;code&gt;cond&lt;/code&gt; is truthy, returns &lt;code&gt;resultA&lt;/code&gt;, otherwise &lt;code&gt;resultB&lt;/code&gt;.&lt;/dd&gt;
&lt;dt&gt;Logical operators&lt;/dt&gt;
&lt;dd&gt;Logical AND &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and OR &lt;code&gt;||&lt;/code&gt; perform short-circuit evaluation and then return the value where it stopped (not necessary &lt;code&gt;true&lt;/code&gt;/&lt;code&gt;false&lt;/code&gt;). Logical NOT &lt;code&gt;!&lt;/code&gt; converts the operand to boolean type and returns the inverse value.&lt;/dd&gt;
&lt;dt&gt;Nullish coalescing operator&lt;/dt&gt;
&lt;dd&gt;The &lt;code&gt;??&lt;/code&gt; operator provides a way to choose a defined value from a list of variables. The result of &lt;code&gt;a ?? b&lt;/code&gt; is &lt;code&gt;a&lt;/code&gt; unless it&amp;rsquo;s &lt;code&gt;null/undefined&lt;/code&gt;, then &lt;code&gt;b&lt;/code&gt;.&lt;/dd&gt;
&lt;dt&gt;Comparisons&lt;/dt&gt;
&lt;dd&gt;Equality check &lt;code&gt;==&lt;/code&gt; for values of different types converts them to a number (except &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt; that equal each other and nothing else), so these are equal:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Other comparisons convert to a number as well.&lt;/p&gt;
&lt;p&gt;The strict equality operator &lt;code&gt;===&lt;/code&gt; doesn&amp;rsquo;t do the conversion: different types always mean different values for it.&lt;/p&gt;
&lt;p&gt;Values &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt; are special: they equal &lt;code&gt;==&lt;/code&gt; each other and don&amp;rsquo;t equal anything else.&lt;/p&gt;
&lt;p&gt;Greater/less comparisons compare strings character-by-character, other types are converted to a number.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;Other operators&lt;/dt&gt;
&lt;dd&gt;There are few others, like a comma operator.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;More in: &lt;a href=&#34;info:operators&#34;&gt;info:operators&lt;/a&gt;, &lt;a href=&#34;info:comparison&#34;&gt;info:comparison&lt;/a&gt;, &lt;a href=&#34;info:logical-operators&#34;&gt;info:logical-operators&lt;/a&gt;, &lt;a href=&#34;info:nullish-coalescing-operator&#34;&gt;info:nullish-coalescing-operator&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;loops&#34;&gt;Loops&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;We covered 3 types of loops:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;while&lt;/span&gt; (condition) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// 2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;do&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#ff79c6&#34;&gt;while&lt;/span&gt; (condition);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// 3
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;10&lt;/span&gt;; i&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The variable declared in &lt;code&gt;for(let...)&lt;/code&gt; loop is visible only inside the loop. But we can also omit &lt;code&gt;let&lt;/code&gt; and reuse an existing variable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Directives &lt;code&gt;break/continue&lt;/code&gt; allow to exit the whole loop/current iteration. Use labels to break nested loops.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Details in: &lt;a href=&#34;info:while-for&#34;&gt;info:while-for&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Later we&amp;rsquo;ll study more types of loops to deal with objects.&lt;/p&gt;
&lt;h3 id=&#34;the-switch-construct&#34;&gt;The &amp;ldquo;switch&amp;rdquo; construct&lt;/h3&gt;
&lt;p&gt;The &amp;ldquo;switch&amp;rdquo; construct can replace multiple &lt;code&gt;if&lt;/code&gt; checks. It uses &lt;code&gt;===&lt;/code&gt; (strict equality) for comparisons.&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; age &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; prompt(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Your age?&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;18&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;switch&lt;/span&gt; (age) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;18&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Won&amp;#39;t work&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#6272a4&#34;&gt;// the result of prompt is a string, not a number
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;18&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;This works!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Any value not equal to one above&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Details in: &lt;a href=&#34;info:switch&#34;&gt;info:switch&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;functions-1&#34;&gt;Functions&lt;/h3&gt;
&lt;p&gt;We covered three ways to create a function in JavaScript:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Function Declaration: the function in the main code flow&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; sum(a, b) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; result &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; b;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; result;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Function Expression: the function in the context of an expression&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; sum &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(a, b) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; result &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; b;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; result;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Arrow functions:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// expression at the right side
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; sum &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; (a, b) =&amp;gt; a &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; b;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// or multi-line syntax with { ... }, need return here:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; sum &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; (a, b) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; a &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; b;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// without arguments
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; sayHi &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; () =&amp;gt; alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// with a single argument
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; n =&amp;gt; n &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Functions may have local variables: those declared inside its body. Such variables are only visible inside the function.&lt;/li&gt;
&lt;li&gt;Parameters can have default values: &lt;code&gt;function sum(a = 1, b = 2) {...}&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Functions always return something. If there&amp;rsquo;s no &lt;code&gt;return&lt;/code&gt; statement, then the result is &lt;code&gt;undefined&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Details: see &lt;a href=&#34;info:function-basics&#34;&gt;info:function-basics&lt;/a&gt;, &lt;a href=&#34;info:arrow-functions-basics&#34;&gt;info:arrow-functions-basics&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;more-to-come&#34;&gt;More to come&lt;/h3&gt;
&lt;p&gt;That was a brief list of JavaScript features. As of now we&amp;rsquo;ve studied only basics. Further in the tutorial you&amp;rsquo;ll find more specials and advanced features of JavaScript.&lt;/p&gt;
&lt;h2 id=&#34;objects&#34;&gt;Objects&lt;/h2&gt;
&lt;p&gt;As we know from the chapter &lt;a href=&#34;info:types&#34;&gt;info:types&lt;/a&gt;, there are eight data types in JavaScript. Seven of them are called &amp;ldquo;primitive&amp;rdquo;, because their values contain only a single thing (be it a string or a number or whatever).&lt;/p&gt;
&lt;p&gt;In contrast, objects are used to store keyed collections of various data and more complex entities. In JavaScript, objects penetrate almost every aspect of the language. So we must understand them first before going in-depth anywhere else.&lt;/p&gt;
&lt;p&gt;An object can be created with figure brackets &lt;code&gt;{…}&lt;/code&gt; with an optional list of &lt;em&gt;properties&lt;/em&gt;. A property is a &amp;ldquo;key: value&amp;rdquo; pair, where &lt;code&gt;key&lt;/code&gt; is a string (also called a &amp;ldquo;property name&amp;rdquo;), and &lt;code&gt;value&lt;/code&gt; can be anything.&lt;/p&gt;
&lt;p&gt;We can imagine an object as a cabinet with signed files. Every piece of data is stored in its file by the key. It&amp;rsquo;s easy to find a file by its name or add/remove a file.&lt;/p&gt;
&lt;p&gt;An empty object (&amp;ldquo;empty cabinet&amp;rdquo;) can be created using one of two syntaxes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Object&lt;/span&gt;(); &lt;span style=&#34;color:#6272a4&#34;&gt;// &amp;#34;object constructor&amp;#34; syntax
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {};  &lt;span style=&#34;color:#6272a4&#34;&gt;// &amp;#34;object literal&amp;#34; syntax
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Usually, the figure brackets &lt;code&gt;{...}&lt;/code&gt; are used. That declaration is called an &lt;em&gt;object literal&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&#34;literals-and-properties&#34;&gt;Literals and properties&lt;/h3&gt;
&lt;p&gt;We can immediately put some properties into &lt;code&gt;{...}&lt;/code&gt; as &amp;ldquo;key: value&amp;rdquo; pairs:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {     &lt;span style=&#34;color:#6272a4&#34;&gt;// an object
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;,  &lt;span style=&#34;color:#6272a4&#34;&gt;// by key &amp;#34;name&amp;#34; store value &amp;#34;John&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  age&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;30&lt;/span&gt;        &lt;span style=&#34;color:#6272a4&#34;&gt;// by key &amp;#34;age&amp;#34; store value 30
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A property has a key (also known as &amp;ldquo;name&amp;rdquo; or &amp;ldquo;identifier&amp;rdquo;) before the colon &lt;code&gt;&amp;quot;:&amp;quot;&lt;/code&gt; and a value to the right of it.&lt;/p&gt;
&lt;p&gt;In the &lt;code&gt;user&lt;/code&gt; object, there are two properties:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The first property has the name &lt;code&gt;&amp;quot;name&amp;quot;&lt;/code&gt; and the value &lt;code&gt;&amp;quot;John&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The second one has the name &lt;code&gt;&amp;quot;age&amp;quot;&lt;/code&gt; and the value &lt;code&gt;30&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The resulting &lt;code&gt;user&lt;/code&gt; object can be imagined as a cabinet with two signed files labeled &amp;ldquo;name&amp;rdquo; and &amp;ldquo;age&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;We can add, remove and read files from it any time.&lt;/p&gt;
&lt;p&gt;Property values are accessible using the dot notation:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// get property values of the object:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( user.name ); &lt;span style=&#34;color:#6272a4&#34;&gt;// John
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( user.age ); &lt;span style=&#34;color:#6272a4&#34;&gt;// 30
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The value can be of any type. Let&amp;rsquo;s add a boolean one:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user.isAdmin &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To remove a property, we can use &lt;code&gt;delete&lt;/code&gt; operator:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;delete&lt;/span&gt; user.age;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can also use multiword property names, but then they must be quoted:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  age&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;30&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;likes birds&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// multiword property name must be quoted
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The last property in the list may end with a comma:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  age&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;30&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That is called a &amp;ldquo;trailing&amp;rdquo; or &amp;ldquo;hanging&amp;rdquo; comma. Makes it easier to add/remove/move around properties, because all lines become alike.&lt;/p&gt;
&lt;p&gt;Please note: an object declared as &lt;code&gt;const&lt;/code&gt; &lt;em&gt;can&lt;/em&gt; be modified.&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;const&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user.name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Pete&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// (*)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(user.name); &lt;span style=&#34;color:#6272a4&#34;&gt;// Pete
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It might seem that the line &lt;code&gt;(*)&lt;/code&gt; would cause an error, but no. The &lt;code&gt;const&lt;/code&gt; fixes the value of &lt;code&gt;user&lt;/code&gt;, but not its contents.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;const&lt;/code&gt; would give an error only if we try to set &lt;code&gt;user=...&lt;/code&gt; as a whole.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s another way to make constant object properties, we&amp;rsquo;ll cover it later in the chapter &lt;a href=&#34;info:property-descriptors&#34;&gt;info:property-descriptors&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;square-brackets&#34;&gt;Square brackets&lt;/h3&gt;
&lt;p&gt;For multiword properties, the dot access doesn&amp;rsquo;t work:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// this would give a syntax error
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;user.likes birds &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;JavaScript doesn&amp;rsquo;t understand that. It thinks that we address &lt;code&gt;user.likes&lt;/code&gt;, and then gives a syntax error when comes across unexpected &lt;code&gt;birds&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The dot requires the key to be a valid variable identifier. That implies: contains no spaces, doesn&amp;rsquo;t start with a digit and doesn&amp;rsquo;t include special characters (&lt;code&gt;$&lt;/code&gt; and &lt;code&gt;_&lt;/code&gt; are allowed).&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s an alternative &amp;ldquo;square bracket notation&amp;rdquo; that works with any string:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// set
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;user[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;likes birds&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// get
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert(user[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;likes birds&amp;#34;&lt;/span&gt;]); &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// delete
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;delete&lt;/span&gt; user[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;likes birds&amp;#34;&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now everything is fine. Please note that the string inside the brackets is properly quoted (any type of quotes will do).&lt;/p&gt;
&lt;p&gt;Square brackets also provide a way to obtain the property name as the result of any expression &amp;ndash; as opposed to a literal string &amp;ndash; like from a variable as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; key &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;likes birds&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// same as user[&amp;#34;likes birds&amp;#34;] = true;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;user[key] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here, the variable &lt;code&gt;key&lt;/code&gt; may be calculated at run-time or depend on the user input. And then we use it to access the property. That gives us a great deal of flexibility.&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  age&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;30&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; key &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; prompt(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;What do you want to know about the user?&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// access by variable
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( user[key] ); &lt;span style=&#34;color:#6272a4&#34;&gt;// John (if enter &amp;#34;name&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The dot notation cannot be used in a similar way:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  age&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;30&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; key &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( user.key ) &lt;span style=&#34;color:#6272a4&#34;&gt;// undefined
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;computed-properties&#34;&gt;Computed properties&lt;/h4&gt;
&lt;p&gt;We can use square brackets in an object literal, when creating an object. That&amp;rsquo;s called &lt;em&gt;computed properties&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; fruit &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; prompt(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Which fruit to buy?&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;apple&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; bag &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  [fruit]&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#6272a4&#34;&gt;// the name of the property is taken from the variable fruit
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( bag.apple ); &lt;span style=&#34;color:#6272a4&#34;&gt;// 5 if fruit=&amp;#34;apple&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The meaning of a computed property is simple: &lt;code&gt;[fruit]&lt;/code&gt; means that the property name should be taken from &lt;code&gt;fruit&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So, if a visitor enters &lt;code&gt;&amp;quot;apple&amp;quot;&lt;/code&gt;, &lt;code&gt;bag&lt;/code&gt; will become &lt;code&gt;{apple: 5}&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Essentially, that works the same as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; fruit &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; prompt(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Which fruit to buy?&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;apple&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; bag &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// take property name from the fruit variable
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;bag[fruit] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;hellip;But looks nicer.&lt;/p&gt;
&lt;p&gt;We can use more complex expressions inside square brackets:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; fruit &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;apple&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; bag &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  [fruit &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Computers&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;// bag.appleComputers = 5
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Square brackets are much more powerful than the dot notation. They allow any property names and variables. But they are also more cumbersome to write.&lt;/p&gt;
&lt;p&gt;So most of the time, when property names are known and simple, the dot is used. And if we need something more complex, then we switch to square brackets.&lt;/p&gt;
&lt;h3 id=&#34;property-value-shorthand&#34;&gt;Property value shorthand&lt;/h3&gt;
&lt;p&gt;In real code we often use existing variables as values for property names.&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; makeUser(name, age) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; name,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    age&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; age,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// ...other properties
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; makeUser(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#bd93f9&#34;&gt;30&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(user.name); &lt;span style=&#34;color:#6272a4&#34;&gt;// John
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the example above, properties have the same names as variables. The use-case of making a property from a variable is so common, that there&amp;rsquo;s a special &lt;em&gt;property value shorthand&lt;/em&gt; to make it shorter.&lt;/p&gt;
&lt;p&gt;Instead of &lt;code&gt;name:name&lt;/code&gt; we can just write &lt;code&gt;name&lt;/code&gt;, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; makeUser(name, age) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name, &lt;span style=&#34;color:#6272a4&#34;&gt;// same as name: name
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    age,  &lt;span style=&#34;color:#6272a4&#34;&gt;// same as age: age
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can use both normal properties and shorthands in the same object:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  name,  &lt;span style=&#34;color:#6272a4&#34;&gt;// same as name:name
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  age&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;30&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;property-names-limitations&#34;&gt;Property names limitations&lt;/h3&gt;
&lt;p&gt;As we already know, a variable cannot have a name equal to one of language-reserved words like &amp;ldquo;for&amp;rdquo;, &amp;ldquo;let&amp;rdquo;, &amp;ldquo;return&amp;rdquo; etc.&lt;/p&gt;
&lt;p&gt;But for an object property, there&amp;rsquo;s no such restriction:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// these properties are all right
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; obj &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( obj.&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; obj.&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; obj.&lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; );  &lt;span style=&#34;color:#6272a4&#34;&gt;// 6
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In short, there are no limitations on property names. They can be any strings or symbols (a special type for identifiers, to be covered later).&lt;/p&gt;
&lt;p&gt;Other types are automatically converted to strings.&lt;/p&gt;
&lt;p&gt;For instance, a number &lt;code&gt;0&lt;/code&gt; becomes a string &lt;code&gt;&amp;quot;0&amp;quot;&lt;/code&gt; when used as a property key:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; obj &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;// same as &amp;#34;0&amp;#34;: &amp;#34;test&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// both alerts access the same property (the number 0 is converted to string &amp;#34;0&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( obj[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt;] ); &lt;span style=&#34;color:#6272a4&#34;&gt;// test
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( obj[&lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;] ); &lt;span style=&#34;color:#6272a4&#34;&gt;// test (same property)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There&amp;rsquo;s a minor gotcha with a special property named &lt;code&gt;__proto__&lt;/code&gt;. We can&amp;rsquo;t set it to a non-object value:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; obj &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;obj.__proto__ &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;5&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// assign a number
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert(obj.__proto__); &lt;span style=&#34;color:#6272a4&#34;&gt;// [object Object] - the value is an object, didn&amp;#39;t work as intended
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As we see from the code, the assignment to a primitive &lt;code&gt;5&lt;/code&gt; is ignored.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ll cover the special nature of &lt;code&gt;__proto__&lt;/code&gt; in &lt;a href=&#34;info:prototype-inheritance&#34;&gt;subsequent chapters&lt;/a&gt;, and suggest the &lt;a href=&#34;info:prototype-methods&#34;&gt;ways to fix&lt;/a&gt; such behavior.&lt;/p&gt;
&lt;h3 id=&#34;property-existence-test-in-operator&#34;&gt;Property existence test, &amp;ldquo;in&amp;rdquo; operator&lt;/h3&gt;
&lt;p&gt;A notable feature of objects in JavaScript, compared to many other languages, is that it&amp;rsquo;s possible to access any property. There will be no error if the property doesn&amp;rsquo;t exist!&lt;/p&gt;
&lt;p&gt;Reading a non-existing property just returns &lt;code&gt;undefined&lt;/code&gt;. So we can easily test whether the property exists:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( user.noSuchProperty &lt;span style=&#34;color:#ff79c6&#34;&gt;===&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;undefined&lt;/span&gt; ); &lt;span style=&#34;color:#6272a4&#34;&gt;// true means &amp;#34;no such property&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There&amp;rsquo;s also a special operator &lt;code&gt;&amp;quot;in&amp;quot;&lt;/code&gt; for that.&lt;/p&gt;
&lt;p&gt;The syntax is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; object
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; { name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;, age&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;30&lt;/span&gt; };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;age&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; user ); &lt;span style=&#34;color:#6272a4&#34;&gt;// true, user.age exists
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;blabla&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; user ); &lt;span style=&#34;color:#6272a4&#34;&gt;// false, user.blabla doesn&amp;#39;t exist
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Please note that on the left side of &lt;code&gt;in&lt;/code&gt; there must be a &lt;em&gt;property name&lt;/em&gt;. That&amp;rsquo;s usually a quoted string.&lt;/p&gt;
&lt;p&gt;If we omit quotes, that means a variable, it should contain the actual name to be tested. For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; { age&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;30&lt;/span&gt; };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; key &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;age&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( key &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; user ); &lt;span style=&#34;color:#6272a4&#34;&gt;// true, property &amp;#34;age&amp;#34; exists
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Why does the &lt;code&gt;in&lt;/code&gt; operator exist? Isn&amp;rsquo;t it enough to compare against &lt;code&gt;undefined&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Well, most of the time the comparison with &lt;code&gt;undefined&lt;/code&gt; works fine. But there&amp;rsquo;s a special case when it fails, but &lt;code&gt;&amp;quot;in&amp;quot;&lt;/code&gt; works correctly.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s when an object property exists, but stores &lt;code&gt;undefined&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; obj &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  test&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;undefined&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( obj.test ); &lt;span style=&#34;color:#6272a4&#34;&gt;// it&amp;#39;s undefined, so - no such property?
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;test&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; obj ); &lt;span style=&#34;color:#6272a4&#34;&gt;// true, the property does exist!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the code above, the property &lt;code&gt;obj.test&lt;/code&gt; technically exists. So the &lt;code&gt;in&lt;/code&gt; operator works right.&lt;/p&gt;
&lt;p&gt;Situations like this happen very rarely, because &lt;code&gt;undefined&lt;/code&gt; should not be explicitly assigned. We mostly use &lt;code&gt;null&lt;/code&gt; for &amp;ldquo;unknown&amp;rdquo; or &amp;ldquo;empty&amp;rdquo; values. So the &lt;code&gt;in&lt;/code&gt; operator is an exotic guest in the code.&lt;/p&gt;
&lt;h3 id=&#34;the-forin-loop&#34;&gt;The &amp;ldquo;for..in&amp;rdquo; loop&lt;/h3&gt;
&lt;p&gt;To walk over all keys of an object, there exists a special form of the loop: &lt;code&gt;for..in&lt;/code&gt;. This is a completely different thing from the &lt;code&gt;for(;;)&lt;/code&gt; construct that we studied before.&lt;/p&gt;
&lt;p&gt;The syntax:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (key &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; object) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// executes the body for each key among object properties
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For instance, let&amp;rsquo;s output all properties of &lt;code&gt;user&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  age&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;30&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  isAdmin&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; key &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; user) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// keys
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  alert( key );  &lt;span style=&#34;color:#6272a4&#34;&gt;// name, age, isAdmin
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// values for the keys
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  alert( user[key] ); &lt;span style=&#34;color:#6272a4&#34;&gt;// John, 30, true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that all &amp;ldquo;for&amp;rdquo; constructs allow us to declare the looping variable inside the loop, like &lt;code&gt;let key&lt;/code&gt; here.&lt;/p&gt;
&lt;p&gt;Also, we could use another variable name here instead of &lt;code&gt;key&lt;/code&gt;. For instance, &lt;code&gt;&amp;quot;for (let prop in obj)&amp;quot;&lt;/code&gt; is also widely used.&lt;/p&gt;
&lt;h4 id=&#34;ordered-like-an-object&#34;&gt;Ordered like an object&lt;/h4&gt;
&lt;p&gt;Are objects ordered? In other words, if we loop over an object, do we get all properties in the same order they were added? Can we rely on this?&lt;/p&gt;
&lt;p&gt;The short answer is: &amp;ldquo;ordered in a special fashion&amp;rdquo;: integer properties are sorted, others appear in creation order. The details follow.&lt;/p&gt;
&lt;p&gt;As an example, let&amp;rsquo;s consider an object with the phone codes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; codes &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;49&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Germany&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;41&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Switzerland&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;44&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Great Britain&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// ..,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;USA&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; code &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; codes) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(code); &lt;span style=&#34;color:#6272a4&#34;&gt;// 1, 41, 44, 49
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The object may be used to suggest a list of options to the user. If we&amp;rsquo;re making a site mainly for German audience then we probably want &lt;code&gt;49&lt;/code&gt; to be the first.&lt;/p&gt;
&lt;p&gt;But if we run the code, we see a totally different picture:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;USA (1) goes first&lt;/li&gt;
&lt;li&gt;then Switzerland (41) and so on.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The phone codes go in the ascending sorted order, because they are integers. So we see &lt;code&gt;1, 41, 44, 49&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;integer property&amp;rdquo; term here means a string that can be converted to-and-from an integer without a change.&lt;/p&gt;
&lt;p&gt;So, &amp;ldquo;49&amp;rdquo; is an integer property name, because when it&amp;rsquo;s transformed to an integer number and back, it&amp;rsquo;s still the same. But &amp;ldquo;+49&amp;rdquo; and &amp;ldquo;1.2&amp;rdquo; are not:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Math.trunc is a built-in function that removes the decimal part
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;String&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Math&lt;/span&gt;.trunc(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Number&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;49&amp;#34;&lt;/span&gt;))) ); &lt;span style=&#34;color:#6272a4&#34;&gt;// &amp;#34;49&amp;#34;, same, integer property
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;String&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Math&lt;/span&gt;.trunc(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Number&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;+49&amp;#34;&lt;/span&gt;))) ); &lt;span style=&#34;color:#6272a4&#34;&gt;// &amp;#34;49&amp;#34;, not same &amp;#34;+49&amp;#34; ⇒ not integer property
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;String&lt;/span&gt;(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Math&lt;/span&gt;.trunc(&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Number&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;1.2&amp;#34;&lt;/span&gt;))) ); &lt;span style=&#34;color:#6272a4&#34;&gt;// &amp;#34;1&amp;#34;, not same &amp;#34;1.2&amp;#34; ⇒ not integer property
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;hellip;On the other hand, if the keys are non-integer, then they are listed in the creation order, for instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  surname&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Smith&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user.age &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;25&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// add one more
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// non-integer properties are listed in the creation order
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; prop &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; user) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert( prop ); &lt;span style=&#34;color:#6272a4&#34;&gt;// name, surname, age
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So, to fix the issue with the phone codes, we can &amp;ldquo;cheat&amp;rdquo; by making the codes non-integer. Adding a plus &lt;code&gt;&amp;quot;+&amp;quot;&lt;/code&gt; sign before each code is enough.&lt;/p&gt;
&lt;p&gt;Like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; codes &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;+49&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Germany&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;+41&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Switzerland&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;+44&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Great Britain&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// ..,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;+1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;USA&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; code &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; codes) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert( &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;code ); &lt;span style=&#34;color:#6272a4&#34;&gt;// 49, 41, 44, 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now it works as intended.&lt;/p&gt;
&lt;h3 id=&#34;summary-10&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;Objects are associative arrays with several special features.&lt;/p&gt;
&lt;p&gt;They store properties (key-value pairs), where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Property keys must be strings or symbols (usually strings).&lt;/li&gt;
&lt;li&gt;Values can be of any type.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To access a property, we can use:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The dot notation: &lt;code&gt;obj.property&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Square brackets notation &lt;code&gt;obj[&amp;quot;property&amp;quot;]&lt;/code&gt;. Square brackets allow to take the key from a variable, like &lt;code&gt;obj[varWithKey]&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additional operators:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To delete a property: &lt;code&gt;delete obj.prop&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;To check if a property with the given key exists: &lt;code&gt;&amp;quot;key&amp;quot; in obj&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;To iterate over an object: &lt;code&gt;for (let key in obj)&lt;/code&gt; loop.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What we&amp;rsquo;ve studied in this chapter is called a &amp;ldquo;plain object&amp;rdquo;, or just &lt;code&gt;Object&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There are many other kinds of objects in JavaScript:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Array&lt;/code&gt; to store ordered data collections,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Date&lt;/code&gt; to store the information about the date and time,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Error&lt;/code&gt; to store the information about an error.&lt;/li&gt;
&lt;li&gt;&amp;hellip;And so on.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;They have their special features that we&amp;rsquo;ll study later. Sometimes people say something like &amp;ldquo;Array type&amp;rdquo; or &amp;ldquo;Date type&amp;rdquo;, but formally they are not types of their own, but belong to a single &amp;ldquo;object&amp;rdquo; data type. And they extend it in various ways.&lt;/p&gt;
&lt;p&gt;Objects in JavaScript are very powerful. Here we&amp;rsquo;ve just scratched the surface of a topic that is really huge. We&amp;rsquo;ll be closely working with objects and learning more about them in further parts of the tutorial.&lt;/p&gt;
&lt;h2 id=&#34;object-copying-references&#34;&gt;Object copying, references&lt;/h2&gt;
&lt;p&gt;One of the fundamental differences of objects vs primitives is that they are stored and copied &amp;ldquo;by reference&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Primitive values: strings, numbers, booleans &amp;ndash; are assigned/copied &amp;ldquo;as a whole value&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; message &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Hello!&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; phrase &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; message;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As a result we have two independent variables, each one is storing the string &lt;code&gt;&amp;quot;Hello!&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Objects are not like that.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A variable stores not the object itself, but its &amp;ldquo;address in memory&amp;rdquo;, in other words &amp;ldquo;a reference&amp;rdquo; to it.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the picture for the object:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here, the object is stored somewhere in memory. And the variable &lt;code&gt;user&lt;/code&gt; has a &amp;ldquo;reference&amp;rdquo; to it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;When an object variable is copied &amp;ndash; the reference is copied, the object is not duplicated.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; { name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt; };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; admin &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; user; &lt;span style=&#34;color:#6272a4&#34;&gt;// copy the reference
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we have two variables, each one with the reference to the same object:&lt;/p&gt;
&lt;p&gt;We can use any variable to access the object and modify its contents:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; { name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;John&amp;#39;&lt;/span&gt; };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; admin &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; user;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;admin.name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;Pete&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// changed by the &amp;#34;admin&amp;#34; reference
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(user.name); &lt;span style=&#34;color:#6272a4&#34;&gt;// &amp;#39;Pete&amp;#39;, changes are seen from the &amp;#34;user&amp;#34; reference
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The example above demonstrates that there is only one object. As if we had a cabinet with two keys and used one of them (&lt;code&gt;admin&lt;/code&gt;) to get into it. Then, if we later use another key (&lt;code&gt;user&lt;/code&gt;) we can see changes.&lt;/p&gt;
&lt;h3 id=&#34;comparison-by-reference&#34;&gt;Comparison by reference&lt;/h3&gt;
&lt;p&gt;The equality &lt;code&gt;==&lt;/code&gt; and strict equality &lt;code&gt;===&lt;/code&gt; operators for objects work exactly the same.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Two objects are equal only if they are the same object.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Here two variables reference the same object, thus they are equal:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; a &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; b &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; a; &lt;span style=&#34;color:#6272a4&#34;&gt;// copy the reference
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( a &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; b ); &lt;span style=&#34;color:#6272a4&#34;&gt;// true, both variables reference the same object
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( a &lt;span style=&#34;color:#ff79c6&#34;&gt;===&lt;/span&gt; b ); &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And here two independent objects are not equal, even though both are empty:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; a &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; b &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {}; &lt;span style=&#34;color:#6272a4&#34;&gt;// two independent objects
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( a &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; b ); &lt;span style=&#34;color:#6272a4&#34;&gt;// false
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For comparisons like &lt;code&gt;obj1 &amp;gt; obj2&lt;/code&gt; or for a comparison against a primitive &lt;code&gt;obj == 5&lt;/code&gt;, objects are converted to primitives. We&amp;rsquo;ll study how object conversions work very soon, but to tell the truth, such comparisons occur very rarely, usually as a result of a coding mistake.&lt;/p&gt;
&lt;h3 id=&#34;cloning-and-merging-objectassign&#34;&gt;Cloning and merging, Object.assign&lt;/h3&gt;
&lt;p&gt;So, copying an object variable creates one more reference to the same object.&lt;/p&gt;
&lt;p&gt;But what if we need to duplicate an object? Create an independent copy, a clone?&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s also doable, but a little bit more difficult, because there&amp;rsquo;s no built-in method for that in JavaScript. Actually, that&amp;rsquo;s rarely needed. Copying by reference is good most of the time.&lt;/p&gt;
&lt;p&gt;But if we really want that, then we need to create a new object and replicate the structure of the existing one by iterating over its properties and copying them on the primitive level.&lt;/p&gt;
&lt;p&gt;Like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  age&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;30&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; clone &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {}; &lt;span style=&#34;color:#6272a4&#34;&gt;// the new empty object
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// let&amp;#39;s copy all user properties into it
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; key &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; user) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  clone[key] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; user[key];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// now clone is a fully independent object with the same content
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;clone.name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Pete&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// changed the data in it
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( user.name ); &lt;span style=&#34;color:#6272a4&#34;&gt;// still John in the original object
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Also we can use the method &lt;a href=&#34;mdn:js/Object/assign&#34;&gt;Object.assign&lt;/a&gt; for that.&lt;/p&gt;
&lt;p&gt;The syntax is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Object&lt;/span&gt;.assign(dest, [src1, src2, src3...])
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;The first argument &lt;code&gt;dest&lt;/code&gt; is a target object.&lt;/li&gt;
&lt;li&gt;Further arguments &lt;code&gt;src1, ..., srcN&lt;/code&gt; (can be as many as needed) are source objects.&lt;/li&gt;
&lt;li&gt;It copies the properties of all source objects &lt;code&gt;src1, ..., srcN&lt;/code&gt; into the target &lt;code&gt;dest&lt;/code&gt;. In other words, properties of all arguments starting from the second are copied into the first object.&lt;/li&gt;
&lt;li&gt;The call returns &lt;code&gt;dest&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For instance, we can use it to merge several objects into one:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; { name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt; };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; permissions1 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; { canView&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt; };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; permissions2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; { canEdit&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;true&lt;/span&gt; };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// copies all properties from permissions1 and permissions2 into user
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Object&lt;/span&gt;.assign(user, permissions1, permissions2);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// now user = { name: &amp;#34;John&amp;#34;, canView: true, canEdit: true }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If the copied property name already exists, it gets overwritten:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; { name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt; };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Object&lt;/span&gt;.assign(user, { name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Pete&amp;#34;&lt;/span&gt; });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(user.name); &lt;span style=&#34;color:#6272a4&#34;&gt;// now user = { name: &amp;#34;Pete&amp;#34; }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We also can use &lt;code&gt;Object.assign&lt;/code&gt; to replace &lt;code&gt;for..in&lt;/code&gt; loop for simple cloning:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  age&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;30&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; clone &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Object&lt;/span&gt;.assign({}, user);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It copies all properties of &lt;code&gt;user&lt;/code&gt; into the empty object and returns it.&lt;/p&gt;
&lt;h3 id=&#34;nested-cloning&#34;&gt;Nested cloning&lt;/h3&gt;
&lt;p&gt;Until now we assumed that all properties of &lt;code&gt;user&lt;/code&gt; are primitive. But properties can be references to other objects. What to do with them?&lt;/p&gt;
&lt;p&gt;Like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sizes&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    height&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;182&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    width&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;50&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( user.sizes.height ); &lt;span style=&#34;color:#6272a4&#34;&gt;// 182
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now it&amp;rsquo;s not enough to copy &lt;code&gt;clone.sizes = user.sizes&lt;/code&gt;, because the &lt;code&gt;user.sizes&lt;/code&gt; is an object, it will be copied by reference. So &lt;code&gt;clone&lt;/code&gt; and &lt;code&gt;user&lt;/code&gt; will share the same sizes:&lt;/p&gt;
&lt;p&gt;Like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sizes&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    height&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;182&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    width&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;50&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; clone &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Object&lt;/span&gt;.assign({}, user);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( user.sizes &lt;span style=&#34;color:#ff79c6&#34;&gt;===&lt;/span&gt; clone.sizes ); &lt;span style=&#34;color:#6272a4&#34;&gt;// true, same object
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// user and clone share sizes
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;user.sizes.width&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;;       &lt;span style=&#34;color:#6272a4&#34;&gt;// change a property from one place
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert(clone.sizes.width); &lt;span style=&#34;color:#6272a4&#34;&gt;// 51, see the result from the other one
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To fix that, we should use the cloning loop that examines each value of &lt;code&gt;user[key]&lt;/code&gt; and, if it&amp;rsquo;s an object, then replicate its structure as well. That is called a &amp;ldquo;deep cloning&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s a standard algorithm for deep cloning that handles the case above and more complex cases, called the &lt;a href=&#34;https://html.spec.whatwg.org/multipage/structured-data.html#safe-passing-of-structured-data&#34;&gt;Structured cloning algorithm&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We can use recursion to implement it. Or, not to reinvent the wheel, take an existing implementation, for instance &lt;a href=&#34;https://lodash.com/docs#cloneDeep&#34;&gt;_.cloneDeep(obj)&lt;/a&gt; from the JavaScript library &lt;a href=&#34;https://lodash.com&#34;&gt;lodash&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;summary-11&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;Objects are assigned and copied by reference. In other words, a variable stores not the &amp;ldquo;object value&amp;rdquo;, but a &amp;ldquo;reference&amp;rdquo; (address in memory) for the value. So copying such a variable or passing it as a function argument copies that reference, not the object.&lt;/p&gt;
&lt;p&gt;All operations via copied references (like adding/removing properties) are performed on the same single object.&lt;/p&gt;
&lt;p&gt;To make a &amp;ldquo;real copy&amp;rdquo; (a clone) we can use &lt;code&gt;Object.assign&lt;/code&gt; for the so-called &amp;ldquo;shallow copy&amp;rdquo; (nested objects are copied by reference) or a &amp;ldquo;deep cloning&amp;rdquo; function, such as &lt;a href=&#34;https://lodash.com/docs#cloneDeep&#34;&gt;_.cloneDeep(obj)&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;garbage-collection&#34;&gt;Garbage collection&lt;/h2&gt;
&lt;p&gt;Memory management in JavaScript is performed automatically and invisibly to us. We create primitives, objects, functions&amp;hellip; All that takes memory.&lt;/p&gt;
&lt;p&gt;What happens when something is not needed any more? How does the JavaScript engine discover it and clean it up?&lt;/p&gt;
&lt;h3 id=&#34;reachability&#34;&gt;Reachability&lt;/h3&gt;
&lt;p&gt;The main concept of memory management in JavaScript is &lt;em&gt;reachability&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Simply put, &amp;ldquo;reachable&amp;rdquo; values are those that are accessible or usable somehow. They are guaranteed to be stored in memory.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;There&amp;rsquo;s a base set of inherently reachable values, that cannot be deleted for obvious reasons.&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Local variables and parameters of the current function.&lt;/li&gt;
&lt;li&gt;Variables and parameters for other functions on the current chain of nested calls.&lt;/li&gt;
&lt;li&gt;Global variables.&lt;/li&gt;
&lt;li&gt;(there are some other, internal ones as well)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These values are called &lt;em&gt;roots&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Any other value is considered reachable if it&amp;rsquo;s reachable from a root by a reference or by a chain of references.&lt;/p&gt;
&lt;p&gt;For instance, if there&amp;rsquo;s an object in a global variable, and that object has a property referencing another object, that object is considered reachable. And those that it references are also reachable. Detailed examples to follow.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There&amp;rsquo;s a background process in the JavaScript engine that is called &lt;a href=&#34;https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)&#34;&gt;garbage collector&lt;/a&gt;. It monitors all objects and removes those that have become unreachable.&lt;/p&gt;
&lt;h3 id=&#34;a-simple-example&#34;&gt;A simple example&lt;/h3&gt;
&lt;p&gt;Here&amp;rsquo;s the simplest example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// user has a reference to the object
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here the arrow depicts an object reference. The global variable &lt;code&gt;&amp;quot;user&amp;quot;&lt;/code&gt; references the object &lt;code&gt;{name: &amp;quot;John&amp;quot;}&lt;/code&gt; (we&amp;rsquo;ll call it John for brevity). The &lt;code&gt;&amp;quot;name&amp;quot;&lt;/code&gt; property of John stores a primitive, so it&amp;rsquo;s painted inside the object.&lt;/p&gt;
&lt;p&gt;If the value of &lt;code&gt;user&lt;/code&gt; is overwritten, the reference is lost:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now John becomes unreachable. There&amp;rsquo;s no way to access it, no references to it. Garbage collector will junk the data and free the memory.&lt;/p&gt;
&lt;h3 id=&#34;two-references&#34;&gt;Two references&lt;/h3&gt;
&lt;p&gt;Now let&amp;rsquo;s imagine we copied the reference from &lt;code&gt;user&lt;/code&gt; to &lt;code&gt;admin&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// user has a reference to the object
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; admin &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; user;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now if we do the same:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;hellip;Then the object is still reachable via &lt;code&gt;admin&lt;/code&gt; global variable, so it&amp;rsquo;s in memory. If we overwrite &lt;code&gt;admin&lt;/code&gt; too, then it can be removed.&lt;/p&gt;
&lt;h3 id=&#34;interlinked-objects&#34;&gt;Interlinked objects&lt;/h3&gt;
&lt;p&gt;Now a more complex example. The family:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; marry(man, woman) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  woman.husband &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; man;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  man.wife &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; woman;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    father&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; man,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mother&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; woman
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; family &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; marry({
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}, {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Ann&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Function &lt;code&gt;marry&lt;/code&gt; &amp;ldquo;marries&amp;rdquo; two objects by giving them references to each other and returns a new object that contains them both.&lt;/p&gt;
&lt;p&gt;The resulting memory structure:&lt;/p&gt;
&lt;p&gt;As of now, all objects are reachable.&lt;/p&gt;
&lt;p&gt;Now let&amp;rsquo;s remove two references:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;delete&lt;/span&gt; family.father;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;delete&lt;/span&gt; family.mother.husband;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It&amp;rsquo;s not enough to delete only one of these two references, because all objects would still be reachable.&lt;/p&gt;
&lt;p&gt;But if we delete both, then we can see that John has no incoming reference any more:&lt;/p&gt;
&lt;p&gt;Outgoing references do not matter. Only incoming ones can make an object reachable. So, John is now unreachable and will be removed from the memory with all its data that also became unaccessible.&lt;/p&gt;
&lt;p&gt;After garbage collection:&lt;/p&gt;
&lt;h3 id=&#34;unreachable-island&#34;&gt;Unreachable island&lt;/h3&gt;
&lt;p&gt;It is possible that the whole island of interlinked objects becomes unreachable and is removed from the memory.&lt;/p&gt;
&lt;p&gt;The source object is the same as above. Then:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;family &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The in-memory picture becomes:&lt;/p&gt;
&lt;p&gt;This example demonstrates how important the concept of reachability is.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s obvious that John and Ann are still linked, both have incoming references. But that&amp;rsquo;s not enough.&lt;/p&gt;
&lt;p&gt;The former &lt;code&gt;&amp;quot;family&amp;quot;&lt;/code&gt; object has been unlinked from the root, there&amp;rsquo;s no reference to it any more, so the whole island becomes unreachable and will be removed.&lt;/p&gt;
&lt;h3 id=&#34;internal-algorithms&#34;&gt;Internal algorithms&lt;/h3&gt;
&lt;p&gt;The basic garbage collection algorithm is called &amp;ldquo;mark-and-sweep&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;The following &amp;ldquo;garbage collection&amp;rdquo; steps are regularly performed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The garbage collector takes roots and &amp;ldquo;marks&amp;rdquo; (remembers) them.&lt;/li&gt;
&lt;li&gt;Then it visits and &amp;ldquo;marks&amp;rdquo; all references from them.&lt;/li&gt;
&lt;li&gt;Then it visits marked objects and marks &lt;em&gt;their&lt;/em&gt; references. All visited objects are remembered, so as not to visit the same object twice in the future.&lt;/li&gt;
&lt;li&gt;&amp;hellip;And so on until every reachable (from the roots) references are visited.&lt;/li&gt;
&lt;li&gt;All objects except marked ones are removed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For instance, let our object structure look like this:&lt;/p&gt;
&lt;p&gt;We can clearly see an &amp;ldquo;unreachable island&amp;rdquo; to the right side. Now let&amp;rsquo;s see how &amp;ldquo;mark-and-sweep&amp;rdquo; garbage collector deals with it.&lt;/p&gt;
&lt;p&gt;The first step marks the roots:&lt;/p&gt;
&lt;p&gt;Then their references are marked:&lt;/p&gt;
&lt;p&gt;&amp;hellip;And their references, while possible:&lt;/p&gt;
&lt;p&gt;Now the objects that could not be visited in the process are considered unreachable and will be removed:&lt;/p&gt;
&lt;p&gt;We can also imagine the process as spilling a huge bucket of paint from the roots, that flows through all references and marks all reachable objects. The unmarked ones are then removed.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s the concept of how garbage collection works. JavaScript engines apply many optimizations to make it run faster and not affect the execution.&lt;/p&gt;
&lt;p&gt;Some of the optimizations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Generational collection&lt;/strong&gt; &amp;ndash; objects are split into two sets: &amp;ldquo;new ones&amp;rdquo; and &amp;ldquo;old ones&amp;rdquo;. Many  objects appear, do their job and die fast, they can be cleaned up aggressively. Those that survive for long enough, become &amp;ldquo;old&amp;rdquo; and are examined less often.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Incremental collection&lt;/strong&gt; &amp;ndash; if there are many objects, and we try to walk and mark the whole object set at once, it may take some time and introduce visible delays in the execution. So the engine tries to split the garbage collection into pieces. Then the pieces are executed one by one, separately. That requires some extra bookkeeping between them to track changes, but we have many tiny delays instead of a big one.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Idle-time collection&lt;/strong&gt; &amp;ndash; the garbage collector tries to run only while the CPU is idle, to reduce the possible effect on the execution.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There exist other optimizations and flavours of garbage collection algorithms. As much as I&amp;rsquo;d like to describe them here, I have to hold off, because different engines implement different tweaks and techniques. And, what&amp;rsquo;s even more important, things change as engines develop, so studying deeper &amp;ldquo;in advance&amp;rdquo;, without a real need is probably not worth that. Unless, of course, it is a matter of pure interest, then there will be some links for you below.&lt;/p&gt;
&lt;h3 id=&#34;summary-12&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;The main things to know:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Garbage collection is performed automatically. We cannot force or prevent it.&lt;/li&gt;
&lt;li&gt;Objects are retained in memory while they are reachable.&lt;/li&gt;
&lt;li&gt;Being referenced is not the same as being reachable (from a root): a pack of interlinked objects can become unreachable as a whole.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Modern engines implement advanced algorithms of garbage collection.&lt;/p&gt;
&lt;p&gt;A general book &amp;ldquo;The Garbage Collection Handbook: The Art of Automatic Memory Management&amp;rdquo; (R. Jones et al) covers some of them.&lt;/p&gt;
&lt;p&gt;If you are familiar with low-level programming, the more detailed information about V8 garbage collector is in the article &lt;a href=&#34;http://jayconrod.com/posts/55/a-tour-of-v8-garbage-collection&#34;&gt;A tour of V8: Garbage Collection&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://v8.dev/&#34;&gt;V8 blog&lt;/a&gt; also publishes articles about changes in memory management from time to time. Naturally, to learn the garbage collection, you&amp;rsquo;d better prepare by learning about V8 internals in general and read the blog of &lt;a href=&#34;http://mrale.ph&#34;&gt;Vyacheslav Egorov&lt;/a&gt; who worked as one of V8 engineers. I&amp;rsquo;m saying: &amp;ldquo;V8&amp;rdquo;, because it is best covered with articles in the internet. For other engines, many approaches are similar, but garbage collection differs in many aspects.&lt;/p&gt;
&lt;p&gt;In-depth knowledge of engines is good when you need low-level optimizations. It would be wise to plan that as the next step after you&amp;rsquo;re familiar with the language.&lt;/p&gt;
&lt;h2 id=&#34;object-methods-this&#34;&gt;Object methods, &amp;ldquo;this&amp;rdquo;&lt;/h2&gt;
&lt;p&gt;Objects are usually created to represent entities of the real world, like users, orders and so on:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  age&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;30&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And, in the real world, a user can &lt;em&gt;act&lt;/em&gt;: select something from the shopping cart, login, logout etc.&lt;/p&gt;
&lt;p&gt;Actions are represented in JavaScript by functions in properties.&lt;/p&gt;
&lt;h3 id=&#34;method-examples&#34;&gt;Method examples&lt;/h3&gt;
&lt;p&gt;For a start, let&amp;rsquo;s teach the &lt;code&gt;user&lt;/code&gt; to say hello:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  age&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;30&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user.sayHi &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Hello!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user.sayHi(); &lt;span style=&#34;color:#6272a4&#34;&gt;// Hello!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here we&amp;rsquo;ve just used a Function Expression to create the function and assign it to the property &lt;code&gt;user.sayHi&lt;/code&gt; of the object.&lt;/p&gt;
&lt;p&gt;Then we can call it. The user can now speak!&lt;/p&gt;
&lt;p&gt;A function that is the property of an object is called its &lt;em&gt;method&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;So, here we&amp;rsquo;ve got a method &lt;code&gt;sayHi&lt;/code&gt; of the object &lt;code&gt;user&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Of course, we could use a pre-declared function as a method, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// first, declare
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; sayHi() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Hello!&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// then add as a method
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;user.sayHi &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; sayHi;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user.sayHi(); &lt;span style=&#34;color:#6272a4&#34;&gt;// Hello!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When we write our code using objects to represent entities, that&amp;rsquo;s called &lt;a href=&#34;https://en.wikipedia.org/wiki/Object-oriented_programming&#34;&gt;object-oriented programming&lt;/a&gt;, in short: &amp;ldquo;OOP&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;OOP is a big thing, an interesting science of its own. How to choose the right entities? How to organize the interaction between them? That&amp;rsquo;s architecture, and there are great books on that topic, like &amp;ldquo;Design Patterns: Elements of Reusable Object-Oriented Software&amp;rdquo; by E. Gamma, R. Helm, R. Johnson, J. Vissides or &amp;ldquo;Object-Oriented Analysis and Design with Applications&amp;rdquo; by G. Booch, and more.&lt;/p&gt;
&lt;h4 id=&#34;method-shorthand&#34;&gt;Method shorthand&lt;/h4&gt;
&lt;p&gt;There exists a shorter syntax for methods in an object literal:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// these objects do the same
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sayHi&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// method shorthand looks better, right?
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sayHi() { &lt;span style=&#34;color:#6272a4&#34;&gt;// same as &amp;#34;sayHi: function()&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Hello&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As demonstrated, we can omit &lt;code&gt;&amp;quot;function&amp;quot;&lt;/code&gt; and just write &lt;code&gt;sayHi()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To tell the truth, the notations are not fully identical. There are subtle differences related to object inheritance (to be covered later), but for now they do not matter. In almost all cases the shorter syntax is preferred.&lt;/p&gt;
&lt;h3 id=&#34;this-in-methods&#34;&gt;&amp;ldquo;this&amp;rdquo; in methods&lt;/h3&gt;
&lt;p&gt;It&amp;rsquo;s common that an object method needs to access the information stored in the object to do its job.&lt;/p&gt;
&lt;p&gt;For instance, the code inside &lt;code&gt;user.sayHi()&lt;/code&gt; may need the name of the &lt;code&gt;user&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To access the object, a method can use the &lt;code&gt;this&lt;/code&gt; keyword.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The value of &lt;code&gt;this&lt;/code&gt; is the object &amp;ldquo;before dot&amp;rdquo;, the one used to call the method.&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  age&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;30&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sayHi() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#6272a4&#34;&gt;// &amp;#34;this&amp;#34; is the &amp;#34;current object&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    alert(&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.name);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user.sayHi(); &lt;span style=&#34;color:#6272a4&#34;&gt;// John
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here during the execution of &lt;code&gt;user.sayHi()&lt;/code&gt;, the value of &lt;code&gt;this&lt;/code&gt; will be &lt;code&gt;user&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Technically, it&amp;rsquo;s also possible to access the object without &lt;code&gt;this&lt;/code&gt;, by referencing it via the outer variable:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  age&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;30&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sayHi() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(user.name); &lt;span style=&#34;color:#6272a4&#34;&gt;// &amp;#34;user&amp;#34; instead of &amp;#34;this&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&amp;hellip;But such code is unreliable. If we decide to copy &lt;code&gt;user&lt;/code&gt; to another variable, e.g. &lt;code&gt;admin = user&lt;/code&gt; and overwrite &lt;code&gt;user&lt;/code&gt; with something else, then it will access the wrong object.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s demonstrated below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  age&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;30&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sayHi() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert( user.name ); &lt;span style=&#34;color:#6272a4&#34;&gt;// leads to an error
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; admin &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; user;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// overwrite to make things obvious
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;admin.sayHi(); &lt;span style=&#34;color:#6272a4&#34;&gt;// Whoops! inside sayHi(), the old name is used! error!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If we used &lt;code&gt;this.name&lt;/code&gt; instead of &lt;code&gt;user.name&lt;/code&gt; inside the &lt;code&gt;alert&lt;/code&gt;, then the code would work.&lt;/p&gt;
&lt;h3 id=&#34;this-is-not-bound&#34;&gt;&amp;ldquo;this&amp;rdquo; is not bound&lt;/h3&gt;
&lt;p&gt;In JavaScript, keyword &lt;code&gt;this&lt;/code&gt; behaves unlike most other programming languages. It can be used in any function.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s no syntax error in the following example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; sayHi() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert( &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.name );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The value of &lt;code&gt;this&lt;/code&gt; is evaluated during the run-time, depending on the context.&lt;/p&gt;
&lt;p&gt;For instance, here the same function is assigned to two different objects and has different &amp;ldquo;this&amp;rdquo; in the calls:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; { name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt; };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; admin &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; { name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Admin&amp;#34;&lt;/span&gt; };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; sayHi() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert( &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.name );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// use the same function in two objects
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;user.f &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; sayHi;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;admin.f &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; sayHi;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// these calls have different this
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// &amp;#34;this&amp;#34; inside the function is the object &amp;#34;before the dot&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;user.f(); &lt;span style=&#34;color:#6272a4&#34;&gt;// John  (this == user)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;admin.f(); &lt;span style=&#34;color:#6272a4&#34;&gt;// Admin  (this == admin)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;admin[&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;f&amp;#39;&lt;/span&gt;](); &lt;span style=&#34;color:#6272a4&#34;&gt;// Admin (dot or square brackets access the method – doesn&amp;#39;t matter)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The rule is simple: if &lt;code&gt;obj.f()&lt;/code&gt; is called, then &lt;code&gt;this&lt;/code&gt; is &lt;code&gt;obj&lt;/code&gt; during the call of &lt;code&gt;f&lt;/code&gt;. So it&amp;rsquo;s either &lt;code&gt;user&lt;/code&gt; or &lt;code&gt;admin&lt;/code&gt; in the example above.&lt;/p&gt;
&lt;p&gt;We can even call the function without an object at all:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; sayHi() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sayHi(); &lt;span style=&#34;color:#6272a4&#34;&gt;// undefined
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this case &lt;code&gt;this&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt; in strict mode. If we try to access &lt;code&gt;this.name&lt;/code&gt;, there will be an error.&lt;/p&gt;
&lt;p&gt;In non-strict mode the value of &lt;code&gt;this&lt;/code&gt; in such case will be the &lt;em&gt;global object&lt;/em&gt; (&lt;code&gt;window&lt;/code&gt; in a browser, we&amp;rsquo;ll get to it later in the chapter &lt;a href=&#34;info:global-object&#34;&gt;&lt;/a&gt;). This is a historical behavior that &lt;code&gt;&amp;quot;use strict&amp;quot;&lt;/code&gt; fixes.&lt;/p&gt;
&lt;p&gt;Usually such call is a programming error. If there&amp;rsquo;s &lt;code&gt;this&lt;/code&gt; inside a function, it expects to be called in an object context.&lt;/p&gt;
&lt;p&gt;If you come from another programming language, then you are probably used to the idea of a &amp;ldquo;bound &lt;code&gt;this&lt;/code&gt;&amp;rdquo;, where methods defined in an object always have &lt;code&gt;this&lt;/code&gt; referencing that object.&lt;/p&gt;
&lt;p&gt;In JavaScript &lt;code&gt;this&lt;/code&gt; is &amp;ldquo;free&amp;rdquo;, its value is evaluated at call-time and does not depend on where the method was declared, but rather on what object is &amp;ldquo;before the dot&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;The concept of run-time evaluated &lt;code&gt;this&lt;/code&gt; has both pluses and minuses. On the one hand, a function can be reused for different objects. On the other hand, the greater flexibility creates more possibilities for mistakes.&lt;/p&gt;
&lt;p&gt;Here our position is not to judge whether this language design decision is good or bad. We&amp;rsquo;ll understand how to work with it, how to get benefits and avoid problems.&lt;/p&gt;
&lt;h3 id=&#34;arrow-functions-have-no-this&#34;&gt;Arrow functions have no &amp;ldquo;this&amp;rdquo;&lt;/h3&gt;
&lt;p&gt;Arrow functions are special: they don&amp;rsquo;t have their &amp;ldquo;own&amp;rdquo; &lt;code&gt;this&lt;/code&gt;. If we reference &lt;code&gt;this&lt;/code&gt; from such a function, it&amp;rsquo;s taken from the outer &amp;ldquo;normal&amp;rdquo; function.&lt;/p&gt;
&lt;p&gt;For instance, here &lt;code&gt;arrow()&lt;/code&gt; uses &lt;code&gt;this&lt;/code&gt; from the outer &lt;code&gt;user.sayHi()&lt;/code&gt; method:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  firstName&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Ilya&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  sayHi() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; arrow &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; () =&amp;gt; alert(&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.firstName);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    arrow();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user.sayHi(); &lt;span style=&#34;color:#6272a4&#34;&gt;// Ilya
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s a special feature of arrow functions, it&amp;rsquo;s useful when we actually do not want to have a separate &lt;code&gt;this&lt;/code&gt;, but rather to take it from the outer context. Later in the chapter &lt;a href=&#34;info:arrow-functions&#34;&gt;info:arrow-functions&lt;/a&gt; we&amp;rsquo;ll go more deeply into arrow functions.&lt;/p&gt;
&lt;h3 id=&#34;summary-13&#34;&gt;Summary&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Functions that are stored in object properties are called &amp;ldquo;methods&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Methods allow objects to &amp;ldquo;act&amp;rdquo; like &lt;code&gt;object.doSomething()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Methods can reference the object as &lt;code&gt;this&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The value of &lt;code&gt;this&lt;/code&gt; is defined at run-time.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When a function is declared, it may use &lt;code&gt;this&lt;/code&gt;, but that &lt;code&gt;this&lt;/code&gt; has no value until the function is called.&lt;/li&gt;
&lt;li&gt;A function can be copied between objects.&lt;/li&gt;
&lt;li&gt;When a function is called in the &amp;ldquo;method&amp;rdquo; syntax: &lt;code&gt;object.method()&lt;/code&gt;, the value of &lt;code&gt;this&lt;/code&gt; during the call is &lt;code&gt;object&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Please note that arrow functions are special: they have no &lt;code&gt;this&lt;/code&gt;. When &lt;code&gt;this&lt;/code&gt; is accessed inside an arrow function, it is taken from outside.&lt;/p&gt;
&lt;h2 id=&#34;constructor-operator-new&#34;&gt;Constructor, operator &amp;ldquo;new&amp;rdquo;&lt;/h2&gt;
&lt;p&gt;The regular &lt;code&gt;{...}&lt;/code&gt; syntax allows to create one object. But often we need to create many similar objects, like multiple users or menu items and so on.&lt;/p&gt;
&lt;p&gt;That can be done using constructor functions and the &lt;code&gt;&amp;quot;new&amp;quot;&lt;/code&gt; operator.&lt;/p&gt;
&lt;h3 id=&#34;constructor-function&#34;&gt;Constructor function&lt;/h3&gt;
&lt;p&gt;Constructor functions technically are regular functions. There are two conventions though:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;They are named with capital letter first.&lt;/li&gt;
&lt;li&gt;They should be executed only with &lt;code&gt;&amp;quot;new&amp;quot;&lt;/code&gt; operator.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; User(name) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; name;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.isAdmin &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; User(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Jack&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(user.name); &lt;span style=&#34;color:#6272a4&#34;&gt;// Jack
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert(user.isAdmin); &lt;span style=&#34;color:#6272a4&#34;&gt;// false
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When a function is executed with &lt;code&gt;new&lt;/code&gt;, it does the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A new empty object is created and assigned to &lt;code&gt;this&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The function body executes. Usually it modifies &lt;code&gt;this&lt;/code&gt;, adds new properties to it.&lt;/li&gt;
&lt;li&gt;The value of &lt;code&gt;this&lt;/code&gt; is returned.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In other words, &lt;code&gt;new User(...)&lt;/code&gt; does something like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; User(name) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// this = {};  (implicitly)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// add properties to this
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; name;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.isAdmin &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// return this;  (implicitly)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So &lt;code&gt;let user = new User(&amp;quot;Jack&amp;quot;)&lt;/code&gt; gives the same result as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Jack&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  isAdmin&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now if we want to create other users, we can call &lt;code&gt;new User(&amp;quot;Ann&amp;quot;)&lt;/code&gt;, &lt;code&gt;new User(&amp;quot;Alice&amp;quot;)&lt;/code&gt; and so on. Much shorter than using literals every time, and also easy to read.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s the main purpose of constructors &amp;ndash; to implement reusable object creation code.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s note once again &amp;ndash; technically, any function can be used as a constructor. That is: any function can be run with &lt;code&gt;new&lt;/code&gt;, and it will execute the algorithm above. The &amp;ldquo;capital letter first&amp;rdquo; is a common agreement, to make it clear that a function is to be run with &lt;code&gt;new&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If we have many lines of code all about creation of a single complex object, we can wrap them in constructor function, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.isAdmin &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// ...other code for user creation
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// maybe complex logic and statements
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// local variables etc
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The constructor can&amp;rsquo;t be called again, because it is not saved anywhere, just created and called. So this trick aims to encapsulate the code that constructs the single object, without future reuse.&lt;/p&gt;
&lt;h3 id=&#34;constructor-mode-test-newtarget&#34;&gt;Constructor mode test: new.target&lt;/h3&gt;
&lt;p&gt;The syntax from this section is rarely used, skip it unless you want to know everything.&lt;/p&gt;
&lt;p&gt;Inside a function, we can check whether it was called with &lt;code&gt;new&lt;/code&gt; or without it, using a special &lt;code&gt;new.target&lt;/code&gt; property.&lt;/p&gt;
&lt;p&gt;It is empty for regular calls and equals the function if called with &lt;code&gt;new&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; User() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  alert(&lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt;.target);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// without &amp;#34;new&amp;#34;:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;User(); &lt;span style=&#34;color:#6272a4&#34;&gt;// undefined
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// with &amp;#34;new&amp;#34;:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; User(); &lt;span style=&#34;color:#6272a4&#34;&gt;// function User { ... }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That can be used inside the function to know whether it was called with &lt;code&gt;new&lt;/code&gt;, &amp;ldquo;in constructor mode&amp;rdquo;, or without it, &amp;ldquo;in regular mode&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;We can also make both &lt;code&gt;new&lt;/code&gt; and regular calls to do the same, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; User(name) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#ff79c6&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt;.target) { &lt;span style=&#34;color:#6272a4&#34;&gt;// if you run me without new
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; User(name); &lt;span style=&#34;color:#6272a4&#34;&gt;// ...I will add new for you
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; name;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; john &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; User(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#6272a4&#34;&gt;// redirects call to new User
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert(john.name); &lt;span style=&#34;color:#6272a4&#34;&gt;// John
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This approach is sometimes used in libraries to make the syntax more flexible. So that people may call the function with or without &lt;code&gt;new&lt;/code&gt;, and it still works.&lt;/p&gt;
&lt;p&gt;Probably not a good thing to use everywhere though, because omitting &lt;code&gt;new&lt;/code&gt; makes it a bit less obvious what&amp;rsquo;s going on. With &lt;code&gt;new&lt;/code&gt; we all know that the new object is being created.&lt;/p&gt;
&lt;h3 id=&#34;return-from-constructors&#34;&gt;Return from constructors&lt;/h3&gt;
&lt;p&gt;Usually, constructors do not have a &lt;code&gt;return&lt;/code&gt; statement. Their task is to write all necessary stuff into &lt;code&gt;this&lt;/code&gt;, and it automatically becomes the result.&lt;/p&gt;
&lt;p&gt;But if there is a &lt;code&gt;return&lt;/code&gt; statement, then the rule is simple:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If &lt;code&gt;return&lt;/code&gt; is called with an object, then the object is returned instead of &lt;code&gt;this&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;return&lt;/code&gt; is called with a primitive, it&amp;rsquo;s ignored.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In other words, &lt;code&gt;return&lt;/code&gt; with an object returns that object, in all other cases &lt;code&gt;this&lt;/code&gt; is returned.&lt;/p&gt;
&lt;p&gt;For instance, here &lt;code&gt;return&lt;/code&gt; overrides &lt;code&gt;this&lt;/code&gt; by returning an object:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; BigUser() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; { name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Godzilla&amp;#34;&lt;/span&gt; };  &lt;span style=&#34;color:#6272a4&#34;&gt;// &amp;lt;-- returns this object
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; BigUser().name );  &lt;span style=&#34;color:#6272a4&#34;&gt;// Godzilla, got that object
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And here&amp;rsquo;s an example with an empty &lt;code&gt;return&lt;/code&gt; (or we could place a primitive after it, doesn&amp;rsquo;t matter):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; SmallUser() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// &amp;lt;-- returns this
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; SmallUser().name );  &lt;span style=&#34;color:#6272a4&#34;&gt;// John
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Usually constructors don&amp;rsquo;t have a &lt;code&gt;return&lt;/code&gt; statement. Here we mention the special behavior with returning objects mainly for the sake of completeness.&lt;/p&gt;
&lt;p&gt;By the way, we can omit parentheses after &lt;code&gt;new&lt;/code&gt;, if it has no arguments:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; User; &lt;span style=&#34;color:#6272a4&#34;&gt;// &amp;lt;-- no parentheses
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// same as
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; User();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Omitting parentheses here is not considered a &amp;ldquo;good style&amp;rdquo;, but the syntax is permitted by specification.&lt;/p&gt;
&lt;h3 id=&#34;methods-in-constructor&#34;&gt;Methods in constructor&lt;/h3&gt;
&lt;p&gt;Using constructor functions to create objects gives a great deal of flexibility. The constructor function may have parameters that define how to construct the object, and what to put in it.&lt;/p&gt;
&lt;p&gt;Of course, we can add to &lt;code&gt;this&lt;/code&gt; not only properties, but methods as well.&lt;/p&gt;
&lt;p&gt;For instance, &lt;code&gt;new User(name)&lt;/code&gt; below creates an object with the given &lt;code&gt;name&lt;/code&gt; and the method &lt;code&gt;sayHi&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt; User(name) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; name;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.sayHi &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;My name is: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.name );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; john &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; User(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;john.sayHi(); &lt;span style=&#34;color:#6272a4&#34;&gt;// My name is: John
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;john = {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;   name: &amp;#34;John&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;   sayHi: function() { ... }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To create complex objects, there&amp;rsquo;s a more advanced syntax, &lt;a href=&#34;info:classes&#34;&gt;classes&lt;/a&gt;, that we&amp;rsquo;ll cover later.&lt;/p&gt;
&lt;h3 id=&#34;summary-14&#34;&gt;Summary&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Constructor functions or, briefly, constructors, are regular functions, but there&amp;rsquo;s a common agreement to name them with capital letter first.&lt;/li&gt;
&lt;li&gt;Constructor functions should only be called using &lt;code&gt;new&lt;/code&gt;. Such a call implies a creation of empty &lt;code&gt;this&lt;/code&gt; at the start and returning the populated one at the end.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We can use constructor functions to make multiple similar objects.&lt;/p&gt;
&lt;p&gt;JavaScript provides constructor functions for many built-in language objects: like &lt;code&gt;Date&lt;/code&gt; for dates, &lt;code&gt;Set&lt;/code&gt; for sets and others that we plan to study.&lt;/p&gt;
&lt;p&gt;In this chapter we only cover the basics about objects and constructors. They are essential for learning more about data types and functions in the next chapters.&lt;/p&gt;
&lt;p&gt;After we learn that, we return to objects and cover them in-depth in the chapters &lt;a href=&#34;info:prototypes&#34;&gt;info:prototypes&lt;/a&gt; and &lt;a href=&#34;info:classes&#34;&gt;info:classes&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;optional-chaining-&#34;&gt;Optional chaining &amp;lsquo;?.&amp;rsquo;&lt;/h2&gt;
&lt;p&gt;[recent browser=&amp;ldquo;new&amp;rdquo;]&lt;/p&gt;
&lt;p&gt;The optional chaining &lt;code&gt;?.&lt;/code&gt; is an error-proof way to access nested object properties, even if an intermediate property doesn&amp;rsquo;t exist.&lt;/p&gt;
&lt;h3 id=&#34;the-problem&#34;&gt;The problem&lt;/h3&gt;
&lt;p&gt;If you&amp;rsquo;ve just started to read the tutorial and learn JavaScript, maybe the problem hasn&amp;rsquo;t touched you yet, but it&amp;rsquo;s quite common.&lt;/p&gt;
&lt;p&gt;For example, some of our users have addresses, but few did not provide them. Then we can&amp;rsquo;t safely read &lt;code&gt;user.address.street&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {}; &lt;span style=&#34;color:#6272a4&#34;&gt;// the user happens to be without address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(user.address.street); &lt;span style=&#34;color:#6272a4&#34;&gt;// Error!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or, in the web development, we&amp;rsquo;d like to get an information about an element on the page, but it may not exist:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Error if the result of querySelector(...) is null
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; html &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;document&lt;/span&gt;.querySelector(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;.my-element&amp;#39;&lt;/span&gt;).innerHTML;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Before &lt;code&gt;?.&lt;/code&gt; appeared in the language, the &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operator was used to work around that.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {}; &lt;span style=&#34;color:#6272a4&#34;&gt;// user has no address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( user &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; user.address &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; user.address.street ); &lt;span style=&#34;color:#6272a4&#34;&gt;// undefined (no error)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;AND&amp;rsquo;ing the whole path to the property ensures that all components exist, but is cumbersome to write.&lt;/p&gt;
&lt;h3 id=&#34;optional-chaining&#34;&gt;Optional chaining&lt;/h3&gt;
&lt;p&gt;The optional chaining &lt;code&gt;?.&lt;/code&gt; stops the evaluation and returns &lt;code&gt;undefined&lt;/code&gt; if the part before &lt;code&gt;?.&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Further in this article, for brevity, we&amp;rsquo;ll be saying that something &amp;ldquo;exists&amp;rdquo; if it&amp;rsquo;s not &lt;code&gt;null&lt;/code&gt; and not &lt;code&gt;undefined&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s the safe way to access &lt;code&gt;user.address.street&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {}; &lt;span style=&#34;color:#6272a4&#34;&gt;// user has no address
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( user&lt;span style=&#34;color:#ff79c6&#34;&gt;?&lt;/span&gt;.address&lt;span style=&#34;color:#ff79c6&#34;&gt;?&lt;/span&gt;.street ); &lt;span style=&#34;color:#6272a4&#34;&gt;// undefined (no error)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Reading the address with &lt;code&gt;user?.address&lt;/code&gt; works even if &lt;code&gt;user&lt;/code&gt; object doesn&amp;rsquo;t exist:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( user&lt;span style=&#34;color:#ff79c6&#34;&gt;?&lt;/span&gt;.address ); &lt;span style=&#34;color:#6272a4&#34;&gt;// undefined
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( user&lt;span style=&#34;color:#ff79c6&#34;&gt;?&lt;/span&gt;.address.street ); &lt;span style=&#34;color:#6272a4&#34;&gt;// undefined
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Please note: the &lt;code&gt;?.&lt;/code&gt; syntax makes optional the value before it, but not any further.&lt;/p&gt;
&lt;p&gt;In the example above, &lt;code&gt;user?.&lt;/code&gt; allows only &lt;code&gt;user&lt;/code&gt; to be &lt;code&gt;null/undefined&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;On the other hand, if &lt;code&gt;user&lt;/code&gt; does exist, then it must have &lt;code&gt;user.address&lt;/code&gt; property, otherwise &lt;code&gt;user?.address.street&lt;/code&gt; gives an error at the second dot.&lt;/p&gt;
&lt;p&gt;We should use &lt;code&gt;?.&lt;/code&gt; only where it&amp;rsquo;s ok that something doesn&amp;rsquo;t exist.&lt;/p&gt;
&lt;p&gt;For example, if according to our coding logic &lt;code&gt;user&lt;/code&gt; object must be there, but &lt;code&gt;address&lt;/code&gt; is optional, then &lt;code&gt;user.address?.street&lt;/code&gt; would be better.&lt;/p&gt;
&lt;p&gt;So, if &lt;code&gt;user&lt;/code&gt; happens to be undefined due to a mistake, we&amp;rsquo;ll know about it and fix it. Otherwise, coding errors can be silenced where not appropriate, and become more difficult to debug.&lt;/p&gt;
&lt;p&gt;If there&amp;rsquo;s no variable &lt;code&gt;user&lt;/code&gt; at all, then &lt;code&gt;user?.anything&lt;/code&gt; triggers an error:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// ReferenceError: user is not defined
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;user&lt;span style=&#34;color:#ff79c6&#34;&gt;?&lt;/span&gt;.address;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There must be &lt;code&gt;let/const/var user&lt;/code&gt;. The optional chaining works only for declared variables.&lt;/p&gt;
&lt;h3 id=&#34;short-circuiting&#34;&gt;Short-circuiting&lt;/h3&gt;
&lt;p&gt;As it was said before, the &lt;code&gt;?.&lt;/code&gt; immediately stops (&amp;ldquo;short-circuits&amp;rdquo;) the evaluation if the left part doesn&amp;rsquo;t exist.&lt;/p&gt;
&lt;p&gt;So, if there are any further function calls or side effects, they don&amp;rsquo;t occur:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; x &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user&lt;span style=&#34;color:#ff79c6&#34;&gt;?&lt;/span&gt;.sayHi(x&lt;span style=&#34;color:#ff79c6&#34;&gt;++&lt;/span&gt;); &lt;span style=&#34;color:#6272a4&#34;&gt;// nothing happens
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(x); &lt;span style=&#34;color:#6272a4&#34;&gt;// 0, value not incremented
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;other-cases--&#34;&gt;Other cases: ?.(), ?.[]&lt;/h3&gt;
&lt;p&gt;The optional chaining &lt;code&gt;?.&lt;/code&gt; is not an operator, but a special syntax construct, that also works with functions and square brackets.&lt;/p&gt;
&lt;p&gt;For example, &lt;code&gt;?.()&lt;/code&gt; is used to call a function that may not exist.&lt;/p&gt;
&lt;p&gt;In the code below, some of our users have &lt;code&gt;admin&lt;/code&gt; method, and some don&amp;rsquo;t:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user1 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  admin() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;I am admin&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user1.admin&lt;span style=&#34;color:#ff79c6&#34;&gt;?&lt;/span&gt;.(); &lt;span style=&#34;color:#6272a4&#34;&gt;// I am admin
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;user2.admin&lt;span style=&#34;color:#ff79c6&#34;&gt;?&lt;/span&gt;.();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here, in both lines we first use the dot &lt;code&gt;.&lt;/code&gt; to get &lt;code&gt;admin&lt;/code&gt; property, because the user object must exist, so it&amp;rsquo;s safe read from it.&lt;/p&gt;
&lt;p&gt;Then &lt;code&gt;?.()&lt;/code&gt; checks the left part: if the admin function exists, then it runs (for &lt;code&gt;user1&lt;/code&gt;). Otherwise (for &lt;code&gt;user2&lt;/code&gt;) the evaluation stops without errors.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;?.[]&lt;/code&gt; syntax also works, if we&amp;rsquo;d like to use brackets &lt;code&gt;[]&lt;/code&gt; to access properties instead of dot &lt;code&gt;.&lt;/code&gt;. Similar to previous cases, it allows to safely read a property from an object that may not exist.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user1 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  firstName&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;null&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// Imagine, we couldn&amp;#39;t authorize the user
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; key &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;firstName&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( user1&lt;span style=&#34;color:#ff79c6&#34;&gt;?&lt;/span&gt;.[key] ); &lt;span style=&#34;color:#6272a4&#34;&gt;// John
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( user2&lt;span style=&#34;color:#ff79c6&#34;&gt;?&lt;/span&gt;.[key] ); &lt;span style=&#34;color:#6272a4&#34;&gt;// undefined
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( user1&lt;span style=&#34;color:#ff79c6&#34;&gt;?&lt;/span&gt;.[key]&lt;span style=&#34;color:#ff79c6&#34;&gt;?&lt;/span&gt;.something&lt;span style=&#34;color:#ff79c6&#34;&gt;?&lt;/span&gt;.not&lt;span style=&#34;color:#ff79c6&#34;&gt;?&lt;/span&gt;.existing); &lt;span style=&#34;color:#6272a4&#34;&gt;// undefined
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Also we can use &lt;code&gt;?.&lt;/code&gt; with &lt;code&gt;delete&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;delete&lt;/span&gt; user&lt;span style=&#34;color:#ff79c6&#34;&gt;?&lt;/span&gt;.name; &lt;span style=&#34;color:#6272a4&#34;&gt;// delete user.name if user exists
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The optional chaining &lt;code&gt;?.&lt;/code&gt; has no use at the left side of an assignment:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// the idea of the code below is to write user.name, if user exists
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user&lt;span style=&#34;color:#ff79c6&#34;&gt;?&lt;/span&gt;.name &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#6272a4&#34;&gt;// Error, doesn&amp;#39;t work
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// because it evaluates to undefined = &amp;#34;John&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;summary-15&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;?.&lt;/code&gt; syntax has three forms:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;obj?.prop&lt;/code&gt; &amp;ndash; returns &lt;code&gt;obj.prop&lt;/code&gt; if &lt;code&gt;obj&lt;/code&gt; exists, otherwise &lt;code&gt;undefined&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;obj?.[prop]&lt;/code&gt; &amp;ndash; returns &lt;code&gt;obj[prop]&lt;/code&gt; if &lt;code&gt;obj&lt;/code&gt; exists, otherwise &lt;code&gt;undefined&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;obj?.method()&lt;/code&gt; &amp;ndash; calls &lt;code&gt;obj.method()&lt;/code&gt; if &lt;code&gt;obj&lt;/code&gt; exists, otherwise returns &lt;code&gt;undefined&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As we can see, all of them are straightforward and simple to use. The &lt;code&gt;?.&lt;/code&gt; checks the left part for &lt;code&gt;null/undefined&lt;/code&gt; and allows the evaluation to proceed if it&amp;rsquo;s not so.&lt;/p&gt;
&lt;p&gt;A chain of &lt;code&gt;?.&lt;/code&gt; allows to safely access nested properties.&lt;/p&gt;
&lt;p&gt;Still, we should apply &lt;code&gt;?.&lt;/code&gt; carefully, only where it&amp;rsquo;s ok that the left part doesn&amp;rsquo;t to exist.&lt;/p&gt;
&lt;p&gt;So that it won&amp;rsquo;t hide programming errors from us, if they occur.&lt;/p&gt;
&lt;h2 id=&#34;symbol-type&#34;&gt;Symbol type&lt;/h2&gt;
&lt;p&gt;By specification, object property keys may be either of string type, or of symbol type. Not numbers, not booleans, only strings or symbols, these two types.&lt;/p&gt;
&lt;p&gt;Till now we&amp;rsquo;ve been using only strings. Now let&amp;rsquo;s see the benefits that symbols can give us.&lt;/p&gt;
&lt;h3 id=&#34;symbols&#34;&gt;Symbols&lt;/h3&gt;
&lt;p&gt;A &amp;ldquo;symbol&amp;rdquo; represents a unique identifier.&lt;/p&gt;
&lt;p&gt;A value of this type can be created using &lt;code&gt;Symbol()&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// id is a new symbol
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; id &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Symbol();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Upon creation, we can give symbol a description (also called a symbol name), mostly useful for debugging purposes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// id is a symbol with the description &amp;#34;id&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; id &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Symbol(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Symbols are guaranteed to be unique. Even if we create many symbols with the same description, they are different values. The description is just a label that doesn&amp;rsquo;t affect anything.&lt;/p&gt;
&lt;p&gt;For instance, here are two symbols with the same description &amp;ndash; they are not equal:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; id1 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Symbol(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; id2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Symbol(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(id1 &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; id2); &lt;span style=&#34;color:#6272a4&#34;&gt;// false
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you are familiar with Ruby or another language that also has some sort of &amp;ldquo;symbols&amp;rdquo; &amp;ndash; please don&amp;rsquo;t be misguided. JavaScript symbols are different.&lt;/p&gt;
&lt;p&gt;Most values in JavaScript support implicit conversion to a string. For instance, we can &lt;code&gt;alert&lt;/code&gt; almost any value, and it will work. Symbols are special. They don&amp;rsquo;t auto-convert.&lt;/p&gt;
&lt;p&gt;For instance, this &lt;code&gt;alert&lt;/code&gt; will show an error:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; id &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Symbol(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(id); &lt;span style=&#34;color:#6272a4&#34;&gt;// TypeError: Cannot convert a Symbol value to a string
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s a &amp;ldquo;language guard&amp;rdquo; against messing up, because strings and symbols are fundamentally different and should not accidentally convert one into another.&lt;/p&gt;
&lt;p&gt;If we really want to show a symbol, we need to explicitly call &lt;code&gt;.toString()&lt;/code&gt; on it, like here:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; id &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Symbol(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(id.toString()); &lt;span style=&#34;color:#6272a4&#34;&gt;// Symbol(id), now it works
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Or get &lt;code&gt;symbol.description&lt;/code&gt; property to show the description only:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; id &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Symbol(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(id.description); &lt;span style=&#34;color:#6272a4&#34;&gt;// id
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;hidden-properties&#34;&gt;&amp;ldquo;Hidden&amp;rdquo; properties&lt;/h3&gt;
&lt;p&gt;Symbols allow us to create &amp;ldquo;hidden&amp;rdquo; properties of an object, that no other part of code can accidentally access or overwrite.&lt;/p&gt;
&lt;p&gt;For instance, if we&amp;rsquo;re working with &lt;code&gt;user&lt;/code&gt; objects, that belong to a third-party code. We&amp;rsquo;d like to add identifiers to them.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s use a symbol key for it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; { &lt;span style=&#34;color:#6272a4&#34;&gt;// belongs to another code
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; id &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Symbol(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user[id] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( user[id] ); &lt;span style=&#34;color:#6272a4&#34;&gt;// we can access the data using the symbol as the key
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What&amp;rsquo;s the benefit of using &lt;code&gt;Symbol(&amp;quot;id&amp;quot;)&lt;/code&gt; over a string &lt;code&gt;&amp;quot;id&amp;quot;&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;As &lt;code&gt;user&lt;/code&gt; objects belongs to another code, and that code also works with them, we shouldn&amp;rsquo;t just add any fields to it. That&amp;rsquo;s unsafe. But a symbol cannot be accessed accidentally, the third-party code probably won&amp;rsquo;t even see it, so it&amp;rsquo;s probably all right to do.&lt;/p&gt;
&lt;p&gt;Also, imagine that another script wants to have its own identifier inside &lt;code&gt;user&lt;/code&gt;, for its own purposes. That may be another JavaScript library, so that the scripts are completely unaware of each other.&lt;/p&gt;
&lt;p&gt;Then that script can create its own &lt;code&gt;Symbol(&amp;quot;id&amp;quot;)&lt;/code&gt;, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; id &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Symbol(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user[id] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Their id value&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There will be no conflict between our and their identifiers, because symbols are always different, even if they have the same name.&lt;/p&gt;
&lt;p&gt;&amp;hellip;But if we used a string &lt;code&gt;&amp;quot;id&amp;quot;&lt;/code&gt; instead of a symbol for the same purpose, then there &lt;em&gt;would&lt;/em&gt; be a conflict:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; { name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt; };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Our script uses &amp;#34;id&amp;#34; property
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;user.id &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Our id value&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// ...Another script also wants &amp;#34;id&amp;#34; for its purposes...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user.id &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Their id value&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// Boom! overwritten by another script!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;symbols-in-a-literal&#34;&gt;Symbols in a literal&lt;/h4&gt;
&lt;p&gt;If we want to use a symbol in an object literal &lt;code&gt;{...}&lt;/code&gt;, we need square brackets around it.&lt;/p&gt;
&lt;p&gt;Like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; id &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Symbol(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  [id]&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;123&lt;/span&gt; &lt;span style=&#34;color:#6272a4&#34;&gt;// not &amp;#34;id&amp;#34;: 123
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s because we need the value from the variable &lt;code&gt;id&lt;/code&gt; as the key, not the string &amp;ldquo;id&amp;rdquo;.&lt;/p&gt;
&lt;h4 id=&#34;symbols-are-skipped-by-forin&#34;&gt;Symbols are skipped by for..in&lt;/h4&gt;
&lt;p&gt;Symbolic properties do not participate in &lt;code&gt;for..in&lt;/code&gt; loop.&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; id &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Symbol(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  age&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;30&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  [id]&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;123&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; key &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; user) alert(key); &lt;span style=&#34;color:#6272a4&#34;&gt;// name, age (no symbols)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// the direct access by the symbol works
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Direct: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; user[id] );
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Object.keys(user)&lt;/code&gt; also ignores them. That&amp;rsquo;s a part of the general &amp;ldquo;hiding symbolic properties&amp;rdquo; principle. If another script or a library loops over our object, it won&amp;rsquo;t unexpectedly access a symbolic property.&lt;/p&gt;
&lt;p&gt;In contrast, &lt;a href=&#34;mdn:js/Object/assign&#34;&gt;Object.assign&lt;/a&gt; copies both string and symbol properties:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; id &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Symbol(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  [id]&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;123&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; clone &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Object&lt;/span&gt;.assign({}, user);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( clone[id] ); &lt;span style=&#34;color:#6272a4&#34;&gt;// 123
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There&amp;rsquo;s no paradox here. That&amp;rsquo;s by design. The idea is that when we clone an object or merge objects, we usually want &lt;em&gt;all&lt;/em&gt; properties to be copied (including symbols like &lt;code&gt;id&lt;/code&gt;).&lt;/p&gt;
&lt;h3 id=&#34;global-symbols&#34;&gt;Global symbols&lt;/h3&gt;
&lt;p&gt;As we&amp;rsquo;ve seen, usually all symbols are different, even if they have the same name. But sometimes we want same-named symbols to be same entities. For instance, different parts of our application want to access symbol &lt;code&gt;&amp;quot;id&amp;quot;&lt;/code&gt; meaning exactly the same property.&lt;/p&gt;
&lt;p&gt;To achieve that, there exists a &lt;em&gt;global symbol registry&lt;/em&gt;. We can create symbols in it and access them later, and it guarantees that repeated accesses by the same name return exactly the same symbol.&lt;/p&gt;
&lt;p&gt;In order to read (create if absent) a symbol from the registry, use &lt;code&gt;Symbol.for(key)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That call checks the global registry, and if there&amp;rsquo;s a symbol described as &lt;code&gt;key&lt;/code&gt;, then returns it, otherwise creates a new symbol &lt;code&gt;Symbol(key)&lt;/code&gt; and stores it in the registry by the given &lt;code&gt;key&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// read from the global registry
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; id &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Symbol.&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;); &lt;span style=&#34;color:#6272a4&#34;&gt;// if the symbol did not exist, it is created
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// read it again (maybe from another part of the code)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; idAgain &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Symbol.&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// the same symbol
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( id &lt;span style=&#34;color:#ff79c6&#34;&gt;===&lt;/span&gt; idAgain ); &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Symbols inside the registry are called &lt;em&gt;global symbols&lt;/em&gt;. If we want an application-wide symbol, accessible everywhere in the code &amp;ndash; that&amp;rsquo;s what they are for.&lt;/p&gt;
&lt;p&gt;In some programming languages, like Ruby, there&amp;rsquo;s a single symbol per name.&lt;/p&gt;
&lt;p&gt;In JavaScript, as we can see, that&amp;rsquo;s right for global symbols.&lt;/p&gt;
&lt;h4 id=&#34;symbolkeyfor&#34;&gt;Symbol.keyFor&lt;/h4&gt;
&lt;p&gt;For global symbols, not only &lt;code&gt;Symbol.for(key)&lt;/code&gt; returns a symbol by name, but there&amp;rsquo;s a reverse call: &lt;code&gt;Symbol.keyFor(sym)&lt;/code&gt;, that does the reverse: returns a name by a global symbol.&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// get symbol by name
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; sym &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Symbol.&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; sym2 &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Symbol.&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// get name by symbol
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( Symbol.keyFor(sym) ); &lt;span style=&#34;color:#6272a4&#34;&gt;// name
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( Symbol.keyFor(sym2) ); &lt;span style=&#34;color:#6272a4&#34;&gt;// id
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;Symbol.keyFor&lt;/code&gt; internally uses the global symbol registry to look up the key for the symbol. So it doesn&amp;rsquo;t work for non-global symbols. If the symbol is not global, it won&amp;rsquo;t be able to find it and returns &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;That said, any symbols have &lt;code&gt;description&lt;/code&gt; property.&lt;/p&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; globalSymbol &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Symbol.&lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; localSymbol &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Symbol(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( Symbol.keyFor(globalSymbol) ); &lt;span style=&#34;color:#6272a4&#34;&gt;// name, global symbol
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert( Symbol.keyFor(localSymbol) ); &lt;span style=&#34;color:#6272a4&#34;&gt;// undefined, not global
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert( localSymbol.description ); &lt;span style=&#34;color:#6272a4&#34;&gt;// name
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;system-symbols&#34;&gt;System symbols&lt;/h3&gt;
&lt;p&gt;There exist many &amp;ldquo;system&amp;rdquo; symbols that JavaScript uses internally, and we can use them to fine-tune various aspects of our objects.&lt;/p&gt;
&lt;p&gt;They are listed in the specification in the &lt;a href=&#34;https://tc39.github.io/ecma262/#sec-well-known-symbols&#34;&gt;Well-known symbols&lt;/a&gt; table:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Symbol.hasInstance&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Symbol.isConcatSpreadable&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Symbol.iterator&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Symbol.toPrimitive&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&amp;hellip;and so on.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For instance, &lt;code&gt;Symbol.toPrimitive&lt;/code&gt; allows us to describe object to primitive conversion. We&amp;rsquo;ll see its use very soon.&lt;/p&gt;
&lt;p&gt;Other symbols will also become familiar when we study the corresponding language features.&lt;/p&gt;
&lt;h3 id=&#34;summary-16&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Symbol&lt;/code&gt; is a primitive type for unique identifiers.&lt;/p&gt;
&lt;p&gt;Symbols are created with &lt;code&gt;Symbol()&lt;/code&gt; call with an optional description (name).&lt;/p&gt;
&lt;p&gt;Symbols are always different values, even if they have the same name. If we want same-named symbols to be equal, then we should use the global registry: &lt;code&gt;Symbol.for(key)&lt;/code&gt; returns (creates if needed) a global symbol with &lt;code&gt;key&lt;/code&gt; as the name. Multiple calls of &lt;code&gt;Symbol.for&lt;/code&gt; with the same &lt;code&gt;key&lt;/code&gt; return exactly the same symbol.&lt;/p&gt;
&lt;p&gt;Symbols have two main use cases:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;Hidden&amp;rdquo; object properties.
If we want to add a property into an object that &amp;ldquo;belongs&amp;rdquo; to another script or a library, we can create a symbol and use it as a property key. A symbolic property does not appear in &lt;code&gt;for..in&lt;/code&gt;, so it won&amp;rsquo;t be accidentally processed together with other properties. Also it won&amp;rsquo;t be accessed directly, because another script does not have our symbol. So the property will be protected from accidental use or overwrite.&lt;/p&gt;
&lt;p&gt;So we can &amp;ldquo;covertly&amp;rdquo; hide something into objects that we need, but others should not see, using symbolic properties.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There are many system symbols used by JavaScript which are accessible as &lt;code&gt;Symbol.*&lt;/code&gt;. We can use them to alter some built-in behaviors. For instance, later in the tutorial we&amp;rsquo;ll use &lt;code&gt;Symbol.iterator&lt;/code&gt; for &lt;a href=&#34;info:iterable&#34;&gt;iterables&lt;/a&gt;, &lt;code&gt;Symbol.toPrimitive&lt;/code&gt; to setup &lt;a href=&#34;info:object-toprimitive&#34;&gt;object-to-primitive conversion&lt;/a&gt; and so on.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Technically, symbols are not 100% hidden. There is a built-in method &lt;a href=&#34;mdn:js/Object/getOwnPropertySymbols&#34;&gt;Object.getOwnPropertySymbols(obj)&lt;/a&gt; that allows us to get all symbols. Also there is a method named &lt;a href=&#34;mdn:js/Reflect/ownKeys&#34;&gt;Reflect.ownKeys(obj)&lt;/a&gt; that returns &lt;em&gt;all&lt;/em&gt; keys of an object including symbolic ones. So they are not really hidden. But most libraries, built-in functions and syntax constructs don&amp;rsquo;t use these methods.&lt;/p&gt;
&lt;h2 id=&#34;object-to-primitive-conversion&#34;&gt;Object to primitive conversion&lt;/h2&gt;
&lt;p&gt;What happens when objects are added &lt;code&gt;obj1 + obj2&lt;/code&gt;, subtracted &lt;code&gt;obj1 - obj2&lt;/code&gt; or printed using &lt;code&gt;alert(obj)&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;In that case, objects are auto-converted to primitives, and then the operation is carried out.&lt;/p&gt;
&lt;p&gt;In the chapter &lt;a href=&#34;info:type-conversions&#34;&gt;info:type-conversions&lt;/a&gt; we&amp;rsquo;ve seen the rules for numeric, string and boolean conversions of primitives. But we left a gap for objects. Now, as we know about methods and symbols it becomes possible to fill it.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;All objects are &lt;code&gt;true&lt;/code&gt; in a boolean context. There are only numeric and string conversions.&lt;/li&gt;
&lt;li&gt;The numeric conversion happens when we subtract objects or apply mathematical functions. For instance, &lt;code&gt;Date&lt;/code&gt; objects (to be covered in the chapter &lt;a href=&#34;info:date&#34;&gt;info:date&lt;/a&gt;) can be subtracted, and the result of &lt;code&gt;date1 - date2&lt;/code&gt; is the time difference between two dates.&lt;/li&gt;
&lt;li&gt;As for the string conversion &amp;ndash; it usually happens when we output an object like &lt;code&gt;alert(obj)&lt;/code&gt; and in similar contexts.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;toprimitive&#34;&gt;ToPrimitive&lt;/h3&gt;
&lt;p&gt;We can fine-tune string and numeric conversion, using special object methods.&lt;/p&gt;
&lt;p&gt;There are three variants of type conversion, so-called &amp;ldquo;hints&amp;rdquo;, described in the &lt;a href=&#34;https://tc39.github.io/ecma262/#sec-toprimitive&#34;&gt;specification&lt;/a&gt;:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;&amp;quot;string&amp;quot;&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;For an object-to-string conversion, when we&amp;rsquo;re doing an operation on an object that expects a string, like &lt;code&gt;alert&lt;/code&gt;:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// output
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert(obj);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// using object as a property key
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;anotherObj[obj] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;123&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;&amp;quot;number&amp;quot;&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;For an object-to-number conversion, like when we&amp;rsquo;re doing maths:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// explicit conversion
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; num &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;Number&lt;/span&gt;(obj);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// maths (except binary plus)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; n &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;obj; &lt;span style=&#34;color:#6272a4&#34;&gt;// unary plus
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; delta &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; date1 &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; date2;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// less/greater comparison
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; greater &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; user1 &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; user2;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;&amp;quot;default&amp;quot;&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Occurs in rare cases when the operator is &amp;ldquo;not sure&amp;rdquo; what type to expect.
&lt;p&gt;For instance, binary plus &lt;code&gt;+&lt;/code&gt; can work both with strings (concatenates them) and numbers (adds them), so both strings and numbers would do. So if a binary plus gets an object as an argument, it uses the &lt;code&gt;&amp;quot;default&amp;quot;&lt;/code&gt; hint to convert it.&lt;/p&gt;
&lt;p&gt;Also, if an object is compared using &lt;code&gt;==&lt;/code&gt; with a string, number or a symbol, it&amp;rsquo;s also unclear which conversion should be done, so the &lt;code&gt;&amp;quot;default&amp;quot;&lt;/code&gt; hint is used.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// binary plus uses the &amp;#34;default&amp;#34; hint
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; total &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; obj1 &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; obj2;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// obj == number uses the &amp;#34;default&amp;#34; hint
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (user &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1&lt;/span&gt;) { ... };
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The greater and less comparison operators, such as &lt;code&gt;&amp;lt;&lt;/code&gt; &lt;code&gt;&amp;gt;&lt;/code&gt;, can work with both strings and numbers too. Still, they use the &lt;code&gt;&amp;quot;number&amp;quot;&lt;/code&gt; hint, not &lt;code&gt;&amp;quot;default&amp;quot;&lt;/code&gt;. That&amp;rsquo;s for historical reasons.&lt;/p&gt;
&lt;p&gt;In practice though, we don&amp;rsquo;t need to remember these peculiar details, because all built-in objects except for one case (&lt;code&gt;Date&lt;/code&gt; object, we&amp;rsquo;ll learn it later) implement &lt;code&gt;&amp;quot;default&amp;quot;&lt;/code&gt; conversion the same way as &lt;code&gt;&amp;quot;number&amp;quot;&lt;/code&gt;. And we can do the same.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Please note &amp;ndash; there are only three hints. It&amp;rsquo;s that simple.&lt;/p&gt;
&lt;p&gt;There is no &amp;ldquo;boolean&amp;rdquo; hint (all objects are &lt;code&gt;true&lt;/code&gt; in boolean context) or anything else. And if we treat &lt;code&gt;&amp;quot;default&amp;quot;&lt;/code&gt; and &lt;code&gt;&amp;quot;number&amp;quot;&lt;/code&gt; the same, like most built-ins do, then there are only two conversions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;To do the conversion, JavaScript tries to find and call three object methods:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Call &lt;code&gt;obj[Symbol.toPrimitive](hint)&lt;/code&gt; - the method with the symbolic key &lt;code&gt;Symbol.toPrimitive&lt;/code&gt; (system symbol), if such method exists,&lt;/li&gt;
&lt;li&gt;Otherwise if hint is &lt;code&gt;&amp;quot;string&amp;quot;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;try &lt;code&gt;obj.toString()&lt;/code&gt; and &lt;code&gt;obj.valueOf()&lt;/code&gt;, whatever exists.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Otherwise if hint is &lt;code&gt;&amp;quot;number&amp;quot;&lt;/code&gt; or &lt;code&gt;&amp;quot;default&amp;quot;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;try &lt;code&gt;obj.valueOf()&lt;/code&gt; and &lt;code&gt;obj.toString()&lt;/code&gt;, whatever exists.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;symboltoprimitive&#34;&gt;Symbol.toPrimitive&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s start from the first method. There&amp;rsquo;s a built-in symbol named &lt;code&gt;Symbol.toPrimitive&lt;/code&gt; that should be used to name the conversion method, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;obj[Symbol.toPrimitive] &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;function&lt;/span&gt;(hint) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// must return a primitive value
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// hint = one of &amp;#34;string&amp;#34;, &amp;#34;number&amp;#34;, &amp;#34;default&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For instance, here &lt;code&gt;user&lt;/code&gt; object implements it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  money&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1000&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  [Symbol.toPrimitive](hint) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    alert(&lt;span style=&#34;color:#f1fa8c&#34;&gt;`hint: &lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;hint&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;`&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; hint &lt;span style=&#34;color:#ff79c6&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;`{name: &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.name&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;}`&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.money;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;// conversions demo:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert(user); &lt;span style=&#34;color:#6272a4&#34;&gt;// hint: string -&amp;gt; {name: &amp;#34;John&amp;#34;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert(&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;user); &lt;span style=&#34;color:#6272a4&#34;&gt;// hint: number -&amp;gt; 1000
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert(user &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;500&lt;/span&gt;); &lt;span style=&#34;color:#6272a4&#34;&gt;// hint: default -&amp;gt; 1500
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As we can see from the code, &lt;code&gt;user&lt;/code&gt; becomes a self-descriptive string or a money amount depending on the conversion. The single method &lt;code&gt;user[Symbol.toPrimitive]&lt;/code&gt; handles all conversion cases.&lt;/p&gt;
&lt;h3 id=&#34;tostringvalueof&#34;&gt;toString/valueOf&lt;/h3&gt;
&lt;p&gt;Methods &lt;code&gt;toString&lt;/code&gt; and &lt;code&gt;valueOf&lt;/code&gt; come from ancient times. They are not symbols (symbols did not exist that long ago), but rather &amp;ldquo;regular&amp;rdquo; string-named methods. They provide an alternative &amp;ldquo;old-style&amp;rdquo; way to implement the conversion.&lt;/p&gt;
&lt;p&gt;If there&amp;rsquo;s no &lt;code&gt;Symbol.toPrimitive&lt;/code&gt; then JavaScript tries to find them and try in the order:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;toString -&amp;gt; valueOf&lt;/code&gt; for &amp;ldquo;string&amp;rdquo; hint.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;valueOf -&amp;gt; toString&lt;/code&gt; otherwise.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These methods must return a primitive value. If &lt;code&gt;toString&lt;/code&gt; or &lt;code&gt;valueOf&lt;/code&gt; returns an object, then it&amp;rsquo;s ignored (same as if there were no method).&lt;/p&gt;
&lt;p&gt;By default, a plain object has following &lt;code&gt;toString&lt;/code&gt; and &lt;code&gt;valueOf&lt;/code&gt; methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;toString&lt;/code&gt; method returns a string &lt;code&gt;&amp;quot;[object Object]&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;valueOf&lt;/code&gt; method returns the object itself.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&amp;rsquo;s the demo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(user); &lt;span style=&#34;color:#6272a4&#34;&gt;// [object Object]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert(user.valueOf() &lt;span style=&#34;color:#ff79c6&#34;&gt;===&lt;/span&gt; user); &lt;span style=&#34;color:#6272a4&#34;&gt;// true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So if we try to use an object as a string, like in an &lt;code&gt;alert&lt;/code&gt; or so, then by default we see &lt;code&gt;[object Object]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And the default &lt;code&gt;valueOf&lt;/code&gt; is mentioned here only for the sake of completeness, to avoid any confusion. As you can see, it returns the object itself, and so is ignored. Don&amp;rsquo;t ask me why, that&amp;rsquo;s for historical reasons. So we can assume it doesn&amp;rsquo;t exist.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s implement these methods.&lt;/p&gt;
&lt;p&gt;For instance, here &lt;code&gt;user&lt;/code&gt; does the same as above using a combination of &lt;code&gt;toString&lt;/code&gt; and &lt;code&gt;valueOf&lt;/code&gt; instead of &lt;code&gt;Symbol.toPrimitive&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  money&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;1000&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// for hint=&amp;#34;string&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  toString() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;`{name: &amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.name&lt;span style=&#34;color:#f1fa8c&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;}`&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// for hint=&amp;#34;number&amp;#34; or &amp;#34;default&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  valueOf() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.money;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(user); &lt;span style=&#34;color:#6272a4&#34;&gt;// toString -&amp;gt; {name: &amp;#34;John&amp;#34;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert(&lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt;user); &lt;span style=&#34;color:#6272a4&#34;&gt;// valueOf -&amp;gt; 1000
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert(user &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;500&lt;/span&gt;); &lt;span style=&#34;color:#6272a4&#34;&gt;// valueOf -&amp;gt; 1500
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As we can see, the behavior is the same as the previous example with &lt;code&gt;Symbol.toPrimitive&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Often we want a single &amp;ldquo;catch-all&amp;rdquo; place to handle all primitive conversions. In this case, we can implement &lt;code&gt;toString&lt;/code&gt; only, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; user &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  name&lt;span style=&#34;color:#ff79c6&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;John&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  toString() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;this&lt;/span&gt;.name;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(user); &lt;span style=&#34;color:#6272a4&#34;&gt;// toString -&amp;gt; John
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;alert(user &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;500&lt;/span&gt;); &lt;span style=&#34;color:#6272a4&#34;&gt;// toString -&amp;gt; John500
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the absence of &lt;code&gt;Symbol.toPrimitive&lt;/code&gt; and &lt;code&gt;valueOf&lt;/code&gt;, &lt;code&gt;toString&lt;/code&gt; will handle all primitive conversions.&lt;/p&gt;
&lt;h3 id=&#34;return-types&#34;&gt;Return types&lt;/h3&gt;
&lt;p&gt;The important thing to know about all primitive-conversion methods is that they do not necessarily return the &amp;ldquo;hinted&amp;rdquo; primitive.&lt;/p&gt;
&lt;p&gt;There is no control whether &lt;code&gt;toString&lt;/code&gt; returns exactly a string, or whether &lt;code&gt;Symbol.toPrimitive&lt;/code&gt; method returns a number for a hint &lt;code&gt;&amp;quot;number&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The only mandatory thing: these methods must return a primitive, not an object.&lt;/p&gt;
&lt;p&gt;For historical reasons, if &lt;code&gt;toString&lt;/code&gt; or &lt;code&gt;valueOf&lt;/code&gt; returns an object, there&amp;rsquo;s no error, but such value is ignored (like if the method didn&amp;rsquo;t exist). That&amp;rsquo;s because in ancient times there was no good &amp;ldquo;error&amp;rdquo; concept in JavaScript.&lt;/p&gt;
&lt;p&gt;In contrast, &lt;code&gt;Symbol.toPrimitive&lt;/code&gt; &lt;em&gt;must&lt;/em&gt; return a primitive, otherwise there will be an error.&lt;/p&gt;
&lt;h3 id=&#34;further-conversions&#34;&gt;Further conversions&lt;/h3&gt;
&lt;p&gt;As we know already, many operators and functions perform type conversions, e.g. multiplication &lt;code&gt;*&lt;/code&gt; converts operands to numbers.&lt;/p&gt;
&lt;p&gt;If we pass an object as an argument, then there are two stages:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The object is converted to a primitive (using the rules described above).&lt;/li&gt;
&lt;li&gt;If the resulting primitive isn&amp;rsquo;t of the right type, it&amp;rsquo;s converted.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; obj &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;// toString handles all conversions in the absence of other methods
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;  toString() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(obj &lt;span style=&#34;color:#ff79c6&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;); &lt;span style=&#34;color:#6272a4&#34;&gt;// 4, object converted to primitive &amp;#34;2&amp;#34;, then multiplication made it a number
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;The multiplication &lt;code&gt;obj * 2&lt;/code&gt; first converts the object to primitive (that&amp;rsquo;s a string &lt;code&gt;&amp;quot;2&amp;quot;&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Then &lt;code&gt;&amp;quot;2&amp;quot; * 2&lt;/code&gt; becomes &lt;code&gt;2 * 2&lt;/code&gt; (the string is converted to number).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Binary plus will concatenate strings in the same situation, as it gladly accepts a string:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;let&lt;/span&gt; obj &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  toString() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;alert(obj &lt;span style=&#34;color:#ff79c6&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#bd93f9&#34;&gt;2&lt;/span&gt;); &lt;span style=&#34;color:#6272a4&#34;&gt;// 22 (&amp;#34;2&amp;#34; + 2), conversion to primitive returned a string =&amp;gt; concatenation
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;summary-17&#34;&gt;Summary&lt;/h3&gt;
&lt;p&gt;The object-to-primitive conversion is called automatically by many built-in functions and operators that expect a primitive as a value.&lt;/p&gt;
&lt;p&gt;There are 3 types (hints) of it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;string&amp;quot;&lt;/code&gt; (for &lt;code&gt;alert&lt;/code&gt; and other operations that need a string)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;number&amp;quot;&lt;/code&gt; (for maths)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;quot;default&amp;quot;&lt;/code&gt; (few operators)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The specification describes explicitly which operator uses which hint. There are very few operators that &amp;ldquo;don&amp;rsquo;t know what to expect&amp;rdquo; and use the &lt;code&gt;&amp;quot;default&amp;quot;&lt;/code&gt; hint. Usually for built-in objects &lt;code&gt;&amp;quot;default&amp;quot;&lt;/code&gt; hint is handled the same way as &lt;code&gt;&amp;quot;number&amp;quot;&lt;/code&gt;, so in practice the last two are often merged together.&lt;/p&gt;
&lt;p&gt;The conversion algorithm is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Call &lt;code&gt;obj[Symbol.toPrimitive](hint)&lt;/code&gt; if the method exists,&lt;/li&gt;
&lt;li&gt;Otherwise if hint is &lt;code&gt;&amp;quot;string&amp;quot;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;try &lt;code&gt;obj.toString()&lt;/code&gt; and &lt;code&gt;obj.valueOf()&lt;/code&gt;, whatever exists.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Otherwise if hint is &lt;code&gt;&amp;quot;number&amp;quot;&lt;/code&gt; or &lt;code&gt;&amp;quot;default&amp;quot;&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;try &lt;code&gt;obj.valueOf()&lt;/code&gt; and &lt;code&gt;obj.toString()&lt;/code&gt;, whatever exists.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In practice, it&amp;rsquo;s often enough to implement only &lt;code&gt;obj.toString()&lt;/code&gt; as a &amp;ldquo;catch-all&amp;rdquo; method for all conversions that return a &amp;ldquo;human-readable&amp;rdquo; representation of an object, for logging or debugging purposes.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;That&amp;rsquo;s Alot! We thank the authors from &lt;a href=&#34;https://javascript.info/&#34;&gt;https://javascript.info/&lt;/a&gt; For supporting this lesson, and without them, I don&amp;rsquo;t think It would be possible to do such a huge work! In the next tutorial, We&amp;rsquo;ll discuss how we can interact With websites in order to make our modern development success.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Download Youtube Videos 2020</title>
<link>https://blog.nushankodikara.com/blog/download-youtube-videos-2020/</link>
<pubDate>Wed, 22 Jul 2020 16:25:57 +0530</pubDate>
      
      <guid>https://blog.nushankodikara.com/blog/download-youtube-videos-2020/</guid>
<description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s be real, We need to download Youtube Videos for so many reasons, Maybe mp3 from youtube, And we still don&amp;rsquo;t have a clear way, But today I&amp;rsquo;m here to change that, I Found some interesting apps and websites which can download From youtube directly as video or Audio. Without much details, Let&amp;rsquo;s dive in.&lt;/p&gt;
&lt;h2 id=&#34;android&#34;&gt;Android&lt;/h2&gt;
&lt;p&gt;For android devices, I Have an app for you. This isn&amp;rsquo;t Available on playstore because that&amp;rsquo;s how it is. And That app doesn&amp;rsquo;t have any Bugs or ads so It&amp;rsquo;s completely fee and open-source. It&amp;rsquo;s Called newpipe and you can download It &lt;a href=&#34;https://github.com/TeamNewPipe/NewPipe/releases&#34;&gt;Here&lt;/a&gt;. After Downloading It&amp;rsquo;s Pretty forward.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200722_07.png&#34; alt=&#34;NEWPIPE&#34;&gt;&lt;/p&gt;
&lt;p&gt;Select the apk to download it and install it usually.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200722_01.jpg&#34; alt=&#34;NEWPIPE&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here it&amp;rsquo;s almost like the youtube client but it&amp;rsquo;s not. Type what you want to search in the search-bar and hit enter.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200722_02.jpg&#34; alt=&#34;NEWPIPE&#34;&gt;&lt;/p&gt;
&lt;p&gt;After the search results popped up, select what you want to download.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200722_03.jpg&#34; alt=&#34;NEWPIPE&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here, Click on this download button&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200722_04.jpg&#34; alt=&#34;NEWPIPE&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now you have several options, you can download The video, Audio or captions if it&amp;rsquo;s available and Then click OK To download the media file.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200722_05.jpg&#34; alt=&#34;NEWPIPE&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200722_06.jpg&#34; alt=&#34;NEWPIPE&#34;&gt;&lt;/p&gt;
&lt;p&gt;Wait for it to complete the download and You&amp;rsquo;re golden.&lt;/p&gt;
&lt;h2 id=&#34;all-operating-systems&#34;&gt;All Operating Systems&lt;/h2&gt;
&lt;p&gt;Before anything else, You have to copy the video URL First, So let&amp;rsquo;s start with it. Goto the video you want to download and copy this section (URL).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200722_08.png&#34; alt=&#34;Youtube&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;download-video&#34;&gt;Download Video&lt;/h3&gt;
&lt;p&gt;So to download The video, Goto &lt;a href=&#34;https://www.ssyoutube.com&#34;&gt;www.ssyoutube.com&lt;/a&gt; And paste the url you copied, In here, and press the download button to start Downloading the video&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200722_09.png&#34; alt=&#34;SSYoutube&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now from the download section, Select your quality and The download will start&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200722_11.png&#34; alt=&#34;SSYoutube&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200722_12.png&#34; alt=&#34;SSYoutube&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;download-audio&#34;&gt;Download Audio&lt;/h3&gt;
&lt;p&gt;It&amp;rsquo;s pretty much that simple, Goto &lt;a href=&#34;https://www.ytmp3.cc&#34;&gt;www.ytmp3.cc&lt;/a&gt; And paste the url you copied, In here, and press the convert button to start Downloading the video&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200722_13.png&#34; alt=&#34;ytmp3&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now select the download button, The download will start&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200722_14.png&#34; alt=&#34;ytmp3&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200722_15.png&#34; alt=&#34;ytmp3&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s Pretty simple to download videos from youtube, But most of the users doesn&amp;rsquo;t know these methods. And from now on, I&amp;rsquo;m pretty sure that you&amp;rsquo;re going to love it!&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Scss for Modern Web Development (Supercharged CSS)</title>
<link>https://blog.nushankodikara.com/blog/scss-for-modern-web-development/</link>
<pubDate>Tue, 21 Jul 2020 06:59:06 +0530</pubDate>
      
      <guid>https://blog.nushankodikara.com/blog/scss-for-modern-web-development/</guid>
<description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;If you noticed, I Didn&amp;rsquo;t mentioned css for browser types in our previous CSS tutorial, The case is, I don&amp;rsquo;t want to, SCSS is doing everything for us so why should we even bother? Let&amp;rsquo;s get started with SCSS and supercharge our css.&lt;/p&gt;
&lt;h2 id=&#34;pre-setup&#34;&gt;Pre-Setup&lt;/h2&gt;
&lt;p&gt;SCSS isn&amp;rsquo;t a universal solution, it&amp;rsquo;s here to help us with variables, nesting and automatic css generation. So we need a software to compile scss into css, here I&amp;rsquo;m using VSCode and an extension called live SCSS compiler. you can download it &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=ritwickdey.live-sass&#34;&gt;Here&lt;/a&gt;. Install it to VSCode and you&amp;rsquo;re good to go. You can see how to setup VSCode &lt;a href=&#34;https://blog.nushankodikara.com/post/vs-code-for-web-developers/&#34;&gt;Here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;folder-structure-and-setup&#34;&gt;Folder Structure and Setup&lt;/h2&gt;
&lt;p&gt;Now, SCSS works like this, you have to create a HTML file and a SCSS file, and through the extension, we have to activate the SCSS watcher and It generates a css file in the same name as the scss file, so We can link up the css file as usual. Enough theory for that part, let&amp;rsquo;s do some work. You need basic CSS knowledge, and if you didn&amp;rsquo;t followed any of our tutorials Before, Check the CSS Guide &lt;a href=&#34;https://blog.nushankodikara.com/post/css-for-modern-web-development/&#34;&gt;Here&lt;/a&gt; And the HTML Guide &lt;a href=&#34;https://blog.nushankodikara.com/post/html-for-modern-web-development/&#34;&gt;Here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So to start With, I Have a index.html and style.scss file in the root folder&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200721_01.png&#34; alt=&#34;Folder Structure&#34;&gt;&lt;/p&gt;
&lt;p&gt;And I&amp;rsquo;m using a simple boilerplate in HTML file and nothing else.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200721_02.png&#34; alt=&#34;Folder Structure&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now we have to start scss generation, here we have to open the scss file and select watch sass button to the bottom and you can see a css and css.map file generates automatically.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200721_03.png&#34; alt=&#34;VSCode&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200721_04.png&#34; alt=&#34;VSCode&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now link that css file to our html page and we are pretty much done and ready to code.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200721_05.png&#34; alt=&#34;VSCode&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;coding-section&#34;&gt;Coding Section&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s Start Coding The, First of all, SCSS is almost like css but We have extended functionalities such as nested elements functions and Variables, Here&amp;rsquo;s an Example for you.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  /* Define standard variables and values for website */
  $bgcolor: lightblue;
  $textcolor: darkblue;
  $fontsize: 18px;
  
  /* Use the variables */
  body {
    background-color: $bgcolor;
    color: $textcolor;
    font-size: $fontsize;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let&amp;rsquo;s get started.&lt;/p&gt;
&lt;h3 id=&#34;sass-variables&#34;&gt;Sass Variables&lt;/h3&gt;
&lt;p&gt;variables are variables in every language and I explained variables so much and here again explaining the same concept, Variable holds data and there are several types of data we can set a variable to,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;numbers&lt;/li&gt;
&lt;li&gt;colors&lt;/li&gt;
&lt;li&gt;booleans&lt;/li&gt;
&lt;li&gt;lists&lt;/li&gt;
&lt;li&gt;nulls&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It&amp;rsquo;s a bit different in SCSS but works the same, Variables are defined and used with a $ sign in-front of it&amp;rsquo;s name. For and example,&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  /* Defining Variables */

  $myColor: red;
  $myFontSize: 18px;

  /* Using Variables */

  body {
    font-size: $myFontSize;
    color: $myColor;
  }
  
  #container {
    background: $myColor;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;And The Automatically generated CSS File would be like this&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  body {
    font-size: 18px;
    color: red;
  }
  
  #container {
    background: red;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;sass-variable-scope&#34;&gt;Sass Variable Scope&lt;/h3&gt;
&lt;p&gt;There are two types of scopes, Global and local. Global scoped variables can be defined in the root line, outside any selectors, and local variables are defined inside selectors.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  /* Global Variables */
  $myColor: red;
  
  h1 {
    /* Local Variables */
    $myColor: green;
    color: $myColor;
  }
  
  p {
    color: $myColor;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;And the CSS Output would be&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  h1 {
    color: green;
  }
  
  p {
    color: red;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;using-sass-global&#34;&gt;Using Sass !global&lt;/h3&gt;
&lt;p&gt;Using this, you can change global scoped variables. For an example,&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  $myColor: red;
  
  h1 {
    $myColor: green !global;
    color: $myColor;
  }
  
  p {
    color: $myColor;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;And the css output would be&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  h1 {
    color: green;
  }
  
  p {
    color: green;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;sass-nested-rules-and-properties&#34;&gt;Sass Nested Rules and Properties&lt;/h3&gt;
&lt;p&gt;Assume you have a h1 tag inside a div element and we need to change only it&amp;rsquo;s color to red. you can select it directly with scss using the same nesting procedure as the HTML, let&amp;rsquo;s explore, now to select only the h1 tag in the div, we can use&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  div {
      h1 {
          color:red;
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;CSS Output would be&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  div h1 {
      color:reed;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;sass-nested-properties&#34;&gt;Sass Nested Properties&lt;/h3&gt;
&lt;p&gt;This is something new, but I&amp;rsquo;m pretty sure you can wrap your head around it pretty easily. Remember font-size, font-family, font-weight properties? and text-align, text-transform, text-overflow properties? these have font and text in common, so we can use these common words to nest properties like this.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  font: {
    family: Helvetica, sans-serif;
    size: 18px;
    weight: bold;
  }
  
  text: {
    align: center;
    transform: lowercase;
    overflow: hidden;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;And the CSS Output would be&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  font-family: Helvetica, sans-serif;
  font-size: 18px;
  font-weight: bold;
  
  text-align: center;
  text-transform: lowercase;
  text-overflow: hidden;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;scss-import-and-export&#34;&gt;SCSS @import and export&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s talk about these files, you can import properties from different files, which means for an example, you can save variables in a file and use them in another file. but to export, you have to end that file name with an Underscore ( _ ).&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  _variables.scss
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;and you can import it to working file using&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  @import &amp;quot;variables&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;And that&amp;rsquo;s all for importing.&lt;/p&gt;
&lt;h3 id=&#34;sass-mixin-and-include&#34;&gt;Sass @mixin and @include&lt;/h3&gt;
&lt;p&gt;assume this as a function in other languages, you can create code blocks to re use in scss using @mixin.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  @mixin itext {
    color: red;
    font-size: 25px;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now you can use @include to use that mixin in SCSS&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  div {
      h1{
          @include itext;
      }
      h2{
          @include itext;
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;And the CSS Output would be&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  div h1{
      color: red;
      font-size: 25px;
  }
  div h2{
      color: red;
      font-size: 25px;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;passing-variables-to-a-mixin&#34;&gt;Passing Variables to a Mixin&lt;/h4&gt;
&lt;p&gt;Just like in functions, you can preform some dynamic actions with Mixin. you can define dynamic mixin as this.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  @mixin bordered($color, $width) {
    border: $width solid $color;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now you can use this mixin like this&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  div {
      h1{
          @include bordered(red, 2px);
      }
      h2{
          font-size: 25px;
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;And the CSS Output Would be&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  div h1{
      border: 2px solid red;
  }
  div h2{
      font-size: 25px;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;default-values-for-a-mixin&#34;&gt;Default Values for a Mixin&lt;/h4&gt;
&lt;p&gt;Also you can set default values in case you forgot to include one,&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  @mixin bordered($color: blue, $width: 1px) {
    border: $width solid $color;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;sass-extend-and-inheritance&#34;&gt;Sass @extend and Inheritance&lt;/h3&gt;
&lt;p&gt;Here&amp;rsquo;s the last thing you need to know about SCSS, It&amp;rsquo;s a simple code block which allows you to re-use a code from a selector you already wrote&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  .button-basic  {
    border: none;
    padding: 15px 30px;
    text-align: center;
    font-size: 16px;
    cursor: pointer;
  }
  
  .button-report  {
    @extend .button-basic;
    background-color: red;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here with the extend inheritance, you just added what&amp;rsquo;s in button-basic to button-report, The css out would be.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  .button-basic  {
    border: none;
    padding: 15px 30px;
    text-align: center;
    font-size: 16px;
    cursor: pointer;
  }
  
  .button-report  {
    border: none;
    padding: 15px 30px;
    text-align: center;
    font-size: 16px;
    cursor: pointer;
    background-color: red;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;And That&amp;rsquo;s IT! You&amp;rsquo;re a pro now.&lt;/p&gt;
&lt;h2 id=&#34;lets-create-a-super-cool-website-using-scss-and-html&#34;&gt;Let&amp;rsquo;s Create a super cool website using SCSS and HTML&lt;/h2&gt;
&lt;p&gt;Now it&amp;rsquo;s time to the fun part, Let&amp;rsquo;s create A Super cool website and as always, you can download it &lt;a href=&#34;https://blog.nushankodikara.com/zip/ModernWebDevelopmentAssetPack02.zip&#34;&gt;Here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We already made the boilerplate and in My HTML page is like this.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;!DOCTYPE html&amp;gt;
  &amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
  
  &amp;lt;head&amp;gt;
      &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
      &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt;
      &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;style.css&amp;quot;&amp;gt;
      &amp;lt;title&amp;gt;SCSS Demo&amp;lt;/title&amp;gt;
  &amp;lt;/head&amp;gt;
  
  &amp;lt;body&amp;gt;
      &amp;lt;div class=&amp;quot;nav&amp;quot;&amp;gt;
          &amp;lt;div class=&amp;quot;list&amp;quot;&amp;gt;
              &amp;lt;a&amp;gt;Contact Us&amp;lt;/a&amp;gt;
              &amp;lt;a&amp;gt;About&amp;lt;/a&amp;gt;
              &amp;lt;a&amp;gt;Home&amp;lt;/a&amp;gt;
          &amp;lt;/div&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&amp;quot;content&amp;quot;&amp;gt;
          &amp;lt;h4&amp;gt;Digital Guideline Of 21st Century&amp;lt;/h4&amp;gt;&amp;lt;br&amp;gt;
          &amp;lt;h1&amp;gt;TECINPACT&amp;lt;/h1&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;div class=&amp;quot;footer&amp;quot;&amp;gt;Tecinpact © 2020 All Rights Reserved.&amp;lt;/div&amp;gt;
  &amp;lt;/body&amp;gt;
  
  &amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;And My SCSS File looks like this, Also I downloaded a background from UNSplash and you can read about free assets &lt;a href=&#34;https://blog.nushankodikara.com/post/royalty-free-internet-resources/&#34;&gt;Here&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  $background : url(bg.jpg);
  $dark : #1f1e2f;
  $mode : #111E6C;
  $lite : white;
  
  html {
      height: 100%;
  
      body {
          font-family: monospace;
          background: linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), $background;
          background-repeat: no-repeat;
          background-size: cover;
          background-position: center;
          color: $lite;
          box-sizing: border-box;
  
          .nav {
              position: absolute;
              top: 0;
              width: 100%;
              font-size: 20px;
  
              .list {
                  a {
                      float: right;
                      text-align: center;
                      padding: 14px 16px;
                      text-decoration: none;
                      font-size: 20px;
                      margin: 10px 20px;
                  }
              }
          }
  
          .content {
              display: grid;
              place-items: center;
              position: absolute;
              width: 100%;
              top: 25%;
  
              h4 {
                  font-size: 2em;
                  margin: 0;
              }
  
              h1 {
                  font-size: 8.5em;
                  margin: 0;
              }
          }
  
          .footer {
              position: absolute;
              width: 100%;
              bottom: 0;
              text-align: center;
              margin: 20px;
          }
      }
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;And if you look in to the css file, It&amp;rsquo;s complicated and Cool because it&amp;rsquo;s what we need and It&amp;rsquo;s there without much effort&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200721_06.png&#34; alt=&#34;Site&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s be real, we don&amp;rsquo;t like to write so-much code for so many vendors and it would be super cool if most of the things has been automated, I use SCSS Regularly on my projects so I can save a lot of time and code easily. So even you should use it for sure!&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Create an Eco System With Join by joaoapps</title>
<link>https://blog.nushankodikara.com/blog/create-an-eco-system-with-join/</link>
<pubDate>Mon, 20 Jul 2020 12:19:26 +0530</pubDate>
      
      <guid>https://blog.nushankodikara.com/blog/create-an-eco-system-with-join/</guid>
<description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s be real, We all like to work in one place but access all of our devices, Apple has a solution for this but what if you don&amp;rsquo;t have an apple eco system? Today, Let&amp;rsquo;s discuss how we can create an ecosystem for with what we have and for a little price to pay, With Join by joaoapps.&lt;/p&gt;
&lt;p&gt;There are more services like this, Push bullet is one of them but their prices are, for my tastes, unfair. So I decided to move on to this app called join and I wasn&amp;rsquo;t able to find a clear explanation on this. So let me explain from tip to toe, what is join and how we can use it.&lt;/p&gt;
&lt;h2 id=&#34;what-is-join&#34;&gt;What Is Join&lt;/h2&gt;
&lt;p&gt;This app let&amp;rsquo;s you to sync your notifications, messages, clipboard and many more features across all of your devices and also it let&amp;rsquo;s you to sync information such as battery health and many more. So, in other words, this let&amp;rsquo;s you to connect all of your devices phones, computers to gather and it allows you to control them remotely. In my personal experience, this is something I use daily and I can&amp;rsquo;t imagine how many times it saved me from awkward situations.&lt;/p&gt;
&lt;h2 id=&#34;how-to-install-this&#34;&gt;How to install this&lt;/h2&gt;
&lt;p&gt;Installation is pretty simple as it seams, for android and iphones, you have an app called join by joaoapps in the playstore and in the appstore to download and continue with a pretty simple steps, you&amp;rsquo;re good to go. for pcs, you have to install an extension in chrome and also you&amp;rsquo;re good to go. Let&amp;rsquo;s see how we can setup these step wise.&lt;/p&gt;
&lt;h3 id=&#34;download&#34;&gt;Download&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.joaomgcd.join&#34;&gt;Android&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://chrome.google.com/webstore/detail/flejfacjooompmliegamfbpjjdlhokhj&#34;&gt;Chrome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.microsoft.com/store/apps/join-by-joaoapps/9nblggh5krjx&#34;&gt;Windows 10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://joaoapps.com/join/web&#34;&gt;Join On The Web&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://joaoapps.com/google-assistant-ifttt-join-tasker-awesomeness/&#34;&gt;Google Assistant&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;android&#34;&gt;Android&lt;/h3&gt;
&lt;p&gt;When you open Join for the first time, you will need to sign in with your Google account. Then enable to push your SMS and calls to other devices.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://juanmtech.b-cdn.net/wp-content/uploads/2018/09/Web-Join-set-up-1.jpg&#34; alt=&#34;Join&#34;&gt;&lt;/p&gt;
&lt;p&gt;Then you have to allow notification access&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://juanmtech.b-cdn.net/wp-content/uploads/2018/09/Web-Notification-access-498x1024.jpg&#34; alt=&#34;Join&#34;&gt;&lt;/p&gt;
&lt;p&gt;You also have the option to enable Join’s accessibility service. This option is handy for when you push the clipboard from your computer to your device, it would automatically paste the text for you instead of manually having to press and hold to get the Paste option.&lt;/p&gt;
&lt;h3 id=&#34;chrome-extension&#34;&gt;Chrome extension&lt;/h3&gt;
&lt;p&gt;Now, our main setup is done and here you have to download the chrome extension from above links and you can login to the account you just made and you&amp;rsquo;re done!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://juanmtech.b-cdn.net/wp-content/uploads/2018/09/Web-Join-Chrome-pop-up.jpg&#34; alt=&#34;Join&#34;&gt;&lt;/p&gt;
&lt;p&gt;Click on the gear at the type right corner of the Join pop-up to access the settings. There are seven tabs available:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://juanmtech.b-cdn.net/wp-content/uploads/2018/09/Web-Join-Chrome-extention-4.jpg&#34; alt=&#34;Join&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Shortcuts tab allows you to create keyboard shortcuts to perform different tasks on your device.&lt;/li&gt;
&lt;li&gt;In Options tab, you can change the way Join looks. You also have the option to hide commands and devices from the Join pop-up.&lt;/li&gt;
&lt;li&gt;On the Clipboard tab, you can manage the clipboard settings.&lt;/li&gt;
&lt;li&gt;Encryption allows to set up a password so all pushes are encrypted.&lt;/li&gt;
&lt;li&gt;The Diagnostics tab can be used to test the Join connection between your devices.&lt;/li&gt;
&lt;li&gt;The Advanced tab has multiple settings. You can manage how links, files, EventGhost and Tasker commands interact when they are pushed.&lt;/li&gt;
&lt;li&gt;Last but not least, we have the Help tab which has multiple links available to other websites and social media communities where you can find help for any type of issues or questions that you might have about Join.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;encryption&#34;&gt;Encryption&lt;/h2&gt;
&lt;p&gt;To setup encryption, go to the Encryption tab and set up a new password. Then, open Join on your phone and go to Settings &amp;gt; Encryption &amp;gt; Password and enter the same password you set up in the Chrome extension. Now Join will encrypt the data before pushing it to other devices.&lt;/p&gt;
&lt;h2 id=&#34;notifications&#34;&gt;Notifications&lt;/h2&gt;
&lt;p&gt;Next, we need to select what notifications we want to push and to which device or devices. Go to Settings &amp;gt; Notifications &amp;gt; Notification Devices. Then after that, go to Notification Apps and select the apps that you would like to push notifications to the selected devices via Join.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://juanmtech.b-cdn.net/wp-content/uploads/2018/09/Web-Join-set-up-2.jpg&#34; alt=&#34;Join&#34;&gt;&lt;/p&gt;
&lt;p&gt;Also in this way, you can select how to sync your clipboard too.&lt;/p&gt;
&lt;h2 id=&#34;join-on-the-web&#34;&gt;Join on the web&lt;/h2&gt;
&lt;p&gt;What if you want to access Join from an IOS device, like an iPhone or iPad or from a computer at work? Well, the developer has you covered. Join also has a web interface that allows you to access all your connected devices and send commands to it from most browsers by going to the following URL, &lt;a href=&#34;https://joinjoaomgcd.appspot.com&#34;&gt;https://joinjoaomgcd.appspot.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://juanmtech.b-cdn.net/wp-content/uploads/2018/09/Web-Join-Web.jpg&#34; alt=&#34;Join&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;push-websites-from-an-ios-device-to-other-devices-using-join&#34;&gt;Push websites from an IOS device to other devices using Join&lt;/h2&gt;
&lt;p&gt;To send links from an IOS device to other devices, we will need to save the Send Tab option in a bookmark on your browser. Open Join web on an IOS device using Google Chrome and select the device that you want to push links. Then, click on Join API, under API Key, click on Show and then close the Join API pop-up window. Now press and hold the Send Tab button and click on Copy Link URL. The link would look like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  javascript:(function(){ var img = new Image(1,1); img.src = &#39;https://joinjoaomgcd.appspot.com/_ah/api/messaging/v1/sendPush?url=&#39; + encodeURIComponent(document.URL) + &#39;&amp;amp;deviceId=YOUR_DEVICE_ID&amp;amp;apikey=YOUR_API_KEY&#39; ; })();
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you use Safari on your IOS device. Open Safari, go to any website and add it as a bookmark. Now, we need to edit it and change the name and the URL, so go into your Bookmarks, click on Edit, Select the new bookmark. Change the name to the device name that you will be pushing links to, change the URL to the Send Tab link and then click on done. Now, whenever you want to send the current website on your IOS device to another device, just click on this bookmark and it will push the current link.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://juanmtech.b-cdn.net/wp-content/uploads/2018/09/Web-IMG_0004-cropped.png&#34; alt=&#34;Join&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: If you have multiple devices that you would like to set up, you will have to repeat this process for each device. Also, at the time of this guide, it is not possible to push any data to an IOS device using Join.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;join-api&#34;&gt;Join API&lt;/h2&gt;
&lt;p&gt;The Join API is a very useful feature. It allows sending custom commands to Tasker to execute different tasks. You can also use the API with the Webhook service in IFTTT. To access the API, go to the Join web interface. Then, select a device, click on Join API and click on Show to display the API key. The Join API feature has many parameters available that you can add to the API URL.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://juanmtech.b-cdn.net/wp-content/uploads/2018/09/Web-Join-API-setup-2.jpg&#34; alt=&#34;Join&#34;&gt;&lt;/p&gt;
&lt;p&gt;To have an idea of how it works, let’s create an Applet in IFTTT that will allow us to receive a notification from a website on a smartphone every time there is a new article. If you never used IFTTT before and would like to learn how to use it, you can watch a tutorial video &lt;a href=&#34;https://youtu.be/lznDsCwGxDM&#34;&gt;Here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To start, let’s go to IFTTT, click on your username and then on New Applet. Now, click on this to create a trigger, search and select RSS Feed and click on New feed item. We are going to set up to get the latest articles from Android Police so enter the following link in the Feed URL field, &lt;a href=&#34;http://www.androidpolice.com/feed/&#34;&gt;http://www.androidpolice.com/feed/&lt;/a&gt; Then click on Create Trigger. We now need to create the Action so click on that, search and select Webhooks and click on Make a web request.&lt;/p&gt;
&lt;p&gt;Now open another tab and go to the Join web interface, Select a device and then click on Join API. Under the API Key, click on Show so the Key gets displayed and the URL gets populated. Now we are going to be using the Text, Tittle, Icon and URL parameter so on each field just enter 1234 for now. We will replace this after we paste the Join URL in IFTTT.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://juanmtech.b-cdn.net/wp-content/uploads/2018/09/Web-Join-API-setup.jpg&#34; alt=&#34;Join&#34;&gt;&lt;/p&gt;
&lt;p&gt;The whole URL will look somewhat this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  https://joinjoaomgcd.appspot.com/_ah/api/messaging/v1/sendPush?text=1234&amp;amp;title=1234&amp;amp;icon=1234&amp;amp;url=1234&amp;amp;deviceId=YOUR_DEVICE_ID_HERE&amp;amp;apikey=YOUR_API_KEY_HERE
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now go back to IFTTT and under the URL field enter the Join URL. For the text parameter, we are going to replace 1234 with &amp;laquo;&amp;lt;&amp;raquo;&amp;gt; Then in the middle add the ingredient EntryTittle. The text parameter will look like this &amp;laquo;&amp;lt;{{EntryTitle}}&amp;raquo;&amp;gt;. Now for the Tittle, replace 1234 with Android+Police now for the Icon, we are going to replace 1234 with the Android Police icon that I found &lt;a href=&#34;https://lh3.googleusercontent.com/-2lq9WcxRgB0/AAAAAAAAAAI/AAAAAAAAETw/Yk2jY1eiZss/s640/photo.jpg&#34;&gt;Here&lt;/a&gt;. We will need to encode the icon URL so copy the URL and go &lt;a href=&#34;https://meyerweb.com/eric/tools/dencoder/&#34;&gt;Here&lt;/a&gt; to encode it. Go back to IFTTT and enter the encoded link for the Icon parameter. For the URL, add the ingredient EntryUrl enclosed with &amp;laquo;&amp;lt;&amp;raquo;&amp;gt;. The URL parameter will look like this &amp;laquo;&amp;lt;{{EntryUrl}}&amp;raquo;&amp;gt;. The whole URL will not look like this:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  https://joinjoaomgcd.appspot.com/_ah/api/messaging/v1/sendPush?text=&amp;lt;&amp;lt;&amp;lt;{{EntryTitle}}&amp;gt;&amp;gt;&amp;gt;&amp;amp;title=Android+Police&amp;amp;icon=https%3A%2F%2Flh3.googleusercontent.com%2F-2lq9WcxRgB0%2FAAAAAAAAAAI%2FAAAAAAAAETw%2FYk2jY1eiZss%2Fs640%2Fphoto.jpg&amp;amp;url=&amp;lt;&amp;lt;&amp;lt;{{EntryUrl}}&amp;gt;&amp;gt;&amp;gt;&amp;amp;deviceId=YOUR_DEVICE_ID&amp;amp;apikey=YOUR_API_KEY
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://juanmtech.b-cdn.net/wp-content/uploads/2018/09/Web-IFTTT.jpg&#34; alt=&#34;Join&#34;&gt;&lt;/p&gt;
&lt;p&gt;Ok now click on Create action and then Finish. Whenever a new article is available, we will get a notification on the device that will look like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://juanmtech.b-cdn.net/wp-content/uploads/2018/09/Web-Join-Notification-test.jpg&#34; alt=&#34;Join&#34;&gt;&lt;/p&gt;
&lt;p&gt;The title of the notification is the name of the website and the text, is the title of the article. Clicking the notification will take you to the article page.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  Note: This Android Police notification was originally covered in a tutorial by João Dias, the developer of Join. I wanted to update it a little and include it in this guide so, all credit goes to him.
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;join-plugin-for-tasker&#34;&gt;Join Plugin for Tasker&lt;/h2&gt;
&lt;p&gt;What if we wanted to trigger a task in Tasker when we get the above Join notification? Simple, we can create an Event Profile in Tasker using the Join Plugin. Go to Tasker, click on the “+” icon, then Event &amp;gt; Plugin &amp;gt; Join. There are four available options: Text, Title, URL and Screen Capture.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://juanmtech.b-cdn.net/wp-content/uploads/2018/09/Web-Join-received-push-498x1024.jpg&#34; alt=&#34;Join&#34;&gt;&lt;/p&gt;
&lt;p&gt;Select Title and then click on Title Filter. Type Android Police in the field and click OK. Then, you have a few available options: Exact, Regex, Case Insensitive and Contains All. Select Exact and back out to connect the new profile to any task you would like to trigger.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://juanmtech.b-cdn.net/wp-content/uploads/2018/09/Web-Join-title-page-498x1024.jpg&#34; alt=&#34;Join&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;join-and-eventghost&#34;&gt;Join and EventGhost&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://juanmtech.b-cdn.net/wp-content/uploads/2018/09/Web-EventGhost-1.jpg&#34; alt=&#34;Join&#34;&gt;&lt;/p&gt;
&lt;p&gt;Another great thing about Join is that you can add it to EventGhost and send commands to the computer from other devices to execute different tasks.&lt;/p&gt;
&lt;p&gt;You can download EventGhost from here, then go here to download the AutoRemote EventGhost Plugin. As João stated on his website: download the AutoRemote EvenGhost plugin and go to &lt;strong&gt;C:\Program Files (x86)\EventGhost\plugins\AutoRemote&lt;/strong&gt; or &lt;strong&gt;C:\Program Files\EventGhost\plugins\AutoRemote&lt;/strong&gt;, then create a folder named AutoRemote and save the Plugin in there. Now, open EventGhost, Go to &lt;strong&gt;Configuration &amp;gt; Add Plugin &amp;gt; Select AutoRemote &amp;gt; Press Ok&lt;/strong&gt;. Here we are going to set up the following fields:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Enter the name for the Join device under Device Name&lt;/li&gt;
&lt;li&gt;Paste the Join API URL under Device Personal URL&lt;/li&gt;
&lt;li&gt;Type the Join Device ID under Device Key&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://juanmtech.b-cdn.net/wp-content/uploads/2018/09/Web-EventGhost-2.jpg&#34; alt=&#34;Join&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now click on Add and then OK. We need to save the changes in EventGhost so go to File and click on Save. Last but not least, open the Join Settings on the Chrome extension, go to Advance and under EventGhost, enter the port 1818 which is the default port for EventGhost.&lt;/p&gt;
&lt;p&gt;OK so we are done and Join is now set up with EventGhost so whenever we send a command from another device to the computer, EventGhost will see it and will be able to execute different tasks on the computer.&lt;/p&gt;
&lt;p&gt;To see Join and EventGhost in action, check out this tutorial &lt;a href=&#34;https://youtu.be/PtiX4TcdDSg&#34;&gt;Video&lt;/a&gt; where I show how to turn a computer on and off using Google Home and the Google Assistant in a smartphone.&lt;/p&gt;
&lt;p&gt;As we can see Join is a powerful app to have. I hope this guide was helpful and you now have a better understanding of how to use Join and its available features. I will try to keep this guide updated whenever there is a new updated done to the app.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Storage Free Cloud Life 2020</title>
<link>https://blog.nushankodikara.com/blog/storage-free-cloud-life-2020/</link>
<pubDate>Sun, 19 Jul 2020 14:04:05 +0530</pubDate>
      
      <guid>https://blog.nushankodikara.com/blog/storage-free-cloud-life-2020/</guid>
<description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Storage, in other words, Information had evolved in to almost to be a basic need of modern human life, Everything form studies, household things, social awareness programs and pretty much anything you name, has a digital counterpart that stored somewhere in the world, And as humans, we have to constantly phrase and read them to keep up with the modern society, and sometimes, It&amp;rsquo;s a pain. But most of us are creating and storing a massive amounts of data within our life time, and for most of us, there are times which we struggle to keep up with the amount of information that we make. for an example &lt;strong&gt;Running out of mobile storage&lt;/strong&gt;. Here, we are facing a problem with our own data, we don&amp;rsquo;t have enough space and sometimes, getting more storage is expensive. Or imagine, what could go wrong, if a device, a hard drive &lt;strong&gt;fails to open&lt;/strong&gt; our stored data? or what would happen if the &lt;strong&gt;data has been corrupted&lt;/strong&gt;? These are massive problems and I&amp;rsquo;m pretty sure, we all have face these.&lt;/p&gt;
&lt;p&gt;So today, I Decided to bring my strategy around this problem and how I almost doesn&amp;rsquo;t spending a single penny on these operations. Let&amp;rsquo;s explore the possibilities.&lt;/p&gt;
&lt;p&gt;To study this matter in ease, I&amp;rsquo;m dividing the data we make into several different categories and I&amp;rsquo;m explaining how I managed make a way around to the storage problem related to each data type. Let&amp;rsquo;s categorize first,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Images / Photos&lt;/li&gt;
&lt;li&gt;Videos&lt;/li&gt;
&lt;li&gt;Audio / Music&lt;/li&gt;
&lt;li&gt;Documents&lt;/li&gt;
&lt;li&gt;Others&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now let me explain first. Here, before anything else, I&amp;rsquo;m considering Images and Videos as a single category because the way around for both of them, are the same exact method.&lt;/p&gt;
&lt;h2 id=&#34;how-i-chose-these&#34;&gt;How I Chose These&lt;/h2&gt;
&lt;p&gt;This is the case. for a service to get in to this list, Those have to achieve certain aspects, They should&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Have A Free plan with good options&lt;/li&gt;
&lt;li&gt;Compatible with most of the platforms&lt;/li&gt;
&lt;li&gt;Have a cross platform client&lt;/li&gt;
&lt;li&gt;Offline and caching capabilities&lt;/li&gt;
&lt;li&gt;No Complicated UI / UX&lt;/li&gt;
&lt;li&gt;Security&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Only the services which has these qualities would be in this list, so if you&amp;rsquo;re interested, don&amp;rsquo;t be shy to try them out, Maybe you&amp;rsquo;ll use them for your self or for a friend? Also share this post if it&amp;rsquo;s valuable for you.&lt;/p&gt;
&lt;h2 id=&#34;images-and-videos&#34;&gt;Images And Videos&lt;/h2&gt;
&lt;p&gt;Photos and videos are the memories for us to look back, and sometimes they serve as proof for certain events such as crime scenes, School projects, work projects and for many more. Storing photos and videos isn&amp;rsquo;t a easy task in any means. Why? because with the increasing resolutions of the cameras, these documents are getting bigger and bigger each day. a 16mp photo would take around 5 to 8 MBs of storage now days and considering that&amp;rsquo;s only a single document, That&amp;rsquo;s a lot of storage. This is the same for the videos, Those files are Huge. And what is my solution?&lt;/p&gt;
&lt;p&gt;Here, I&amp;rsquo;m using a service from google which provides Unlimited storage with a condition. Google has a service called google photos, which stores photos and videos without charging anything, but you have to adjust certain settings to make it Free and unlimited. They scale down our photos a little bit (We can&amp;rsquo;t Even notice) from the bitrate of the videos and MP count of the Photos (Not the resolution). And also they are processing our photos with certain bots and AIs to train their machines and for me, That&amp;rsquo;s a worthy trade for Unlimited Storage.&lt;/p&gt;
&lt;h2 id=&#34;audio&#34;&gt;Audio&lt;/h2&gt;
&lt;p&gt;This is something most of us are referring as mp3 files. And our music libraries. We don&amp;rsquo;t have to download these from internet or asking from friends whenever we change our phone or if the chip we hold them got corrupted or something happens bad, we also can save these to an online service called iBroadcast. I&amp;rsquo;m sure many of you doesn&amp;rsquo;t even know what this is and today could be the day you heard it in the first place. So, with my personal experience, That&amp;rsquo;s a great service. I don&amp;rsquo;t know what they are doing with our music but I&amp;rsquo;m pretty sure They aren&amp;rsquo;t tracking anything. The only bummer is it has a separate app for uploads but for me, It&amp;rsquo;s not that big of a deal because anyways at the end, it stores all of my mp3s without charging me anything.&lt;/p&gt;
&lt;p&gt;And That&amp;rsquo;s it for most of us. But for Documents, that&amp;rsquo;s another story. Here, I Wasn&amp;rsquo;t able to find a specific service for mainly document hosting but there&amp;rsquo;s a pretty way around it for geeks and for someone with a little bit of knowledge in computers.&lt;/p&gt;
&lt;h2 id=&#34;documents-and-others&#34;&gt;Documents and Others&lt;/h2&gt;
&lt;p&gt;There&amp;rsquo;s no way around for documents or other storage needs (for now), We have to use a online drive and here again, I&amp;rsquo;m using a google service, Google Drive to be exact. It offers 15GBs of free storage for every account and considering documents are worth like 5kbs, you can store a lot of documents there and always you can create unlimited accounts in order to get more storage.&lt;/p&gt;
&lt;h2 id=&#34;tutorials&#34;&gt;Tutorials&lt;/h2&gt;
&lt;p&gt;Here let&amp;rsquo;s create and setup Google Photos, iBroadcast and Google Drive. But first for all of these services, I&amp;rsquo;m using google chrome browser for windows and mac also Their respective mobile apps for Android IOS and iPad devices.&lt;/p&gt;
&lt;h3 id=&#34;google-photos&#34;&gt;Google Photos&lt;/h3&gt;
&lt;p&gt;you have to have a google account for this, go ahead and sign up on &lt;a href=&#34;https://www.google.com&#34;&gt;www.google.com&lt;/a&gt; Then goto &lt;a href=&#34;https://photos.google.com/&#34;&gt;photos.google.com&lt;/a&gt; to access the google photos and From Playstore or Appstore, download google photos and you&amp;rsquo;re done with the first Step. And for Windows or mac users goto settings using the cogwheel on the top right and Select High Quality (Unlimited Storage) on backup option and you can drag and drop item to upload !&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200719_01.png&#34; alt=&#34;PC Setup&#34;&gt;&lt;/p&gt;
&lt;p&gt;To setup in mobile, First download from playstore or appstore, Then the procedure is same for both of them, Let&amp;rsquo;s do this!&lt;/p&gt;
&lt;p&gt;First step go to the settings menu
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200719_02.jpg&#34; alt=&#34;PC Setup&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200719_03.jpg&#34; alt=&#34;PC Setup&#34;&gt;
Now Select Photo Settings and get in to the Backup &amp;amp; Sync settings
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200719_04.jpg&#34; alt=&#34;PC Setup&#34;&gt;
Here Set the Upload size to high quality And you&amp;rsquo;re done
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200719_05.jpg&#34; alt=&#34;PC Setup&#34;&gt;&lt;/p&gt;
&lt;p&gt;Congratulations on your first Cloud storage and enjoy the unlimited storage feature.&lt;/p&gt;
&lt;h3 id=&#34;ibroadcast&#34;&gt;iBroadcast&lt;/h3&gt;
&lt;p&gt;Now let&amp;rsquo;s consider music. Here you can goto &lt;a href=&#34;https://www.ibroadcast.com&#34;&gt;www.ibroadcast.com&lt;/a&gt; and sign up for a new account. And then download the mobile app &lt;strong&gt;&amp;ldquo;ibroadcast&amp;rdquo;&lt;/strong&gt; and media uploader &lt;strong&gt;&amp;ldquo;iBroadcast MediaSync Lite&amp;rdquo;&lt;/strong&gt; to your mobile devices. Let&amp;rsquo;s Set it up on Computers first.&lt;/p&gt;
&lt;p&gt;Here It&amp;rsquo;s Straight Forward. go to &lt;a href=&#34;https://media.ibroadcast.com/&#34;&gt;media.ibroadcast.com&lt;/a&gt; To listen to your music.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200719_06.png&#34; alt=&#34;PC Setup&#34;&gt;&lt;/p&gt;
&lt;p&gt;And Goto &lt;a href=&#34;https://browser.ibroadcast.com/&#34;&gt;browser.ibroadcast.com&lt;/a&gt; To Upload your music&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200719_07.png&#34; alt=&#34;PC Setup&#34;&gt;&lt;/p&gt;
&lt;p&gt;And Also It&amp;rsquo;s Straight forward on mobile devices too. Use the iBroadcast app to listen to music&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200719_08.jpg&#34; alt=&#34;PC Setup&#34;&gt;&lt;/p&gt;
&lt;p&gt;And Use the mediaSync lite to upload music to the app.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200719_09.jpg&#34; alt=&#34;PC Setup&#34;&gt;&lt;/p&gt;
&lt;p&gt;And That&amp;rsquo;s It For The iBroadcast app!&lt;/p&gt;
&lt;h3 id=&#34;google-drive&#34;&gt;Google Drive&lt;/h3&gt;
&lt;p&gt;It&amp;rsquo;s Easy as hell to google drive. on PCs, goto &lt;a href=&#34;http://drive.google.com/&#34;&gt;drive.google.com&lt;/a&gt; And for mobiles, Download the google drive app from playstore and appstore and you&amp;rsquo;re good to go.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;With these cloud services, do we need to consider on how to get new storages? I Think no. They are way safer and for me, They are the perfect storage solution I Ever came up with. I Hope you&amp;rsquo;ll use these and enjoy. See you around.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>CSS for Modern Web Development (Zero-To-Hero)</title>
<link>https://blog.nushankodikara.com/blog/css-for-modern-web-development/</link>
<pubDate>Sat, 18 Jul 2020 09:40:00 +0530</pubDate>
      
      <guid>https://blog.nushankodikara.com/blog/css-for-modern-web-development/</guid>
<description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Well well, here we are in the section of styling our HTML Page, if you don&amp;rsquo;t know what HTML is, Check &lt;a href=&#34;https://blog.nushankodikara.com/post/html-for-modern-web-development/&#34;&gt;HERE&lt;/a&gt; for the HTML Course on modern web development, Today we&amp;rsquo;re using CSS and HTML knowledge to create a beautiful looking website.&lt;/p&gt;
&lt;p&gt;Today we&amp;rsquo;re creating&lt;/p&gt;
&lt;h2 id=&#34;adding-to-html&#34;&gt;Adding to HTML&lt;/h2&gt;
&lt;p&gt;There are three ways we can add a css file to our HTML Document and you can use unlimited css files in a single HTML page, Let&amp;rsquo;s Explore.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Externally&lt;/li&gt;
&lt;li&gt;Internally&lt;/li&gt;
&lt;li&gt;Inline&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;external-css-files&#34;&gt;External CSS Files&lt;/h3&gt;
&lt;p&gt;Here we can create a .css file in our root directory, And to link it to the HTML Page, you have to add a link tag in the head section of our HTML page&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;&amp;lt;path-with-name&amp;gt;&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;As a practical usage&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;style.css&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here, I&amp;rsquo;m linking a style.css file near the index.html file. Now This is how my file directory looks like&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200718_01.png&#34; alt=&#34;File Structure&#34;&gt;&lt;/p&gt;
&lt;p&gt;And This is how my HTML Document Looks like.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200718_02.png&#34; alt=&#34;HTML Document&#34;&gt;&lt;/p&gt;
&lt;p&gt;Also you can include a style tag in html page and put css in it like this&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;head&amp;gt;
      &amp;lt;style&amp;gt;
          div {background:black;}
      &amp;lt;/style&amp;gt;
  &amp;lt;/head&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Or use inline style attribution to apply css directly to that block&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;div style=&amp;quot;background:black; font-family: monospace;&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;purpose-of-css&#34;&gt;Purpose Of CSS&lt;/h3&gt;
&lt;p&gt;Remember, this css language is for styling your html page and Here with my modern development course, I&amp;rsquo;m explaining only what you will use for real projects, there are a lot of properties you can play with and you&amp;rsquo;re always open to explore. And remember because this is modern web development, we&amp;rsquo;ll use scss and these are what you only use.&lt;/p&gt;
&lt;h3 id=&#34;selectors&#34;&gt;Selectors&lt;/h3&gt;
&lt;p&gt;Here, there are three types of selectors. you can select a tag in our HTML page, you can select a class in our HTML page and you can also select an ID on our HTML page. And to select each type&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Type&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;How To Select It&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Examples&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;HTML Tags&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;tag name without any special characters&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;h1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Classes&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;class name with a dot in-front&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;.myClass&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;IDs&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;ID Name with a Hash in-front&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;#myID&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;I&amp;rsquo;ll show an example just to understand what these used for,&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  h1 {
      color: red;
      font-family: monospace;    
  }

  .myClass {
      background:Maroon;
      padding:10px;
      margin:10px;
      width:100vw;
  }

  #myID {
      position:fixed;
      bottom:0;
      width:100%;
      background:green;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here, you can see how the selector is used. now in those curly braces, those are properties and those properties change certain display aspects of HTML Elements. Here in the first part, I selected h1 heading and in curly braces applied font color of red and changed it&amp;rsquo;s font to monospace. let&amp;rsquo;s try in our page. I&amp;rsquo;m only doing this once so see how I do this and follow along. I&amp;rsquo;m creating h1 element, a div element with class of myClass and a div element with the id of myID. and This is how html looks like&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;!DOCTYPE html&amp;gt;
  &amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
  
  &amp;lt;head&amp;gt;
      &amp;lt;title&amp;gt;Modern Web Development Tutorial&amp;lt;/title&amp;gt;
      &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;style.css&amp;quot;&amp;gt;
  &amp;lt;/head&amp;gt;
  
  &amp;lt;body&amp;gt;
      &amp;lt;h1&amp;gt;Hello World&amp;lt;/h1&amp;gt;
      &amp;lt;div class=&amp;quot;myClass&amp;quot;&amp;gt;Testing World&amp;lt;/div&amp;gt;
      &amp;lt;div id=&amp;quot;myID&amp;quot;&amp;gt;Testing ID World&amp;lt;/div&amp;gt;
  &amp;lt;/body&amp;gt;
  
  &amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;And this is how I did it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200718_03.png&#34; alt=&#34;HTML Document&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200718_04.png&#34; alt=&#34;CSS Document&#34;&gt;&lt;/p&gt;
&lt;p&gt;and now you can see the web page looks like this.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200718_05.png&#34; alt=&#34;Webpage Preview&#34;&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s explore what properties we have to work with and how to use it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.w3schools.com/css/selector.gif&#34; alt=&#34;css form&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;comments-in-css&#34;&gt;Comments in css&lt;/h3&gt;
&lt;p&gt;you can use the opening tag /&lt;em&gt;and closing tag&lt;/em&gt;/ for comments&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  /* Comment */
  /* Multiline
      Comment */
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;properties&#34;&gt;Properties&lt;/h3&gt;
&lt;h4 id=&#34;animation-properties&#34;&gt;Animation Properties&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Property&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;animation&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies the keyframe-based animations.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;animation-delay&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies when the animation will start.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;animation-direction&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies whether the animation should play in reverse on alternate cycles or not.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;animation-duration&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies the number of seconds or milliseconds an animation should take to complete one cycle.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;animation-fill-mode&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies how a CSS animation should apply styles to its target before and after it is executing.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;animation-iteration-count&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies the number of times an animation cycle should be played before stopping.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;animation-name&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies the name of @keyframes defined animations that should be applied to the selected element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;animation-play-state&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies whether the animation is running or paused.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;animation-timing-function&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies how a CSS animation should progress over the duration of each cycle.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;background-properties&#34;&gt;Background Properties&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Property&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;background&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Defines a variety of background properties within one declaration.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;background-attachment&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specify whether the background image is fixed in the viewport or scrolls.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;background-clip&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies the painting area of the background.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;background-color&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Defines an element&amp;rsquo;s background color.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;background-image&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Defines an element&amp;rsquo;s background image.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;background-origin&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies the positioning area of the background images.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;background-position&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Defines the origin of a background image.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;background-repeat&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specify whether/how the background image is tiled.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;background-size&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies the size of the background images.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;border-properties&#34;&gt;Border Properties&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Property&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;border&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sets the width, style, and color for all four sides of an element&amp;rsquo;s border.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;border-bottom&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sets the width, style, and color of the bottom border of an element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;border-bottom-color&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sets the color of the bottom border of an element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;border-bottom-left-radius&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Defines the shape of the bottom-left border corner of an element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;border-bottom-right-radius&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Defines the shape of the bottom-right border corner of an element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;border-bottom-style&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sets the style of the bottom border of an element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;border-bottom-width&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sets the width of the bottom border of an element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;border-color&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sets the color of the border on all the four sides of an element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;border-image&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies how an image is to be used in place of the border styles.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;border-image-outset&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies the amount by which the border image area extends beyond the border box.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;border-image-repeat&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies whether the image-border should be repeated, rounded or stretched.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;border-image-slice&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies the inward offsets of the image-border.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;border-image-source&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies the location of the image to be used as a border.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;border-image-width&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies the width of the image-border.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;border-left&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sets the width, style, and color of the left border of an element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;border-left-color&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sets the color of the left border of an element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;border-left-style&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sets the style of the left border of an element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;border-left-width&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sets the width of the left border of an element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;border-radius&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Defines the shape of the border corners of an element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;border-right&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sets the width, style, and color of the right border of an element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;border-right-color&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sets the color of the right border of an element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;border-right-style&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sets the style of the right border of an element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;border-right-width&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sets the width of the right border of an element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;border-style&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sets the style of the border on all the four sides of an element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;border-top&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sets the width, style, and color of the top border of an element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;border-top-color&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sets the color of the top border of an element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;border-top-left-radius&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Defines the shape of the top-left border corner of an element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;border-top-right-radius&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Defines the shape of the top-right border corner of an element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;border-top-width&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sets the width of the top border of an element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;border-width&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sets the width of the border on all the four sides of an element.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;color-properties&#34;&gt;Color Properties&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Property&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;color&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specify the color of the text of an element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;opacity&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies the transparency of an element.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;dimension-properties&#34;&gt;Dimension Properties&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Property&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;height&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specify the height of an element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;max-height&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specify the maximum height of an element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;max-width&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specify the maximum width of an element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;min-height&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specify the minimum height of an element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;min-width&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specify the minimum width of an element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;width&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specify the width of an element.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;generated-content-properties&#34;&gt;Generated Content Properties&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Property&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;content&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Inserts generated content.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;quotes Specifies&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;quotation marks for embedded quotations.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;counter-reset&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Creates or resets one or more counters.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;counter-increment&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Increments one or more counter values.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;flexible-box-layout&#34;&gt;Flexible Box Layout&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Property&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;align-content&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies the alignment of flexible container&amp;rsquo;s items within the flex container.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;align-items&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies the default alignment for items within the flex container.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;align-self&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies the alignment for selected items within the flex container.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;flex&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies the components of a flexible length.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;flex-basis&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies the initial main size of the flex item.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;flex-direction&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies the direction of the flexible items.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;flex-flow&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;A shorthand property for the flex-direction and the flex-wrap properties.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;flex-grow&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies how the flex item will grow relative to the other items inside the flex container.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;flex-shrink&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies how the flex item will shrink relative to the other items inside the flex container.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;flex-wrap&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies whether the flexible items should wrap or not.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;justify-content&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies how flex items are aligned along the main axis of the flex container after any flexible lengths and auto margins have been resolved.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;order&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies the order in which a flex items are displayed and laid out within a flex container.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;font-properties&#34;&gt;Font Properties&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Property&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;font&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Defines a variety of font properties within one declaration.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;font-family&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Defines a list of fonts for element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;font-size&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Defines the font size for the text.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;font-size-adjust&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Preserves the readability of text when font fallback occurs.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;font-stretch&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Selects a normal, condensed, or expanded face from a font.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;font-style&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Defines the font style for the text.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;font-variant&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specify the font variant.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;font-weight&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specify the font weight of the text.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;list-properties&#34;&gt;List Properties&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Property&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;list-style&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Defines the display style for a list and list elements.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;list-style-image&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies the image to be used as a list-item marker.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;list-style-position&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies the position of the list-item marker.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;list-style-type&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies the marker style for a list-item.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;margin-properties&#34;&gt;Margin Properties&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Property&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;margin Sets&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;the margin on all four sides of the element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;margin-bottom&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sets the bottom margin of the element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;margin-left&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sets the left margin of the element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;margin-right&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sets the right margin of the element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;margin-top&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sets the top margin of the element.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;multi-column-layout-properties&#34;&gt;Multi-column Layout Properties&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Property&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;column-count&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies the number of columns in a multi-column element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;column-fill&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies how columns will be filled.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;column-gap&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies the gap between the columns in a multi-column element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;column-rule&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies a straight line, or &amp;ldquo;rule&amp;rdquo;, to be drawn between each column in a multi-column element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;column-rule-color&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies the color of the rules drawn between columns in a multi-column layout.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;column-rule-style&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies the style of the rule drawn between the columns in a multi-column layout.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;column-rule-width&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies the width of the rule drawn between the columns in a multi-column layout.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;column-span&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies how many columns an element spans across in a multi-column layout.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;column-width&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies the optimal width of the columns in a multi-column element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;columns&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;A shorthand property for setting column-width and column-count properties.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;outline-properties&#34;&gt;Outline Properties&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Property&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;outline&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sets the width, style, and color for all four sides of an element&amp;rsquo;s outline.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;outline-color&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sets the color of the outline.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;outline-offset&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Set the space between an outline and the border edge of an element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;outline-style&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sets a style for an outline.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;outline-width&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sets the width of the outline.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;padding-properties&#34;&gt;Padding Properties&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Property&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;padding&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sets the padding on all four sides of the element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;padding-bottom&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sets the padding to the bottom side of an element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;padding-left&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sets the padding to the left side of an element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;padding-right&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sets the padding to the right side of an element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;padding-top&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sets the padding to the top side of an element.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;print-properties&#34;&gt;Print Properties&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Property&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;page-break-after&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Insert a page breaks after an element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;page-break-before&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Insert a page breaks before an element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;page-break-inside&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Insert a page breaks inside an element.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;table-properties&#34;&gt;Table Properties&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Property&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;border-collapse&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies whether table cell borders are connected or separated.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;border-spacing&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sets the spacing between the borders of adjacent table cells.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;caption-side&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specify the position of table&amp;rsquo;s caption.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;empty-cells&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Show or hide borders and backgrounds of empty table cells.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;table-layout&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies a table layout algorithm.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;text-properties&#34;&gt;Text Properties&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Property&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;direction&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Define the text direction/writing direction.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;tab-size&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies the length of the tab character.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;text-align&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sets the horizontal alignment of inline content.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;text-align-last&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies how the last line of a block or a line right before a forced line break is aligned when text-align is justify.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;text-decoration&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies the decoration added to text.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;text-decoration-color&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies the color of the text-decoration-line.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;text-decoration-line&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies what kind of line decorations are added to the element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;text-decoration-style&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies the style of the lines specified by the text-decoration-line property.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;text-indent&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Indent the first line of text.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;text-justify&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies the justification method to use when the text-align property is set to justify.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;text-overflow&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies how the text content will be displayed, when it overflows the block containers.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;text-shadow&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Applies one or more shadows to the text content of an element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;text-transform&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Transforms the case of the text.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;line-height&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sets the height between lines of text.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;vertical-align&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sets the vertical positioning of an element relative to the current text baseline.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;letter-spacing&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sets the extra spacing between letters.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;word-spacing&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sets the spacing between words.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;white-space&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies how white space inside the element is handled.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;word-break&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies how to break lines within words.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;word-wrap&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies whether to break words when the content overflows the boundaries of its container.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;transform-properties&#34;&gt;Transform Properties&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Property&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;backface-visibility&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies whether or not the &amp;ldquo;back&amp;rdquo; side of a transformed element is visible when facing the user.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;perspective&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Defines the perspective from which all child elements of the object are viewed.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;perspective-origin&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Defines the origin (the vanishing point for the 3D space) for the perspective property.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;transform&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Applies a 2D or 3D transformation to an element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;transform-origin&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Defines the origin of transformation for an element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;transform-style&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies how nested elements are rendered in 3D space.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;transitions-properties&#34;&gt;Transitions Properties&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Property&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;transition&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Defines the transition between two states of an element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;transition-delay&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies when the transition effect will start.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;transition-duration&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies the number of seconds or milliseconds a transition effect should take to complete.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;transition-property&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies the names of the CSS properties to which a transition effect should be applied.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;transition-timing-function&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies the speed curve of the transition effect.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;visual-formatting-properties&#34;&gt;Visual formatting Properties&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Property&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;display&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies how an element is displayed onscreen.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;position&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies how an element is positioned.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;top&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specify the location of the top edge of the positioned element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;right&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specify the location of the right edge of the positioned element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;bottom&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specify the location of the bottom edge of the positioned element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;left&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specify the location of the left edge of the positioned element.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;float&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies whether or not a box should float.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;clear&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies the placement of an element in relation to floating elements.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;z-index&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies a layering or stacking order for positioned elements.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;overflow&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies the treatment of content that overflows the element&amp;rsquo;s box.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;overflow-x&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies how to manage the content when it overflows the width of the element&amp;rsquo;s content area.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;overflow-y&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies how to manage the content when it overflows the height of the element&amp;rsquo;s content area.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;resize&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies whether or not an element is resizable by the user.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;clip&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Defines the clipping region.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;visibility&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specifies whether or not an element is visible.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;cursor&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Specify the type of cursor.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;box-shadow&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Applies one or more drop-shadows to the element&amp;rsquo;s box.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;box-sizing&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Alter the default CSS box model.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;discussion&#34;&gt;Discussion&lt;/h3&gt;
&lt;p&gt;Now that&amp;rsquo;s all we need for CSS, look carefully and you&amp;rsquo;ll find something you like, now let&amp;rsquo;s create some simple but beautiful webpages to emphasize our skills, and get to know how to use css.&lt;/p&gt;
&lt;h3 id=&#34;lets-create-a-login-page&#34;&gt;Let&amp;rsquo;s Create A Login Page&lt;/h3&gt;
&lt;p&gt;Now, Let&amp;rsquo;s Cerate this beautiful Login page And I&amp;rsquo;ll Show you the code and then explain what&amp;rsquo;s going on here, Now considering this, it&amp;rsquo;s not a difficult one to make as it seams. Also you can download the complete project &lt;a href=&#34;https://blog.nushankodikara.com/zip/Sample-site.zip&#34;&gt;HERE&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200718_06.png&#34; alt=&#34;HTML Document&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;html&#34;&gt;HTML&lt;/h4&gt;
&lt;p&gt;First of all, let&amp;rsquo;s see what&amp;rsquo;s in the HTML Section of this code.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;!DOCTYPE html&amp;gt;
  &amp;lt;html&amp;gt;
  
  &amp;lt;head&amp;gt;
      &amp;lt;title&amp;gt;Modern Web Development Tutorial&amp;lt;/title&amp;gt;
      &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;style.css&amp;quot;&amp;gt;
  &amp;lt;/head&amp;gt;
  
  &amp;lt;body&amp;gt;
      &amp;lt;div id=&amp;quot;loginSection&amp;quot;&amp;gt;
          &amp;lt;img src=&amp;quot;avatar.webp&amp;quot; title=&amp;quot;User Image&amp;quot;&amp;gt;
          &amp;lt;h1&amp;gt;Log In&amp;lt;/h1&amp;gt;
          &amp;lt;form&amp;gt;
              &amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;username&amp;quot; name=&amp;quot;username&amp;quot; placeholder=&amp;quot;Username&amp;quot;&amp;gt;
              &amp;lt;input type=&amp;quot;password&amp;quot; id=&amp;quot;password&amp;quot; name=&amp;quot;password&amp;quot; placeholder=&amp;quot;Password&amp;quot;&amp;gt;
              &amp;lt;button&amp;gt;Login&amp;lt;/button&amp;gt;&amp;lt;br&amp;gt;
              &amp;lt;small&amp;gt;By Signing in, You Are agreeing to the terms and conditions&amp;lt;/small&amp;gt;
              &amp;lt;small id=&amp;quot;resetLink&amp;quot;&amp;gt;&amp;lt;a&amp;gt;Reset Password&amp;lt;/a&amp;gt;&amp;lt;/small&amp;gt;
          &amp;lt;/form&amp;gt;
      &amp;lt;/div&amp;gt;
  &amp;lt;/body&amp;gt;
  
  &amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let me explain. Here first I made a div section with the id of loginSection. and in it I placed a image tag, h1 tag, a form with two input fields for username and password, a button to login, A disclaimer note and a link to reset the password. Here, the functionality isn&amp;rsquo;t considered and we are making this functional in the Javascript course. And That&amp;rsquo;s it for HTML.&lt;/p&gt;
&lt;h5 id=&#34;css&#34;&gt;CSS&lt;/h5&gt;
&lt;p&gt;Here Begins the fun part. It&amp;rsquo;s not that hard but you have to remember what you need and use it carefully, let me show you the code base first.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  * {
      font-family: monospace;
  }
  
  body {
      width: 100%;
      margin: 0;
      padding: 0;
      background-image: url(background.jpg);
      background-repeat: no-repeat;
      background-position: center;
      background-size: cover;
  }
  
  #loginSection {
      background-color: rgba(250, 235, 215, 0.6);
      max-width: 250px;
      padding: 20px;
      text-align: center;
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -70%);
      border-radius: 20px;
  }
  
  img {
      width: 180px;
  }
  
  input {
      width: 80%;
      padding: 15px 20px;
      outline: none;
      margin-bottom: 15px;
      border-radius: 500px;
      border: none;
  }
  
  button {
      padding: 15px 30px;
      outline: none;
      border-radius: 500px;
      color: black;
      background-color: GreenYellow;
      border: none;
  }
  
  button:hover {
      background-color: rgb(153, 255, 0);
  }
  
  #resetLink {
      color: cornflowerblue;
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here, Let me explain. first I made a selector called &lt;em&gt;and this is a special selector, which selects everything, means the properties in the&lt;/em&gt; selector can affect every element in the HTML page, here I changed the font family to monospace ( It&amp;rsquo;s my favorite ).&lt;/p&gt;
&lt;p&gt;in then i selected the whole body section of the document with body selector and made it stretch 100% which means from the left side to the right side completely, and removed margin and padding. also added a background image (Here you have to use that url section) and I set that background repeat to no repeat. and I made that background to stay anchored to the center. also made the background size a cover, which means the background covers the whole screen.&lt;/p&gt;
&lt;p&gt;Now loginSection part. Here I selected the login section with the ID I provided, and set it&amp;rsquo;s background color to a pale white with RGB colors and the alpha channel to 0.6 (Transparency). Then fixed it&amp;rsquo;s width to 250px and added a padding of 20px. Aligned it&amp;rsquo;s text to center which makes everything in login section centered. Now I made the position of it fixed which means it doesn&amp;rsquo;t scroll with the window. and it has to be fixed in the center so I made it hang 50% from the top and 50% from the left. Also I have to set a offset to make it to the dead center, I did it by using a transform property, there, I made translate -50% in the X axis and -70% in the Y axis to make it a little bit to the top. Then I rounded it&amp;rsquo;s borders using border-radius property.&lt;/p&gt;
&lt;p&gt;for the avatar image, I just selected img tag and set it&amp;rsquo;s width to 180px and here, when I&amp;rsquo;m not providing the height, It automatically assigns it&amp;rsquo;s height and that&amp;rsquo;s it for the image.&lt;/p&gt;
&lt;p&gt;Then the input boxes, here I only have two input tags and they are username and password so I can just select input tag and It&amp;rsquo;ll apply to both of those, here I made it&amp;rsquo;s width 80% from parent container which is the login section. and added a padding top and bottom of 15px to make it a bit taller and 20px to left and right to make it a bit longer, also I removed it&amp;rsquo;s outline and border, and added a margin to the bottom of 15px and to make it pill shaped, added a border radius of 500px (That&amp;rsquo;s a trick)&lt;/p&gt;
&lt;p&gt;Buttons are the same, I added some padding to 4 sides to make it a bit taller and a bit longer, removed border and outline, made it&amp;rsquo;s text black and background color of greenYellow.&lt;/p&gt;
&lt;p&gt;Then Button:hover section is a special selector, these properties applies when the user hovers the mouse above the button, so I made it to go a bit darker when hovering. and I selected the password reset link with it&amp;rsquo;s ID and added a color of cornflowerblue.&lt;/p&gt;
&lt;p&gt;And That&amp;rsquo;s pretty much it guys, Play with these values to get a feeling for it. and css isn&amp;rsquo;t something that&amp;rsquo;s hard, you just have to get a feeling.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Well well well, here we are at the end of another course, CSS Zero to Hero and this one is a bit different than others, just explanation and an example. Is it enough? yeah, get a feeling to it and you&amp;rsquo;ll flow on css, CSS is not something difficult something for you to think for hours upon hours, play with it for sometime, it&amp;rsquo;s just a styling guide and when you&amp;rsquo;re comfortable with it, You&amp;rsquo;re an artist drawing in a web browser with some codes.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Ultimate Adobe Softwares List With Universal Crack 2020</title>
<link>https://blog.nushankodikara.com/blog/adobe-softwares-ultimate-list-with-crack-2020/</link>
<pubDate>Fri, 17 Jul 2020 15:30:00 +0530</pubDate>
      
      <guid>https://blog.nushankodikara.com/blog/adobe-softwares-ultimate-list-with-crack-2020/</guid>
<description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;We all have used adobe software in some point of our lives and wandered how many others there are to explore. While none of the internet has a proper guide on this topic, I managed to create a complete solution for this case. and I Made a Universal crack for all adobe softwares. If you came for the crack itself.&lt;/p&gt;
&lt;p&gt;Adobe Universal Crack (Windows / Mac) &lt;a href=&#34;https://mega.nz/#!WvAwnAqJ!fH4S2G3L2ZMs0iVgB_iwKYxX5gHNdSZ5rSAZaPhE4mh&#34;&gt;Download&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can crack up-to CC 2020 Adobe softwares from this crack and Rest of us, Let&amp;rsquo;s explore the options.&lt;/p&gt;
&lt;h2 id=&#34;crack-and-how-to-use-it&#34;&gt;Crack And How to use it&lt;/h2&gt;
&lt;p&gt;Let me clarify that AMTEmu by PainteR doesn’t require an Installation. It means it is completely portable and you can just extract it and use it in your pc.&lt;/p&gt;
&lt;p&gt;The file you download from our website is in .zip format so it requires to be extracted using a software like winrar or 7-Zip.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note:
Before extracting make sure to turn off your Windows Defender &amp;amp; other Antivirus until activation completes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://i2.wp.com/official-amtemu.com/wp-content/uploads/2020/01/turn-off-your-Windows-Defender.jpg?resize=768%2C606&amp;amp;ssl=1&#34; alt=&#34;Defender&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now you find the folder where you see the Universal Adobe Patcher. Right-click on the logo and then click on run as administrator.&lt;/p&gt;
&lt;p&gt;It will then launch a new window where you see various options. Don’t touch any of these options only select the product which you want to activate from the Path.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i1.wp.com/official-amtemu.com/wp-content/uploads/2019/05/1-1.jpg?resize=300%2C300&amp;amp;ssl=1&#34; alt=&#34;AMTEmu&#34;&gt;&lt;/p&gt;
&lt;p&gt;In my case, I am trying to activate Photoshop CC 2018 so I will choose Adobe CC 2018 from the menu. After choosing the product just click on the Patch button located right side below.&lt;/p&gt;
&lt;p&gt;You will then see an Error message saying, &lt;strong&gt;“Cannot Find The File&lt;/strong&gt;. Search The File?”. Just click on Ok and you will then see a new window appears.&lt;/p&gt;
&lt;p&gt;All you need to do is choose &lt;strong&gt;My Computer &amp;gt; Local Disk (C) &amp;gt; Program Files &amp;gt; Adobe&lt;/strong&gt;. In this folder look for the amtb.dll and select it then click on Open. (For x64 users who use x32 version, just follow this patch &lt;strong&gt;My Computer &amp;gt; Local Disk (C) &amp;gt; Program Files (32bit) &amp;gt; Adobe&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i2.wp.com/official-amtemu.com/wp-content/uploads/2019/05/2-1.jpg?resize=300%2C221&amp;amp;ssl=1&#34; alt=&#34;TheFile&#34;&gt;&lt;/p&gt;
&lt;p&gt;That’s it you will see the Patched Successfully Message in the AMTEmu screen. Now just close the activator and turn on Antivirus (if you are using any).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i0.wp.com/official-amtemu.com/wp-content/uploads/2019/05/3-1.jpg?resize=294%2C300&amp;amp;ssl=1&#34; alt=&#34;Done&#34;&gt;&lt;/p&gt;
&lt;p&gt;After that restart your computer and when your PC reboots just open the Adobe Photoshop (or any product which you patched). Here you will see there is no option for the activation or countdown for the expiration of the trial.&lt;/p&gt;
&lt;p&gt;Now you can use it for the rest of life without getting please activate notification from Adobe. This is the permanent solution to keep enjoying and using the best features of Photoshop or other products. You can activate any product by following the same steps above there could be a change of name but the steps are still the same.&lt;/p&gt;
&lt;p&gt;Now That out to the way, Let&amp;rsquo;s Explore Every Adobe software in the town.&lt;/p&gt;
&lt;h2 id=&#34;all-adobe-software&#34;&gt;All Adobe Software&lt;/h2&gt;
&lt;p&gt;Disclaimer: There are more than 50!&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Name&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Logo&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Photoshop&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/AdobeLogos/Photoshop.png&#34; alt=&#34;Photoshop&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Adobe Photoshop is a raster graphics editor developed and published by Adobe Inc. for Windows and macOS. It was originally created in 1988 by Thomas and John Knoll. Since then, the software has become the industry standard not only in raster graphics editing, but in digital art as a whole.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Photoshop Elements&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/AdobeLogos/PhotoshopElements.png&#34; alt=&#34;Photoshop Elements&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Adobe Photoshop is a graphics editor for photographers, image editors and hobbyists. It contains most of the features of the professional version but with fewer and simpler options. The program allows users to create, edit, organize and share images. It is a successor of Adobe Photoshop.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Photoshop Express&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/AdobeLogos/PhotoshopExpress.png&#34; alt=&#34;Photoshop Express&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Adobe Photoshop Express is a free image editing and collage making mobile application from Adobe Systems Pvt. Ltd. The app is available on iOS, Android and Windows phones and tablets. It can also be installed on Windows desktop with Windows 8 and above, via the Microsoft Store.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Illustrator&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/AdobeLogos/Ilustrator.png&#34; alt=&#34;Ilustrator&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Adobe Illustrator is a vector graphics editor developed and marketed by Adobe Inc. Originally designed for the Apple Macintosh, development of Adobe Illustrator began in 1985. Along with Creative Cloud, Illustrator CC was released.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Illustrator Draw&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/AdobeLogos/IlustratorDraw.png&#34; alt=&#34;Illustrator Draw&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Winner of the Tabby Award for Creation, Design and Editing and PlayStore Editor’s Choice Award! Create vector artwork with image and drawing layers you can send to Adobe Illustrator or to Photoshop In The mobile category&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Lightroom&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/AdobeLogos/Lightroom.png&#34; alt=&#34;Lightroom&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Adobe Lightroom is a family of image organization and image manipulation software developed by Adobe Systems for Windows, macOS, iOS, Android, and tvOS. It allows importing/saving, viewing, organizing, tagging, editing, and sharing large numbers of digital images.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Lightroom for mobile&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/AdobeLogos/Lightroomformobile.png&#34; alt=&#34;Lightroom for mobile&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Lightroom for mobile and tablets is a free app that gives you a powerful, yet simple solution for capturing, editing and sharing your photos. And you can upgrade for premium features that give you precise control with seamless access across all your devices – mobile, desktop and web&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Premier Pro&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/AdobeLogos/PremierPro.png&#34; alt=&#34;Premier Pro&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Adobe Premiere Pro is a timeline-based video editing software application developed by Adobe Systems and published as part of the Adobe Creative Cloud licensing program. First launched in 2003, Adobe Premiere Pro is a successor of Adobe Premiere.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Premier Elements&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/AdobeLogos/PremiereElements.png&#34; alt=&#34;Premier Elements&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Adobe Premiere Elements is a video editing software application published by Adobe Systems. It is a scaled-down version of Adobe Premiere Pro and is tailored to novice editors and consumers. The entry screen offers clip organization, editing and auto-movie generation options.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Premiere Clip&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/AdobeLogos/PremiereClip.png&#34; alt=&#34;Premiere Clip&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Adobe Premiere Clip gives you the chance to experience professional video editing on your phone. Compared to other Adobe video editing software that we are used to using on desktop computers, this multimedia app has a simpler interface that allows users to explore its functions without having problems with accessibility, given that a phone screen has a smaller and more limited space to fit everything. Adobe Premiere Clip’s user-friendly interface also makes it easy for beginners to enjoy using it.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Adobe Premiere Rush&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/AdobeLogos/AdobePremiereRush.png&#34; alt=&#34;Adobe Premiere Rush&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Shoot, edit, and share online videos anywhere. Feed your channels a steady stream of awesome with Adobe Premiere Rush, the all-in-one, cross-device video editor. Powerful tools let you quickly create videos that look and sound professional and just the way you want. Share to your favorite social sites right from the app and work across all your devices. Use it free as long as you want with unlimited exports — or upgrade for access to all premium features and hundreds of titles, overlays, and animated graphics.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Indesign&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/AdobeLogos/Indesign.png&#34; alt=&#34;Indesign&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Adobe InDesign is a desktop publishing and typesetting software application produced by Adobe Systems. It can be used to create works such as posters, flyers, brochures, magazines, newspapers, presentations, books and ebooks.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Incopy&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/AdobeLogos/Incopy.png&#34; alt=&#34;Incopy&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Adobe InCopy is a professional word processor made by Adobe Inc.. It integrates with Adobe InDesign. While InDesign is used to publish printed material, including newspapers and magazines, InCopy is used for general word processing. The software enables editors to write, edit, and design documents.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Bridge&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/AdobeLogos/Bridge.png&#34; alt=&#34;Bridge&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Adobe Bridge is a free digital asset management app made by Adobe Systems and first released with Adobe Creative Suite 2. It is a mandatory component of Adobe Creative Suite, Adobe eLearning Suite, Adobe Technical Communication Suite and Adobe Photoshop CS2 through CS6.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;After Effects&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/AdobeLogos/AfterEffects.png&#34; alt=&#34;After Effects&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Adobe After Effects is a digital visual effects, motion graphics, and compositing application developed by Adobe Systems and used in the post-production process of film making, video games and television production. Among other things, After Effects can be used for keying, tracking, compositing, and animation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Media Encoder&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/AdobeLogos/MediaEncoder.png&#34; alt=&#34;Media Encoder&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Create optimized video for any screen size and resolution with Adobe Media Encoder. Available only in Adobe Creative Cloud.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Prelude&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/AdobeLogos/Prelude.png&#34; alt=&#34;Prelude&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Adobe Prelude is an ingest and logging tool for tagging media with metadata for searching, post-production workflows, and footage lifecycle management. Adobe Prelude is also made to work closely with Adobe Premiere Pro.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Audition&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/AdobeLogos/Audition.png&#34; alt=&#34;Audition&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Adobe Audition, formerly Cool Edit Pro, is a digital audio workstation from Adobe Systems featuring both a multitrack, non-destructive mix/edit environment and a destructive-approach waveform editing view.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Flash Professional&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/AdobeLogos/FlashProfessional.png&#34; alt=&#34;Flash Professional&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Adobe Flash is a deprecated multimedia software platform used for production of animations, rich Internet applications, desktop applications, mobile applications, mobile games and embedded web browser video players. Flash displays text, vector graphics and raster graphics to provide animations, video games and applications. It allows streaming of audio and video, and can capture mouse, keyboard, microphone and camera input. Related development platform Adobe AIR continues to be supported.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Flash Builder&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/AdobeLogos/FlashBuilder.png&#34; alt=&#34;Flash Builder&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Adobe Flash Builder is an integrated development environment built on the Eclipse platform that speeds development of rich Internet applications and cross-platform desktop applications, particularly for the Adobe AIR platform. Adobe Flash Builder 4 is available in two editions: Standard and Premium.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Scout&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/AdobeLogos/Scout.png&#34; alt=&#34;Scout&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Adobe Scout is a visual profiler for Adobe Flash content running on desktop or mobile platforms, and works together with Adobe Flash Player and Adobe AIR.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Animate&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/AdobeLogos/Animate.png&#34; alt=&#34;Animate&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Adobe Animate is a multimedia authoring and computer animation program developed by Adobe Systems. Animate is used to design vector graphics and animation for television programs, online video, websites, web applications, rich internet applications, and video games.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Air&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/AdobeLogos/Air.png&#34; alt=&#34;Air&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Adobe AIR is a cross-platform runtime system developed by Adobe Systems for building desktop applications and mobile applications, programmed using Adobe Animate, ActionScript and optionally Apache Flex.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Character animator&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/AdobeLogos/Characteranimator.png&#34; alt=&#34;Character animator&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Adobe Character Animator is an Emmy-award-winning desktop application software product that combines live motion-capture with a multi-track recording system to control layered 2D puppets drawn in Photoshop or Illustrator.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Dimensions&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/AdobeLogos/Dimensions.png&#34; alt=&#34;Dimensions&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Adobe Dimension is a 3D rendering and design software developed and published by Adobe Systems for macOS and Windows. It started out as Project Felix on March 28, 2017, and became Dimension on October 18, 2017. Unlike other modelling programmes such as SketchUp, models are not created in Dimension.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Fuse&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/AdobeLogos/Fuse.png&#34; alt=&#34;Fuse&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Adobe Fuse CC is a 3D computer graphics software developed by Mixamo that enables users to create 3D characters. Its main novelty is the ability to import and integrate user generated content into the character creator.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;XD&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/AdobeLogos/XD.png&#34; alt=&#34;XD&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Adobe XD is a vector-based user experience design tool for web apps and mobile apps, developed and published by Adobe Inc. It is available for macOS and Windows, although there are versions for iOS and Android to help preview the result of work directly on mobile devices.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Dreamweawer&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/AdobeLogos/Dreamweawer.png&#34; alt=&#34;Dreamweawer&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Adobe Dreamweaver is a proprietary web development tool from Adobe Inc. It was created by Macromedia in 1997 and developed by them until Macromedia was acquired by Adobe Systems in 2005. Adobe Dreamweaver is available for the macOS and Windows operating systems.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Acrobat Reader&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/AdobeLogos/AcrobatReader.png&#34; alt=&#34;Acrobat Reader&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Adobe Acrobat is a family of application software and Web services developed by Adobe Inc. to view, create, manipulate, print and manage files in Portable Document Format. The family comprises Acrobat Reader, Acrobat and Acrobat.com.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Acrobat Pro&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/AdobeLogos/AcrobatPro.png&#34; alt=&#34;Acrobat Pro&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Adobe Acrobat Pro is an optical character recognition (OCR) system. It is used to convert scanned files, PDF files, and image files into editable/searchable documents.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Creative Cloud&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/AdobeLogos/CreativeCloud.png&#34; alt=&#34;Creative Cloud&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Adobe Creative Cloud is a set of applications and services from Adobe Inc. that gives subscribers access to a collection of software used for graphic design, video editing, web development, photography, along with a set of mobile applications and also some optional cloud services.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Stock&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/AdobeLogos/Stock.png&#34; alt=&#34;Stock&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Search Adobe Stock for millions of royalty-free stock images, photos, graphics, vectors, video footage, illustrations, templates, 3d assets, editorial assets and more.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Fonts&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/AdobeLogos/Fonts.png&#34; alt=&#34;Fonts&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Adobe Fonts is an online service which offers a subscription library of high-quality fonts. The fonts may be used directly on websites or synced via Adobe Creative Cloud to applications on the subscriber&amp;rsquo;s computers.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Behance&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/AdobeLogos/Behance.png&#34; alt=&#34;Behance&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Behance is a social media platform owned by Adobe which aims &amp;ldquo;to showcase and discover creative work&amp;rdquo;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Portfolio&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/AdobeLogos/Portfolio.png&#34; alt=&#34;Portfolio&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Quickly and simply build a personalized website to showcase your creative work with Adobe Portfolio. Now included free with any Creative Cloud subscription.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Spark&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/AdobeLogos/Spark.png&#34; alt=&#34;Spark&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Adobe Spark is an integrated suite of media creation applications for mobile and web developed by Adobe Systems. It comprises three separate design apps: Spark Page, Spark Post, and Spark Video.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Coldfusion&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/AdobeLogos/Coldfusion.png&#34; alt=&#34;Coldfusion&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Adobe ColdFusion is a commercial rapid web-application development computing platform created by J. J. Allaire in 1995. ColdFusion was originally designed to make it easier to connect simple HTML pages to a database. By version 2, it became a full platform that included an IDE in addition to a full scripting language.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Capture&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/AdobeLogos/Capture.png&#34; alt=&#34;Capture&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Adobe Capture turns your Android phone/tablet into a creation machine. Imagine looking through your camera to see patterns, vectors, and even fonts. Now imagine turning those visions into design materials to immediately use in Adobe Photoshop, Adobe Illustrator, Adobe Premiere Pro, Adobe Fresco, and more. The power to transform the world around you into creative assets to build your projects is in the palm of your hands today.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Aero&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/AdobeLogos/Aero.png&#34; alt=&#34;Aero&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;New tools for new worlds. Aero is packed full of features that let you craft engaging AR experiences quickly and easily.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Scan&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/AdobeLogos/Scan.png&#34; alt=&#34;Scan&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;The free document scanning app from Adobe turns your device into a powerful portable PDF scanner that recognizes text automatically (OCR). Use this mobile document scanner to turn anything — receipts, notes, documents, photos, business cards, whiteboards — into an Adobe PDF with content you can reuse from each PDF and photo scan.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Experience Cloud&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/AdobeLogos/ExperienceCloud.png&#34; alt=&#34;Experience Cloud&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Adobe Experience Cloud, formerly Adobe Marketing Cloud, is a collection of integrated online marketing and Web analytics products by Adobe Systems.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Marketing Cloud&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/AdobeLogos/MarketingCloud.png&#34; alt=&#34;Marketing Cloud&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Adobe Marketing Cloud, which now includes Marketo Engagement Platform, allows you to manage, personalize, optimize, and orchestrate cross-channel campaigns across B2B and B2C use cases.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Advertising Cloud&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/AdobeLogos/AdvertisingCloud.png&#34; alt=&#34;Advertising Cloud&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Advertising shouldn&amp;rsquo;t be hard. Manage all your media strategies across digital and TV to deliver better ads for every audience.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Analytics Cloud&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/AdobeLogos/AnalyticsCloud.png&#34; alt=&#34;Analytics Cloud&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Adobe Analytics Cloud is a “customer intelligence engine” that empowers businesses to move from insights to actions in real-time by combining audience data across multiple Adobe cloud products. Adobe Analytics Cloud is built on the Adobe Cloud Platform, which offers APIs and Adobe Sensei machine learning technology.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Robohelp&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/AdobeLogos/Robohelp.png&#34; alt=&#34;Robohelp&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Adobe RoboHelp is a help authoring tool developed and published by Adobe Inc. for Windows. RoboHelp was created by Gen Kiyooka, and Blue Sky Software released version 1.0 in January 1992. Blue Sky Software was founded in 1990 and changed its name to eHelp Corporation on 4 April 2000.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Presenter&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/AdobeLogos/Presenter.png&#34; alt=&#34;Presenter&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Adobe Presenter is an eLearning software solution released by Adobe Systems available on the Microsoft Windows platform as a Microsoft PowerPoint plug-in, and on both Windows and OS X as the screencasting and video editing tool Adobe Presenter Video Express.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Captivate&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/AdobeLogos/Captivate.png&#34; alt=&#34;Captivate&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Adobe Captivate is an authoring tool that is used for creating eLearning content such as software demonstrations, software simulations, branched scenarios, and randomized quizzes in Small Web Formats and HTML5 formats.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Framemaker&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/AdobeLogos/Framemaker.png&#34; alt=&#34;Framemaker&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Adobe FrameMaker is a document processor designed for writing and editing large or complex documents, including structured documents. It was originally developed by Frame Technology Corporation, which was bought by Adobe.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;discontinued-adobe-softwares&#34;&gt;Discontinued Adobe Softwares&lt;/h2&gt;
&lt;p&gt;Here are some other awesome but discontinued adobe apps. you can find older versions of these softwares all around the internet.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Name&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Logo&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Speedgrade&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/AdobeLogos/Speedgrade.png&#34; alt=&#34;Speedgrade&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;SpeedGrade is a color grading application that delivers layer-based color correction and look design tools to ensure that digital video projects are visually&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Story Plus&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/AdobeLogos/StoryPlus.png&#34; alt=&#34;Story Plus&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Adobe Story is a discontinued collaborative script development tool from Adobe Systems Inc. It included scheduling tools, allowing schedules to be created from one or many scripts. Adobe Story was tightly integrated with Adobe Creative Cloud.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Muse&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/AdobeLogos/Muse.png&#34; alt=&#34;Muse&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Adobe Muse is a discontinued offline website builder used to create fixed, fluid, or adaptive websites, without the need to write code. It generates static pages, but does not manage hosting.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Fireworks&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/AdobeLogos/Fireworks.png&#34; alt=&#34;Fireworks&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Adobe Fireworks is a discontinued bitmap and vector graphics editor, which Adobe acquired in 2005. Fireworks is made for web designers for rapidly creating website prototypes and application interfaces.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;downloading-and-installing&#34;&gt;Downloading And Installing&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s not hard, you can search in the google or go to &lt;a href=&#34;https://www.adobe.com&#34;&gt;www.adobe.com&lt;/a&gt; and you can get to the main page and download from there. and Remember to download the Trial version and you can use the Cracker above to crack it.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Adobe has a huge software collection and considering overall performances and quality, you should consider using them. And if you can&amp;rsquo;t afford them, Use the crack instead. anyhow you need to have at least 2GBs Of ram and a modern computer and you&amp;rsquo;re golden.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Photoshop Trending Autumn Effect 2020</title>
<link>https://blog.nushankodikara.com/blog/photoshop-trending-autumn-effect-2020/</link>
<pubDate>Fri, 17 Jul 2020 09:00:00 +0530</pubDate>
      
      <guid>https://blog.nushankodikara.com/blog/photoshop-trending-autumn-effect-2020/</guid>
<description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Autumn effect is something now getting in trend on social medias, It&amp;rsquo;s a simple filter but most of the softwares get it wrong and making a messed up look but untrained eye isn&amp;rsquo;t going to notice that until doing some post processing. Here Let&amp;rsquo;s re-create that effect on photoshop so it&amp;rsquo;s more versatile for more adjustments. Here&amp;rsquo;s a before and after photo of me (Not the prettiest one but it worked) with the effect applied&lt;/p&gt;
&lt;p&gt;Before
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200717E_01.JPG&#34; alt=&#34;Nushan Kodikara&#34;&gt;&lt;/p&gt;
&lt;p&gt;After
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200717E_03.JPG&#34; alt=&#34;Nushan Kodikara&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;lets-get-started&#34;&gt;Let&amp;rsquo;s Get Started.&lt;/h3&gt;
&lt;p&gt;First thing&amp;rsquo;s first, import the photo into the photoshop and duplicate the layer so we can work with more confidence.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pe-images.s3.amazonaws.com/photo-editing/cc/tone-and-color/brightness-contrast-adjustment-layer/new-adjustment-layer-icon.gif&#34; alt=&#34;Adjustment layer icon&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now, you have to create an adjustment layer by clicking on the adjustment layer icon&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200717_01.png&#34; alt=&#34;Nushan Kodikara&#34;&gt;&lt;/p&gt;
&lt;p&gt;And creating a channel mixer from that menu and now there should be the channel mixer window with the adjustment layer applied.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200717_02.png&#34; alt=&#34;Nushan Kodikara&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here you have to change some values to create the effect base first. Change values to&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Red   - +95&lt;/li&gt;
&lt;li&gt;Green - +100&lt;/li&gt;
&lt;li&gt;Blue  - -100&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And you&amp;rsquo;ll get something like this.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200717_03.png&#34; alt=&#34;Nushan Kodikara&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200717E_02.JPG&#34; alt=&#34;Nushan Kodikara&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here, It&amp;rsquo;s almost looking perfect, but we can do few more adjustments (Because It&amp;rsquo;s photoshop) to pop up the colors and increase the quality of this photo. First, I&amp;rsquo;m adding a curves adjustment layer by clicking on the adjustment layer icon and selecting curves adjustment layer. Now it&amp;rsquo;s time to play with the curves and get the desired look we&amp;rsquo;re hunting for.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200717_04.png&#34; alt=&#34;Nushan Kodikara&#34;&gt;&lt;/p&gt;
&lt;p&gt;This could be different from photo to photo so you have to do some experiment in order to get something you like, and something the photo desire. But first, I&amp;rsquo;m adding a Brightness/Contrast Adjustment layer to adjust a brightness a bit and here are my values.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200717_05.png&#34; alt=&#34;Nushan Kodikara&#34;&gt;&lt;/p&gt;
&lt;p&gt;My photo has washed out blue colors if you can see, so I&amp;rsquo;m going to add some blues from the Channel mixer I made before. double click on the channel mixer to get the control panel back. And I&amp;rsquo;m tweaking the values of the blue channel and I found It&amp;rsquo;s best to add -112 to the blue channel makes the photo more pleasing to my taste, maybe could get different on yours so experiment with it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200717_06.png&#34; alt=&#34;Nushan Kodikara&#34;&gt;&lt;/p&gt;
&lt;p&gt;And Wolah! Here&amp;rsquo;s the finished photo.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200717E_03.JPG&#34; alt=&#34;Nushan Kodikara&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Well, here you go it&amp;rsquo;s a nice and simple effect most of the users doesn&amp;rsquo;t know about. we can create more stunning looking photos from photoshop than using pre-made color filters so I&amp;rsquo;m preferring this method over others.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Python Ultimate Crash Course (Zero-To-Hero)</title>
<link>https://blog.nushankodikara.com/blog/python-ultimate-crash-course-2020/</link>
<pubDate>Thu, 16 Jul 2020 14:30:00 +0530</pubDate>
      
      <guid>https://blog.nushankodikara.com/blog/python-ultimate-crash-course-2020/</guid>
<description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Python is one of most popular and most powerful and one of the fastest programming languages until now, Millions upon millions developers use python in their projects to script easily. also python is one of the easiest languages to learn and master. But there are some differences between python 2 and 3, and most beginners get confused and leave python because they can&amp;rsquo;t understand how these work. So let&amp;rsquo;s begin with python 2 and 3 at the same time shall we?&lt;/p&gt;
&lt;h2 id=&#34;environment&#34;&gt;Environment&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m using &lt;a href=&#34;https://blog.nushankodikara.com/post/vs-code-for-web-developers/&#34;&gt;Visual Studio Code&lt;/a&gt; as my code editor. Windows, Mac and linux users can download and install python from the main website &lt;a href=&#34;https://www.python.org/&#34;&gt;Here&lt;/a&gt;. And if you&amp;rsquo;re just going to try it, you can use these Online terminals for &lt;a href=&#34;https://www.tutorialspoint.com/execute_python_online.php&#34;&gt;Python 2&lt;/a&gt; and for &lt;a href=&#34;https://www.tutorialspoint.com/execute_python3_online.php&#34;&gt;Python 3&lt;/a&gt;. Follow the installer guide and don&amp;rsquo;t forget to add python to the path (Setup would do it for you). If everything goes according to the plan, you can see wether it&amp;rsquo;s installed or not by typing&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  python -v
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;To a terminal window, or windows Powershell or windows CMD and you&amp;rsquo;ll be greeted with bunch of version numbers. If it pops up errors, try adding python path.&lt;/p&gt;
&lt;h2 id=&#34;zero&#34;&gt;Zero&lt;/h2&gt;
&lt;p&gt;Here, we&amp;rsquo;re starting and continuing with the terminal, GUI programming is something else in python so, Don&amp;rsquo;t expect anything GUI related in the beginning. But I&amp;rsquo;ll provide you a GUI Tutorial in the future.&lt;/p&gt;
&lt;h3 id=&#34;folder-structure&#34;&gt;Folder Structure&lt;/h3&gt;
&lt;p&gt;Now, let&amp;rsquo;s begin with the Python Document. you have to create a file with .py extension, so it&amp;rsquo;ll be Identified as a python script. If you are using VS Code, just save it as a python file.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200714_01.png&#34; alt=&#34;Python VSCode&#34;&gt;&lt;/p&gt;
&lt;p&gt;And you&amp;rsquo;re ready with the file.&lt;/p&gt;
&lt;h3 id=&#34;basic-syntax&#34;&gt;Basic Syntax&lt;/h3&gt;
&lt;p&gt;Here begins the differences of python 2 and 3. Let&amp;rsquo;s print a hello world phrase to the terminal. In python 2&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  print &amp;quot;Hello World!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Python 3&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  print(&amp;quot;Hello World!&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;write this line in your document and save it. Now you can use a terminal and type&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  python &amp;lt;file-path&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;To run the python script.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200714_02.png&#34; alt=&#34;Python VSCode&#34;&gt;&lt;/p&gt;
&lt;p&gt;or simply if you&amp;rsquo;re using VS Code like me, give the key combination&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  Ctrl + Shift + `
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;to get the terminal window and enter&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  python &amp;lt;filename&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;to Run the file.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200714_03.png&#34; alt=&#34;Python VSCode&#34;&gt;&lt;/p&gt;
&lt;p&gt;You should see the Hello world printed to the terminal! Now we can explore what we can do with python as a programming language.&lt;/p&gt;
&lt;h3 id=&#34;python-identifiers&#34;&gt;Python Identifiers&lt;/h3&gt;
&lt;p&gt;Identifiers are names, that used to identify classes variables functions module or other objects. Identifiers must start with a-z or A-Z and can be continued with characters, underscores and numbers. Python does not allow punctuation characters such as @, $, and % within identifiers. And also python is case sensitive, which means it watches for capital and simple letters and &amp;lsquo;a&amp;rsquo; is not the same as &amp;lsquo;A&amp;rsquo;.&lt;/p&gt;
&lt;p&gt;Here are naming conventions for Python identifiers −&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Class names start with an uppercase letter. All other identifiers start with a lowercase letter.&lt;/li&gt;
&lt;li&gt;Starting an identifier with a single leading underscore indicates that the identifier is private.&lt;/li&gt;
&lt;li&gt;Starting an identifier with two leading underscores indicates a strongly private identifier.&lt;/li&gt;
&lt;li&gt;If the identifier also ends with two trailing underscores, the identifier is a language-defined special name.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;reserved-words&#34;&gt;Reserved Words&lt;/h3&gt;
&lt;p&gt;These words are literally python keywords so you can&amp;rsquo;t use these as Identifiers, you&amp;rsquo;ll get in trouble if you did so, so keep these noticed&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;========&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;========&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;========&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;and&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;exec&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;not&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;assert&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;finally&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;or&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;break&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;for&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;pass&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;class&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;from&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;print&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;continue&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;global&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;raise&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;def&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;if&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;return&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;del&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;import&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;try&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;elif&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;in&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;while&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;else&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;is&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;with&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;except&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;lambda&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;yield&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;lines-and-indentation&#34;&gt;Lines and Indentation&lt;/h3&gt;
&lt;p&gt;Now this is something, you have to keep in your mind. python is different from other languages because of several reasons and here, It doesn&amp;rsquo;t has any braces at all, so white spacing is compulsory! Let&amp;rsquo;s check an example, Don&amp;rsquo;t consider the codes, I&amp;rsquo;ll explain them later.&lt;/p&gt;
&lt;p&gt;Python 2&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  if True:
      print &amp;quot;Hello World&amp;quot;
  else:
      print &amp;quot;Noo World&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Python 3&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  if True:
      print (&amp;quot;Hello World&amp;quot;)
  else:
      print (&amp;quot;Noo World&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;But this would show you an error because it doesn&amp;rsquo;t have proper white spaces.&lt;/p&gt;
&lt;p&gt;Python 2&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  if True:
  print &amp;quot;Hello World&amp;quot;
  else:
  print &amp;quot;Noo World&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;multi-line-statements&#34;&gt;Multi-Line Statements&lt;/h3&gt;
&lt;p&gt;Statements in python ends with a new line, how ever there are some multiline statements, a hand full of them to try out. The line continuation character () would make a statement multiline as this. ( Examples are only for reference, we&amp;rsquo;ll discuss everything later. )&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  total = item_one + \
          item_two + \
          item_three
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Statements withing [],{} or () doesn&amp;rsquo;t need the line continuation character.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  classes = [ &amp;quot;12a&amp;quot;, &amp;quot;13b&amp;quot;,
              &amp;quot;5a&amp;quot;, &amp;quot;6a&amp;quot;,
              &amp;quot;7a&amp;quot;, &amp;quot;8a&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;quotation-in-python&#34;&gt;Quotation in Python&lt;/h3&gt;
&lt;p&gt;Python can identify single(&amp;rsquo;) double (&amp;quot;) or triple (&amp;rsquo;&amp;rsquo;&amp;rsquo; or &amp;ldquo;&amp;rdquo;&amp;quot;) quotations to denote string literals, as long as it starts and ends, you&amp;rsquo;re good to go. The triple quotation can be used to denote multiline strings.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  a = &#39;string here&#39;

  b = &amp;quot;Another string here&amp;quot;

  c = &#39;&#39;&#39; Do you guys
          have strings? &#39;&#39;&#39;

  d = &amp;quot;&amp;quot;&amp;quot; Multiline Without
          any escape characters &amp;quot;&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;comments-in-python&#34;&gt;Comments in Python&lt;/h3&gt;
&lt;p&gt;Comments are important to give hints about your program to future you, because no one can keep a thousand line codebase on their heads, and humans are designed to forget everything withing few days. Comments in python starts with a ## sign and can be placed in a new line or after a statement&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  ## This is a comment
  variable = &amp;quot;bla bla bla&amp;quot; ## This is a comment
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;and for multiline comments, you can also use the triple quotation technique but only in new lines.&lt;/p&gt;
&lt;p&gt;python 2&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  print &amp;quot;hello&amp;quot;
  &#39;&#39;&#39;
  This is a comment
  &#39;&#39;&#39;
  print &amp;quot;comment ends&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;python 3&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  print (&amp;quot;hello&amp;quot;)
  &#39;&#39;&#39;
  This is a comment
  &#39;&#39;&#39;
  print (&amp;quot;comment ends&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;using-blank-lines&#34;&gt;Using Blank Lines&lt;/h3&gt;
&lt;p&gt;You&amp;rsquo;re free to use blank line as much as you want. But you can&amp;rsquo;t use blank lines inside objects classes or functions, It&amp;rsquo;ll make a mess, so  trust me. Use blank lines for good.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s begin some actual codings.&lt;/p&gt;
&lt;h3 id=&#34;waiting-for-the-user&#34;&gt;Waiting for the user&lt;/h3&gt;
&lt;p&gt;In a certain point, we all have to take an input from the user. in python console, it&amp;rsquo;s simple as this. This is not a &amp;ldquo;String&amp;rdquo; input, but this is more like a &amp;ldquo;Press enter to continue&amp;rdquo; input.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  raw_input(&amp;quot;\n\nPress the enter key to exit.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;multiple-statements-on-a-single-line&#34;&gt;Multiple Statements on a Single Line&lt;/h3&gt;
&lt;p&gt;We can use a semi-colone (;) to add multiple statements to a single line&lt;/p&gt;
&lt;p&gt;python 2&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  x = &amp;quot;hello&amp;quot;; y = &amp;quot;world&amp;quot;; print x + y
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;python 3&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  x = &amp;quot;hello&amp;quot;; y = &amp;quot;world&amp;quot;; print (x + y)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;multiple-statement-groups-as-suites&#34;&gt;Multiple Statement Groups as Suites&lt;/h3&gt;
&lt;p&gt;Here, it&amp;rsquo;s more like the curly braces of other languages, we call them suites here, the mechanic is the same so you won&amp;rsquo;t be bothered that much.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  if expression : 
         suite
  elif expression : 
         suite 
  else : 
         suite
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;if you aren&amp;rsquo;t comfortable with these for now, be cool you&amp;rsquo;ll understand later in this series. Let&amp;rsquo;s start with assigning variables.&lt;/p&gt;
&lt;h3 id=&#34;assigning-values-to-variables&#34;&gt;Assigning Values to Variables&lt;/h3&gt;
&lt;p&gt;This is why python is one of my favorite programming languages, it does it&amp;rsquo;s basic work, it self. so considering variables, python is automatically assigning it&amp;rsquo;s variable types (explicit declaration), to reserve memory for that variable, so you can assign variables as this. Continue with the examples from now on.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  a = &amp;quot;Hello World&amp;quot;   ## This is a string
  b = 15              ## This is an integer
  c = 15.23           ## This is a float
  d = true            ## This is a boolean
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;you can check them using,&lt;/p&gt;
&lt;p&gt;Python 2&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  print a
  print b
  print c
  print d
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Python 3&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  print (a)
  print (b)
  print (c)
  print (d)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;And there&amp;rsquo;s a way to assign multiple variables in python, at once. I can assign value of 1 (integer) to all a, b, and c using&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  a = b = c = 1
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;and you can use the print statements above to check again.&lt;/p&gt;
&lt;h3 id=&#34;standard-data-types&#34;&gt;Standard Data Types&lt;/h3&gt;
&lt;p&gt;This is an important topic to understand, here I&amp;rsquo;m explaining what kind of data types you have to work with, programming languages are all the same so it won&amp;rsquo;t be hard if you&amp;rsquo;re coming from a &amp;ldquo;Background&amp;rdquo;, I&amp;rsquo;m explaining for everyone, so don&amp;rsquo;t panic.&lt;/p&gt;
&lt;p&gt;Standard Data Types And What They Are&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Data Type&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Examples&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Numbers&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;These are Integers. Whole numbers in common.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1, 2, 3, 5, 10, 100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;String&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;These are paragraphs and they should contain within quotations.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;ldquo;This is a string&amp;rdquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;List&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Lists are a collection of strings, numbers or any other data types and they contain within square brackets, It&amp;rsquo;s also the most versatile data Type&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;[&amp;ldquo;Hello&amp;rdquo;,&amp;ldquo;World&amp;rdquo;,&amp;ldquo;15&amp;rdquo;,35]&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Tuple&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;These are exactly like lists but starts and ends with normal brackets. And Tuples can&amp;rsquo;t be updated, which means they are constants.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(&amp;ldquo;Hello&amp;rdquo;,&amp;ldquo;World&amp;rdquo;,&amp;ldquo;15&amp;rdquo;,35)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Dictionary&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This is one of my favorites. Dictionaries consists of keys and values, which we can index in a way and return their data in another way.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;{&amp;rsquo;name&amp;rsquo;: &amp;lsquo;john&amp;rsquo;,&amp;lsquo;ID&amp;rsquo;:6734, &amp;lsquo;salary&amp;rsquo;: &amp;lsquo;500&amp;rsquo;}&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Now Let&amp;rsquo;s Explore Data types One by one&lt;/p&gt;
&lt;h3 id=&#34;python-strings&#34;&gt;Python Strings&lt;/h3&gt;
&lt;p&gt;Just paragraphs. and that&amp;rsquo;s all for the definition. There are string operators, which can be used to process strings in python. You can multiply, add another string to a string and slice. Run this example and see for your self&lt;/p&gt;
&lt;p&gt;python 2&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  str = &amp;quot;Hello World&amp;quot;
  print str           ## Prints Whole String
  print str*3         ## Prints the string Three Times
  print str + &amp;quot;WW&amp;quot;    ## Print the modified string
  print str[0]        ## Prints the first character
  print str[2:7]      ## Prints characters from 3rd to 7th
  print str[2:]       ## Prints characters from 3 onwards
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;python 3&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  str = &amp;quot;Hello World&amp;quot;
  print (str)           ## Prints Whole String
  print (str*3)         ## Prints the string Three Times
  print (str + &amp;quot;WW&amp;quot;)    ## Print the modified string
  print (str[0])        ## Prints the first character
  print (str[2:7])      ## Prints characters from 3rd to 7th
  print (str[2:])       ## Prints characters from 3 onwards
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;python-numbers&#34;&gt;Python Numbers&lt;/h3&gt;
&lt;p&gt;We&amp;rsquo;ll discuss basic operators later, for now, these are the types of numbers you have to work with&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;int&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;long&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;float&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;complex&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;10&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;51924361L&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0.0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3.14j&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;100&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-0x19323L&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;15.20&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;45.j&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-786&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0122L&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-21.9&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;9.322e-36j&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;080&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0xDEFABCECBDAECBFBAEl&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;32.3+e18&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;.876j&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-0490&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;535633629843L&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-90.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-.6545+0J&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-0x260&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-052318172735L&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-32.54e100&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3e+26J&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0x69&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-4721885298529L&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;70.2-E12&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4.53e-7j&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;Python allows you to use a lowercase l with long, but it is recommended that you use only an uppercase L to avoid confusion with the number 1. Python displays long integers with an uppercase L.&lt;/li&gt;
&lt;li&gt;A complex number consists of an ordered pair of real floating-point numbers denoted by x + yj, where x and y are the real numbers and j is the imaginary unit.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;python-lists&#34;&gt;Python Lists&lt;/h3&gt;
&lt;p&gt;These are versatile and you can use these to store a list of other data types as it is a &amp;ldquo;list&amp;rdquo;. now let&amp;rsquo;s define a list&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  lista = [&amp;quot;This is a list&amp;quot;, 56, &amp;quot;Hello There&amp;quot;, 98, 2.56]
  listb = [&amp;quot;Another String&amp;quot;, 56.56]
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now let&amp;rsquo;s do some list operations&lt;/p&gt;
&lt;p&gt;Python 2&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  print lista*2           ## Prints out the list 2 times
  print lista + listb     ## Prints out lista and listb as a single list
  print lista[0]          ## Prints the first item in the list
  print lista[0:3]        ## Prints from first item to the third item
  print lista[1:]         ## Prints from 2nd item onwards
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Python 3&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  print (lista*2)           ## Prints out the list 2 times
  print (lista + listb)     ## Prints out lista and listb as a single list
  print (lista[0])          ## Prints the first item in the list
  print (lista[0:3])        ## Prints from first item to the third item
  print (lista[1:])         ## Prints from 2nd item onwards
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Also you can change certain items in lists as this&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  lista[0] = &amp;quot;Something Else&amp;quot;
  print lista                ## For Python 2
  print (lista)              ## For Python 3
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;python-tuples&#34;&gt;Python Tuples&lt;/h3&gt;
&lt;p&gt;These are also lists but they can&amp;rsquo;t be changed in the future&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  tuplea = [&amp;quot;This is a tuple&amp;quot;, 56, &amp;quot;Hello There&amp;quot;, 98, 2.56]
  tupleb = [&amp;quot;Another String&amp;quot;, 56.56]
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now let&amp;rsquo;s do some Tuple operations&lt;/p&gt;
&lt;p&gt;Python 2&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  print tuplea*2           ## Prints out the tuple 2 times
  print tuplea + tupleb     ## Prints out tuplea and tupleb as a single tuple
  print tuplea[0]          ## Prints the first item in the tuple
  print tuplea[0:3]        ## Prints from first item to the third item
  print tuplea[1:]         ## Prints from 2nd item onwards
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Python 3&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  print (tuplea*2)           ## Prints out the tuple 2 times
  print (tuplea + tupleb)     ## Prints out tuplea and tupleb as a single tuple
  print (tuplea[0])          ## Prints the first item in the tuple
  print (tuplea[0:3])        ## Prints from first item to the third item
  print (tuplea[1:])         ## Prints from 2nd item onwards
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;And That&amp;rsquo;s all for Tuples. Now To the final data type, Dictionaries&lt;/p&gt;
&lt;h3 id=&#34;python-dictionary&#34;&gt;Python Dictionary&lt;/h3&gt;
&lt;p&gt;Dictionaries are defined using curly braces {} and you can add items in the beginning or later. Remember dictionaries are using key, value pairs to define entries in it. for an example, a Phone book. Let&amp;rsquo;s make a simple phonebook here.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  phonebook = {}
  phonebook[&amp;quot;Jhon&amp;quot;] = &amp;quot;0712345678&amp;quot;
  phonebook[&amp;quot;Doce&amp;quot;] = &amp;quot;0712345679&amp;quot;
  phonebook[&amp;quot;Anna&amp;quot;] = &amp;quot;0712345680&amp;quot;
  
  anotherPhonebook = {&amp;quot;Bella&amp;quot;:&amp;quot;0721234567&amp;quot;,&amp;quot;Becky&amp;quot;:&amp;quot;0721234568&amp;quot;,&amp;quot;Bola&amp;quot;:&amp;quot;0721234569&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now, Defining out to the way, you can use some simple operators to process these phone books. (Dictionaries)
Let&amp;rsquo;s Combine, get values by name, get names, and get numbers from this phonebook.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  bigPhonebook = phonebook + anotherPhonebook     ## Combines Phonebooks to a big one
  print phonebook[&amp;quot;Jhon&amp;quot;]                         ## Prints the number of Jhon
  print phonebook                                 ## Prints the whole phonebook
  print phonebook.keys()                          ## Prints all of the names
  print phonebook.values()                        ## Prints all of the numbers
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;data-type-conversion&#34;&gt;Data Type Conversion&lt;/h3&gt;
&lt;p&gt;There are certain times when you have to convert data to another type, for an example let&amp;rsquo;s consider the string &amp;ldquo;180&amp;rdquo;, And we want to convert this to integers. so we can use a simple function and convert it to 180. Now look carefully, &amp;ldquo;180&amp;rdquo; is a string and not a number, because it has quotations around it. Let&amp;rsquo;s explore a bit.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Sr.No.&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Function&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;int(x [,base])&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Converts x to an integer. base specifies the base if x is a string.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;long(x [,base] )&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Converts x to a long integer. base specifies the base if x is a string.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;float(x)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Converts x to a floating-point number.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;complex(real [,imag])&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Creates a complex number.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;str(x)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Converts object x to a string representation.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;6&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;repr(x)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Converts object x to an expression string.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;7&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;eval(str)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Evaluates a string and returns an object.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;8&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;tuple(s)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Converts s to a tuple.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;9&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;list(s)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Converts s to a list.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;set(s)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Converts s to a set.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;11&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;dict(d)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Creates a dictionary. d must be a sequence of (key,value) tuples.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;12&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;frozenset(s)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Converts s to a frozen set.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;13&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;chr(x)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Converts an integer to a character.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;14&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;unichr(x)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Converts an integer to a Unicode character.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;15&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;ord(x)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Converts a single character to its integer value.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;16&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;hex(x)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Converts an integer to a hexadecimal string.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;17&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;oct(x)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Converts an integer to an octal string.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;plug the value to x and you can use the function anywhere you want. I&amp;rsquo;ll give you a single example on how to do this,&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  a = &amp;quot;150&amp;quot;
  b = int(a)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Python 2&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  print a*2
  print b*2
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Python 3&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  print (a*2)
  print (b*2)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Figure out what happened here.&lt;/p&gt;
&lt;h3 id=&#34;basic-operators&#34;&gt;Basic Operators&lt;/h3&gt;
&lt;p&gt;Now, We&amp;rsquo;re in to the arithmetic part of our journey. But not only the arithmetics, Types of Operators in
Python are categorized as below.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Arithmetic Operators&lt;/li&gt;
&lt;li&gt;Comparison (Relational) Operators&lt;/li&gt;
&lt;li&gt;Assignment Operators&lt;/li&gt;
&lt;li&gt;Logical Operators&lt;/li&gt;
&lt;li&gt;Bitwise Operators&lt;/li&gt;
&lt;li&gt;Membership Operators&lt;/li&gt;
&lt;li&gt;Identity Operators&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;rsquo;s Explore one by one, I&amp;rsquo;ll provide you everything with brief explanations, We&amp;rsquo;ll dig deeper into these late. Also these are self explanatory.&lt;/p&gt;
&lt;h5 id=&#34;python-arithmetic-operators&#34;&gt;Python Arithmetic Operators&lt;/h5&gt;
&lt;p&gt;These are the operators we use to preform arithmetic calculations.&lt;/p&gt;
&lt;p&gt;Assume variable a holds 10 and variable b holds 20, then&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Operator&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;+ Addition&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Adds values on either side of the operator.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;a + b = 30&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;- Subtraction&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Subtracts right hand operand from left hand operand.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;a – b = -10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;* Multiplication&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Multiplies values on either side of the operator&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;a * b = 200&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;/ Division&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Divides left hand operand by right hand operand&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;b / a = 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;% Modulus&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Divides left hand operand by right hand operand and returns remainder&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;b % a = 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;**&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Exponent	Performs exponential (power) calculation on operators&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;a**b =10 to the power 20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;//&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Floor Division - The division of operands where the result is the quotient in which the digits after the decimal point are removed. But if one of the operands is negative, the result is floored, i.e., rounded away from zero (towards negative infinity)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;9//2 = 4 and 9.0//2.0=4.0, -11//3=-4, -11.0//3=-4.0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;python-comparison-operators&#34;&gt;Python Comparison Operators&lt;/h5&gt;
&lt;p&gt;we use comparison for our logical expressions.&lt;/p&gt;
&lt;p&gt;Assume variable a holds 10 and variable b holds 20, then&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Operator&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;==&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;If the values of two operands are equal, then the condition becomes true.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(a == b) is not true.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;!=&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;If values of two operands are not equal, then condition becomes true.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(a != b) is true.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;lt;&amp;gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;If values of two operands are not equal, then condition becomes true.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(a &amp;lt;&amp;gt; b) is true. This is similar to != operator.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;If the value of left operand is greater than the value of right operand, then condition becomes true.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(a &amp;gt; b) is not true.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;lt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;If the value of left operand is less than the value of right operand, then condition becomes true.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(a &amp;lt; b) is true.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;gt;=&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;If the value of left operand is greater than or equal to the value of right operand, then condition becomes true.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(a &amp;gt;= b) is not true.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;lt;=&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;If the value of left operand is less than or equal to the value of right operand, then condition becomes true.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(a &amp;lt;= b) is true.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;For an example, we can use on of these in a IF statement ( Just for examples )&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  a = &amp;quot;cat&amp;quot;
  b = &amp;quot;cat&amp;quot;
  if (a == b):
      print(a)
  else:
      print(b)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;python-assignment-operators&#34;&gt;Python Assignment Operators&lt;/h5&gt;
&lt;p&gt;These are for assigning variables&lt;/p&gt;
&lt;p&gt;Assume variable a holds 10 and variable b holds 20, then&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Operator&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;=&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Assigns values from right side operands to left side operand&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;c = a + b assigns value of a + b into c&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;+=&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Add AND	It adds right operand to the left operand and assign the result to left operand&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;c += a is equivalent to c = c + a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-=&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Subtract AND	It subtracts right operand from the left operand and assign the result to left operand&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;c -= a is equivalent to c = c - a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;*=&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Multiply AND	It multiplies right operand with the left operand and assign the result to left operand&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;c *= a is equivalent to c = c * a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;/=&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Divide AND	It divides left operand with the right operand and assign the result to left operand&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;c /= a is equivalent to c = c / a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;%=&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Modulus AND	It takes modulus using two operands and assign the result to left operand&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;c %= a is equivalent to c = c % a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;**=&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Exponent AND	Performs exponential (power) calculation on operators and assign value to the left operand&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;c **= a is equivalent to c = c ** a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;//=&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Floor Division	It performs floor division on operators and assign value to the left operand&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;c //= a is equivalent to c = c // a&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;python-bitwise-operators&#34;&gt;Python Bitwise Operators&lt;/h5&gt;
&lt;p&gt;Bitwise operator works on bits and performs bit by bit operation. Assume if a = 60 and b = 13 Now in the binary format their values will be 0011 1100 and 0000 1101 respectively.&lt;/p&gt;
&lt;p&gt;a = 0011 1100&lt;/p&gt;
&lt;p&gt;b = 0000 1101&lt;/p&gt;
&lt;p&gt;a&amp;amp;b = 0000 1100&lt;/p&gt;
&lt;p&gt;a|b = 0011 1101&lt;/p&gt;
&lt;p&gt;a^b = 0011 0001&lt;/p&gt;
&lt;p&gt;~a  = 1100 0011&lt;/p&gt;
&lt;p&gt;What the f happened here? It&amp;rsquo;s BITWISE. let&amp;rsquo;s explore&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Operator&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;amp;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Binary AND	Operator copies a bit to the result if it exists in both operands&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(a &amp;amp; b) (means 0000 1100)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;|&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Binary OR	It copies a bit if it exists in either operand.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(a | b) = 61 (means 0011 1101)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;^&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Binary XOR	It copies the bit if it is set in one operand but not both.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(a ^ b) = 49 (means 0011 0001)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;~&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Binary Ones Complement	It is unary and has the effect of &amp;lsquo;flipping&amp;rsquo; bits.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(~a ) = -61 (means 1100 0011 in 2&amp;rsquo;s complement form due to a signed binary number.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;laquo;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Binary Left Shift	The left operands value is moved left by the number of bits specified by the right operand.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;a &amp;laquo; 2 = 240 (means 1111 0000)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;raquo;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Binary Right Shift	The left operands value is moved right by the number of bits specified by the right operand.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;a &amp;raquo; 2 = 15 (means 0000 1111)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;python-logical-operators&#34;&gt;Python Logical Operators&lt;/h5&gt;
&lt;p&gt;We use these very often and notice these are more like creating sentences.&lt;/p&gt;
&lt;p&gt;Assume variable a holds 10 and variable b holds 20 then.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Operator&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;and&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Logical AND	If both the operands are true then condition becomes true.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(a and b) is true.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;or&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Logical OR	If any of the two operands are non-zero then condition becomes true.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(a or b) is true.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;not&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Logical NOT	Used to reverse the logical state of its operand.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Not(a and b) is false.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;python-membership-operators&#34;&gt;Python Membership Operators&lt;/h5&gt;
&lt;p&gt;These Operators used to check wether some value is in something, this would get handy when creating search engines or so.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Operator&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;in&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Evaluates to true if it finds a variable in the specified sequence and false otherwise.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;x in y, here in results in a 1 if x is a member of sequence y.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;not&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;in	Evaluates to true if it does not finds a variable in the specified sequence and false otherwise.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;x not in y, here not in results in a 1 if x is not a member of sequence y.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;python-identity-operators&#34;&gt;Python Identity Operators&lt;/h5&gt;
&lt;p&gt;Identity operators compare the memory locations of two objects. It would be more clear if you know how &lt;a href=&#34;https://en.wikipedia.org/wiki/Variable_(computer_science)&#34;&gt;variables work&lt;/a&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Operator&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;is&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Evaluates to true if the variables on either side of the operator point to the same object and false otherwise.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;x is y, here is results in 1 if id(x) equals id(y).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;is not&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Evaluates to false if the variables on either side of the operator point to the same object and true otherwise.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;x is not y, here is not results in 1 if id(x) is not equal to id(y).&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;python-operators-precedence&#34;&gt;Python Operators Precedence&lt;/h5&gt;
&lt;p&gt;We used to know how the BODMAS works, and this is the BODMAS for programming. Highest to lowest.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Sr.No.&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Operator&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;**&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Exponentiation (raise to the power)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;~ + -&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Complement, unary plus and minus (method names for the last two are +@ and -@)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;* / % //&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Multiply, divide, modulo and floor division&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;+ -&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Addition and subtraction&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;raquo; &amp;laquo;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Right and left bitwise shift&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;6&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;amp;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Bitwise &amp;lsquo;AND&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;7&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;^ |&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Bitwise exclusive &lt;code&gt;OR&#39; and regular &lt;/code&gt;OR&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;8&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;lt;= &amp;lt; &amp;gt; &amp;gt;=&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Comparison operators&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;9&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;lt;&amp;gt; == !=&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Equality operators&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;= %= /= //= -= += *= **= Assignment operators&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;11&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;is ,is not&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Identity operators&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;12&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;in, not, in&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Membership operators&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;13&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;not, or, and&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Logical operators&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;decision-making&#34;&gt;Decision Making&lt;/h3&gt;
&lt;p&gt;Here we&amp;rsquo;re in a critical part, no logical program can made without these. go through one by one carefully. Depiction making logs down to checking TRUE or FALSE on a condition so if it&amp;rsquo;s true it can do something and if it&amp;rsquo;s false it can do something else.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.tutorialspoint.com/python/images/decision_making.jpg&#34; alt=&#34;Desicion Making&#34;&gt;&lt;/p&gt;
&lt;p&gt;Python programming language provides following types of decision making statements&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Sr.No.&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Statement&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;if statements&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;An if statement consists of a boolean expression followed by one or more statements.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;if&amp;hellip;else statements&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;An if statement can be followed by an optional else statement, which executes when the boolean expression is FALSE.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;nested if statements&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;You can use one if or else if statement inside another if or else if statement(s).&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;single-statement-suites&#34;&gt;Single Statement Suites&lt;/h5&gt;
&lt;p&gt;you can create a if statement single lined. and here&amp;rsquo;s how you can do it&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  if(condition): &amp;lt;code to run if true&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;For a practical statement&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  a = 10
  if( a != 9): print(&amp;quot;a Is not 9!&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;if-statements&#34;&gt;If statements&lt;/h5&gt;
&lt;p&gt;remember python is a case sensitive programming language which means you have to be careful with capitals and simples, all of the python keywords are simple. keep it in mind.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  if (expression):
      &amp;lt;statement&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is the basic code for a if statement, did you notice that there is a whitespace (few spaces) after the if statement, that indicates that statement belongs to that if statement.&lt;/p&gt;
&lt;p&gt;for a practical use&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  a = 10
  if (a == 10):
      print(&amp;quot;A is 10&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;ifelse-statement&#34;&gt;if&amp;hellip;else statement&lt;/h5&gt;
&lt;p&gt;Now what can we do if the if statement is false? Here&amp;rsquo;s the solution for you. just use a else statement and It&amp;rsquo;ll run if the condition is false.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  if (expression):
      &amp;lt;statement&amp;gt;
  else:
      &amp;lt;statement&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is the boilerplate for if&amp;hellip;else statement, let&amp;rsquo;s consider a practical usage.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  a = 9
  if (a == 10):
      print(&amp;quot;A is 10&amp;quot;)
  else:
      print(&amp;quot;A is not 9&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Try for yourself and try to play with it.&lt;/p&gt;
&lt;h5 id=&#34;nested-if-statements&#34;&gt;Nested If statements&lt;/h5&gt;
&lt;p&gt;Here you can set several if statements to run if the previous one is false. let me demonstrate.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  if (expression):
      &amp;lt;statement&amp;gt;
  elif (expression):
      &amp;lt;statement&amp;gt;
  else:
      &amp;lt;statement&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now the elif checks the condition if the if statement gets false and if both are false, it would run else statement. You can add any number of elif statements in to your code. Let&amp;rsquo;s consider a practical usage.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  a = 5
  if (a == 10):
      print(&amp;quot;A is 10&amp;quot;)
  elif (a == 9):
      print(&amp;quot;A is 9&amp;quot;)
  elif (a == 8):
      print(&amp;quot;A is 8&amp;quot;)
  elif (a == 7):
      print(&amp;quot;A is 7&amp;quot;)
  else:
      print(&amp;quot;A is something else!&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;loops&#34;&gt;Loops&lt;/h3&gt;
&lt;p&gt;Well, here comes the fun part. we can run a code for a number of times without writing the same code over and over again, and That&amp;rsquo;s fun! There are several loop statements and loop control statements in python&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.tutorialspoint.com/python/images/loop_architecture.jpg&#34; alt=&#34;loops&#34;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Sr.No.&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Loop Type&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;while loop&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Repeats a statement or group of statements while a given condition is TRUE. It tests the condition before executing the loop body.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;for loop&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Executes a sequence of statements multiple times and abbreviates the code that manages the loop variable.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;nested loops&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;You can use one or more loop inside any another while, for or do..while loop.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;loop-control&#34;&gt;Loop control&lt;/h5&gt;
&lt;p&gt;These are used in loops to alter their functionality, keep these in mind and next we&amp;rsquo;ll consider on how we can use these to our will.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Sr.No.&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Control Statement&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;break statement&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Terminates the loop statement and transfers execution to the statement immediately following the loop.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;continue statement&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Causes the loop to skip the remainder of its body and immediately retest its condition prior to reiterating.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;pass statement&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;The pass statement in Python is used when a statement is required syntactically but you do not want any command or code to execute.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;while-loop&#34;&gt;While loop&lt;/h5&gt;
&lt;p&gt;As it claims, these loops are running until the provided expression stays true&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.tutorialspoint.com/python/images/python_while_loop.jpg&#34; alt=&#34;loop&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  while(expression):
      &amp;lt;statement&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let&amp;rsquo;s consider a practical usage&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  a = 0
  while( a&amp;lt;10 ):
      print(a)
      a += 1
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;This would print out the value of a until it passes 10. and then, the expression turns false and the loops breaks.&lt;/p&gt;
&lt;h5 id=&#34;for-loop&#34;&gt;For loop&lt;/h5&gt;
&lt;p&gt;for loop is executing through a sequence like a list or so.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.tutorialspoint.com/python/images/python_for_loop.jpg&#34; alt=&#34;loop&#34;&gt;&lt;/p&gt;
&lt;p&gt;the basic use case is like this,&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  for &amp;lt;variable&amp;gt; in &amp;lt;sequence&amp;gt;:
      &amp;lt;statement&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;let&amp;rsquo;s consider a practical usage. Here, you can see a word is a sequence of letters, so we can use it.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  for letter in &#39;HelloWorld&#39;:
      print(letter)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here you can see &amp;rsquo;letter&amp;rsquo; is the variable and &amp;lsquo;HelloWorld&amp;rsquo; is the sequence. this would print out all of the letters in the provided sequence.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  a = [&amp;quot;hello world&amp;quot;,&amp;quot;nice world&amp;quot;,&amp;quot;rice bowl&amp;quot;,&amp;quot;remote control?&amp;quot;]
  for i in a:
      print(i)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here, I used a variable called i and as the sequence I provided a list. and this code should loop through the list and print out everything in it one by one.&lt;/p&gt;
&lt;h5 id=&#34;nested-loops&#34;&gt;Nested loops&lt;/h5&gt;
&lt;p&gt;Loops can be written inside other loops and that&amp;rsquo;s what nested loops are. This isn&amp;rsquo;t hard or something, just use a bit of logic and you&amp;rsquo;re good to go, let me show you some examples and you just have to know that you can do that.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  a = [&amp;quot;First Time : &amp;quot;,&amp;quot;Second Time : &amp;quot;,&amp;quot;Third Time : &amp;quot;]
  b = [&amp;quot;a&amp;quot;,&amp;quot;e&amp;quot;,&amp;quot;i&amp;quot;,&amp;quot;o&amp;quot;,&amp;quot;u&amp;quot;]
  
  for season in a:
      for letter in b:
          print(season + letter)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;And the output should be&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  First Time : a
  First Time : e
  First Time : i
  First Time : o
  First Time : u
  Second Time : a
  Second Time : e
  Second Time : i
  Second Time : o
  Second Time : u
  Third Time : a
  Third Time : e
  Third Time : i
  Third Time : o
  Third Time : u
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;using-loop-controls&#34;&gt;Using loop controls&lt;/h5&gt;
&lt;p&gt;Using loop controls isn&amp;rsquo;t that hard, let me demonstrate you how they work.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  b = [&amp;quot;a&amp;quot;,&amp;quot;e&amp;quot;,&amp;quot;i&amp;quot;,&amp;quot;o&amp;quot;,&amp;quot;u&amp;quot;]

  for letter in b:
      if( b == &amp;quot;i&amp;quot;):
          break
      print(season + letter)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here, only a and e would be printed, whenever it comes to i, the loop breaks with the break command&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  b = [&amp;quot;a&amp;quot;,&amp;quot;e&amp;quot;,&amp;quot;i&amp;quot;,&amp;quot;o&amp;quot;,&amp;quot;u&amp;quot;]

  for letter in b:
      if( b == &amp;quot;i&amp;quot;):
          continue
      print(season + letter)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here, everything except for i would be printed, whenever it comes to i, the loop skips the rest of the code and starts again with the continue command&lt;/p&gt;
&lt;p&gt;pass statement is somewhat different&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  b = [&amp;quot;a&amp;quot;,&amp;quot;e&amp;quot;,&amp;quot;i&amp;quot;,&amp;quot;o&amp;quot;,&amp;quot;u&amp;quot;]

  for letter in b:
      if( b == &amp;quot;i&amp;quot;):
          pass
      print(season + letter)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;After running this, you won&amp;rsquo;t be able to see any difference as the pass command wasn&amp;rsquo;t there. and that&amp;rsquo;s exactly it. pass command does nothing. it just holds a place and maybe it&amp;rsquo;ll help to debug the code.&lt;/p&gt;
&lt;h3 id=&#34;number-functions&#34;&gt;Number Functions&lt;/h3&gt;
&lt;p&gt;What are these for? well, these are for atypical calculations, I won&amp;rsquo;t explain these in details because if you don&amp;rsquo;t know the functions in real-life-maths, you don&amp;rsquo;t want to use them here either. If you know these from real-life-maths, you know what to do.&lt;/p&gt;
&lt;h5 id=&#34;mathematical-functions&#34;&gt;Mathematical Functions&lt;/h5&gt;
&lt;p&gt;plug in a value or a variable in the place of x and you&amp;rsquo;re pretty much done with it.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Sr.No.&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Function &amp;amp; Returns&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;abs(x)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;The absolute value of x: the (positive) distance between x and zero.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;ceil(x)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;The ceiling of x: the smallest integer not less than x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;cmp(x, y)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-1 if x &amp;lt; y, 0 if x == y, or 1 if x &amp;gt; y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;exp(x)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;The exponential of x: ex&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;fabs(x)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;The absolute value of x.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;6&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;floor(x)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;The floor of x: the largest integer not greater than x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;7&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;log(x)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;The natural logarithm of x, for x&amp;gt; 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;8&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;log10(x)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;The base-10 logarithm of x for x&amp;gt; 0.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;9&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;max(x1, x2,&amp;hellip;)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;The largest of its arguments: the value closest to positive infinity&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;min(x1, x2,&amp;hellip;)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;The smallest of its arguments: the value closest to negative infinity&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;11&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;modf(x)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;The fractional and integer parts of x in a two-item tuple. Both parts have the same sign as x. The integer part is returned as a float.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;12&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;pow(x, y)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;The value of x**y.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;13&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;round(x [,n])&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;x rounded to n digits from the decimal point. Python rounds away from zero as a tie-breaker: round(0.5) is 1.0 and round(-0.5) is -1.0.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;14&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;sqrt(x)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;The square root of x for x &amp;gt; 0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;random-number-functions&#34;&gt;Random Number Functions&lt;/h5&gt;
&lt;p&gt;Random numbers are used for games, simulations, testing, security, and privacy applications. Python includes following functions that are commonly used.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Sr.No.&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Function&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;choice(seq)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;A random item from a list, tuple, or string.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;randrange ([start,] stop [,step])&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;A randomly selected element from range(start, stop, step)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;random()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;A random float r, such that 0 is less than or equal to r and r is less than 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;seed([x])&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sets the integer starting value used in generating random numbers. Call this function before calling any other random module function. Returns None.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;shuffle(lst)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Randomizes the items of a list in place. Returns None.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;6&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;uniform(x, y)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;A random float r, such that x is less than or equal to r and r is less than y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;trigonometric-functions&#34;&gt;Trigonometric Functions&lt;/h5&gt;
&lt;p&gt;Python includes following functions that perform trigonometric calculations.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Sr.No.&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Function&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;acos(x)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Return the arc cosine of x, in radians.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;asin(x)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Return the arc sine of x, in radians.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;atan(x)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Return the arc tangent of x, in radians.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;atan2(y, x)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Return atan(y / x), in radians.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;cos(x)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Return the cosine of x radians.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;6&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;hypot(x, y)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Return the Euclidean norm, sqrt(x&lt;em&gt;x + y&lt;/em&gt;y).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;7&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;sin(x)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Return the sine of x radians.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;8&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;tan(x)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Return the tangent of x radians.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;9&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;degrees(x)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Converts angle x from radians to degrees.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;radians(x)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Converts angle x from degrees to radians.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;mathematical-constants&#34;&gt;Mathematical Constants&lt;/h5&gt;
&lt;p&gt;Just our atypical mathematical constants, these can be used as numbers.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Sr.No.&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Constants&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;pi&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;The mathematical constant pi.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;e&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;The mathematical constant e.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;string-functions&#34;&gt;String Functions&lt;/h3&gt;
&lt;p&gt;Here, we considering what kinds of things we can do with python strings. In other words, String processing In Python.&lt;/p&gt;
&lt;p&gt;Here you have to keep in mind that strings are a sequence of letters. so we can process them as like lists and tuples.&lt;/p&gt;
&lt;h5 id=&#34;accessing-values-in-strings&#34;&gt;Accessing Values in Strings&lt;/h5&gt;
&lt;p&gt;Python does not support a character type; these are treated as strings of length one, thus also considered a substring. To access substrings, use the square brackets for slicing along with the index or indices to obtain your substring. For example&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  var1 = &#39;Hello World!&#39;
  var2 = &amp;quot;Python Programming&amp;quot;
  
  print (&amp;quot;var1[0]: &amp;quot;, var1[0])
  print (&amp;quot;var2[1:5]: &amp;quot;, var2[1:5])
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;escape-characters&#34;&gt;Escape Characters&lt;/h5&gt;
&lt;p&gt;These are some special characters which you can use in strings. they are called escape characters. for an example you can add a escape character to print a single line paragraph as a multiline paragraph.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Backslash notation&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Hexadecimal character&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;\a&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x07&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Bell or alert&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;\b&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x08&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Backspace&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;\cx&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Control-x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;\C-x&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Control-x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;\e&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x1b&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Escape&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;\f&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x0c&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Formfeed&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;\M-\C-x&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Meta-Control-x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;\n&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x0a&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Newline&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;\nnn&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Octal notation, where n is in the range 0.7&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;\r&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x0d&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Carriage return&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;\s&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x20&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Space&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;\t&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x09&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Tab&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;\v&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0x0b&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Vertical tab&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;\x&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Character x&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;\xnn&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Hexadecimal notation, where n is in the range 0.9, a.f, or A.F&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;string-special-operators&#34;&gt;String Special Operators&lt;/h5&gt;
&lt;p&gt;These operators can be used to process certain paragraphs.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Operator&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;+&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Concatenation - Adds values on either side of the operator&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;a + b will give HelloPython&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;*&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Repetition - Creates new strings, concatenating multiple copies of the same string&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;a*2 will give -HelloHello&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;[]&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Slice - Gives the character from the given index&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;a[1] will give e&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;[ : ]&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Range Slice - Gives the characters from the given range&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;a[1:4] will give ell&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;in&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Membership - Returns true if a character exists in the given string&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;H in a will give 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;not in&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Membership - Returns true if a character does not exist in the given string&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;M not in a will give 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;r/R&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Raw String - Suppresses actual meaning of Escape characters. The syntax for raw strings is exactly the same as for normal strings with the exception of the raw string operator, the letter &amp;ldquo;r,&amp;rdquo; which precedes the quotation marks. The &amp;ldquo;r&amp;rdquo; can be lowercase (r) or uppercase (R) and must be placed immediately preceding the first quote mark.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;print r&amp;rsquo;\n&amp;rsquo; prints \n and print R&amp;rsquo;\n&amp;rsquo;prints \n&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Format - Performs String formatting&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;See at next section&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;string-formatting-operator&#34;&gt;String Formatting Operator&lt;/h5&gt;
&lt;p&gt;These can be used to add certain values to a pre formatted string. It&amp;rsquo;ll make sense in the future when you work with these, until then Let&amp;rsquo;s explore.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Format Symbol&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Conversion&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;%c&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;character&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;%s&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;string conversion via str() prior to formatting&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;%i&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;signed decimal integer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;%d&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;signed decimal integer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;%u&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;unsigned decimal integer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;%o&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;octal integer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;%x&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;hexadecimal integer (lowercase letters)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;%X&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;hexadecimal integer (UPPERcase letters)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;%e&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;exponential notation (with lowercase &amp;rsquo;e&amp;rsquo;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;%E&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;exponential notation (with UPPERcase &amp;lsquo;E&amp;rsquo;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;%f&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;floating point real number&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;%g&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;the shorter of %f and %e&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;%G&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;the shorter of %f and %E&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Now for an example, let&amp;rsquo;s try an example&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  a = &amp;quot;Jhon Doe&amp;quot;
  b = &amp;quot;The World War 3&amp;quot;
  c = 56.5
  print(&amp;quot;Hello Mr.%s, This is your book %s which cost you $%g and I Hope you have a nice weekend.&amp;quot; % (a, b, c))
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Other supported symbols and functionality are listed in the following table&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Symbol&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Functionality&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;*&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;argument specifies width or precision&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;left justification&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;+&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;display the sign&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;sp&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;leave a blank space before a positive number&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;##&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;add the octal leading zero ( &amp;lsquo;0&amp;rsquo; ) or hexadecimal leading &amp;lsquo;0x&amp;rsquo; or &amp;lsquo;0X&amp;rsquo;, depending on whether &amp;lsquo;x&amp;rsquo; or &amp;lsquo;X&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;pad from left with zeros (instead of spaces)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;%&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;lsquo;%%&amp;rsquo; leaves you with a single literal &amp;lsquo;%&amp;rsquo;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(var)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;mapping variable (dictionary arguments)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;m.n.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;m is the minimum total width and n is the number of digits to display after the decimal point (if appl.)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;built-in-string-methods&#34;&gt;Built-in String Methods&lt;/h5&gt;
&lt;p&gt;These functions can be used in order to preform string functions, and process strings in our needs. We&amp;rsquo;ll get hang of these later.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Sr.No.&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Methods&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;capitalize()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Capitalizes first letter of string&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;center(width, fillchar)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Returns a space-padded string with the original string centered to a total of width columns.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;count(str, beg= 0,end=len(string))&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Counts how many times str occurs in string or in a substring of string if starting index beg and ending index end are given.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;decode(encoding=&amp;lsquo;UTF-8&amp;rsquo;,errors=&amp;lsquo;strict&amp;rsquo;)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Decodes the string using the codec registered for encoding. encoding defaults to the default string encoding.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;encode(encoding=&amp;lsquo;UTF-8&amp;rsquo;,errors=&amp;lsquo;strict&amp;rsquo;)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Returns encoded string version of string; on error, default is to raise a ValueError unless errors is given with &amp;lsquo;ignore&amp;rsquo; or &amp;lsquo;replace&amp;rsquo;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;6&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;endswith(suffix, beg=0, end=len(string))&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Determines if string or a substring of string (if starting index beg and ending index end are given) ends with suffix; returns true if so and false otherwise.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;7&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;expandtabs(tabsize=8)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Expands tabs in string to multiple spaces; defaults to 8 spaces per tab if tabsize not provided.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;8&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;find(str, beg=0 end=len(string))&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Determine if str occurs in string or in a substring of string if starting index beg and ending index end are given returns index if found and -1 otherwise.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;9&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;index(str, beg=0, end=len(string))&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Same as find(), but raises an exception if str not found.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;isalnum()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Returns true if string has at least 1 character and all characters are alphanumeric and false otherwise.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;11&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;isalpha()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Returns true if string has at least 1 character and all characters are alphabetic and false otherwise.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;12&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;isdigit()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Returns true if string contains only digits and false otherwise.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;13&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;islower()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Returns true if string has at least 1 cased character and all cased characters are in lowercase and false otherwise.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;14&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;isnumeric()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Returns true if a unicode string contains only numeric characters and false otherwise.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;15&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;isspace()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Returns true if string contains only whitespace characters and false otherwise.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;16&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;istitle()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Returns true if string is properly &amp;ldquo;titlecased&amp;rdquo; and false otherwise.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;17&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;isupper()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Returns true if string has at least one cased character and all cased characters are in uppercase and false otherwise.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;18&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;join(seq)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Merges (concatenates) the string representations of elements in sequence seq into a string, with separator string.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;19&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;len(string)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Returns the length of the string&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;20&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;ljust(width[, fillchar])&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Returns a space-padded string with the original string left-justified to a total of width columns.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;21&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;lower()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Converts all uppercase letters in string to lowercase.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;22&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;lstrip()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Removes all leading whitespace in string.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;23&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;maketrans()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Returns a translation table to be used in translate function.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;24&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;max(str)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Returns the max alphabetical character from the string str.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;25&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;min(str)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Returns the min alphabetical character from the string str.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;26&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;replace(old, new [, max])&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Replaces all occurrences of old in string with new or at most max occurrences if max given.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;27&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;rfind(str, beg=0,end=len(string))&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Same as find(), but search backwards in string.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;28&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;rindex( str, beg=0, end=len(string))&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Same as index(), but search backwards in string.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;29&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;rjust(width,[, fillchar])&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Returns a space-padded string with the original string right-justified to a total of width columns.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;30&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;rstrip()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Removes all trailing whitespace of string.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;31&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;split(str=&amp;quot;&amp;quot;, num=string.count(str))&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Splits string according to delimiter str (space if not provided) and returns list of substrings; split into at most num substrings if given.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;32&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;splitlines( num=string.count(&amp;rsquo;\n&amp;rsquo;))&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Splits string at all (or num) NEWLINEs and returns a list of each line with NEWLINEs removed.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;33&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;startswith(str, beg=0,end=len(string))&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Determines if string or a substring of string (if starting index beg and ending index end are given) starts with substring str; returns true if so and false otherwise.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;34&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;strip([chars])&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Performs both lstrip() and rstrip() on string.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;35&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;swapcase()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Inverts case for all letters in string.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;36&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;title()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Returns &amp;ldquo;titlecased&amp;rdquo; version of string, that is, all words begin with uppercase and the rest are lowercase.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;37&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;translate(table, deletechars=&amp;quot;&amp;quot;)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Translates string according to translation table str(256 chars), removing those in the del string.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;38&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;upper()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Converts lowercase letters in string to uppercase.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;39&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;zfill (width)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Returns original string leftpadded with zeros to a total of width characters; intended for numbers, zfill() retains any sign given (less one zero).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;40&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;isdecimal()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Returns true if a unicode string contains only decimal characters and false otherwise.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;list-functions&#34;&gt;List Functions&lt;/h3&gt;
&lt;h5 id=&#34;assigning-and-accessing-lists&#34;&gt;Assigning and accessing lists&lt;/h5&gt;
&lt;p&gt;As we did before, assigning lists isn&amp;rsquo;t that hard. just add a list of data separated by commas and enclosed with square brackets. for an example&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  a = [10,20,50,60,&amp;quot;Fun&amp;quot;,&amp;quot;Bun,&amp;quot;Run&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;And That&amp;rsquo;s it. the indexing of programming is starting with 0. so you can access it&amp;rsquo;s value using&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;variable&amp;gt;[&amp;lt;index&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;For an example&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  a = [10,20,50,60,&amp;quot;Fun&amp;quot;,&amp;quot;Bun,&amp;quot;Run&amp;quot;]
  print(a[0])
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;and you&amp;rsquo;ll get the first item. to get items from 3 to 5&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  a = [10,20,50,60,&amp;quot;Fun&amp;quot;,&amp;quot;Bun,&amp;quot;Run&amp;quot;]
  print(a[2:5])
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;updating-and-deleting-lists&#34;&gt;Updating and Deleting Lists&lt;/h5&gt;
&lt;p&gt;You can change or delete values of a list using Index of that item&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  a = [10,20,50,60,&amp;quot;Fun&amp;quot;,&amp;quot;Bun,&amp;quot;Run&amp;quot;]
  a[0] = 65
  del a[2]
  print(a)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;basic-list-operations&#34;&gt;Basic List Operations&lt;/h5&gt;
&lt;p&gt;You can use these operators for process lists in python.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Python Expression&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Results&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;len([1, 2, 3])&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Length&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;[1, 2, 3] + [4, 5, 6]&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;[1, 2, 3, 4, 5, 6]&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Concatenation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;[&amp;lsquo;Hi!&amp;rsquo;] * 4&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;[&amp;lsquo;Hi!&amp;rsquo;, &amp;lsquo;Hi!&amp;rsquo;, &amp;lsquo;Hi!&amp;rsquo;, &amp;lsquo;Hi!&amp;rsquo;]&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Repetition&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3 in [1, 2, 3]&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;True&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Membership&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;for x in [1, 2, 3]: print x,&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1 2 3&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Iteration&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;indexing-slicing-and-matrixes&#34;&gt;Indexing, Slicing, and Matrixes&lt;/h5&gt;
&lt;p&gt;Just listing what we did above&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  L = [&#39;spam&#39;, &#39;Spam&#39;, &#39;SPAM!&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Python Expression&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Results&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;L[2]&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;SPAM!&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Offsets start at zero&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;L[-2]&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Spam&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Negative: count from the right&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;L[1:]&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;[&amp;lsquo;Spam&amp;rsquo;, &amp;lsquo;SPAM!&amp;rsquo;]&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Slicing fetches sections&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;built-in-list-functions--methods&#34;&gt;Built-in List Functions &amp;amp; Methods&lt;/h5&gt;
&lt;p&gt;Python includes the following list functions −&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Sr.No.&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Function&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;cmp(list1, list2)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Compares elements of both lists.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;len(list)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Gives the total length of the list.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;max(list)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Returns item from the list with max value.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;min(list)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Returns item from the list with min value.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;list(seq)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Converts a tuple into list.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Python includes following list methods&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Sr.No.&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Methods&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;list.append(obj)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Appends object obj to list&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;list.count(obj)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Returns count of how many times obj occurs in list&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;list.extend(seq)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Appends the contents of seq to list&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;list.index(obj)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Returns the lowest index in list that obj appears&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;list.insert(index, obj)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Inserts object obj into list at offset index&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;6&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;list.pop(obj=list[-1])&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Removes and returns last object or obj from list&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;7&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;list.remove(obj)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Removes object obj from list&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;8&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;list.reverse()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Reverses objects of list in place&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;9&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;list.sort([func])&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Sorts objects of list, use compare func if given&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;tuples&#34;&gt;Tuples&lt;/h3&gt;
&lt;p&gt;A tuple is a collection of objects which ordered and immutable. Tuples are sequences, just like lists. The differences between tuples and lists are, the tuples cannot be changed unlike lists and tuples use parentheses, whereas lists use square brackets.&lt;/p&gt;
&lt;h5 id=&#34;assigning-and-accessing-values&#34;&gt;Assigning and Accessing Values&lt;/h5&gt;
&lt;p&gt;Let&amp;rsquo;s do some work with these&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  a = (10,20,50,60,&amp;quot;Fun&amp;quot;,&amp;quot;Bun,&amp;quot;Run&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;And That&amp;rsquo;s it. the indexing of programming is starting with 0. so you can access it&amp;rsquo;s value using&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;variable&amp;gt;(&amp;lt;index&amp;gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;For an example&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  a = (10,20,50,60,&amp;quot;Fun&amp;quot;,&amp;quot;Bun,&amp;quot;Run&amp;quot;)
  print(a[0])
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;and you&amp;rsquo;ll get the first item. to get items from 3 to 5&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  a = (10,20,50,60,&amp;quot;Fun&amp;quot;,&amp;quot;Bun,&amp;quot;Run&amp;quot;)
  print(a[2:5])
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;basic-tuples-operations&#34;&gt;Basic Tuples Operations&lt;/h5&gt;
&lt;p&gt;Tuples respond to the + and * operators much like strings; they mean concatenation and repetition here too, except that the result is a new tuple, not a string.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Python Expression&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Results&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;len((1, 2, 3))&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Length&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(1, 2, 3) + (4, 5, 6)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(1, 2, 3, 4, 5, 6)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Concatenation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(&amp;lsquo;Hi!&amp;rsquo;,) * 4&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;(&amp;lsquo;Hi!&amp;rsquo;, &amp;lsquo;Hi!&amp;rsquo;, &amp;lsquo;Hi!&amp;rsquo;, &amp;lsquo;Hi!&amp;rsquo;)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Repetition&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3 in (1, 2, 3)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;True&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Membership&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;for x in (1, 2, 3): print x,&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1 2 3&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Iteration&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;indexing-slicing-and-matrixes-1&#34;&gt;Indexing, Slicing, and Matrixes&lt;/h5&gt;
&lt;p&gt;It&amp;rsquo;s the same as the lists. but for tuples.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  L = (&#39;spam&#39;, &#39;Spam&#39;, &#39;SPAM!&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Python Expression&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Results&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;L[2]&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;SPAM!&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Offsets start at zero&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;L[-2]&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Spam&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Negative: count from the right&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;L[1:]&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;[&amp;lsquo;Spam&amp;rsquo;, &amp;lsquo;SPAM!&amp;rsquo;]&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Slicing fetches sections&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;built-in-tuple-functions&#34;&gt;Built-in Tuple Functions&lt;/h5&gt;
&lt;p&gt;Python includes the following tuple functions −&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Sr.No.&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Function&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;cmp(tuple1, tuple2)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Compares elements of both tuples.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;len(tuple)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Gives the total length of the tuple.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;max(tuple)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Returns item from the tuple with max value.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;min(tuple)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Returns item from the tuple with min value.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;tuple(seq)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Converts a list into tuple.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;dictionaries&#34;&gt;Dictionaries&lt;/h3&gt;
&lt;p&gt;Python dictionaries are a dataset that has a key value pair, and that duo helps so much. Let&amp;rsquo;s start with dictionaries.&lt;/p&gt;
&lt;h5 id=&#34;assigning-updating-and-deleting-dictionaries&#34;&gt;Assigning, Updating and Deleting dictionaries&lt;/h5&gt;
&lt;p&gt;we can create a dictionary using&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;variable&amp;gt; = {&amp;lt;string&amp;gt;:&amp;lt;string&amp;gt;,...}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;for a real section.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  dic = {&amp;quot;key1&amp;quot;:&amp;quot;value1&amp;quot;,&amp;quot;key2&amp;quot;:&amp;quot;value2&amp;quot;,&amp;quot;key3&amp;quot;:&amp;quot;value3&amp;quot;,&amp;quot;key4&amp;quot;:&amp;quot;value4&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;and we can update dictionaries as this&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  dic[&amp;quot;key2&amp;quot;]=&amp;quot;ChangedValue2&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Adding new entries&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  dic[&amp;quot;key5&amp;quot;]=&amp;quot;newValue5&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Accessing Values&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  print(dic[&amp;quot;key1&amp;quot;])
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;printing the whole Dictionary&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  print(dic)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Deleting dictionary elements&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  del dic[&amp;quot;key3&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can Clear the whole Dictionary&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  dic.clear()
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Delete the whole dictionary&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  del dic
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;built-in-dictionary-functions--methods&#34;&gt;Built-in Dictionary Functions &amp;amp; Methods&lt;/h5&gt;
&lt;p&gt;Python includes the following dictionary functions&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Sr.No.&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Function&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;cmp(dict1, dict2)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Compares elements of both dict.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;len(dict)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Gives the total length of the dictionary. This would be equal to the number of items in the dictionary.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;str(dict)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Produces a printable string representation of a dictionary&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;type(variable)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Returns the type of the passed variable. If passed variable is dictionary, then it would return a dictionary type.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Python includes following dictionary methods&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Sr.No.&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Methods&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;dict.clear()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Removes all elements of dictionary dict&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;dict.copy()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Returns a shallow copy of dictionary dict&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;dict.fromkeys()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Create a new dictionary with keys from seq and values set to value.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;dict.get(key, default=None)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;For key key, returns value or default if key not in dictionary&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;dict.has_key(key)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Returns true if key in dictionary dict, false otherwise&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;6&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;dict.items()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Returns a list of dict&amp;rsquo;s (key, value) tuple pairs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;7&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;dict.keys()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Returns list of dictionary dict&amp;rsquo;s keys&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;8&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;dict.setdefault(key, default=None)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Similar to get(), but will set dict[key]=default if key is not already in dict&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;9&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;dict.update(dict2)&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Adds dictionary dict2&amp;rsquo;s key-values pairs to dict&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;dict.values()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Returns list of dictionary dict&amp;rsquo;s values&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;date--time&#34;&gt;Date &amp;amp; Time&lt;/h3&gt;
&lt;p&gt;Here&amp;rsquo;s another fun time to enjoy with python. The guide is getting longer and boring I know, but this is a complete guide so this could get much worse. &amp;lsquo;Boring&amp;rsquo; is not for the masters so lets delete it ;D&lt;/p&gt;
&lt;p&gt;Now now no, what is this about. let me show you, python date and time operations are all about, you guessed it, date and time. we can get the current date and time in many many formats and also we can process older dates too.&lt;/p&gt;
&lt;h5 id=&#34;what-is-tick&#34;&gt;What is Tick?&lt;/h5&gt;
&lt;p&gt;Time intervals are floating-point numbers in units of seconds. Particular instants in time are expressed in seconds since 12:00am, January 1, 1970(epoch). this is common for all main-stream programming languages and we have to deal with it.&lt;/p&gt;
&lt;p&gt;The function time.time() returns the current system time in ticks since 12:00am, January 1, 1970(epoch). Use a print command to check it&lt;/p&gt;
&lt;p&gt;first we have to import the time library, then we can proceed.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  import time
  print(time.time())
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;and You&amp;rsquo;ll get some numbers.&lt;/p&gt;
&lt;h5 id=&#34;what-is-timetuple&#34;&gt;What is TimeTuple?&lt;/h5&gt;
&lt;p&gt;This is getting much interesting now, let&amp;rsquo;s talk about time tuple. Here, Many of Python&amp;rsquo;s time functions handle time as a tuple of 9 numbers, as shown below&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Index&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Field&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Values&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4-digit year&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2008&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Month&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1 to 12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Day&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1 to 31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Hour&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0 to 23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Minute&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0 to 59&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Second&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0 to 61 (60 or 61 are leap-seconds)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;6&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Day of Week&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0 to 6 (0 is Monday)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;7&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Day of year&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1 to 366 (Julian day)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;8&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Daylight savings&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-1, 0, 1, -1 means library determines DST&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Now you should pretty much comfortable with tuples aren&amp;rsquo;t you? so I Don&amp;rsquo;t think this is something hard for you to figure out. in case you didn&amp;rsquo;t let me show you how to retrieve these digits.&lt;/p&gt;
&lt;p&gt;The above tuple is equivalent to struct_time structure. This structure has following attributes&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Index&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Attributes&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Values&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;tm_year&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2008&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;tm_mon&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1 to 12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;tm_mday&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1 to 31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;tm_hour&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0 to 23&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;tm_min&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0 to 59&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;tm_sec&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0 to 61 (60 or 61 are leap-seconds)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;6&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;tm_wday&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;0 to 6 (0 is Monday)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;7&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;tm_yday&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1 to 366 (Julian day)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;8&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;tm_isdst&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;-1, 0, 1, -1 means library determines DST&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;working-with-dates-and-times&#34;&gt;Working with Dates and Times&lt;/h5&gt;
&lt;p&gt;Let&amp;rsquo;s get down to the coding section. Here I&amp;rsquo;ll show how to do the codings for some and you can figure out the rest for sure.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  import time
  localtime = time.localtime(time.time())
  print(localtime)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;And you&amp;rsquo;ll get something like this.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;time.struct_time(tm_year=2020, tm_mon=7, tm_mday=15, tm_hour=17, tm_min=27, tm_sec=19, tm_wday=2, tm_yday=197, tm_isdst=0)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Explaining the whole time.struct_time tuple. So let&amp;rsquo;s deal with this now. I&amp;rsquo;m refering to the chart above and let&amp;rsquo;s print out some dates.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  import time
  Year = time.localtime(time.time())[0]
  Month = time.localtime(time.time())[1]
  Day = time.localtime(time.time())[2]
  Hour = time.localtime(time.time())[3]
  Minuites = time.localtime(time.time())[4]
  Seconds = time.localtime(time.time())[5]

  print(&amp;quot;Today is %g/%g/%g and the time is %g:%g:%g &amp;quot; % (Day,Month,Year,Hour,Minuites,Seconds))
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;And The result will be&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  Today is 15/7/2020 and the time is 17:32:50
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Something like this. This is my time period. And that&amp;rsquo;s pretty much it for date and time.. Moving on.&lt;/p&gt;
&lt;h3 id=&#34;functions&#34;&gt;Functions&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s speak about functions. These are the most important code sections of any programing language. The reason why is functions functionality, That&amp;rsquo;s awkward to say but any how. Functions store some code in them and we can run that code section anytime we call a function. It could be a calculation or anything like that. And also we can pass values in variables so the function can preform more things dynamically.&lt;/p&gt;
&lt;h5 id=&#34;defining-functions&#34;&gt;Defining Functions&lt;/h5&gt;
&lt;p&gt;That&amp;rsquo;s not hard at all, but first let me tell you something, most of the developer guides start with basic functions when teaching functions, but that&amp;rsquo;s not my way so let&amp;rsquo;s dig deeper with a huge step forward. This is the boilerplate for functions.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  def &amp;lt;function-name&amp;gt;(&amp;lt;variables-to-pass&amp;gt;):
      &amp;lt;statements&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;And That&amp;rsquo;s it you&amp;rsquo;re a master of functions. but that&amp;rsquo;s too little? yeah that&amp;rsquo;s the hardest part. now let&amp;rsquo;s explore a practical use case but first let me explain.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;def is the keyword to define functions&lt;/li&gt;
&lt;li&gt;&amp;lt; function-name &amp;gt; is where you put your function&amp;rsquo;s name to call it with, start it with a simple (lowercase) letter and don&amp;rsquo;t add spaces (It&amp;rsquo;s an identifier)&lt;/li&gt;
&lt;li&gt;&amp;lt; variables-to-pass &amp;gt; can have several or infinite variables that we have to pass values to when we&amp;rsquo;re calling the function&lt;/li&gt;
&lt;li&gt;&amp;lt; statements &amp;gt; Is where the code goes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now here&amp;rsquo;s an example for you&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  def printagreeting(name,age):
      statement = &amp;quot;Hello There %s, &amp;quot; % (name)
      if (age &amp;lt; 18):
          statement += &amp;quot;You&#39;re %g aren&#39;t you cuty pie&amp;quot; % (age)
      elif (age &amp;lt; 50):
          statement += &amp;quot;You&#39;re %g and It&#39;s an age full of responsibities&amp;quot; % (age)
      else:
          statement += &amp;quot;You&#39;re an Old Man!&amp;quot;
      print(statement)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now It&amp;rsquo;s done defining. Let&amp;rsquo;s call and see how it works.&lt;/p&gt;
&lt;h5 id=&#34;calling-functions&#34;&gt;Calling Functions&lt;/h5&gt;
&lt;p&gt;For calling a function, you have to address it with the name it made followed by brackets and in those brackets, variables to pass. here we have two variables to pass, name and age. You can create functions without variables but you have to put brackets anyways something like&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  example()
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;function-name&amp;gt;(&amp;lt;values&amp;gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;let&amp;rsquo;s call our function we just made.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  printagreeting(&amp;quot;Tecinpact&amp;quot;,22)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;That&amp;rsquo;s how you call it, and this should be printed out after that.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  Hello There Tecinpact, You&#39;re 22 and It&#39;s an age full of responsibities
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;return-value-from-a-function&#34;&gt;return value from a function&lt;/h5&gt;
&lt;p&gt;This is something important and this makes the function behaves in a way that&amp;rsquo;s different from the above example. return makes the function returns a value so we can assign them in to a variable.&lt;/p&gt;
&lt;p&gt;You can do anything with functions, and remember these make our lives easier than ever.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  def printagreeting(name,age):
      statement = &amp;quot;Hello There %s, &amp;quot; % (name)
      if (age &amp;lt; 18):
          statement += &amp;quot;You&#39;re %g aren&#39;t you cuty pie&amp;quot; % (age)
      elif (age &amp;lt; 50):
          statement += &amp;quot;You&#39;re %g and It&#39;s an age full of responsibities&amp;quot; % (age)
      else:
          statement += &amp;quot;You&#39;re an Old Man!&amp;quot;
      return(statement)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;did you noticed that I switched that print to a return? So now I can use the function as this.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  returnedvalue = printagreeting(&amp;quot;Tecinpact&amp;quot;,22)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;and the function now assigns the value to the returnedvalue variable. so we can use it in the program for something else than printing to the console.&lt;/p&gt;
&lt;h3 id=&#34;reading-data-from-user-in-the-console&#34;&gt;Reading data from user in the console&lt;/h3&gt;
&lt;p&gt;This is a short and simple but a compulsory part on programming, that&amp;rsquo;s the user&amp;rsquo;s input. so we can ask the user for inputs when the code running using raw_input method. Try this example to understand the capabilities.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  str = raw_input(&amp;quot;Enter your input: &amp;quot;)
  print (&amp;quot;Received input is : %s&amp;quot;, % (str))
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is short and sweet so you can see it for your self.&lt;/p&gt;
&lt;h3 id=&#34;files-io&#34;&gt;Files I/O&lt;/h3&gt;
&lt;p&gt;Here we came to a part where we can write to files using python. If you&amp;rsquo;re imaginative inough, you can even automate writing codes from other languages using the knowledge you gathered from this article. Let&amp;rsquo;s start. Here, I&amp;rsquo;m only explaining what you really need, and nothing else.&lt;/p&gt;
&lt;p&gt;Concept is simple, you have to open a file, read or write, then you can close it.&lt;/p&gt;
&lt;h5 id=&#34;opening-and-closing-files&#34;&gt;Opening and Closing Files&lt;/h5&gt;
&lt;p&gt;Simple as it seems, Python has a open and close function to do it, but opening is a bit different, you can use python to open in various modes, but one&amp;rsquo;s you&amp;rsquo;re really want it&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;r - for read only&lt;/li&gt;
&lt;li&gt;w - read and write but overwrites existing data&lt;/li&gt;
&lt;li&gt;a - for appending new lines.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&amp;rsquo;s the complete list if you are interested in it.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Sr.No.&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Modes&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;r&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Opens a file for reading only. The file pointer is placed at the beginning of the file. This is the default mode.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;rb&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Opens a file for reading only in binary format. The file pointer is placed at the beginning of the file. This is the default mode.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;r+&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Opens a file for both reading and writing. The file pointer placed at the beginning of the file.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;rb+&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Opens a file for both reading and writing in binary format. The file pointer placed at the beginning of the file.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;5&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;w&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Opens a file for writing only. Overwrites the file if the file exists. If the file does not exist, creates a new file for writing.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;6&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;wb&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Opens a file for writing only in binary format. Overwrites the file if the file exists. If the file does not exist, creates a new file for writing.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;7&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;w+&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Opens a file for both writing and reading. Overwrites the existing file if the file exists. If the file does not exist, creates a new file for reading and writing.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;8&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;wb+&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Opens a file for both writing and reading in binary format. Overwrites the existing file if the file exists. If the file does not exist, creates a new file for reading and writing.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;9&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;a&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Opens a file for appending. The file pointer is at the end of the file if the file exists. That is, the file is in the append mode. If the file does not exist, it creates a new file for writing.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;ab&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Opens a file for appending in binary format. The file pointer is at the end of the file if the file exists. That is, the file is in the append mode. If the file does not exist, it creates a new file for writing.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;11&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;a+&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Opens a file for both appending and reading. The file pointer is at the end of the file if the file exists. The file opens in the append mode. If the file does not exist, it creates a new file for reading and writing.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;12&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;ab+&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Opens a file for both appending and reading in binary format. The file pointer is at the end of the file if the file exists. The file opens in the append mode. If the file does not exist, it creates a new file for reading and writing.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;the-file-object-attributes&#34;&gt;The file Object Attributes&lt;/h5&gt;
&lt;p&gt;What are these? These are what you can do with these files. So, Let&amp;rsquo;s Explore.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Sr.No.&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Attribute&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;file.closed&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Returns true if file is closed, false otherwise.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;file.mode&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Returns access mode with which file was opened.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;file.name&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Returns name of the file.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;file.softspace&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Returns false if space explicitly required with print, true otherwise.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Let&amp;rsquo;s write some files then.&lt;/p&gt;
&lt;h5 id=&#34;write-the-file&#34;&gt;Write the file&lt;/h5&gt;
&lt;p&gt;Let&amp;rsquo;s open a file using read and write with overwriting in the directory of the script.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  file = open(&amp;quot;thisIsAFile.txt&amp;quot;, &amp;quot;w&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now let&amp;rsquo;s write some data to it.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  file.write( &amp;quot;Hello World! This is a file written without a hand.&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let&amp;rsquo;s close it now.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  file.close()
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let&amp;rsquo;s read the file now,&lt;/p&gt;
&lt;h5 id=&#34;read-the-file&#34;&gt;Read the file&lt;/h5&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  file = open(&amp;quot;thisIsAFile.txt&amp;quot;, &amp;quot;r&amp;quot;)
  fileText = file.read()
  print(fileText)
  file.close()
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;now the fileText variable holds what&amp;rsquo;s inside the file.&lt;/p&gt;
&lt;h5 id=&#34;rename-the-file&#34;&gt;Rename the file&lt;/h5&gt;
&lt;p&gt;It&amp;rsquo;s Simple and straight forward. You have to import the os module first.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  import os
  os.rename(&amp;lt;current_file_name&amp;gt;, &amp;lt;new_file_name&amp;gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let&amp;rsquo;s nome our file to another name&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  import os
  os.rename(&amp;quot;thisIsAFile.txt&amp;quot;,&amp;quot;anotherfile.txt&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;lets-delete-the-file&#34;&gt;Let&amp;rsquo;s Delete the file&lt;/h5&gt;
&lt;p&gt;This is also a funtion of the os module so first we have to import it and then we can proceed&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  import os
  os.remove(&amp;quot;thisIsAFile.txt&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;lets-explore-some-os-module-functions-which-will-get-in-handy&#34;&gt;Let&amp;rsquo;s explore some OS module functions which will get in handy&lt;/h5&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Module&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Usage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;os.mkdir()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;You can use the mkdir() method of the os module to create directories in the current directory.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;os.mkdir(&amp;ldquo;newdir&amp;rdquo;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;os.chdir()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;You can use the chdir() method to change the current directory.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;os.chdir(&amp;ldquo;newdir&amp;rdquo;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;os.getcwd()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;The getcwd() method displays the current working directory.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;os.getcwd()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;os.rmdir()&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;The rmdir() method deletes the directory, which is passed as an argument in the method.&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;os.rmdir(&amp;lsquo;dirname&amp;rsquo;)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;And You&amp;rsquo;re Golden with File I/O&lt;/p&gt;
&lt;h3 id=&#34;error-handling&#34;&gt;Error handling&lt;/h3&gt;
&lt;p&gt;In programming, we run into all sorts of errors eventually, so we need a fool proof option to make the program run no matter what. So there&amp;rsquo;s a simple boilerplate we can use&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  try:
     You do your operations here.
  except:
     If there is any exception, then execute this block.
  else:
     If there is no exception then execute this block.
  finally:
     This would run always after everything above
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let&amp;rsquo;s explore&lt;/p&gt;
&lt;p&gt;You can add a try block and add you code in that, so if something went wrong it would brake the program there and run the except block. If there are no errors or so the else block will run, and finally block would always run it&amp;rsquo;s code. you can ditch anything else the try block so it&amp;rsquo;s something you can tailor to your needs.&lt;/p&gt;
&lt;h3 id=&#34;object-oriented-python&#34;&gt;Object Oriented Python&lt;/h3&gt;
&lt;p&gt;This would be the final topic I&amp;rsquo;m covering in this series. This is a huge topic but I&amp;rsquo;m explaining briefly.&lt;/p&gt;
&lt;p&gt;Classes are something like functions but they can have their own objects. for an example consider a class in a school, we&amp;rsquo;ll assume that there is a class called &amp;ldquo;grade 2&amp;rdquo; whenever the headmaster says &amp;ldquo;come here g2&amp;rdquo; the grade 2 students have to stand up and say &amp;ldquo;I&amp;rsquo;m here&amp;rdquo;. this is a imaginative exercise, so considering this case, the headmaster once gathered the whole school and said loudly, &amp;ldquo;Come here g2&amp;rdquo; and all of the grade 2 students said &amp;ldquo;I&amp;rsquo;m here&amp;rdquo;. now this is a idiotic but a powerful story, no the moral of the story: class grade 2 is like the classes in python, they have certain functions to run whenever they were called, and the students of that class are like Objects in python. those objects has to obey and  follow the  class rules until they are in that class. and that&amp;rsquo;s the main concept.&lt;/p&gt;
&lt;h5 id=&#34;defining-classes&#34;&gt;Defining classes&lt;/h5&gt;
&lt;p&gt;it&amp;rsquo;s easy, you just have to use the class keyword followed by the class name and the code block&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  class &amp;lt;class-name&amp;gt;:
      def __init__(self,&amp;lt;variables&amp;gt;):
          &amp;lt;initialization-code&amp;gt;
      &amp;lt;other-codes&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;That init function in compulsory and this is where you write your initialization code of a class. let&amp;rsquo;s dig deeper with an example with everything. I made this guide all by my self for you guys to make it easy to understand everything if you followed it correctly, if you have troubles even after this tutorial, follow it again with proper attention. If you got stucked, just contact me.&lt;/p&gt;
&lt;p&gt;now let&amp;rsquo;s do something with it, I&amp;rsquo;m covering everything basic and you&amp;rsquo;re imagination is the sky here.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s make a class for an animal clinic, it contains a class for dogs and cats, every animal that brings there must have an object of their own. someone brought there 2 dogs Saly and Mary also with 2 cats Pipi and Popo, mary had two injections previously.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s create a class forthem with a function to bark and meaw so we can make them bark and meaw anytime we want, also lets add another function to give them an Injection. Follow my code and most of them, you&amp;rsquo;ll understand, I&amp;rsquo;ll explain the basics and the hard parts, from this, you&amp;rsquo;ll get to know how to create and ingerit classes with objects, how to call functions and store values for objects.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  class dog:
      def __init__(self, name, age, injections=0):
          self.name = name
          self.age = age
          self.injections = injections
  
      def bark(self):
          print(&amp;quot;Woof Woof&amp;quot;)
  
      def inject(self, times):
          print(&amp;quot;%s Injected %g times&amp;quot; % (self.name, times))
          self.injections += times     
  
  class cat:
      def __init__(self, name, age, injections=0):
          self.name = name
          self.age = age
          self.injections = injections
  
      def meaw(self):
          print(&amp;quot;meaw meaw&amp;quot;)
  
      def inject(self, times):
          print(&amp;quot;%s Injected %g times&amp;quot; % (self.name, times))
          self.injections += times    
  
  Saly = dog(&amp;quot;Saly&amp;quot;, 2)
  Mary = dog(&amp;quot;Mary&amp;quot;, 3, 2)
  Pipi = cat(&amp;quot;Pipi&amp;quot;, 1)
  Popo = cat(&amp;quot;Popo&amp;quot;, 5)
  
  Saly.bark()
  Mary.inject(2)
  Pipi.inject(1)
  Popo.meaw()
  
  animals = [Saly, Mary, Pipi, Popo]
  for pet in animals:
      print(&amp;quot;Name : &amp;quot;, pet.name)
      print(&amp;quot;age : &amp;quot;, pet.age)
      print(&amp;quot;injections : &amp;quot;, pet.injections)
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now this is a greate example on how classes and objects work, if you don&amp;rsquo;t get it, I don&amp;rsquo;t know what will, But, It&amp;rsquo;s harder for beginners to get thesee concepts in their minds, so try and try. Let me explain What&amp;rsquo;s going on here first.&lt;/p&gt;
&lt;p&gt;First I made two classes with for cats and dogs. I&amp;rsquo;ll explain from the begining, first I defined the class and defined it&amp;rsquo;s first funciton __ init __ to initialize the class, that first argument self is must be there in every funcion you define in a class (you can see it). and I added extra 3 variables, name age and injections. I did something strange here, injection=0 adds a variable called injection and set&amp;rsquo;s it&amp;rsquo;s default value to 0 so if we didn&amp;rsquo;t enter a value there, that variable will set to 0 by default. and in that init function, I made every variable define to it&amp;rsquo;s local variable, This is called scoping and there are two scopes. global and local, you can use local variables to assign variables that are only accessable within that function or class, then there are global variables, which can be accesses by anywhere in the code. now you can create global variables in the code, everything that&amp;rsquo;s not within a function, loop, class etc&amp;hellip; are defined globally. after that ends, I made two more funcitons with bark and inject to print barking sound and incriment the injections and print that injected several times. It&amp;rsquo;s the same for the cats also but I changed bark to meaw&lt;/p&gt;
&lt;p&gt;After classes I made four variables and made them equal to the name of the function and passed the values defined in the __ init __ section and officially these variables are now objects. now I can call their function as I did after I assigning them, These would run their functions as usual.&lt;/p&gt;
&lt;p&gt;Then I made a list of the objects called animals and added a for loop for each object in animals, here you can see in the results, that I accessed the values of the objects in it. and inspect carefully, this is the most simplest form I can imagine for object oriented python.&lt;/p&gt;
&lt;p&gt;And the results are&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  Woof Woof
  Mary Injected 2 times
  Pipi Injected 1 times
  meaw meaw
  Name :  Saly
  age :  2
  injections :  0
  Name :  Mary
  age :  3
  injections :  4
  Name :  Pipi
  age :  1
  injections :  1
  Name :  Popo
  age :  5
  injections :  0
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Run these examples for your self and see for your self.&lt;/p&gt;
&lt;h2 id=&#34;whats-next&#34;&gt;What&amp;rsquo;s Next&lt;/h2&gt;
&lt;p&gt;Well, my friends, You are officially done with this course, you can attend a free test and get a certificate from us on this course, If you&amp;rsquo;re interested, just use our mail &lt;a href=&#34;mailto:tecinpactagencies@gmail.com&#34;&gt;tecinpactagencies@gmail.com&lt;/a&gt; to contact us. Also python is a huge programming language and there are so much more libraries modules and so much more for you to try out and learn, Explore the world and maybe you&amp;rsquo;ll find your passion with this language.&lt;/p&gt;
&lt;h2 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h2&gt;
&lt;p&gt;Here, I brought you a full python tutorial with examples that are easy to follow. It&amp;rsquo;s a plesure to help beginers with their career but These tutorials take about 3-4 Days worth of work and so much effort and time, so It&amp;rsquo;s greate if you can show some love by sharing these with others. Remember sharing is careing.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Google Drive Serverless Web Hosting 2020</title>
<link>https://blog.nushankodikara.com/blog/google-drive-serverless-web-hosting-2020/</link>
<pubDate>Wed, 15 Jul 2020 08:39:18 +0530</pubDate>
      
      <guid>https://blog.nushankodikara.com/blog/google-drive-serverless-web-hosting-2020/</guid>
<description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Serverless web hosting getting popular day by day, with the rise of static websites, So here today, I&amp;rsquo;m going to show you how to host your created website ( HTML JS And CSS files ) In the google drive, and setting up a proper domain name for it using Freenome and netlify. If you are a typical follower of my blog, this would be awkward because I didn&amp;rsquo;t completed the web development course just yet. But I will very soon and a side note : This is a side post Until I&amp;rsquo;m preparing the Python Programming course.&lt;/p&gt;
&lt;h2 id=&#34;website&#34;&gt;Website&lt;/h2&gt;
&lt;p&gt;Well, for now you have the HTML file (index.html) you made from our &lt;a href=&#34;https://blog.nushankodikara.com/post/html-for-modern-web-development/&#34;&gt;HTML Zero To Hero&lt;/a&gt; Course or you should have a static website pre built. First thing&amp;rsquo;s first, we have to upload the webpage to a folder in our google drive. &lt;a href=&#34;https://blog.nushankodikara.com/zip/Sample-site.zip&#34;&gt;Here&lt;/a&gt; you can download the sample file I&amp;rsquo;m going to use in this project.&lt;/p&gt;
&lt;h2 id=&#34;pre-note-and-faq&#34;&gt;Pre Note And FAQ&lt;/h2&gt;
&lt;h5 id=&#34;is-this-hard&#34;&gt;Is This Hard&lt;/h5&gt;
&lt;p&gt;Nop this is a piece of cake and for static websites, this is golden.&lt;/p&gt;
&lt;h5 id=&#34;is-this-not-premium&#34;&gt;Is This Not Premium&lt;/h5&gt;
&lt;p&gt;The User won&amp;rsquo;t feel a difference at all, so Don&amp;rsquo;t worry on that.&lt;/p&gt;
&lt;h5 id=&#34;features&#34;&gt;Features&lt;/h5&gt;
&lt;p&gt;Servers are online pretty much all the time. Because it&amp;rsquo;s hosted in the gdrive, you have Unlimited everything except for the storage. In terms of storage you have 15GB Free and you can pay to get more. Considering this is a static site, you&amp;rsquo;ll never going to pay a penny on this.&lt;/p&gt;
&lt;h5 id=&#34;looks-fake&#34;&gt;Looks Fake&lt;/h5&gt;
&lt;p&gt;Yeah it looks not true at all, but trust me it is true and let me show you How I do it.&lt;/p&gt;
&lt;h2 id=&#34;uploading-the-pages&#34;&gt;Uploading The Pages&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s simple as it seems. Login to your google drive platform and create a folder and name it public&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200715a_01.png&#34; alt=&#34;uploading&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200715a_02.png&#34; alt=&#34;uploading&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200715a_03.png&#34; alt=&#34;uploading&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now double click to get in to that folder and put your documents in there.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200715a_04.png&#34; alt=&#34;uploading&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now get back to the root folder and right-click on the public folder and click on share.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200715a_05.png&#34; alt=&#34;uploading&#34;&gt;&lt;/p&gt;
&lt;p&gt;If the get link section says It&amp;rsquo;s restricted, select Change to anyone with the link. And the get link section should change to green.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200715a_06.png&#34; alt=&#34;uploading&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200715a_07.png&#34; alt=&#34;uploading&#34;&gt;&lt;/p&gt;
&lt;p&gt;now go to &lt;a href=&#34;https://drv.tw/&#34;&gt;Drive To Web (www.drv.tw)&lt;/a&gt; and click on Host on google Drive.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200715a_08.png&#34; alt=&#34;uploading&#34;&gt;&lt;/p&gt;
&lt;p&gt;Select your google account to login to your drive with the service.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200715a_09.png&#34; alt=&#34;uploading&#34;&gt;&lt;/p&gt;
&lt;p&gt;And allow the service to manage your gdrive by pressing allow button&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200715a_10.png&#34; alt=&#34;uploading&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200715a_11.png&#34; alt=&#34;uploading&#34;&gt;&lt;/p&gt;
&lt;p&gt;If everything got correctly, now You&amp;rsquo;ll be redirected to the admin panel and wait for it to recognize GDrive public folder.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200715a_12.png&#34; alt=&#34;uploading&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200715a_13.png&#34; alt=&#34;uploading&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now you should see a link with a /public/ folder and that&amp;rsquo;s your hosted link. You can visit it by clicking on the link and You&amp;rsquo;re pretty much done with hosting.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200715a_15.png&#34; alt=&#34;uploading&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;assigning-a-domain&#34;&gt;Assigning A Domain&lt;/h2&gt;
&lt;p&gt;If you don&amp;rsquo;t have a domain name, You can visit &lt;a href=&#34;https://blog.nushankodikara.com/post/free-top-level-domain-names-2020/&#34;&gt;This Guide&lt;/a&gt; To get a free domain and setting up it&amp;rsquo;s Name Servers.&lt;/p&gt;
&lt;p&gt;Now Let&amp;rsquo;s focus on setting it up. Here, I&amp;rsquo;m using a domain I Registered on that previous tutorial on Free TLDs. you can visit it &lt;a href=&#34;https://blog.nushankodikara.com/post/free-top-level-domain-names-2020/&#34;&gt;HERE&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So I&amp;rsquo;m using &lt;a href=&#34;https://www.tecinpactdemonstration.tk&#34;&gt;www.tecinpactdemonstration.tk&lt;/a&gt; as my domain. so Now I have to go back to the gdrive and rename our public folder to &lt;a href=&#34;https://www.tecinpactdemonstration.tk&#34;&gt;www.tecinpactdemonstration.tk&lt;/a&gt; and This is compulsory&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200715aa_01.png&#34; alt=&#34;uploading&#34;&gt;&lt;/p&gt;
&lt;p&gt;This is what my DNS Management page looks like, so now I&amp;rsquo;m renaming my GDrive folder.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200715aa_03.png&#34; alt=&#34;uploading&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now after that go to your &lt;a href=&#34;https://drv.tw/&#34;&gt;Drive To Web drv.tw&lt;/a&gt; page and refresh it. It should show you a link with your domain at the end. remember this is the directory of your page. now copy the first part of that domain, for me I&amp;rsquo;m copying the tfwk9wuluwzzw28ngta5qa-on.drv.tw part.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200715aa_04.png&#34; alt=&#34;uploading&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now come back to your Domain management section and select on add new record button, this would popup with the DNS Record manager.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200715aa_05.png&#34; alt=&#34;uploading&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now you have to select CNAME for record type and in the name, enter www. and in the value section, paste what you just copied. and for the TTL enter 1. and save it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200715aa_09.png&#34; alt=&#34;uploading&#34;&gt;&lt;/p&gt;
&lt;p&gt;What happens now is a magic. Your site would be hosted in the domain for me, my sample page is hosted in &lt;a href=&#34;http://www.tecinpactdemonstration.tk/&#34;&gt;http://www.tecinpactdemonstration.tk/&lt;/a&gt; And You&amp;rsquo;re pretty much done!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200715aa_10.png&#34; alt=&#34;uploading&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200715aa_11.png&#34; alt=&#34;uploading&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Now What is this? I&amp;rsquo;m sure you&amp;rsquo;ll be amazed seeing how great this work. Yeah this is something I&amp;rsquo;m considering. there was a time I did my blogging like this, the chances are It&amp;rsquo;s totally free and you&amp;rsquo;re golden with it. In terms of security, no one can &amp;ldquo;Hack&amp;rdquo; your website because It&amp;rsquo;s protected with google&amp;rsquo;s securities and you didn&amp;rsquo;t had to spend a penny on this project! How crazy is that! I&amp;rsquo;m providing you how you can continue with this knowledge and some better ways I use now, even for this blog. Ah and I&amp;rsquo;m not even paying a single penny for this blog (Later on that). No matter what tier you&amp;rsquo;re in, you must consider the possibilities and you should check this out.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>HTML for Modern Web Development (Zero-To-Hero)</title>
<link>https://blog.nushankodikara.com/blog/html-for-modern-web-development/</link>
<pubDate>Tue, 14 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.nushankodikara.com/blog/html-for-modern-web-development/</guid>
<description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;HTML is the structural markup language for the web development community, there are more than HTML in markup community but for websites, we use mainly HTML. I&amp;rsquo;ll explain HTML from ground level so if you&amp;rsquo;re a absolute beginner, you can follow up easily. If something went wrong, just contact me from the links provided.&lt;/p&gt;
&lt;h2 id=&#34;environment&#34;&gt;Environment&lt;/h2&gt;
&lt;p&gt;HTML doesn&amp;rsquo;t need a specific environment to run, but Modern web development required you to host the main files. So let&amp;rsquo;s start with our code editor. You can use anything if you know what you&amp;rsquo;re doing, or else I&amp;rsquo;m using &lt;a href=&#34;https://blog.nushankodikara.com/post/vs-code-for-web-developers/&#34;&gt;Visual Studio Code&lt;/a&gt; and I installed the live server extension for this demo. Or you can use &lt;a href=&#34;https://codesandbox.io/&#34;&gt;Codesandbox.io&lt;/a&gt; (Not Sponsored).&lt;/p&gt;
&lt;h2 id=&#34;folder-structure&#34;&gt;Folder Structure&lt;/h2&gt;
&lt;p&gt;Modern web development has a rule to start the main HTML file with&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Name scheme. remember the whole file name and the extension is in lowercase, and put it in the root folder. Now what is this root folder? Remember, this folder is the main folder of your Project. When You&amp;rsquo;re uploading the site or developing the hybrid app, you are uploading this folder to the servers. so it&amp;rsquo;s the main folder.&lt;/p&gt;
&lt;h2 id=&#34;setting-up-the-vs-code&#34;&gt;Setting up the VS Code&lt;/h2&gt;
&lt;p&gt;If you are using something else, just skip this part. Otherwise open the root folder in visual studio by using First&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  Ctrl + k
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Then&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  Ctrl + o
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Use this combination accordingly or go to File &amp;gt; Open Folder&lt;/p&gt;
&lt;p&gt;Then create the index.html file in the root folder and use the Go Live button at the bottom right corner, or use the following key combination&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  Alt + L
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Then&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  Alt + O
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;then the index.html file should be hosted and opened in the browser, or just use&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  localhost:5000
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;in the browser to get to the hosted file. remember the 5000 port is the default, but it could change. so replace it with whatever the GO Live button turn into. after hosting, the go live button will show a port. replace 5000 with that port and you&amp;rsquo;re good to go.&lt;/p&gt;
&lt;p&gt;Now Open the index.html File and let&amp;rsquo;s begin coding.&lt;/p&gt;
&lt;h2 id=&#34;html-introduction&#34;&gt;HTML Introduction&lt;/h2&gt;
&lt;p&gt;Main concept in the HTML language is, you just have to open a tag, add content, close the tag. This would make the content in the tag inherit the properties of the tag. Opening Tags looks like this.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;tag&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is a Closing Tag&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;/tag&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Remember, You MUST CLOSE AN OPENED TAG NO MATTER WHAT. But you can also Nest the tags accordingly to your functionality.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;tag1&amp;gt;
      &amp;lt;tag2&amp;gt;
          &amp;lt;tag3&amp;gt;&amp;lt;/tag3&amp;gt;
          &amp;lt;tag4&amp;gt;&amp;lt;/tag4&amp;gt;
      &amp;lt;/tag2&amp;gt;
  &amp;lt;/tag&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Any how you must close an opened tag! that&amp;rsquo;s a must. Otherwise your code hierarchy would get broken.&lt;/p&gt;
&lt;p&gt;Now that out of the way, Let&amp;rsquo;s start Actual coding. Remember this is the Structure so you can&amp;rsquo;t create something only from HTML. you need CSS and JS for a website, Until I explain everything, just follow up with ease.&lt;/p&gt;
&lt;h2 id=&#34;zero&#34;&gt;Zero&lt;/h2&gt;
&lt;p&gt;Let me show you what a HTML Page looks like first. you can copy this code and see for your self. just paste it in the index.html page and save it. then just double click and open it or run it from the live server. for codesandbox.io users, just paste the code and the preview should refresh.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;!DOCTYPE html&amp;gt;
  &amp;lt;html&amp;gt;
      &amp;lt;head&amp;gt;
          &amp;lt;title&amp;gt;Page Title&amp;lt;/title&amp;gt;
      &amp;lt;/head&amp;gt;
      &amp;lt;body&amp;gt;
  
          &amp;lt;h1&amp;gt;This is a Heading&amp;lt;/h1&amp;gt;
          &amp;lt;p&amp;gt;This is a paragraph.&amp;lt;/p&amp;gt;
  
      &amp;lt;/body&amp;gt;
  &amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let me explain this code section&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The DOCTYPE html declaration defines that this document is an HTML5 document, This must be in the top&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;!DOCTYPE html&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;The html element is the root element of an HTML page&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;The head element contains meta information about the HTML page&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;head&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;The title element specifies a title for the HTML page (which is shown in the browser&amp;rsquo;s title bar or in the page&amp;rsquo;s tab)&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;title&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;The body element defines the document&amp;rsquo;s body, and is a container for all the visible contents, such as headings, paragraphs, images, hyperlinks, tables, lists, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;The h1 element defines a large heading&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;The p element defines a paragraph&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;html-elements&#34;&gt;HTML Elements&lt;/h3&gt;
&lt;p&gt;Elements are tags, An HTML element is defined by a start tag, some content, and an end tag:&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;tag&amp;gt; Content... &amp;lt;/tag&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Start tag&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Element content&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;End tag&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;lt; h1&amp;gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;My First Heading&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;&amp;lt;/ h1&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;lt; p&amp;gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;My first paragraph.&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;&amp;lt;/ p&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;html-structure&#34;&gt;HTML Structure&lt;/h3&gt;
&lt;p&gt;Here&amp;rsquo;s The basic Structure of a HTML Page
&lt;img src=&#34;https://html.com/wp-content/uploads/html-homepage-layout-demo.webp&#34; alt=&#34;basic&#34;&gt;&lt;/p&gt;
&lt;p&gt;Study this structure carefully, I don&amp;rsquo;t think I&amp;rsquo;m going to add more layout sections to this course because we&amp;rsquo;re doing something serious today.&lt;/p&gt;
&lt;h3 id=&#34;html-history&#34;&gt;HTML History&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s get to know what we&amp;rsquo;re dealing with, Now we&amp;rsquo;re using HTML 5.2 and 6 would be out in the near future, I&amp;rsquo;ll let you know when we got something new.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Year&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;Version&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1989&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;Tim Berners-Lee invented www&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1991&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;Tim Berners-Lee invented HTML&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1993&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;Dave Raggett drafted HTML+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1995&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;HTML Working Group defined HTML 2.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1997&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;W3C Recommendation: HTML 3.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1999&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;W3C Recommendation: HTML 4.01&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2000&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;W3C Recommendation: XHTML 1.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2008&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;WHATWG HTML5 First Public Draft&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2012&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;WHATWG HTML5 Living Standard&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2014&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;W3C Recommendation: HTML5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2016&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;W3C Candidate Recommendation: HTML 5.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2017&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;W3C Recommendation: HTML5.1 2nd Edition&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;2017&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;W3C Recommendation: HTML5.2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;html-documents&#34;&gt;HTML Documents&lt;/h3&gt;
&lt;p&gt;VS Code users could use the ! attribution to get the basic boilerplate to their HTML document, and here&amp;rsquo;s what the basic boilerplate looks like.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;!DOCTYPE html&amp;gt;
  &amp;lt;html&amp;gt;
      &amp;lt;head&amp;gt;
          &amp;lt;title&amp;gt;Page Title&amp;lt;/title&amp;gt;
      &amp;lt;/head&amp;gt;
      &amp;lt;body&amp;gt;
  
          &amp;lt;h1&amp;gt;This is a Heading&amp;lt;/h1&amp;gt;
          &amp;lt;p&amp;gt;This is a paragraph.&amp;lt;/p&amp;gt;
  
      &amp;lt;/body&amp;gt;
  &amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;But It&amp;rsquo;s Same as the first example? Exactly. You have to use the Declaration at the top, the HTML tags, in it head and body tags. head contains preload scripts and body holds all of the document. this is it my friends, let&amp;rsquo;s dig deep&lt;/p&gt;
&lt;h3 id=&#34;the-doctype-declaration&#34;&gt;The &lt;!DOCTYPE&gt; Declaration&lt;/h3&gt;
&lt;p&gt;This declaration represents the document type, and helps browsers to display web pages correctly.
It must only appear once, at the top of the page (before any HTML tags).
the declaration for HTML 5 would be&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;!DOCTYPE html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;html-headings&#34;&gt;HTML Headings&lt;/h3&gt;
&lt;p&gt;There are 6 HTML Heading tags&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;h1&amp;gt; Content 1 &amp;lt;/h1&amp;gt;
  &amp;lt;h2&amp;gt; Content 2 &amp;lt;/h2&amp;gt;
  &amp;lt;h3&amp;gt; Content 3 &amp;lt;/h3&amp;gt;
  &amp;lt;h4&amp;gt; Content 4 &amp;lt;/h4&amp;gt;
  &amp;lt;h5&amp;gt; Content 5 &amp;lt;/h5&amp;gt;
  &amp;lt;h6&amp;gt; Content 6 &amp;lt;/h6&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Easy isn&amp;rsquo;t it? yeah, it is. These heading tags are corresponding to several sizes of headings, in the decreasing order to be exact. Try it between body tags and see for your self.&lt;/p&gt;
&lt;h3 id=&#34;html-paragraph&#34;&gt;HTML Paragraph&lt;/h3&gt;
&lt;p&gt;This would be the tag you&amp;rsquo;re working with for the most part because HTML is just book writing but with the bleeding edge technology.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;p&amp;gt; lorem ipsum &amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;No matter how much white space you used, you can&amp;rsquo;t sure HTML would pre format it before displaying&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;p&amp;gt; lorem ipsum &amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt; lorem                            ipsum &amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;These would display the same in HTML. Try it for your self. You can add a horizontal line across the document using hr tag&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;hr/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Notice this doesn&amp;rsquo;t have a closing tag? This is a self closing tag, and there are few self closing tags around here, so stay sharp for them. Also if you need a line break, use the br tag and it&amp;rsquo;s also a self closing tag.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;br/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you want to write a poem&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;p&amp;gt;
    Twinkle Twinkle little star
    How I wander what you are
    Up above the world so high
    Like a diamond in the sky
  &amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Believe or not, this won&amp;rsquo;t work, so for pre formatting ourselves, we use the pre tag&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;p&amp;gt;
      &amp;lt;pre&amp;gt;
          Twinkle Twinkle little star
          How I wander what you are
          Up above the world so high
          Like a diamond in the 
      &amp;lt;/pre&amp;gt;
  &amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Try these examples to see for your self.&lt;/p&gt;
&lt;h3 id=&#34;html-links--anchors&#34;&gt;HTML Links / Anchors&lt;/h3&gt;
&lt;p&gt;Every single one of us knows what links are? aren&amp;rsquo;t we? if you don&amp;rsquo;t know what links are, I&amp;rsquo;m not sure you should be continuing on, so check this &lt;a href=&#34;https://en.wikipedia.org/wiki/Link&#34;&gt;link&lt;/a&gt;, We have something called attributes in HTML. attributes are like properties for elements. they declared inside Elements and changes that element&amp;rsquo;s behavior. for links,&lt;/p&gt;
&lt;p&gt;we use &amp;lt; a &amp;gt; tag and in it, we can use&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Attribute&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;download&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Prompts the user to save the linked URL instead of navigating to it. Can be used with or without a value&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;href&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;The URL that the hyperlink points to. Links are not restricted to HTTP-based URLs — they can use any URL scheme supported by browsers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;hreflang&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Hints at the human language of the linked URL. No built-in functionality. Allowed values are the same as the global lang attribute.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;ping&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;A space-separated list of URLs. When the link is followed, the browser will send POST requests with the body PING to the URLs. Typically for tracking.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;referrerpolicy&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;How much of the referrer to send when following the link. See Referrer-Policy for possible values and their effects.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;rel&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;The relationship of the linked URL as space-separated link types.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;target&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Where to display the linked URL, as the name for a browsing context (a tab, window, or iframe). The following keywords have special meanings for where to load the URL&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;a simple link would be like this&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;a href=&amp;quot;https://www.tecinpact.tk&amp;quot;&amp;gt;Click Here&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;html-images&#34;&gt;HTML Images&lt;/h3&gt;
&lt;p&gt;HTML images are defined with the img tag.&lt;/p&gt;
&lt;p&gt;The source file (src), alternative text (alt), width, and height are provided as attributes&lt;/p&gt;
&lt;p&gt;simply like this&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;img src=&amp;quot;./images/profile.jpg&amp;quot; alt=&amp;quot;This would show if something went wrong&amp;quot; width=&amp;quot;100px&amp;quot; height=&amp;quot;100px&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;title-attribute-tooltips&#34;&gt;Title Attribute (Tooltips)&lt;/h3&gt;
&lt;p&gt;You can use the Title attribute anywhere to give the user a tooltip&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;p title=&amp;quot;hello&amp;quot;&amp;gt;text&amp;lt;/p&amp;gt;
  &amp;lt;h1 title=&amp;quot;hello&amp;quot;&amp;gt;text&amp;lt;/h1&amp;gt;
  &amp;lt;a title=&amp;quot;hello&amp;quot;&amp;gt;text&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;important-note&#34;&gt;Important Note&lt;/h3&gt;
&lt;p&gt;Always use single or double quotes when passing attribute values, no matter what.&lt;/p&gt;
&lt;h3 id=&#34;text-formatting&#34;&gt;Text Formatting&lt;/h3&gt;
&lt;p&gt;This is like a word document with extra steps, so we also have text formatting here, and to use it, we just have to use some tags, I&amp;rsquo;ll show you a single example but you can try others too
Formatting elements were designed to display special types of text, so use these tags.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;b - Bold text&lt;/li&gt;
&lt;li&gt;strong - Important text&lt;/li&gt;
&lt;li&gt;i - Italic text&lt;/li&gt;
&lt;li&gt;em - Emphasized text&lt;/li&gt;
&lt;li&gt;mark - Marked text&lt;/li&gt;
&lt;li&gt;small - Smaller text&lt;/li&gt;
&lt;li&gt;del - Deleted text&lt;/li&gt;
&lt;li&gt;ins - Inserted text&lt;/li&gt;
&lt;li&gt;sub - Subscript text&lt;/li&gt;
&lt;li&gt;sup - Superscript text&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To use these formatters, I&amp;rsquo;ll demonstrate it with a paragraph and a heading, but you can use it anywhere&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;p&amp;gt; Hello &amp;lt;b&amp;gt;Bold text&amp;lt;/b&amp;gt; World &amp;lt;/p&amp;gt;
  &amp;lt;h1&amp;gt; Hello &amp;lt;i&amp;gt;Italic text&amp;lt;/i&amp;gt; World &amp;lt;/h1&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;html-quotation-and-citation-elements&#34;&gt;HTML Quotation and Citation Elements&lt;/h3&gt;
&lt;p&gt;We will go through the blockquote,q, abbr, address, cite, bdo HTML elements.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Element&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;blockquote&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;this element can blockquote text sections.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;q&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;this element is used for short quotations&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;abbr&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;This element defines an abbreviation or an acronym.Marking abbreviations can give useful information to browsers, translation systems and search-engines.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;address&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;as it says, it&amp;rsquo;s for typing out addresses, now this tag would improve SEO index on the page&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;cite&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;this tag defines the title of a creative work for an example a book, a painting, a poem, a song etc.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;bdo&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;BDO stands for Bi-Directional Override.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;let me show you an example&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;address&amp;gt;
      No.100,
      somewhere street,
      somewhere state,
      101010,
      a country.
  &amp;lt;/address&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;and BDO has something to show you&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;bdo dir=&amp;quot;rtl&amp;quot;&amp;gt;This text will be written from right to left&amp;lt;/bdo&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is how you use a bdo element. for others, just enclose the text with it and you&amp;rsquo;re pretty much done.&lt;/p&gt;
&lt;h3 id=&#34;html-comments&#34;&gt;HTML Comments&lt;/h3&gt;
&lt;p&gt;Now now, this is not how you can add a comment section on your page, it&amp;rsquo;s to comment out certain hints for you to understand the code in the future because humans are just a potato when remembering things, so it&amp;rsquo;s useful to add comments in documents so you don&amp;rsquo;t have to remember a 1200 line document entirely.&lt;/p&gt;
&lt;p&gt;Comments are simple and straight forward.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;!-- This Won&#39;t Do anything with the code --&amp;gt;
  &amp;lt;p&amp;gt; bla bla bla bla bla &amp;lt;/p&amp;gt;
  &amp;lt;!-- 
       This
       Is A
       Multiline Comment
   --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;html-colors&#34;&gt;HTML Colors&lt;/h3&gt;
&lt;p&gt;you can create any color you want from hex codes but, there are pre defined 140 standard colors to begin with, &lt;a href=&#34;https://blog.nushankodikara.com/pdf/color-names.pdf&#34;&gt;Here&lt;/a&gt; you can see the complete color list.&lt;/p&gt;
&lt;h3 id=&#34;adding-css&#34;&gt;Adding CSS&lt;/h3&gt;
&lt;p&gt;HTML Can&amp;rsquo;t use it&amp;rsquo;s element&amp;rsquo;s to add styles to the page, so it needs CSS. I&amp;rsquo;ll cover CSS in the future and I won&amp;rsquo;t showcase any css codes today, but I&amp;rsquo;ll show how you can add CSS to the HTML Page since It&amp;rsquo;s compulsory to use CSS.&lt;/p&gt;
&lt;p&gt;There are 3 ways of doing this&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Inline - Using style attribute in any of the elements&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;tag style=&amp;quot;css code here&amp;quot;&amp;gt; Content &amp;lt;/tag&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Internal - Using style tags in the head&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;style&amp;gt; css goes here &amp;lt;/style&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;External - you can link a css document in the head&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;styles.css&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;html-links&#34;&gt;HTML Links&lt;/h3&gt;
&lt;p&gt;Here we go a bit deeper in to the situation. we are discussing about target and url types.&lt;/p&gt;
&lt;h5 id=&#34;the-target-attribute&#34;&gt;The target Attribute&lt;/h5&gt;
&lt;p&gt;By default, the linked page will be displayed in the current browser window. To change this, you must specify another target for the link.&lt;/p&gt;
&lt;p&gt;The target attribute specifies where to open the linked document.&lt;/p&gt;
&lt;p&gt;The target attribute can have one of the following values:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;_self - Default. Opens the document in the same window/tab as it was clicked&lt;/li&gt;
&lt;li&gt;_blank - Opens the document in a new window or tab&lt;/li&gt;
&lt;li&gt;_parent - Opens the document in the parent frame&lt;/li&gt;
&lt;li&gt;_top - Opens the document in the full body of the window&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;example&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;a href=&amp;quot;https://www.tecinpact.tk&amp;quot; target=&amp;quot;_blank&amp;quot; &amp;gt; Content &amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;absolute-urls-vs-relative-urls&#34;&gt;Absolute URLs vs. Relative URLs&lt;/h5&gt;
&lt;p&gt;all examples above are using an absolute URL (a full web address) in the href attribute. A local link (a link to a page within the same website) is specified with a relative URL (without the &amp;ldquo;https://www&amp;rdquo; part)&lt;/p&gt;
&lt;p&gt;Absolute URL&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;a href=&amp;quot;https://www.tecinpact.tk/index.html&amp;quot;&amp;gt;HTML&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Relative URL&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;a href=&amp;quot;index.html&amp;quot;&amp;gt;HTML&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Both of these are referring to the same page if it&amp;rsquo;s placed in the roots of my blog.
Also you can add anything in anchor tags, and what inside would turn into the link, even you can use images like this&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;a href=&amp;quot;https://www.tecinpact.tk/&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;images/site-feature-image.png&amp;quot;/&amp;gt;&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;I Think you got the point here. But linking for emails, that&amp;rsquo;s something else. this is the format for it.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;a href=&amp;quot;mailto:someone@example.com&amp;quot;&amp;gt;Send email&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Also you can use a link as a bookmark, which means if someone clicked on that link, he or she will be scrolled to a certain location in the document. for this first you need to assign IDs, i&amp;rsquo;ll explains IDs in a while, but for now, say if you have a id assigned to a element called myID. to scroll to it,&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;a href=&amp;quot;#myID&amp;quot;&amp;gt;Scroll to My ID&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;of if you&amp;rsquo;re using an external page,&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;a href=&amp;quot;that-page.html#myID&amp;quot;&amp;gt;Scroll to My ID&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;html-tables&#34;&gt;HTML Tables&lt;/h3&gt;
&lt;p&gt;Here, you can use the table element to create tables. How ever there are more to this, In tables, you have to define Table Rows with tr element inside the table element and Inside the table rows, you have to define table heading or table data with th or tr elements, let me show you a Simple Table&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;table&amp;gt;
      &amp;lt;tr&amp;gt;
          &amp;lt;th&amp;gt; First Heading &amp;lt;/th&amp;gt;
          &amp;lt;th&amp;gt; Second Heading &amp;lt;/th&amp;gt;
          &amp;lt;th&amp;gt; Third Heading &amp;lt;/th&amp;gt;
      &amp;lt;/tr&amp;gt;
      &amp;lt;tr&amp;gt;
          &amp;lt;td&amp;gt; First Data &amp;lt;/td&amp;gt;
          &amp;lt;td&amp;gt; Second Data &amp;lt;/td&amp;gt;
          &amp;lt;td&amp;gt; Third Data &amp;lt;/td&amp;gt;
      &amp;lt;/tr&amp;gt;
  &amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can expand a data cell in columns or rows, this is the same process as merging cells in excel sheets. There are two ways on doing this,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spread in columns with Colspan&lt;/li&gt;
&lt;li&gt;Spread in rows with Rowspan&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is a demonstration on how you can do this&lt;/p&gt;
&lt;p&gt;Considering Colspan attribute&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;table&amp;gt;
      &amp;lt;tr&amp;gt;
          &amp;lt;th&amp;gt;Name&amp;lt;/th&amp;gt;
          &amp;lt;th colspan=&amp;quot;2&amp;quot;&amp;gt;Telephone&amp;lt;/th&amp;gt;
      &amp;lt;/tr&amp;gt;
      &amp;lt;tr&amp;gt;
          &amp;lt;td&amp;gt;Bill Gates&amp;lt;/td&amp;gt;
          &amp;lt;td&amp;gt;55577854&amp;lt;/td&amp;gt;
          &amp;lt;td&amp;gt;55577855&amp;lt;/td&amp;gt;
      &amp;lt;/tr&amp;gt;
  &amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Considering Rowspan attribute&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;table&amp;gt;
      &amp;lt;tr&amp;gt;
          &amp;lt;th&amp;gt;Name:&amp;lt;/th&amp;gt;
          &amp;lt;td&amp;gt;Bill Gates&amp;lt;/td&amp;gt;
      &amp;lt;/tr&amp;gt;
      &amp;lt;tr&amp;gt;
          &amp;lt;th rowspan=&amp;quot;2&amp;quot;&amp;gt;Telephone:&amp;lt;/th&amp;gt;
          &amp;lt;td&amp;gt;55577854&amp;lt;/td&amp;gt;
      &amp;lt;/tr&amp;gt;
      &amp;lt;tr&amp;gt;
          &amp;lt;td&amp;gt;55577855&amp;lt;/td&amp;gt;
      &amp;lt;/tr&amp;gt;
  &amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now here, you&amp;rsquo;ll notice that I&amp;rsquo;m not providing you with any Images lately on the display side of the things, it&amp;rsquo;s because by now, you should be trying these by your self! If not, Why are you even following this article?&lt;/p&gt;
&lt;p&gt;Also You can add captions to the table with the caption element&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;table&amp;gt;
      &amp;lt;caption&amp;gt;Our First Table&amp;lt;/caption&amp;gt;
      &amp;lt;tr&amp;gt;
          &amp;lt;th&amp;gt; First Heading &amp;lt;/th&amp;gt;
          &amp;lt;th&amp;gt; Second Heading &amp;lt;/th&amp;gt;
          &amp;lt;th&amp;gt; Third Heading &amp;lt;/th&amp;gt;
      &amp;lt;/tr&amp;gt;
      &amp;lt;tr&amp;gt;
          &amp;lt;td&amp;gt; First Data &amp;lt;/td&amp;gt;
          &amp;lt;td&amp;gt; Second Data &amp;lt;/td&amp;gt;
          &amp;lt;td&amp;gt; Third Data &amp;lt;/td&amp;gt;
      &amp;lt;/tr&amp;gt;
  &amp;lt;/table&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Important Notice&lt;/strong&gt; The Caption element must be defined after the Table element as in the above example.&lt;/p&gt;
&lt;h3 id=&#34;html-lists&#34;&gt;HTML Lists&lt;/h3&gt;
&lt;p&gt;It&amp;rsquo;s pretty straight forward from here on, There are three types of lists.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Un-ordered lists&lt;/li&gt;
&lt;li&gt;Ordered lists&lt;/li&gt;
&lt;li&gt;Description lists&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;No matter what you use, you have to add the elements to the list using li element. Let me demonstrate to you&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;!-- Un-ordered List --&amp;gt;
  &amp;lt;ul&amp;gt;
      &amp;lt;li&amp;gt; element 1 &amp;lt;/li&amp;gt;
      &amp;lt;li&amp;gt; element 2 &amp;lt;/li&amp;gt;
      &amp;lt;li&amp;gt; element 3 &amp;lt;/li&amp;gt;
  &amp;lt;/ul&amp;gt;

  &amp;lt;!-- Ordered List --&amp;gt;
  &amp;lt;ol&amp;gt;
      &amp;lt;li&amp;gt; element 1 &amp;lt;/li&amp;gt;
      &amp;lt;li&amp;gt; element 2 &amp;lt;/li&amp;gt;
      &amp;lt;li&amp;gt; element 3 &amp;lt;/li&amp;gt;
  &amp;lt;/ol&amp;gt;

  &amp;lt;!-- Description List --&amp;gt;
  &amp;lt;dl&amp;gt;
      &amp;lt;dt&amp;gt;Main Item&amp;lt;/dt&amp;gt;
      &amp;lt;dd&amp;gt;main Item description&amp;lt;/dd&amp;gt;
      &amp;lt;dt&amp;gt;Secondary Item&amp;lt;/dt&amp;gt;
      &amp;lt;dd&amp;gt;Secondary Item description&amp;lt;/dd&amp;gt;
  &amp;lt;/dl&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;html-blocks&#34;&gt;HTML Blocks&lt;/h3&gt;
&lt;p&gt;Now my friends if you&amp;rsquo;re comfortable with the concepts of HTML, let me show you how to group anything in HTML. grouping elements can give you the possibilities and the ease to apply certain properties to a group of elements without doing it one by one, There are few blocks you can use for this purpose and they are pretty much self explanatory.&lt;/p&gt;
&lt;p&gt;Here are some block-level elements in HTML.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;address&lt;/li&gt;
&lt;li&gt;article&lt;/li&gt;
&lt;li&gt;aside&lt;/li&gt;
&lt;li&gt;blockquote&lt;/li&gt;
&lt;li&gt;canvas&lt;/li&gt;
&lt;li&gt;dd&lt;/li&gt;
&lt;li&gt;div&lt;/li&gt;
&lt;li&gt;dl&lt;/li&gt;
&lt;li&gt;dt&lt;/li&gt;
&lt;li&gt;fieldset&lt;/li&gt;
&lt;li&gt;figcaption&lt;/li&gt;
&lt;li&gt;figure&lt;/li&gt;
&lt;li&gt;footer&lt;/li&gt;
&lt;li&gt;form&lt;/li&gt;
&lt;li&gt;h1-h6&lt;/li&gt;
&lt;li&gt;header&lt;/li&gt;
&lt;li&gt;hr&lt;/li&gt;
&lt;li&gt;li&lt;/li&gt;
&lt;li&gt;main&lt;/li&gt;
&lt;li&gt;nav&lt;/li&gt;
&lt;li&gt;noscript&lt;/li&gt;
&lt;li&gt;ol&lt;/li&gt;
&lt;li&gt;p&lt;/li&gt;
&lt;li&gt;pre&lt;/li&gt;
&lt;li&gt;section&lt;/li&gt;
&lt;li&gt;table&lt;/li&gt;
&lt;li&gt;tfoot&lt;/li&gt;
&lt;li&gt;ul&lt;/li&gt;
&lt;li&gt;video&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To use HTML Block-level elements&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;tag&amp;gt;
      .
      content goes here
      .
  &amp;lt;/tag&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now don&amp;rsquo;t get panic seeing these, You&amp;rsquo;ll understand these elements with some examples, and also the internet is open for more information. (Just google for more information.)&lt;/p&gt;
&lt;p&gt;And Here are some Inline-elements&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a&lt;/li&gt;
&lt;li&gt;abbr&lt;/li&gt;
&lt;li&gt;acronym&lt;/li&gt;
&lt;li&gt;b&lt;/li&gt;
&lt;li&gt;bdo&lt;/li&gt;
&lt;li&gt;big&lt;/li&gt;
&lt;li&gt;br&lt;/li&gt;
&lt;li&gt;button&lt;/li&gt;
&lt;li&gt;cite&lt;/li&gt;
&lt;li&gt;code&lt;/li&gt;
&lt;li&gt;dfn&lt;/li&gt;
&lt;li&gt;em&lt;/li&gt;
&lt;li&gt;i&lt;/li&gt;
&lt;li&gt;img&lt;/li&gt;
&lt;li&gt;input&lt;/li&gt;
&lt;li&gt;kbd&lt;/li&gt;
&lt;li&gt;label&lt;/li&gt;
&lt;li&gt;map&lt;/li&gt;
&lt;li&gt;object&lt;/li&gt;
&lt;li&gt;output&lt;/li&gt;
&lt;li&gt;q&lt;/li&gt;
&lt;li&gt;samp&lt;/li&gt;
&lt;li&gt;script&lt;/li&gt;
&lt;li&gt;select&lt;/li&gt;
&lt;li&gt;small&lt;/li&gt;
&lt;li&gt;span&lt;/li&gt;
&lt;li&gt;strong&lt;/li&gt;
&lt;li&gt;sub&lt;/li&gt;
&lt;li&gt;sup&lt;/li&gt;
&lt;li&gt;textarea&lt;/li&gt;
&lt;li&gt;time&lt;/li&gt;
&lt;li&gt;tt&lt;/li&gt;
&lt;li&gt;var&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To use inline elements&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  bla bla &amp;lt;tag&amp;gt; this is a &amp;lt;/tag&amp;gt; paragraph in something in the document
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now, you don&amp;rsquo;t have to use all of these to remembered in order to master in html, but it&amp;rsquo;s handy to know what&amp;rsquo;s there to use in case of &amp;ldquo;An Event&amp;rdquo;.&lt;/p&gt;
&lt;h5 id=&#34;div-element&#34;&gt;Div element&lt;/h5&gt;
&lt;p&gt;Now this div element stand for division and this is something special because we have to use this in like everywhere because this is the main element on grouping elements, to use&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;div&amp;gt;
      .
      .
      Content Goes Here
      .
      .
  &amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;And you can apply certain properties to that div specifically. (more details later)&lt;/p&gt;
&lt;h5 id=&#34;span-element&#34;&gt;Span element&lt;/h5&gt;
&lt;p&gt;This is exactly like the div element but this can be used inline.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  bla bla &amp;lt;span&amp;gt; this is a &amp;lt;/span&amp;gt; paragraph in something in the document
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;html-classes&#34;&gt;HTML Classes&lt;/h3&gt;
&lt;p&gt;This is a method of selecting a certain set of elements, spread across the HTML document and without using elements, now this attribute would be used in CSS and JS to identify the element and I&amp;rsquo;ll explain how to select using classes in the future, for now let&amp;rsquo;s add classes to certain elements&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;tag class=&amp;quot;your-class second-class&amp;quot;&amp;gt;
      .
      .
      Content Goes Here
      .
      .
  &amp;lt;/tag&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;you can have any number of classes assigned for a element and separate them with a space and you&amp;rsquo;re good to go.&lt;/p&gt;
&lt;h3 id=&#34;html-id&#34;&gt;HTML ID&lt;/h3&gt;
&lt;p&gt;This is exactly like classes but you can&amp;rsquo;t use multiple IDs for a element or you can&amp;rsquo;t assign a single ID to multiple tags. IDs are used to select specific tags such as a input box for password in a login forum. more details later. Let&amp;rsquo;s assign an ID&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;tag id=&amp;quot;myID&amp;quot;&amp;gt;
      .
      .
      Content Goes Here
      .
      .
  &amp;lt;/tag&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;html-iframes&#34;&gt;HTML Iframes&lt;/h3&gt;
&lt;p&gt;Iframes are also easy to use, you can embed another webpage (local or external) in to your webpage. and it&amp;rsquo;s something you have to try for yourself to understand&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;iframe src=&amp;quot;https://www.tecinpact.tk/&amp;quot; title=&amp;quot;description&amp;quot; width=&amp;quot;100px&amp;quot; height=&amp;quot;100px&amp;quot;&amp;gt;
  &amp;lt;/iframe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;also you can change the src of the iframe using an anchor as this&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;iframe src=&amp;quot;https://www.tecinpact.tk/&amp;quot; name=&amp;quot;iframe_a&amp;quot; title=&amp;quot;Iframe Example&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;
  &amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://www.tecinpact.tk/post/html-for-modern-web-development/&amp;quot; target=&amp;quot;iframe_a&amp;quot;&amp;gt;W3Schools.com&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;script-element&#34;&gt;Script Element&lt;/h3&gt;
&lt;p&gt;You can insert JS to your webpage externally or locally using script tag, to use it externally.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;script src=&amp;quot;external-js-file.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;or Internally&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;script&amp;gt;
      // JS Goes Here
  &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;And don&amp;rsquo;t consider this for now, after I published the JS crash course, you&amp;rsquo;re good to go.&lt;/p&gt;
&lt;h3 id=&#34;head-element&#34;&gt;Head element&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s turn around to the boilerplate and our Head element, It&amp;rsquo;s one of the main elements in HTML and you can use it to house the title, style, meta, link, script and base elements which describes the document&lt;/p&gt;
&lt;p&gt;you should know by now how these work, so I&amp;rsquo;ll provide some examples.&lt;/p&gt;
&lt;p&gt;Linking external css files&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;mystyle.css&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Define character set&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Define Keywords for SEO&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;meta name=&amp;quot;keywords&amp;quot; content=&amp;quot;HTML, CSS, JavaScript&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Define Description for SEO&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;meta name=&amp;quot;description&amp;quot; content=&amp;quot;Free Web tutorials&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Define the author of the page&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;meta name=&amp;quot;author&amp;quot; content=&amp;quot;John Doe&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Refresh the page every 30 seconds&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;meta http-equiv=&amp;quot;refresh&amp;quot; content=&amp;quot;30&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Setting the viewport to make your website look good on all devices&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;html-computer-codes&#34;&gt;HTML Computer codes&lt;/h3&gt;
&lt;p&gt;HTML Has a unique property to showcase computer codes in your documents, as I&amp;rsquo;m doing right now, you can use code and kbd elements to showcase codes and keyboard inputs easily, also samp for programing outputs and var for Variables&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;code&amp;gt;
      var x = 10;
      var b = 5;
  &amp;lt;/code&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  This is kbd function, to copy &amp;lt;kbd&amp;gt;Ctrl + C&amp;lt;/kbd&amp;gt; is useful
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;p&amp;gt;Message from my computer:&amp;lt;/p&amp;gt;
  &amp;lt;p&amp;gt;&amp;lt;samp&amp;gt;File not found.&amp;lt;br&amp;gt;Press F1 to continue&amp;lt;/samp&amp;gt;&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;p&amp;gt;The area of a triangle is: 1/2 x &amp;lt;var&amp;gt;b&amp;lt;/var&amp;gt; x &amp;lt;var&amp;gt;h&amp;lt;/var&amp;gt;, where &amp;lt;var&amp;gt;b&amp;lt;/var&amp;gt; is the base, and &amp;lt;var&amp;gt;h&amp;lt;/var&amp;gt; is the vertical height.&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;html-forms&#34;&gt;HTML Forms&lt;/h3&gt;
&lt;p&gt;You can create a HTML Form using the form element, in it you can set&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Text Inputs&lt;/li&gt;
&lt;li&gt;Email Inputs&lt;/li&gt;
&lt;li&gt;Password Inputs&lt;/li&gt;
&lt;li&gt;Radio buttons&lt;/li&gt;
&lt;li&gt;Selections&lt;/li&gt;
&lt;li&gt;Submit button&lt;/li&gt;
&lt;li&gt;Reset button&lt;/li&gt;
&lt;li&gt;Text areas&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We won&amp;rsquo;t be considering the functionality of forms under modern web development until JS course, so let&amp;rsquo;s learn the structure, here&amp;rsquo;s an example for you to try out&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;form&amp;gt;
      &amp;lt;label&amp;gt;Text&amp;lt;/label&amp;gt;
      &amp;lt;input type=&amp;quot;text&amp;quot; id=&amp;quot;text&amp;quot; name=&amp;quot;name&amp;quot; placeholder=&amp;quot;Text&amp;quot;&amp;gt;
      &amp;lt;label&amp;gt;Email&amp;lt;/label&amp;gt;
      &amp;lt;input type=&amp;quot;email&amp;quot; id=&amp;quot;email&amp;quot; name=&amp;quot;email&amp;quot; placeholder=&amp;quot;Email&amp;quot;&amp;gt;
      &amp;lt;label&amp;gt;Password&amp;lt;/label&amp;gt;
      &amp;lt;input type=&amp;quot;password&amp;quot; id=&amp;quot;password&amp;quot; name=&amp;quot;password&amp;quot; placeholder=&amp;quot;password&amp;quot;&amp;gt;
      &amp;lt;label&amp;gt;Textarea&amp;lt;/label&amp;gt;
      &amp;lt;textarea placeholder=&amp;quot;textArea&amp;quot; id=&amp;quot;textarea&amp;quot; name=&amp;quot;textarea&amp;quot; &amp;gt;&amp;lt;/textarea&amp;gt;
      &amp;lt;br/&amp;gt;
      &amp;lt;input type=&amp;quot;radio&amp;quot; id=&amp;quot;male&amp;quot; name=&amp;quot;gender&amp;quot; value=&amp;quot;male&amp;quot;&amp;gt;
      &amp;lt;label for=&amp;quot;male&amp;quot;&amp;gt;Male&amp;lt;/label&amp;gt;&amp;lt;br&amp;gt;
      &amp;lt;input type=&amp;quot;radio&amp;quot; id=&amp;quot;female&amp;quot; name=&amp;quot;gender&amp;quot; value=&amp;quot;female&amp;quot;&amp;gt;
      &amp;lt;label for=&amp;quot;female&amp;quot;&amp;gt;Female&amp;lt;/label&amp;gt;&amp;lt;br&amp;gt;
      &amp;lt;input type=&amp;quot;radio&amp;quot; id=&amp;quot;other&amp;quot; name=&amp;quot;gender&amp;quot; value=&amp;quot;other&amp;quot;&amp;gt;
      &amp;lt;label for=&amp;quot;other&amp;quot;&amp;gt;Other&amp;lt;/label&amp;gt;
      &amp;lt;select id=&amp;quot;cars&amp;quot; name=&amp;quot;cars&amp;quot;&amp;gt;
          &amp;lt;option value=&amp;quot;volvo&amp;quot;&amp;gt;Volvo&amp;lt;/option&amp;gt;
          &amp;lt;option value=&amp;quot;saab&amp;quot;&amp;gt;Saab&amp;lt;/option&amp;gt;
          &amp;lt;option value=&amp;quot;fiat&amp;quot;&amp;gt;Fiat&amp;lt;/option&amp;gt;
          &amp;lt;option value=&amp;quot;audi&amp;quot;&amp;gt;Audi&amp;lt;/option&amp;gt;
      &amp;lt;/select&amp;gt;
      &amp;lt;datalist id=&amp;quot;browsers&amp;quot;&amp;gt;
          &amp;lt;option value=&amp;quot;Internet Explorer&amp;quot;&amp;gt;
          &amp;lt;option value=&amp;quot;Firefox&amp;quot;&amp;gt;
          &amp;lt;option value=&amp;quot;Chrome&amp;quot;&amp;gt;
          &amp;lt;option value=&amp;quot;Opera&amp;quot;&amp;gt;
          &amp;lt;option value=&amp;quot;Safari&amp;quot;&amp;gt;
      &amp;lt;/datalist&amp;gt;
  &amp;lt;/form&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;These are the basics and you can try to understand what each item does, and here&amp;rsquo;s a list of Input types to try on&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;button&lt;/li&gt;
&lt;li&gt;checkbox&lt;/li&gt;
&lt;li&gt;color&lt;/li&gt;
&lt;li&gt;date&lt;/li&gt;
&lt;li&gt;datetime-local&lt;/li&gt;
&lt;li&gt;email&lt;/li&gt;
&lt;li&gt;file&lt;/li&gt;
&lt;li&gt;hidden&lt;/li&gt;
&lt;li&gt;image&lt;/li&gt;
&lt;li&gt;month&lt;/li&gt;
&lt;li&gt;number&lt;/li&gt;
&lt;li&gt;password&lt;/li&gt;
&lt;li&gt;radio&lt;/li&gt;
&lt;li&gt;range&lt;/li&gt;
&lt;li&gt;reset&lt;/li&gt;
&lt;li&gt;search&lt;/li&gt;
&lt;li&gt;submit&lt;/li&gt;
&lt;li&gt;tel&lt;/li&gt;
&lt;li&gt;text&lt;/li&gt;
&lt;li&gt;time&lt;/li&gt;
&lt;li&gt;url&lt;/li&gt;
&lt;li&gt;week&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;How to use these again? Let me show you&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;input type=&amp;quot;type-from-above&amp;quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;use a ID and name attribute to give it a uniqueness so we can select it later.&lt;/p&gt;
&lt;p&gt;also for input element you can use these attributes, and they are also pretty much self explanatory&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;value&lt;/strong&gt; Specify an initial value&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;readonly&lt;/strong&gt; make the field readonly&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;disabled&lt;/strong&gt; Disable the field&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;size&lt;/strong&gt; visible width in characters.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;maxlength&lt;/strong&gt; Max length of an input field&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;min&lt;/strong&gt; and &lt;strong&gt;max&lt;/strong&gt; Minimum and maximum values for an input field&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;multiple&lt;/strong&gt; specifies that the user is allowed to enter more than one value in an input field&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pattern&lt;/strong&gt; specifies a regular expression that the input field&amp;rsquo;s value is checked against, when the form is submitted.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;placeholder&lt;/strong&gt; specifies short a hint that describes the expected value of an input field.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;required&lt;/strong&gt; attribute specifies that an input field must be filled out before submitting the form.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;autofocus&lt;/strong&gt; specifies that an input field should automatically get focus when the page loads.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;autocomplete&lt;/strong&gt; specifies whether a form or an input field should have autocomplete on or off.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now how to use them, I&amp;rsquo;ll provide an example with all of those above.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;input value=&amp;quot;Jhon Doe&amp;quot; readonly&amp;gt;
  &amp;lt;input value=&amp;quot;Jhon Doe&amp;quot; disabled&amp;gt;
  &amp;lt;input value=&amp;quot;Jhon Doe&amp;quot; size=&amp;quot;30&amp;quot; maxlength=&amp;quot;40&amp;quot; required autofocus autocomplete=&amp;quot;off&amp;quot; placeholder=&amp;quot;Name&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;html-media&#34;&gt;HTML Media&lt;/h3&gt;
&lt;p&gt;To embed videos, it&amp;rsquo;s straight forward.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;      &amp;lt;video width=&amp;quot;320&amp;quot; height=&amp;quot;240&amp;quot; autoplay&amp;gt;
          &amp;lt;source src=&amp;quot;movie.mp4&amp;quot; type=&amp;quot;video/mp4&amp;quot;&amp;gt;
          &amp;lt;source src=&amp;quot;movie.ogg&amp;quot; type=&amp;quot;video/ogg&amp;quot;&amp;gt;
          Your browser does not support the video tag.
      &amp;lt;/video&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Also embedding audio is straight forward.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;audio controls&amp;gt;
      &amp;lt;source src=&amp;quot;horse.ogg&amp;quot; type=&amp;quot;audio/ogg&amp;quot;&amp;gt;
      &amp;lt;source src=&amp;quot;horse.mp3&amp;quot; type=&amp;quot;audio/mpeg&amp;quot;&amp;gt;
      Your browser does not support the audio element.
  &amp;lt;/audio&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;html-special-elements&#34;&gt;HTML Special Elements&lt;/h3&gt;
&lt;p&gt;Well, here are some special elements to use in your documents.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;br - This element is used for line breaks&lt;/li&gt;
&lt;li&gt;hr - This element is used for Horizontal lines&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;lt;p&amp;gt;Hello the world &amp;lt;br&amp;gt; Of HTML Magic&amp;lt;/p&amp;gt;
  &amp;lt;hr&amp;gt;
  &amp;lt;p&amp;gt;In A Land of code, in the time of web development&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;wtf-is-this-how-can-this-make-a-website&#34;&gt;WTF Is This? how can this make a Website?&lt;/h2&gt;
&lt;p&gt;Now now, calm down for a second, HTML is the structure for the websites, you can&amp;rsquo;t and you shouldn&amp;rsquo;t style your document with HTML attributes, we&amp;rsquo;re using CSS for styling, and We&amp;rsquo;re going to explore CSS in a further course. and for HTML, You&amp;rsquo;re a Hero now!&lt;/p&gt;
&lt;h2 id=&#34;thats-it&#34;&gt;That&amp;rsquo;s It?&lt;/h2&gt;
&lt;p&gt;That&amp;rsquo;s it, for modern web development, but there are more tags and so many more things on html, but we don&amp;rsquo;t want any of those, because we&amp;rsquo;re creating our own layouts and they are much more responsible than default HTML 5 options. You&amp;rsquo;re open to explore.&lt;/p&gt;
&lt;h2 id=&#34;whats-next&#34;&gt;What&amp;rsquo;s next?&lt;/h2&gt;
&lt;p&gt;You can get a certificate from Us on completing HTML course for free. If you&amp;rsquo;re interested send what certificates you want to &lt;a href=&#34;mailto:tecinpactagencies@gmail.com&#34;&gt;tecinpactagencies@gmail.com&lt;/a&gt; and After a brief test on your knowledge, We&amp;rsquo;ll Issue a certificate. Also stay tuned for CSS and JS pages&lt;/p&gt;
&lt;h2 id=&#34;cheatsheet-&#34;&gt;Cheatsheet ?&lt;/h2&gt;
&lt;p&gt;Yeah here&amp;rsquo;s a cheatsheet for HTML&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://htmlcheatsheet.com/&#34;&gt;Html Cheatsheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://websitesetup.org/wp-content/uploads/2019/10/WSU-HTML-Cheat-Sheet.pdf&#34;&gt;PDF&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Well, It&amp;rsquo;s hard to make these courses for you, if you can show some love, share these, It would great! Well, anyhow I&amp;rsquo;ll post Css and Js as soon as possible so we can round this up. HTML can be used to create websites mainly and hybrid mobile and desktop apps, but it should be stylized with css and add functions with Js. Stay tuned and I&amp;rsquo;ll make you a pro within no time.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Royalty Free Internet Resources</title>
<link>https://blog.nushankodikara.com/blog/royalty-free-internet-resources/</link>
<pubDate>Mon, 13 Jul 2020 18:14:56 +0530</pubDate>
      
      <guid>https://blog.nushankodikara.com/blog/royalty-free-internet-resources/</guid>
<description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;No matter what profession you are in, in a certain period of time, you are going to face a situation which you need some materials royalty free for your projects, maybe Images, videos, sound clips etc.. So in this article, let me show you my pics for royalty free Resource collections.&lt;/p&gt;
&lt;h2 id=&#34;but-first-lets-go-over-some-basic-royalty-free-terms&#34;&gt;But, first, let’s go over some basic royalty-free terms.&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Royalty-Free&lt;/strong&gt;: This allows you to use intellectual property without having to pay royalties or license fees.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Creative Commons&lt;/strong&gt;: You can use these images for free since the artist has waived their rights to their work. However, always review the terms before publishing these images.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Public Domain&lt;/strong&gt;: If any image was created in the United States prior to 1923 then they’re part of the public domain. This means that you’re allowed to copy, modify, or distribute these images without permission.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Attribution&lt;/strong&gt;: You can use these images as long as you give credit to the author.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Commercial Use&lt;/strong&gt;: You’re permitted to use royalty-free images for any type of business venture.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Membership&lt;/strong&gt;: You must sign-up to the site in order to use the royalty-free images. Some sites will charge you for membership.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now that out to the side, let&amp;rsquo;s begin shall we?&lt;/p&gt;
&lt;h2 id=&#34;images&#34;&gt;Images&lt;/h2&gt;
&lt;p&gt;These sites contain Royalty-free High quality images to use for free.&lt;/p&gt;
&lt;h4 id=&#34;unsplashhttpsunsplashcom&#34;&gt;&lt;a href=&#34;https://unsplash.com/&#34;&gt;Unsplash&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;All photos published on Unsplash are licensed under Creative Commons Zero. However, most of the times, it doesn&amp;rsquo;t matter and mention unsplash as a whole and you&amp;rsquo;re good to go.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200713_01.png&#34; alt=&#34;Images&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;pixabayhttpspixabaycom&#34;&gt;&lt;a href=&#34;https://pixabay.com/&#34;&gt;Pixabay&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This is similar to unsplash but Pixabay ;D this site is also licensed under Creative Commons Zero so you can give the artist credits for using these in your projects.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200713_02.png&#34; alt=&#34;Images&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;stocksnaphttpsstocksnapio&#34;&gt;&lt;a href=&#34;https://stocksnap.io/&#34;&gt;Stocksnap&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Stock snap is the biggest site of three of these, but I always end-up with Unsplash for my daily needs ( As a habit ). but you shouldn&amp;rsquo;t do that, so check this also.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200713_03.png&#34; alt=&#34;Images&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;bursthttpsburstshopifycom&#34;&gt;&lt;a href=&#34;https://burst.shopify.com/&#34;&gt;Burst&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Burst by shopify, as it says, It&amp;rsquo;s from shopify. This site is also licensed under Creative Commons Zero and you&amp;rsquo;re already know the drill.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200713_04.png&#34; alt=&#34;Images&#34;&gt;&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll do a 101 Royalty free image sites in the future and stay tuned for that.&lt;/p&gt;
&lt;h2 id=&#34;videos&#34;&gt;Videos&lt;/h2&gt;
&lt;p&gt;As same as images, but now for videos.&lt;/p&gt;
&lt;h4 id=&#34;pixabayhttpspixabaycomvideos&#34;&gt;&lt;a href=&#34;https://pixabay.com/videos/&#34;&gt;Pixabay&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;My Go-to site for Royalty free videos is, again pixabay. It has a lot more than photos so I&amp;rsquo;m secretly into pixabay.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200713_05.png&#34; alt=&#34;Images&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;pexelshttpswwwpexelscomvideos&#34;&gt;&lt;a href=&#34;https://www.pexels.com/videos/&#34;&gt;Pexels&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Pexels also has amazing Royalty free videos, and Now I wander how the internet running these sites at no cost at all. You should check this also.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200713_06.png&#34; alt=&#34;Images&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;videovohttpswwwvidevonet&#34;&gt;&lt;a href=&#34;https://www.videvo.net/&#34;&gt;Videovo&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This is something special, Videvo offers free stock video footage as well as motion graphics created by their community of users. The clips you download from Videvo will be licensed in one of two ways: either through the Videvo Standard License or the Creative Commons 3.0 license. Videos under the Videvo Standard License can be downloaded for free to use in any project, the only restriction being that you don’t make the clips available for download anywhere else.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200713_07.png&#34; alt=&#34;Images&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;audio&#34;&gt;Audio&lt;/h2&gt;
&lt;p&gt;Here, we have free effects and background musics. Considering audio, It&amp;rsquo;s hard to look for what we exactly needs, unless the search engine and publishers knows what we feel more than what we meant.&lt;/p&gt;
&lt;h4 id=&#34;youtube-audio-libraryhttpswwwyoutubecomaudiolibrarymusic&#34;&gt;&lt;a href=&#34;https://www.youtube.com/audiolibrary/music&#34;&gt;Youtube Audio Library&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;I Bet you didn&amp;rsquo;t saw this coming, Yeah it&amp;rsquo;s from Youtube and for background musics. You&amp;rsquo;re welcomed.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200713_09.png&#34; alt=&#34;Images&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;facebook-sound-collectionhttpswwwfacebookcomcreatorstudioreferenceredirect_from_sound_collectiontabsound_collectioncontext_id0collection_idall_pagessound_collection_tabsound_tracks&#34;&gt;&lt;a href=&#34;https://www.facebook.com/creatorstudio/?reference=redirect_from_sound_collection&amp;amp;tab=sound_collection&amp;amp;context_id=0&amp;amp;collection_id=all_pages&amp;amp;sound_collection_tab=sound_tracks&#34;&gt;Facebook Sound Collection&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Facebook sound collection is a part of Creator Studio. It strongly resembles the looks of YouTube audio library. However, they offer less filters and some of the songs I found were quite heavy (30-70 Mb). But give it a try anyway: your next best free music might be hiding here.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://wave.video/blog/wp-content/uploads/2019/06/facebook_sound_collection.png.webp&#34; alt=&#34;Image&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;freesoundhttpsfreesoundorg&#34;&gt;&lt;a href=&#34;https://freesound.org/&#34;&gt;Freesound&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This is great for audio effects and my Go-to. The engine is so much better and I always find what I&amp;rsquo;m looking for&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200713_10.png&#34; alt=&#34;Images&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;audioblockshttpswwwstoryblockscomaudio&#34;&gt;&lt;a href=&#34;https://www.storyblocks.com/audio&#34;&gt;Audioblocks&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Well, Here we have a complete collection on audi clips, check is this what you&amp;rsquo;re looking for&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200713_11.png&#34; alt=&#34;Images&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;zapsplathttpswwwzapsplatcom&#34;&gt;&lt;a href=&#34;https://www.zapsplat.com/&#34;&gt;Zapsplat&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;like others, this is for audio effects. Engine is somewhat skeptical but it works at the end of the day.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200713_12.png&#34; alt=&#34;Images&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;wavehttpswavevideo&#34;&gt;&lt;a href=&#34;https://wave.video/&#34;&gt;Wave&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This is my go-to for audio clips, it has amazing audio clips and the search engine knows what we want. But there&amp;rsquo;s a bummer and it&amp;rsquo;s featuring so much premium content, so not suitable for most of us.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200713_08.png&#34; alt=&#34;Images&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Here you go, These are all free resource collections for graphic designers and most of the developers to crank up their development environments, and even to use in their own profiles. Everything in the internet Isn&amp;rsquo;t bad, so check these resources and maybe you&amp;rsquo;ll end-up with using these for your next project. Also &lt;strong&gt;These are my picks and what I use for my personal and commercial projects&lt;/strong&gt;, there are so much more and try to explore some.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>VS Code for Web Developers</title>
<link>https://blog.nushankodikara.com/blog/vs-code-for-web-developers/</link>
<pubDate>Sun, 12 Jul 2020 07:38:18 +0530</pubDate>
      
      <guid>https://blog.nushankodikara.com/blog/vs-code-for-web-developers/</guid>
<description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Visual studio code is a powerful and a user-friendly code editor, It has extended functionality, which makes it an all-in-one solution for most of the web developers and This would be a follow up guide to a Web and Hybrid app development course I&amp;rsquo;m planning forward to.&lt;/p&gt;
&lt;h3 id=&#34;installation&#34;&gt;Installation&lt;/h3&gt;
&lt;p&gt;VS Code is available for Windows, Mac and linux, so pretty much It&amp;rsquo;s a cross platform code editor. one of my favourite. You can download it &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Here&lt;/a&gt; for all platforms. Or You can get it from Linux and mac app stores too. And for &lt;a href=&#34;https://blog.nushankodikara.com/post/the-package-manager-for-windows-chocolatey/&#34;&gt;choco&lt;/a&gt; instance,&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;gt; choco install vscode
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;command-palette&#34;&gt;Command Palette&lt;/h3&gt;
&lt;p&gt;Access all available commands based on your current context.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  Ctrl + Shift + P
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/OpenCommandPalatte.gif&#34; alt=&#34;VS Code&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;default-keyboard-shortcuts&#34;&gt;Default keyboard shortcuts&lt;/h3&gt;
&lt;p&gt;All of the commands are in the Command Palette with the associated key binding (if it exists). If you forget a keyboard shortcut, use the Command Palette to help you out.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/keyboard-references.png&#34; alt=&#34;VS Code&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/KeyboardReferenceSheet.png&#34; alt=&#34;VS Code&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;quick-open&#34;&gt;Quick Open&lt;/h3&gt;
&lt;p&gt;Quickly open files.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  Ctrl + P
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/QuickOpen.gif&#34; alt=&#34;VS Code&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;navigate-between-recently-opened-files&#34;&gt;Navigate between recently opened files&lt;/h3&gt;
&lt;p&gt;Repeat the Quick Open keyboard shortcut to cycle quickly between recently opened files.&lt;/p&gt;
&lt;h3 id=&#34;open-multiple-files-from-quick-open&#34;&gt;Open multiple files from Quick Open&lt;/h3&gt;
&lt;p&gt;You can open multiple files from Quick Open by pressing the Right arrow key. This will open the currently selected file in the background and you can continue selecting files from Quick Open.&lt;/p&gt;
&lt;h3 id=&#34;navigate-between-recently-opened-folders-and-workspaces&#34;&gt;Navigate between recently opened folders and workspaces&lt;/h3&gt;
&lt;p&gt;Open Recent&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  Ctrl + R
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Displays a Quick Pick dropdown with the list from File &amp;gt; Open Recent with recently opened folders and workspaces followed by files.&lt;/p&gt;
&lt;h3 id=&#34;status-bar&#34;&gt;Status Bar&lt;/h3&gt;
&lt;p&gt;Errors and warnings&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  Ctrl + Shift + M
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;Quickly jump to errors and warnings in the project.&lt;/p&gt;
&lt;p&gt;Cycle through errors with F8 or Shift+F8&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/Errors_Warnings.gif&#34; alt=&#34;VS Code&#34;&gt;&lt;/p&gt;
&lt;p&gt;You can filter problems either by type (&amp;rsquo;errors&amp;rsquo;, &amp;lsquo;warnings&amp;rsquo;) or text matching.&lt;/p&gt;
&lt;h3 id=&#34;change-language-mode&#34;&gt;Change language mode&lt;/h3&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  Ctrl + K M
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://code.visualstudio.com/assets/docs/getstarted/tips-and-tricks/change_syntax.gif&#34; alt=&#34;VS Code&#34;&gt;&lt;/p&gt;
&lt;p&gt;f you want to persist the new language mode for that file type, you can use the Configure File Association for command to associate the current file extension with an installed language.&lt;/p&gt;
&lt;p&gt;For more information Check &lt;a href=&#34;https://code.visualstudio.com/docs/getstarted/tips-and-tricks&#34;&gt;This article.&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;extensions&#34;&gt;Extensions&lt;/h3&gt;
&lt;p&gt;VS Code has a Extension store on it&amp;rsquo;s own, so no more hard work for working extensions.
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200712_01.png&#34; alt=&#34;VS Code&#34; title=&#34;VS Code&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here you can see the extension store of the VS Code, you can also trigger it using&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  Ctrl + Shift + X
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;or for mac&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  Command + Shift + X
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;what-i-extensions-should-you-use&#34;&gt;What I Extensions Should You Use&lt;/h4&gt;
&lt;p&gt;Well, for today, I&amp;rsquo;ll show you some extensions I use for my personal Projects, Use the extension Store to get These Extensions.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Extension&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Icon&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Beautify&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://hookyqr.gallerycdn.vsassets.io/extensions/hookyqr/beautify/1.5.0/1556863124877/Microsoft.VisualStudio.Services.Icons.Default&#34; alt=&#34;Beautify&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;This Extension Helps to beautify and format HTML JS CSS SCSS JSON documents.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Community Material Theme&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://equinusocio.gallerycdn.vsassets.io/extensions/equinusocio/vsc-community-material-theme/1.4.1/1581768092718/Microsoft.VisualStudio.Services.Icons.Default&#34; alt=&#34;Theme&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;This Would increase the contras between code and the editor, so It&amp;rsquo;s easier to see and easy for the eyes.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;JS &amp;amp; CSS Minifier (Minify)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://olback.gallerycdn.vsassets.io/extensions/olback/es6-css-minify/3.3.2/1578585334332/Microsoft.VisualStudio.Services.Icons.Default&#34; alt=&#34;Minify&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;This Extension would help you to minify written codes into .min files, so our sites would be faster in no time.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Live Sass Compiler&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://ritwickdey.gallerycdn.vsassets.io/extensions/ritwickdey/live-sass/3.0.0/1531332580258/Microsoft.VisualStudio.Services.Icons.Default&#34; alt=&#34;SCSS&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;We&amp;rsquo;re Using this extension to compile our SCSS Codes into css files so we can link them in our files.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Live Server&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://ritwickdey.gallerycdn.vsassets.io/extensions/ritwickdey/liveserver/5.6.1/1555497731217/Microsoft.VisualStudio.Services.Icons.Default&#34; alt=&#34;SERVER&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;As it says in the name, It&amp;rsquo;s a simple web server. why do we need it? because modern JS won&amp;rsquo;t work completely in local files. so we need a some kind of a Server to test everything.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Mark Down All In One&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://yzhang.gallerycdn.vsassets.io/extensions/yzhang/markdown-all-in-one/3.1.0/1592619570838/Microsoft.VisualStudio.Services.Icons.Default&#34; alt=&#34;MDE&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;This one will help us on our markdown files, to format markdown files and it also has some Snippets to use.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Mark Down Preview Enhanced&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://cdn.vsassets.io/v/M172_20200708.16/_content/Header/default_icon_128.png&#34; alt=&#34;MDP&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;This extension will show a live preview of our markdown files so it&amp;rsquo;s easier to work with.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Material Icon Theme&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://pkief.gallerycdn.vsassets.io/extensions/pkief/material-icon-theme/4.2.0/1592422271844/Microsoft.VisualStudio.Services.Icons.Default&#34; alt=&#34;MIT&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;Here&amp;rsquo;s another theme for you. This would change default file extension icons in VS Code and I Highly Recommend it&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Toggle format on save&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;img src=&#34;https://cdn.vsassets.io/v/M172_20200708.16/_content/Header/default_icon_128.png&#34; alt=&#34;FOS&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;This extension would format our documents on save. I use it most of the times, and you should.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;And That&amp;rsquo;s Pretty much It for now. Also you can search for more extensions in the store anytime you want. Just click install to install it.&lt;/p&gt;
&lt;h3 id=&#34;useful-commands-and-guide&#34;&gt;Useful Commands And Guide&lt;/h3&gt;
&lt;p&gt;Press F1 to popup the quick command panel, It&amp;rsquo;ll help you to run quick commands and extensions.&lt;/p&gt;
&lt;h4 id=&#34;toggle-format-on-save&#34;&gt;Toggle format on save&lt;/h4&gt;
&lt;p&gt;Press F1 and type Toggle Format on save and your extension window will pop up, click on it and you&amp;rsquo;re good to go. That&amp;rsquo;s pretty much how you do it for almost every extension.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200712_02.png&#34; alt=&#34;VS Code&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;terminal--power-shell-on-current-directory&#34;&gt;Terminal / Power shell on current Directory&lt;/h4&gt;
&lt;p&gt;You can open your working directory by using&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;gt; code .
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;on terminal Or going to File &amp;gt; Open Folder&lt;/p&gt;
&lt;p&gt;Then you can popup an integrated terminal on that specific folder by using&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  Ctrl + `
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;or in Mac&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  Command + `
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200712_03.png&#34; alt=&#34;VS Code&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;live-server&#34;&gt;Live Server&lt;/h4&gt;
&lt;p&gt;If you installed the live server Extension, you can see a small Go Live button on bottom right when you&amp;rsquo;re working with HTML Pages.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200712_04.png&#34; alt=&#34;VS Code&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;quick-tips&#34;&gt;Quick Tips&lt;/h4&gt;
&lt;p&gt;You Can use ! Symbol to load up a HTML boilerplate whenever you need.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200712_05.png&#34; alt=&#34;VS Code&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200712_06.png&#34; alt=&#34;VS Code&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;emmet-in-visual-studio-code&#34;&gt;Emmet in Visual Studio Code&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;https://code.visualstudio.com/assets/docs/editor/emmet/emmet.gif&#34; alt=&#34;Emmet&#34;&gt;&lt;/p&gt;
&lt;p&gt;This is a complete toolkit for web developers. It&amp;rsquo;s Easier to learn and use, and It&amp;rsquo;ll improve your productivity overtime. I&amp;rsquo;ll explain it in another post because there are so much to go. I&amp;rsquo;ll provide you what we need in specific documents in the future.&lt;/p&gt;
&lt;p&gt;Or &lt;a href=&#34;https://docs.emmet.io/cheat-sheet/&#34;&gt;Check This Guide&lt;/a&gt; On Emmet. Also a Cheat Sheet to &lt;a href=&#34;http://bit.ly/2mLmFAn&#34;&gt;Download&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;git-integration&#34;&gt;GIT Integration&lt;/h2&gt;
&lt;p&gt;Yes, VS Code has built in Git support, but you have to download and install git bash to associate with this functions. I&amp;rsquo;ll Explain everything in the future so if you aren&amp;rsquo;t comfortable with anything above, Don&amp;rsquo;t worry you&amp;rsquo;ll be comfortable after everything completes.&lt;/p&gt;
&lt;h2 id=&#34;whats-next&#34;&gt;What&amp;rsquo;s Next?&lt;/h2&gt;
&lt;p&gt;From Here on I&amp;rsquo;ll Discuss a complete guide to Web development and Hybrid app development. And in the End I&amp;rsquo;ll Provide with a Course hub &amp;ldquo;Maybe&amp;rdquo; If You are interested (Let me know in the comments).&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s Harder for humans to brake up with their habits, but for a starter, Start with what&amp;rsquo;s best and you&amp;rsquo;ll be more productive with the time. VS Code is a great and easy to use editor or &amp;ldquo;A Development Environment&amp;rdquo;, as nothing as I seen in the past, No doubts it&amp;rsquo;s the most favourite.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Free Top Level Domain Names 2020</title>
<link>https://blog.nushankodikara.com/blog/free-top-level-domain-names-2020/</link>
<pubDate>Sat, 11 Jul 2020 15:54:59 +0530</pubDate>
      
      <guid>https://blog.nushankodikara.com/blog/free-top-level-domain-names-2020/</guid>
<description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I Was surprised and wasn&amp;rsquo;t sure is this a spam or not, Top Level domains for free? that&amp;rsquo;s Odd to be exact, But yeah, Freenom offers top level domains for no cost at all! and that&amp;rsquo;s weird. In this article, I&amp;rsquo;ll show you how you can get a Freenom top level domain for free and in the correct way. Follow this guide very carefully because anyone can f*ck it up in no time.&lt;/p&gt;
&lt;h3 id=&#34;how-do-they-do-that&#34;&gt;How do they do that?&lt;/h3&gt;
&lt;p&gt;Well, Freenom offers free domains of .tk .ml .ga .cf .gq extensions for no cost at all, But how do they do that? I didn&amp;rsquo;t found any good explanation on how they do that or anything I can believe, so I came up with my own theory on this conspiracy. No they aren&amp;rsquo;t aliens or something like that. These are domain zones of small exotic countries or even semi-independent parts of other countries – sometimes just a couple of islands in the ocean. so as silicon valley in china, they don&amp;rsquo;t give a F*ck on world costs or nothing. And they have pretty flat rates on mostly every single domain name. Also they have a 99.9% online rate so I don&amp;rsquo;t see anything bad about them.&lt;/p&gt;
&lt;h3 id=&#34;where-are-these-domains-from&#34;&gt;Where Are these domains From?&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;TLD&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Corresponding country or territory&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;.tk&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Tokelau, three coral islands in the Pacific Ocean with a capital that rotates between the islands each year. De-jure part of New Zealand.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;.ml&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Mali, a landlocked country in North-West Africa with a 10% rate of Internet use among its entire 20 million population.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;.ga&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Gabon, a small nation on the western coast of Africa which has recently undergone a military coup against its president.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;.cf&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Central African Republic, a country where 4% of inhabitants have regular access to the Internet. Obviously located smack in the center of the African continent.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;.gq&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Equatorial Guinea, a tiny African country with a totalitarian government that accumulates all the spoils from its rich oil reserves.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;are-these-safe&#34;&gt;Are these safe?&lt;/h3&gt;
&lt;p&gt;Let me introduce my self in this part. These aren&amp;rsquo;t safe at all because most of the scammers use them and even google rejects them. &lt;strong&gt;BUT I HAVE A SOLUTION&lt;/strong&gt;. This is the part where &lt;strong&gt;big brains&lt;/strong&gt; f*ck their selves up. You can&amp;rsquo;t use these domains as is, there is a simple but effective work around. please let me show you.&lt;/p&gt;
&lt;h3 id=&#34;where-to-begin&#34;&gt;Where to begin?&lt;/h3&gt;
&lt;p&gt;You have to trust me and follow my guide lines STRICTLY. If you got into a problem you can&amp;rsquo;t solve, contact me and I&amp;rsquo;ll Help you, otherwise&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Provide real Details&lt;/li&gt;
&lt;li&gt;Renew your domain when it&amp;rsquo;s available&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t lose any of your passwords&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t share your accounts&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t ever provide others with your domains&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you get these nice and clear, You&amp;rsquo;re good to go. Let&amp;rsquo;s Begin shall we?&lt;/p&gt;
&lt;h3 id=&#34;registering-your-accounts&#34;&gt;Registering Your Accounts&lt;/h3&gt;
&lt;p&gt;Use your email and password option here, Do NOT EVER USE ANY 3RD PARTY LOGINS! Use Email and Password! otherwise you&amp;rsquo;ll be in a big trouble in the future, and freenom doesn&amp;rsquo;t even care about it so probably you&amp;rsquo;ll lose your domain and your account. Now that&amp;rsquo;s out of the way, Just Follow me&lt;/p&gt;
&lt;p&gt;Note: I&amp;rsquo;m using a temp mail But you have to use an authentic mail address, use your Gmail instead.&lt;/p&gt;
&lt;p&gt;Head on to &lt;a href=&#34;https://www.freenom.com/&#34; title=&#34;Freenom&#34;&gt;Freenom.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711b_01.png&#34; alt=&#34;Freenom Signup&#34; title=&#34;Freenom Signup&#34;&gt;&lt;/p&gt;
&lt;p&gt;Then Enter the domain name you want to use with .tk at the end. There&amp;rsquo;s a weird bug going on which it doesn&amp;rsquo;t allow users to get domains if you only enter the domain name&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711b_02.png&#34; alt=&#34;Freenom Signup&#34; title=&#34;Freenom Signup&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now click on Check Availability to check wether the domain is available or not&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711b_03.png&#34; alt=&#34;Freenom Signup&#34; title=&#34;Freenom Signup&#34;&gt;&lt;/p&gt;
&lt;p&gt;If It&amp;rsquo;s Available, You can see it selected in .Tk extension as below, but if you want something else you can select them too.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711b_04.png&#34; alt=&#34;Freenom Signup&#34; title=&#34;Freenom Signup&#34;&gt;&lt;/p&gt;
&lt;p&gt;For this demonstration I&amp;rsquo;m selecting all available 5 domains. Then click on checkout to go to the purchasing section.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711b_05.png&#34; alt=&#34;Freenom Signup&#34; title=&#34;Freenom Signup&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here you can see it gives you 03 months for free, but if you want more time, just change it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711b_06.png&#34; alt=&#34;Freenom Signup&#34; title=&#34;Freenom Signup&#34;&gt;&lt;/p&gt;
&lt;p&gt;I recommend to use the 12 months for free option, You can renew the domain for free after this time period.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711b_07.png&#34; alt=&#34;Freenom Signup&#34; title=&#34;Freenom Signup&#34;&gt;&lt;/p&gt;
&lt;p&gt;Click continue to continue&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711b_08.png&#34; alt=&#34;Freenom Signup&#34; title=&#34;Freenom Signup&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here, in the bottom left section, enter your email and click Verify my email address&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711b_09.png&#34; alt=&#34;Freenom Signup&#34; title=&#34;Freenom Signup&#34;&gt;&lt;/p&gt;
&lt;p&gt;If you did it successfully, now go to your mail and confirm your account.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711b_10.png&#34; alt=&#34;Freenom Signup&#34; title=&#34;Freenom Signup&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here you can see Freenom sent me a confirmation link, click on it to continue.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711b_11.png&#34; alt=&#34;Freenom Signup&#34; title=&#34;Freenom Signup&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now in the next section, If you&amp;rsquo;re a new user, you have to use your real information to fill this up. Don&amp;rsquo;t worry about these information because no one&amp;rsquo;s going to murder you or send an assassin to kill you from these addresses, also Freenom offers IDShield so no one can get it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711b_12.png&#34; alt=&#34;Freenom Signup&#34; title=&#34;Freenom Signup&#34;&gt;&lt;/p&gt;
&lt;p&gt;If everything went correctly, well done! you have some domains now! After this we have to setup our nameservers for Internet to trust our Domains.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711b_14.png&#34; alt=&#34;Freenom Signup&#34; title=&#34;Freenom Signup&#34;&gt;&lt;/p&gt;
&lt;p&gt;Go to freenom again and under the service section select My Domains&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711b_15.png&#34; alt=&#34;Netlify Signup&#34; title=&#34;Netlify Signup&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here, you can see the domains you just purchased. Now go to &lt;a href=&#34;https://www.netlify.com/&#34; title=&#34;Netlify&#34;&gt;Netlify.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711b_16.png&#34; alt=&#34;Netlify Signup&#34; title=&#34;Netlify Signup&#34;&gt;&lt;/p&gt;
&lt;p&gt;select SignUp To create an account.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711b_17.png&#34; alt=&#34;Netlify Signup&#34; title=&#34;Netlify Signup&#34;&gt;&lt;/p&gt;
&lt;p&gt;Again, select Email Signup section.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711b_18.png&#34; alt=&#34;Netlify Signup&#34; title=&#34;Netlify Signup&#34;&gt;&lt;/p&gt;
&lt;p&gt;Enter your Email and a new password to continue.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711b_19.png&#34; alt=&#34;Netlify Signup&#34; title=&#34;Netlify Signup&#34;&gt;&lt;/p&gt;
&lt;p&gt;They&amp;rsquo;ll send a new confirmation email and go to your email section to confirm it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711b_20.png&#34; alt=&#34;Netlify Signup&#34; title=&#34;Netlify Signup&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here you can see the Verify email button, click it to continue.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711b_21.png&#34; alt=&#34;Netlify Signup&#34; title=&#34;Netlify Signup&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here you will redirected to netlify again, and Now let&amp;rsquo;s Setup our domains.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711b_22.png&#34; alt=&#34;Setup Domain&#34; title=&#34;Setup Domain&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now, Click on domains section to get to your netlify domains list.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711b_23.png&#34; alt=&#34;Setup Domain&#34; title=&#34;Setup Domain&#34;&gt;&lt;/p&gt;
&lt;p&gt;Click on add or register domain button to add our registered domains&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711b_24.png&#34; alt=&#34;Setup Domain&#34; title=&#34;Setup Domain&#34;&gt;&lt;/p&gt;
&lt;p&gt;Enter the domain you just registered and click verify.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711b_25.png&#34; alt=&#34;Setup Domain&#34; title=&#34;Setup Domain&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here, they say that our domain is registered. and it&amp;rsquo;s registered under our name so click Yes, add domain to continue.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711b_26.png&#34; alt=&#34;Setup Domain&#34; title=&#34;Setup Domain&#34;&gt;&lt;/p&gt;
&lt;p&gt;You can add your DNS Records now, or later so i&amp;rsquo;m not adding anything. click continue.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711b_27.png&#34; alt=&#34;Setup Domain&#34; title=&#34;Setup Domain&#34;&gt;&lt;/p&gt;
&lt;p&gt;Notice these DNS nameservers? Copy or right them down somewhere, because we have to connect our domain to these nameservers.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711b_28.png&#34; alt=&#34;Setup Domain&#34; title=&#34;Setup Domain&#34;&gt;&lt;/p&gt;
&lt;p&gt;Goto your freenom domains page and select on manage domain&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711b_29.png&#34; alt=&#34;Setup Domain&#34; title=&#34;Setup Domain&#34;&gt;&lt;/p&gt;
&lt;p&gt;It asked me to sign in again so I did.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711b_31.png&#34; alt=&#34;Setup Domain&#34; title=&#34;Setup Domain&#34;&gt;&lt;/p&gt;
&lt;p&gt;Goto management tools &amp;gt; Nameservers&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711b_32.png&#34; alt=&#34;Setup Domain&#34; title=&#34;Setup Domain&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here, select use custom name servers and enter the information you copied from the Netlify domain page. And click change Nameservers to transfer the domain.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711b_33.png&#34; alt=&#34;Setup Domain&#34; title=&#34;Setup Domain&#34;&gt;&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll be greeted with this screen if it was successfully done. Now go the netlify page&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711b_34.png&#34; alt=&#34;Setup Domain&#34; title=&#34;Setup Domain&#34;&gt;&lt;/p&gt;
&lt;p&gt;Click on Done Button to add your domain.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711b_35.png&#34; alt=&#34;Setup Domain&#34; title=&#34;Setup Domain&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now! you&amp;rsquo;re pretty much done with securing your domain. so add DNS Records, enable security features and do what you want! Congratulations with your new domain!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711b_36.png&#34; alt=&#34;Setup Domain&#34; title=&#34;Setup Domain&#34;&gt;&lt;/p&gt;
&lt;p&gt;To be clear, click add DNS button to add your DNS Records and you&amp;rsquo;re Greeted with this modal, here you can use minimum of 1 second on TTL And that&amp;rsquo;s a huge improvement!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711b_36.png&#34; alt=&#34;Setup Domain&#34; title=&#34;Setup Domain&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here you can see I did the above steps with all of my domains and now they are secure and safe, also fast.&lt;/p&gt;
&lt;h3 id=&#34;now-what&#34;&gt;Now What?&lt;/h3&gt;
&lt;p&gt;That&amp;rsquo;s all for today guys, you can do allot more with these Domains now! Setup custom emails, setup custom websites and lot more! I&amp;rsquo;ll provide you allot more tutorials to continue with in a later day so stay tuned.&lt;/p&gt;
&lt;h3 id=&#34;how-do-i-renew-my-domain&#34;&gt;How do i renew my domain?&lt;/h3&gt;
&lt;p&gt;After you 1 year time period has over, You will be greeted with a renew button in freenom domain management page. click on it and you&amp;rsquo;re pretty much done.&lt;/p&gt;
&lt;h3 id=&#34;web-hosting-emails&#34;&gt;Web hosting? emails?&lt;/h3&gt;
&lt;p&gt;I Will cover them in the future guys, It&amp;rsquo;s not today&amp;rsquo;s topic.&lt;/p&gt;
&lt;h3 id=&#34;where-can-i-use-these-now&#34;&gt;Where can I use these now?&lt;/h3&gt;
&lt;p&gt;Anywhere, Blogger, wordpress, firebase etc etc&amp;hellip;. If you&amp;rsquo;re visiting my blog in the early ages, even I&amp;rsquo;m using a .Tk domain to be clear.&lt;/p&gt;
&lt;h3 id=&#34;ssl-certificates&#34;&gt;SSL Certificates?&lt;/h3&gt;
&lt;p&gt;Netlify offers SSL Certificates for free so go to your domain to set it up. It&amp;rsquo;s free and could take up-to 24h to completely offer a Certificate.&lt;/p&gt;
&lt;h3 id=&#34;how-can-i-get-a-com-net-org-domain&#34;&gt;How can i get a .com .net .org domain?&lt;/h3&gt;
&lt;p&gt;Don&amp;rsquo;t waste your money on godaddy or websites like that for costy domains, use &lt;a href=&#34;https://www.namecheap.com/&#34;&gt;Namecheap.com&lt;/a&gt; &lt;a href=&#34;https://www.dynadot.com/&#34;&gt;Dynadot.com&lt;/a&gt; or &lt;a href=&#34;https://www.freenom.com/&#34;&gt;Freenom.com&lt;/a&gt;. Always compare and you&amp;rsquo;ll be able to find a Pretty cheap deal so far.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Free TLD Domains are easy to get and use, also .Tk is the #3 of world&amp;rsquo;s most registered domain names according to &lt;a href=&#34;https://www.techradar.com/news/these-are-the-worlds-most-popular-web-domains&#34;&gt;This&lt;/a&gt; Article (2019) and don&amp;rsquo;t be shy to use it. There are companies using even subdomains! just use it in the correct way.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Budget Online Radio Station Guide 2020</title>
<link>https://blog.nushankodikara.com/blog/budget-online-radio-station-guide-2020/</link>
<pubDate>Sat, 11 Jul 2020 08:47:08 +0530</pubDate>
      
      <guid>https://blog.nushankodikara.com/blog/budget-online-radio-station-guide-2020/</guid>
<description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Youtube is the main source of entertainment these days, but people still want to enjoy radio streams for no reason, online radio stations are costy and it&amp;rsquo;s nearly impossible for a normal person to start an online radio station without getting in to any of the top stupid costing radio stream services.
In this article, let me show you how I made an online radio station without wasting a single penny, or without sacrificing the quality&lt;/p&gt;
&lt;h3 id=&#34;softwares-and-services&#34;&gt;Softwares And Services&lt;/h3&gt;
&lt;p&gt;If you are searching on this topic, chances are, you&amp;rsquo;re probably a tech geek. But I&amp;rsquo;m creating this article noobs in mind, anyone can follow up this tutorial and if you are a geek, I&amp;rsquo;ll present you with extra tips to experiment with. My goal is to use Shoutcast so in 3rd party services,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Listen2myradio &lt;a href=&#34;http://www.listen2myradio.com/&#34;&gt;Visit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Winamp Media Player &lt;a href=&#34;http://www.winamp.com/&#34;&gt;Download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SHOUTcast DSP For Winamp &lt;a href=&#34;https://directory.shoutcast.com/Winamp&#34;&gt;Download&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;overview-guide&#34;&gt;Overview Guide&lt;/h3&gt;
&lt;p&gt;If you&amp;rsquo;re a geek and want to do it your self, here&amp;rsquo;s the deal, just create an account and complete it on Listen2myradio service and use winamp DSP or any other DSP software to stream your cast in to it and that&amp;rsquo;s it. If you need my help, follow up this step-by-step guide.&lt;/p&gt;
&lt;h3 id=&#34;listen2myradio&#34;&gt;Listen2MyRadio&lt;/h3&gt;
&lt;p&gt;All right, they didn&amp;rsquo;t sponsor me or anything like that, I chosed this option because of it&amp;rsquo;s freely available features. let me show you, The provide you&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A Personal Page &amp;amp; A Personal Subdomain&lt;/li&gt;
&lt;li&gt;Shoutbox, Blog and Gallery&lt;/li&gt;
&lt;li&gt;Up to 5000 listeners without quality reduction&lt;/li&gt;
&lt;li&gt;Flash player &amp;amp; Windows Media Player&lt;/li&gt;
&lt;li&gt;Supported by Ads&lt;/li&gt;
&lt;li&gt;3 server locations &amp;amp; Instant setup&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For No Cost At All! If you reach your 5000 Listener count, you can expand your station for about 6.25$ / month in the time period I&amp;rsquo;m writing this. I&amp;rsquo;m pretty sure you aren&amp;rsquo;t going to hit that limit sooner, so free radio for a much longer time!
Their theming options are very limited BTW. But modern and simple&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;❝ listen2myradio was established in 2006 as the first free shoutcast hosting company on the internet, and even today listen2myradio remains the biggest free shoutcast hosting company in existence. More than one million users have signed up to listen2myradio for both our free and premium services. We specialize in all aspects of streaming over the internet. ❞&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;setting-up-listen2myradio&#34;&gt;Setting Up Listen2MyRadio&lt;/h4&gt;
&lt;p&gt;I&amp;rsquo;m using a temp mail address to signup and stream a session.&lt;/p&gt;
&lt;h5 id=&#34;step-1&#34;&gt;Step 1&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_01.png&#34; alt=&#34;Step 1&#34; title=&#34;Step 1&#34;&gt;&lt;/p&gt;
&lt;p&gt;Goto &lt;a href=&#34;http://www.listen2myradio.com/&#34;&gt;www.listen2myradio.com&lt;/a&gt; And Click on Sign Up button under Radio Streaming Section.&lt;/p&gt;
&lt;h5 id=&#34;step-2&#34;&gt;Step 2&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_02.png&#34; alt=&#34;Step 2&#34; title=&#34;Step 2&#34;&gt;&lt;/p&gt;
&lt;p&gt;Fill up the signup form and click on create my account button&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_03.png&#34; alt=&#34;Step 2&#34; title=&#34;Step 2&#34;&gt;&lt;/p&gt;
&lt;p&gt;If Everything Went well, You&amp;rsquo;ll See a blue message at the top of the form.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_04.png&#34; alt=&#34;Step 2&#34; title=&#34;Step 2&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now Go To your email viewer and confirm your account with the confirmation link provided.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_05.png&#34; alt=&#34;Step 2&#34; title=&#34;Step 2&#34;&gt;&lt;/p&gt;
&lt;p&gt;If you did it correctly, you&amp;rsquo;ll be presented with this screen. Now select Return to login page.&lt;/p&gt;
&lt;h5 id=&#34;step-3&#34;&gt;Step 3&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_06.png&#34; alt=&#34;Step 3&#34; title=&#34;Step 3&#34;&gt;&lt;/p&gt;
&lt;p&gt;Enter your email and password you just created and login&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_07.png&#34; alt=&#34;Step 3&#34; title=&#34;Step 3&#34;&gt;&lt;/p&gt;
&lt;p&gt;From this page, select Audio account.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_08.png&#34; alt=&#34;Step 3&#34; title=&#34;Step 3&#34;&gt;&lt;/p&gt;
&lt;p&gt;This is an important step, so be careful with this one. Do Not USE CAPITAL LETTERS! Fill the form with your broadcast channel details and in the subdomain section, be careful with your selection, because it&amp;rsquo;s your subdomain, it is the URL to listen to your radio station.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_09.png&#34; alt=&#34;Step 3&#34; title=&#34;Step 3&#34;&gt;&lt;/p&gt;
&lt;p&gt;On server Type, select Shoutcast, select UK Server and the broadcaster password is used to broadcast your stream in to the radio, so select a password wisely.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_10.png&#34; alt=&#34;Step 3&#34; title=&#34;Step 3&#34;&gt;&lt;/p&gt;
&lt;p&gt;If you didn&amp;rsquo;t listened to me and added Capital letters, well fix it now!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_11.png&#34; alt=&#34;Step 3&#34; title=&#34;Step 3&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here you can see, your broadcasting station is getting ready to deploy, it would take some time so grab a coffee or something to eat.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_12.png&#34; alt=&#34;Step 3&#34; title=&#34;Step 3&#34;&gt;&lt;/p&gt;
&lt;p&gt;If you did everything correctly, welcome to your dashboard DJ!&lt;/p&gt;
&lt;h5 id=&#34;step-4&#34;&gt;Step 4&lt;/h5&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_13.png&#34; alt=&#34;Step 4&#34; title=&#34;Step 4&#34;&gt;&lt;/p&gt;
&lt;p&gt;As I said before, you can have a blog and a gallery here, so if you&amp;rsquo;re Interested go to this section.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_14.png&#34; alt=&#34;Step 4&#34; title=&#34;Step 4&#34;&gt;&lt;/p&gt;
&lt;p&gt;For this demonstration, I Don&amp;rsquo;t need a blog or a gallery so I&amp;rsquo;m just disabling everything, if you want them, just enable it and you&amp;rsquo;re good to go.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_15.png&#34; alt=&#34;Step 4&#34; title=&#34;Step 4&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now, if you have eyes, you can see something red here, remember kids RED = BAD. so we need to fix it. Click on the first link which says Add Blog Post bla bla bla and wait for it to load.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_16.png&#34; alt=&#34;Step 4&#34; title=&#34;Step 4&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now Here my friends, you can see the interface you have to deal with, if you are doing your Blog, but for no reason, you have to have a single post to start a stream, so I&amp;rsquo;m filling it up with a placeholder. Don&amp;rsquo;t worry, this wont be published if you disabled the blog, if you need it, add something useful.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_17.png&#34; alt=&#34;Step 4&#34; title=&#34;Step 4&#34;&gt;&lt;/p&gt;
&lt;p&gt;If you did it correctly, now you can see your 1st post here. Enough work over here so lets continue with the secont link which says Add Gallery bla bla bla.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_18.png&#34; alt=&#34;Step 4&#34; title=&#34;Step 4&#34;&gt;&lt;/p&gt;
&lt;p&gt;Kids, this is the gallery manager, if you are using it, upload something special or useful, otherwise upload something, because again for no reason, you need to have a single gallery to stream.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_19.png&#34; alt=&#34;Step 4&#34; title=&#34;Step 4&#34;&gt;&lt;/p&gt;
&lt;p&gt;I Chosed this lovely picture of a headset and press save to gallery.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_20.png&#34; alt=&#34;Step 4&#34; title=&#34;Step 4&#34;&gt;&lt;/p&gt;
&lt;p&gt;If you did it correctly, you can see something like this. then we can get to our final step on fixing the server. click on the third red link which says please update radio text.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_21.png&#34; alt=&#34;Step 4&#34; title=&#34;Step 4&#34;&gt;&lt;/p&gt;
&lt;p&gt;now this is another important step. Channel name should be your channel name and it should have more than 10 characters, channel description should have more than 150 and About us should have more than 400 characters. upload your logo to stream icon, recheck your subdomain and press confirm! wait for a little bit and you&amp;rsquo;ll be presented with this screen if everything went to the plan!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_22.png&#34; alt=&#34;Step 4&#34; title=&#34;Step 4&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now select the big logo to go to your main dashboard, and it should be ready to stream.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_23.png&#34; alt=&#34;Step 4&#34; title=&#34;Step 4&#34;&gt;&lt;/p&gt;
&lt;p&gt;Notice something? yeah all the bad is gone! and we&amp;rsquo;re ready to rock on.&lt;/p&gt;
&lt;h4 id=&#34;setting-up-softwares&#34;&gt;Setting Up Softwares&lt;/h4&gt;
&lt;p&gt;Here, we are using &lt;a href=&#34;http://www.winamp.com/&#34;&gt;Winamp&lt;/a&gt; And &lt;a href=&#34;https://directory.shoutcast.com/Winamp&#34;&gt;Shoutcast&lt;/a&gt; to setup a simple but professional setup. you can use something like Virtual DJ, SAM Broadcaster etc. but we are considering only free options in this post, if you need a complete guide on Virtual DJ and SAM Broadcaster, let me know in the comments. Download And install Winamp And Shoutcast Usually.&lt;/p&gt;
&lt;p&gt;Follow up these steps, I don&amp;rsquo;t think I want to explain this but I&amp;rsquo;ll whenever it&amp;rsquo;s required.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.winamp.com/&#34;&gt;Download&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_24.png&#34; alt=&#34;Software Setup&#34; title=&#34;Software Setup&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_25.png&#34; alt=&#34;Software Setup&#34; title=&#34;Software Setup&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_26.png&#34; alt=&#34;Software Setup&#34; title=&#34;Software Setup&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_27.png&#34; alt=&#34;Software Setup&#34; title=&#34;Software Setup&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_28.png&#34; alt=&#34;Software Setup&#34; title=&#34;Software Setup&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_29.png&#34; alt=&#34;Software Setup&#34; title=&#34;Software Setup&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_30.png&#34; alt=&#34;Software Setup&#34; title=&#34;Software Setup&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_31.png&#34; alt=&#34;Software Setup&#34; title=&#34;Software Setup&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now Here, If you don&amp;rsquo;t see the Winamp like in the picture above just press this arrow key&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_32.png&#34; alt=&#34;Software Setup&#34; title=&#34;Software Setup&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now Close the winamp completely and download and install Shoutcast&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://directory.shoutcast.com/Winamp&#34;&gt;Download&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_33.png&#34; alt=&#34;Software Setup&#34; title=&#34;Software Setup&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_34.png&#34; alt=&#34;Software Setup&#34; title=&#34;Software Setup&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_35.png&#34; alt=&#34;Software Setup&#34; title=&#34;Software Setup&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_36.png&#34; alt=&#34;Software Setup&#34; title=&#34;Software Setup&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_37.png&#34; alt=&#34;Software Setup&#34; title=&#34;Software Setup&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_38.png&#34; alt=&#34;Software Setup&#34; title=&#34;Software Setup&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_39.png&#34; alt=&#34;Software Setup&#34; title=&#34;Software Setup&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_40.png&#34; alt=&#34;Software Setup&#34; title=&#34;Software Setup&#34;&gt;
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_41.png&#34; alt=&#34;Software Setup&#34; title=&#34;Software Setup&#34;&gt;&lt;/p&gt;
&lt;p&gt;Winamp would open up with a window like this, this is the window we&amp;rsquo;re going to use to setup the radio stream. If you cant&amp;rsquo;s see this window,&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_41a.png&#34; alt=&#34;Software Setup&#34; title=&#34;Software Setup&#34;&gt;&lt;/p&gt;
&lt;p&gt;Goto Options &amp;gt; Preferances&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_41b.png&#34; alt=&#34;Software Setup&#34; title=&#34;Software Setup&#34;&gt;&lt;/p&gt;
&lt;p&gt;Select on Plug-ins &amp;gt; DSP / Effect &amp;gt; SHOUTcast Source DSP &amp;gt; Configure active plugin&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_42.png&#34; alt=&#34;Software Setup&#34; title=&#34;Software Setup&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now That out to the side, Copy the IP Address, Port and Stream Password&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_43.png&#34; alt=&#34;Software Setup&#34; title=&#34;Software Setup&#34;&gt;&lt;/p&gt;
&lt;p&gt;And Paste respectively in Server Address, Port and password. also change Connect Using to V1.x and DO NOT FILL DJ / User ID.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_44.png&#34; alt=&#34;Software Setup&#34; title=&#34;Software Setup&#34;&gt;&lt;/p&gt;
&lt;p&gt;Enter your broadcast station name in the name section, your URL in the URL Section.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_45.png&#34; alt=&#34;Software Setup&#34; title=&#34;Software Setup&#34;&gt;&lt;/p&gt;
&lt;p&gt;Select your bitrate you prefer to broadcast with&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_46.png&#34; alt=&#34;Software Setup&#34; title=&#34;Software Setup&#34;&gt;&lt;/p&gt;
&lt;p&gt;Select the 2nd option if you want to display song titles in the radio station.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_48.png&#34; alt=&#34;Software Setup&#34; title=&#34;Software Setup&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now, Select the Connect button, and Tick Auto connect if you want it to automatically connect to the server if something went wrong&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_49.png&#34; alt=&#34;Software Setup&#34; title=&#34;Software Setup&#34;&gt;&lt;/p&gt;
&lt;p&gt;You are ready to rock, you can see your data usage in the sent section and to be exact, your playing and the radio station has a slight delay to improve audio quality through buffering so it&amp;rsquo;s natural.&lt;/p&gt;
&lt;h4 id=&#34;streaming-to-radio&#34;&gt;Streaming To Radio&lt;/h4&gt;
&lt;p&gt;All right mr.DJ, now you&amp;rsquo;re ready to rock up. But first! create your play list in the winamp software and to start broadcasting, just play it! it&amp;rsquo;s that simple, for programs, pre record your voiceover and add to the playlist. Unfortunately, for now, we don&amp;rsquo;t have a method to speak live to the audience.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_50.png&#34; alt=&#34;Software Setup&#34; title=&#34;Software Setup&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;streaming-link&#34;&gt;Streaming link&lt;/h4&gt;
&lt;p&gt;You can give the subdomain to anyone to listen to your radio online, cloak in in dns to look legit maybe? I&amp;rsquo;ll provide a future post on that manner.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_50a.png&#34; alt=&#34;Software Setup&#34; title=&#34;Software Setup&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now this is the subdomain you made. and your radio is streaming on this domain.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_51.png&#34; alt=&#34;Software Setup&#34; title=&#34;Software Setup&#34;&gt;&lt;/p&gt;
&lt;p&gt;This is what the streaming page looks like alongside&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_52.png&#34; alt=&#34;Software Setup&#34; title=&#34;Software Setup&#34;&gt;&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re running an uninterrupted radio stream, don&amp;rsquo;t forget to activate playlist repeat and maybe shuffle?&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200711_53.png&#34; alt=&#34;Software Setup&#34; title=&#34;Software Setup&#34;&gt;&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t Forget to turn your stream off after the broadcast.&lt;/p&gt;
&lt;h3 id=&#34;data-usage&#34;&gt;Data Usage&lt;/h3&gt;
&lt;p&gt;This is something Very important to most of the users, I know. So I decided to calculate the maximum data consumption on common bitrates, for an hour. ( This is a theoretical maximum )&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Bitrate&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Data Usage For 1 hour&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;64kbps&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;28.8 MB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;96kbps&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;43.2 MB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;112kbps&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;50.4 MB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;128kbps&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;57.6 MB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;160kbps&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;72.0 MB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;192kbps&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;86.4 MB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Seems like pretty good for a starter, isn&amp;rsquo;t it.&lt;/p&gt;
&lt;h3 id=&#34;extending-plans&#34;&gt;Extending Plans&lt;/h3&gt;
&lt;p&gt;If you are going over 5000 simultaneous listeners, Listen2myradio has a packages suiting anyone. you can see more details &lt;a href=&#34;http://www.listen2myradio.com/radio-order-shoutcast.php&#34;&gt;Here&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Well, It&amp;rsquo;s a long but simple process, I totally prefer this setup to any starter in online radio broadcasting. If you got stuck or something went wrong, please feel free to contact me and inform the situation. I hope you got something new and Maybe, I&amp;rsquo;ll do a highly professional radio streaming guide later? and another method of free broadcasting is on the way, so stay tuned!&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Best Media Players 2020</title>
<link>https://blog.nushankodikara.com/blog/best-media-players-2020/</link>
<pubDate>Fri, 10 Jul 2020 15:59:09 +0530</pubDate>
      
      <guid>https://blog.nushankodikara.com/blog/best-media-players-2020/</guid>
<description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;In this post, I would like to present to you with the best media players according to technologies they use. This is a weird post to make in this time period but I&amp;rsquo;m creating this as a follow-up for a new post I&amp;rsquo;m planning to post in the future about Online Radio Broadcasting Technologies.&lt;/p&gt;
&lt;h3 id=&#34;what-im-considering-here&#34;&gt;What I&amp;rsquo;m Considering Here&lt;/h3&gt;
&lt;p&gt;Well, While I&amp;rsquo;m Preparing the list, I was considering about several features to back it up with. We Humans are highly on to habits and we don&amp;rsquo;t consider newer technologies or novelties that much, which in most cases make us miss important and easier, maybe more stable options, without even a clue. So I made the list by looking foward on&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Codecs&lt;/li&gt;
&lt;li&gt;Stability&lt;/li&gt;
&lt;li&gt;Intergration&lt;/li&gt;
&lt;li&gt;User-Interface&lt;/li&gt;
&lt;li&gt;User-Experiance&lt;/li&gt;
&lt;li&gt;Installation&lt;/li&gt;
&lt;li&gt;Playlist Creation&lt;/li&gt;
&lt;li&gt;User Hot keys&lt;/li&gt;
&lt;li&gt;Added Features&lt;/li&gt;
&lt;li&gt;Resource Usage&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;why-should-i-even-care&#34;&gt;Why Should I Even Care&lt;/h3&gt;
&lt;p&gt;First of all, about the mess chris made with his Anti-VLC Situation, I&amp;rsquo;m not forcing anyone to change their life style here, but you should look what&amp;rsquo;s out there in the field and make yourself comfortable with the situation.&lt;/p&gt;
&lt;h3 id=&#34;installation&#34;&gt;Installation&lt;/h3&gt;
&lt;p&gt;I Will provide choco commands and links for every player. If you don&amp;rsquo;t know what choco is, check out &lt;a href=&#34;https://blog.nushankodikara.com/post/the-package-manager-for-windows-chocolatey/&#34;&gt;choco&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;windows&#34;&gt;Windows&lt;/h2&gt;
&lt;h3 id=&#34;1-media-player-classic&#34;&gt;#1 Media Player Classic&lt;/h3&gt;
&lt;p&gt;Wait, What? But, Yes. Media player classic is the best media player for windows considering the backend technologies and the resource usage. also MPC has the most wide range of codec support amoung all of the other competitors. It&amp;rsquo;s extremely light weight and lightning fast. But it has a outdated user-interface BTW.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mpc-hc.org/assets/img/screenshots/mpc-hc.dvb.74b978af.png&#34; alt=&#34;MPC&#34; title=&#34;Media Player Classic&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;gt; choco install mpc-hc
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;2-kmplayer&#34;&gt;#2 KMPlayer&lt;/h3&gt;
&lt;p&gt;This is a popular player but it consumes alot of resources so it wont be ideal for small systems and low ram machines. so if you&amp;rsquo;re considering using KMPlayer, it has a wide range of codec support and VR Viewing if you&amp;rsquo;re into those kinds of things. I personally use KMP on my mainstream PC, but not for my laptops.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;http://imgcdn.pandora.tv/publishing/kmp_rt/images/bg_1.jpg&#34; alt=&#34;KMPlayer&#34; title=&#34;KMPlayer&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://kmplayer.com/&#34;&gt;Download&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;3-vlc&#34;&gt;#3 VLC&lt;/h3&gt;
&lt;p&gt;Here it is, the most famous and widely used media player in the whole universe. but do everyone right about their decision? well, not at all. why? VLC has a lot more going in it&amp;rsquo;s back end. it has it&amp;rsquo;s own codecs, it uses more ram and so on. But, if you&amp;rsquo;re an Advanced User, I won&amp;rsquo;t bother you at all. For Others, Just Don&amp;rsquo;t use it. It&amp;rsquo;s flimsy and not good for me.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.videolan.org/vlc/screenshots/1.0.0/VLC_Qt4.jpg&#34; alt=&#34;VLC&#34; title=&#34;VLC&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;gt; choco install vlc
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;linux&#34;&gt;Linux&lt;/h2&gt;
&lt;h3 id=&#34;1-celluloid&#34;&gt;#1 Celluloid&lt;/h3&gt;
&lt;p&gt;Celluloid (formerly GNOME MPV) is a simple GTK+ frontend for mpv. It aims to be easy to use while maintaining high level of configurability. Celluloid is capable of using mpv&amp;rsquo;s configuration files as-is. Keybindings can be set up using mpv&amp;rsquo;s input configuration file. The playlist entries can be added, removed, or rearranged easily with drag and drop operations. Celluloid implements the MPRIS D-Bus Interface. This allows for better integration with desktop environments that have compatible MPRIS clients. Also Celluloid is fully functional on Wayland.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://celluloid-player.github.io/images/screenshot-4.png&#34; alt=&#34;Celluloid&#34; title=&#34;Celluloid&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://celluloid-player.github.io/installation.html&#34; title=&#34;Celluloid&#34;&gt;Installation&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-vlc&#34;&gt;#2 VLC&lt;/h3&gt;
&lt;p&gt;For the VLC Fans, here it is again in the show! But considering linux, VLC Isn&amp;rsquo;t as good as on windows. why? probably their back end. VLC is designed for windows and that&amp;rsquo;s where it&amp;rsquo;s peak at. for linux, it&amp;rsquo;s another story. it LAGS! that&amp;rsquo;s my problem with it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://images.videolan.org/vlc/screenshots/1.0.0/VLC_Qt4.jpg&#34; alt=&#34;VLC&#34; title=&#34;VLC&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.videolan.org/vlc/&#34; title=&#34;VLC&#34;&gt;Download&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;android&#34;&gt;Android&lt;/h2&gt;
&lt;h3 id=&#34;video&#34;&gt;Video&lt;/h3&gt;
&lt;h4 id=&#34;1-mx-player&#34;&gt;#1 MX Player&lt;/h4&gt;
&lt;p&gt;This is a light weight and low-resource hungry player amoung others. However mx player has a excellent intergration amoung many of the video players in Android Platform&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/RFdnyOyG0C_XpwqmdOXrU4WUbaQKwbcJhRXc5naVf8YWvgia0upOzCGm2uPOcLpakw=w720-h310-rw&#34; alt=&#34;MXPlayer&#34; title=&#34;MXPlayer&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=com.mxtech.videoplayer.ad&#34; title=&#34;MXPlayer&#34;&gt;Download&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;2-vlc-1&#34;&gt;#2 VLC&lt;/h4&gt;
&lt;p&gt;And Yeah, Again VLC. as in Android, VLC holds a clear and a sweat track record while it can also play both video and audio types. you should check it out.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/ahV3K7RwV7JW-mKou83PYrld_Vg5i0ZEix0ga9vx_qkh1RD2qkQeFHfyzbfUCnJliw=w720-h310-rw&#34; alt=&#34;VLC&#34; title=&#34;VLC&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=org.videolan.vlc&#34; title=&#34;VLC&#34;&gt;Download&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;audio&#34;&gt;Audio&lt;/h3&gt;
&lt;h4 id=&#34;1-retro-music&#34;&gt;#1 Retro music&lt;/h4&gt;
&lt;p&gt;This is my favourit, It has a modern and sleek design language while maintaining a clutter free clear Interface. Also it has a wide range of codec support in android platform.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/MdWK5wQXmBZk4FwgiDxzG4WLomMdwFVrvy3nDgtfIViFp6yGEVBYwt7wA4OJ7wWlgNI=w720-h310-rw&#34; alt=&#34;Retromusic&#34; title=&#34;Retro Music&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=code.name.monkey.retromusic&#34; title=&#34;Retro Music&#34;&gt;Download&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;2-eon-music-player&#34;&gt;#2 Eon Music Player&lt;/h4&gt;
&lt;p&gt;Well, this is another player with a sleek and modern design language, however this player has a great integration within the roots of the android system. so you should check this out as soon as possible.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://lh3.googleusercontent.com/3cIyLlbU3P4cHATw1HMiGwYoGITImd-P_NVydawB4UTJwslvLQzYzwtMLWCVQOtWbdE=w720-h310-rw&#34; alt=&#34;EON&#34; title=&#34;Eon player&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=qijaz221.github.io.musicplayer&#34; title=&#34;Eon Player&#34;&gt;Download&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;After all, at the end of the day, we&amp;rsquo;re using our favourite players to play our favourite songs no matter how boring or no matter how technologically down they are, but It&amp;rsquo;s worth giving a shot out to these newcomers and re-imagine our lives with them.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Windows 10 Speedup Registry Tweaks</title>
<link>https://blog.nushankodikara.com/blog/windows-10-speedup-registry-tweaks/</link>
<pubDate>Thu, 09 Jul 2020 10:12:44 +0530</pubDate>
      
      <guid>https://blog.nushankodikara.com/blog/windows-10-speedup-registry-tweaks/</guid>
<description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Windows based PCs have a registry system to take control over the system wide operations and most of the times windows default operations are useless to most of us and somewhat annoying. So to be cleared, I made this easy to install Registry file to speed up your PC in matter of seconds.&lt;/p&gt;
&lt;h3 id=&#34;what-does-it-do&#34;&gt;What Does It Do?&lt;/h3&gt;
&lt;p&gt;Well, here comes the boring part. If you don&amp;rsquo;t want to know what this file does to your PC, just skip this section and use the link below to download the program.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Adds &lt;strong&gt;Copy To&lt;/strong&gt; and &lt;strong&gt;Move To&lt;/strong&gt; options in files and folders context menu, so that you can easily copy and move them to other locations.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AutoEndTasks&lt;/strong&gt; - Forces Windows to automatically end user services when the user logs off or shuts down the computer. It&amp;rsquo;ll prevent the &amp;ldquo;Closing apps and shutting down, This app is preventing shutdown&amp;rdquo; screen from appearing. Check this topic for detailed info.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HungAppTimeout&lt;/strong&gt; - Reduces system waiting time before killing user processes when the user clicks on &amp;ldquo;End Task&amp;rdquo; button in Task Manager.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MenuShowDelay&lt;/strong&gt; - Decreases menus show delay time, it&amp;rsquo;ll make the menus show faster upon clicking.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WaitToKillAppTimeout&lt;/strong&gt; - Reduces system waiting time before killing user processes when the user logs off or shuts down the computer.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LowLevelHooksTimeout&lt;/strong&gt; - Reduces system waiting time before killing not responding services.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MouseHoverTime&lt;/strong&gt; - Reduces popup delay time to show popup description faster when you move mouse cursor over an item.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NoLowDiskSpaceChecks&lt;/strong&gt; - Disables the low disk space check so that you don&amp;rsquo;t get the annoying low disk space notification in system tray.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LinkResolveIgnoreLinkInfo&lt;/strong&gt; - Prevents Windows from wasting time in searching for a program which no longer exists in your system when you try to open its shortcut.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NoResolveSearch&lt;/strong&gt; - Prevents Windows from searching for the disk drive to resolve a shortcut.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NoResolveTrack&lt;/strong&gt; - Prevents Windows from using NTFS file system&amp;rsquo;s tracking feature to resolve a shortcut.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NoInternetOpenWith&lt;/strong&gt; - Disables &amp;ldquo;Search on Internet&amp;rdquo; prompt in &amp;ldquo;Open with&amp;rdquo; window so that you can directly see available programs list.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WaitToKillServiceTimeout&lt;/strong&gt; - Reduces system waiting time before stopping services when the services are notified about shut down process.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Change to Photo Viewer&lt;/strong&gt; - In Windows 10 It&amp;rsquo;s default to use the photo app and that app is Eating resources as hell, so I decided to retrieve the defaults&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Enable Last Active Click&lt;/strong&gt; - So You can switch windows with a single click&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Disable Lockscreen&lt;/strong&gt; - Most of us dosent even need the lock screen, and why should we keep it?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Disable Cortana&lt;/strong&gt; - Cortana is a pain in the head as it dosent even work very well&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Delete paging on Shutdown&lt;/strong&gt; - Windows use this to be an alternative to the ram but we shouldn&amp;rsquo;t keep it after the machine shuts down itself&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Disable the Startup Delay&lt;/strong&gt; - Windows has a startup delay in default to pre-load apps and so on, but it annoys and dosent work on newer PCs&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Disable Shake To Minimize&lt;/strong&gt; - Windows has a feature were you can shake a window to minimize all other windows, which most of the windows users dosent even know about.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;how-to-install&#34;&gt;How To Install&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Download the file from the link below and extract it. If you have trouble extarcting the File, Install &lt;a href=&#34;https://blog.nushankodikara.com/post/the-package-manager-for-windows-chocolatey/&#34;&gt;choco&lt;/a&gt; and Run&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;pre&gt;&lt;code&gt;  &amp;gt; choco install winrar -y
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;And extract it with winrar&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200709_105201.png&#34; alt=&#34;DownloadFile&#34; title=&#34;Downloaded&#34;&gt;
Downloaded File
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200709_105202.png&#34; alt=&#34;ExtractHere&#34; title=&#34;Extracted&#34;&gt;
Extract Here&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 2&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Right-Click on Apply Tweaks File and select merge, give it a yes on the next window and you&amp;rsquo;re pretty much Done with the process&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200709_105203.png&#34; alt=&#34;Rightclick&#34; title=&#34;Merged&#34;&gt;
Right-Click The File And Select Merge
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200709_105204.png&#34; alt=&#34;SayYes&#34; title=&#34;Yes&#34;&gt;
Click On Yes
&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200709_105205.png&#34; alt=&#34;Done&#34; title=&#34;Done&#34;&gt;
You&amp;rsquo;re Done!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Step 3&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Restart Your PC&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;download&#34;&gt;Download&lt;/h3&gt;
&lt;p&gt;You can download the tweak from &lt;a href=&#34;https://www5.zippyshare.com/v/3zA7eFwV/file.html&#34;&gt;Here 2kb&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;troubleshoot&#34;&gt;Troubleshoot&lt;/h3&gt;
&lt;p&gt;If Something odd happens, or you just need to restore the changes, simply run the Restore Tweaks File and you&amp;rsquo;re Good As new.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>The Package Manager for Windows [ Chocolatey ]</title>
<link>https://blog.nushankodikara.com/blog/the-package-manager-for-windows-chocolatey/</link>
<pubDate>Wed, 08 Jul 2020 17:30:00 +0000</pubDate>
      
      <guid>https://blog.nushankodikara.com/blog/the-package-manager-for-windows-chocolatey/</guid>
<description>&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200708_224037.jpg&#34; alt=&#34;Chocolatey&#34; title=&#34;Chocolatey&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Do you ever thought about a single command to install, uninstall or update softwares in Windows? How about a script automatically do everything for you? Guess what, you&amp;rsquo;re in the perfect place!&lt;/p&gt;
&lt;p&gt;Chocolatey is a package manager for Windows, which you can install by a single command and do everything with a single command!&lt;/p&gt;
&lt;h4 id=&#34;showcase&#34;&gt;Showcase&lt;/h4&gt;
&lt;p&gt;Install softwares&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; choco install vlc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Updated softwares&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; choco upgrade vlc
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Uninstall softwares&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; choco uninstall winrar
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And explore more in the &lt;a href=&#34;https://chocolatey.org/docs&#34; title=&#34;Chocolatey Docs&#34;&gt;docs&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;installation&#34;&gt;Installation&lt;/h3&gt;
&lt;p&gt;Step 1&lt;/p&gt;
&lt;p&gt;Installation is not much difficulty however, you just need a powershell window with administration Access. Right-click windows icon at bottom left and select powershell with administration Access.&lt;/p&gt;
&lt;p&gt;Step 2&lt;/p&gt;
&lt;p&gt;Copy the code bellow and paste it in the powershell&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString(&#39;https://chocolatey.org/install.ps1&#39;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And press enter, wait and you&amp;rsquo;re ready to go.&lt;/p&gt;
&lt;h3 id=&#34;usage&#34;&gt;Usage&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Always start a powershell window with administration Access&lt;/strong&gt;. Use the code below to get the help documents&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; choco -?
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;installing-softwares&#34;&gt;Installing Softwares&lt;/h4&gt;
&lt;p&gt;Installation is simple and easy as it seams, replace the package name with the software you need to install and you&amp;rsquo;re ready to go!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; choco install package-name -y
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also install several softwares at once, for an example I&amp;rsquo;ll install VLC Firefox and Spotify at once as below&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; choco install vlc firefox spotify -y
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Also you can get all of the package names and commands by going to &lt;a href=&#34;https://chocolatey.org/&#34;&gt;chocolatey&lt;/a&gt; site and searching for softwares&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://blog.nushankodikara.com/uploads/20200708_224814.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;updating-softwares&#34;&gt;Updating softwares&lt;/h4&gt;
&lt;p&gt;Updating softwares is something harder in Windows, but with chocolatey, harder no more! You can update everything at once by using&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; choco upgrade all -y
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Or packages individually by using&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; choco upgrade package-name -y
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;uninstalling-softwares&#34;&gt;Uninstalling softwares&lt;/h4&gt;
&lt;p&gt;Usually we need a 3rd party uninstaller for this, but with choco, we are saved! Choco logs and monitors all installation by default so we can easily uninstall anything we install with choco by using&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; choco uninstall package-name -y
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h3&gt;
&lt;p&gt;Chocolatey package manager is a very useful tool I use personally on my computers. It makes installations updates and uninstallations easier and less time consuming. However A little bit of knowledge on working with powershell is necessary to operate with chocolatey.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>Best Code Editors of 2020</title>
<link>https://blog.nushankodikara.com/blog/best-code-editors-of-2020/</link>
<pubDate>Wed, 08 Jul 2020 15:30:00 +0000</pubDate>
      
      <guid>https://blog.nushankodikara.com/blog/best-code-editors-of-2020/</guid>
<description>&lt;h2 id=&#34;introduction&#34;&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Code editors are usually overpowered text editors. Mainly they are used for editing codes, but in the modern world, code editors are playing a role of complete development environments for some frameworks, with the help of extensions.&lt;/p&gt;
&lt;p&gt;In this article, I would like to present you my most favourite code editors and also some download links, and typical extensions I use.&lt;/p&gt;
&lt;h3 id=&#34;1-visual-studio-code&#34;&gt;#1 Visual Studio Code&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://www.elegantthemes.com/blog/wp-content/uploads/2019/01/000-Best-Code-Editor-VS-Code.png&#34; alt=&#34;d&#34; title=&#34;VS Code&#34;&gt;&lt;/p&gt;
&lt;p&gt;Visual studio code is a multi talented and an open source project by Microsoft. And also it&amp;rsquo;s available for Windows Linux and Mac OS users. I use visual studio code mainly for web developments, cross platform app development, design and prototyping, server side scripting and as a typical code editor for other projects.&lt;/p&gt;
&lt;p&gt;Download &lt;a href=&#34;https://code.visualstudio.com/&#34; title=&#34;VS Code&#34;&gt;Here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;With this editor, I also use live server extension, SCSS compiler, HTML beautifier, HTML minifier extensions regularly, also you can find them in the visual studio code extension marketplace.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Key Features&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cross-platform&lt;/li&gt;
&lt;li&gt;open source via MIT license (Github link)&lt;/li&gt;
&lt;li&gt;built-in Git (including merge conflicts, diff checking, and modified file tracking from within the editor)&lt;/li&gt;
&lt;li&gt;in-editor debugging&lt;/li&gt;
&lt;li&gt;large library of extensions and plugins&lt;/li&gt;
&lt;li&gt;compatible with nearly every programming language&lt;/li&gt;
&lt;li&gt;very lightweight in comparison to other, similarly robust editors&lt;/li&gt;
&lt;li&gt;quick and responsive&lt;/li&gt;
&lt;li&gt;specific Linux distros for Ubuntu, Fedora, SUSE, Red Hat, and Debian&lt;/li&gt;
&lt;li&gt;IntelliSense highlighting and autocomplete works like a dream&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;2-atom&#34;&gt;#2 Atom&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://www.elegantthemes.com/blog/wp-content/uploads/2018/04/001-Best-Text-Editors.jpg&#34; alt=&#34;d&#34;&gt;&lt;/p&gt;
&lt;p&gt;Atom is another great text editor, in this case a perfect code editor made by GitHub but now owned by Microsoft. Microsoft development team is maintaining the atom code editor for a while now and it established a perfect user base and established as a premiere text and code editor out there. The best part is that Atom is totally free, open source, and highly customizable. Built around a minimal core, Atom comes with multiple language-specific packages built in, and the library of community-written ones has exploded over the years since the editor was first released. Atom is as robust as you need it to be – if the editor doesn’t do something you need, you can create that feature yourself. The Teletype features has been embraced by users, too. It allows multiple developers to work on the same code from remote locations.&lt;/p&gt;
&lt;p&gt;Download &lt;a href=&#34;https://atom.io/&#34; title=&#34;Atom&#34;&gt;Here&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Key Features&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;File system browser&lt;/li&gt;
&lt;li&gt;Teletype&lt;/li&gt;
&lt;li&gt;Fuzzy finder for quickly opening files&lt;/li&gt;
&lt;li&gt;Fast project-wide search and replace&lt;/li&gt;
&lt;li&gt;Multiple cursors and selections&lt;/li&gt;
&lt;li&gt;Multiple panes&lt;/li&gt;
&lt;li&gt;Snippets&lt;/li&gt;
&lt;li&gt;Code folding&lt;/li&gt;
&lt;li&gt;A clean preferences UI&lt;/li&gt;
&lt;li&gt;Import TextMate grammars and themes&lt;/li&gt;
&lt;li&gt;Highly extendable&lt;/li&gt;
&lt;li&gt;Highly theme-able&lt;/li&gt;
&lt;li&gt;Incredibly passionate community&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;3-sublime-text&#34;&gt;#3 Sublime Text&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://www.elegantthemes.com/blog/wp-content/uploads/2018/04/003-Best-Text-Editors.jpg&#34; alt=&#34;d&#34;&gt;&lt;/p&gt;
&lt;p&gt;Sublime text is something different from others, it was designed coding on mind. It has some cons when comparing to something like visual studio code, but for the working part it&amp;rsquo;s doing perfectly, but this doesn&amp;rsquo;t support extensions by this time. Sublime text can be used as a portable text editor and it&amp;rsquo;s mostly usable for web developments &amp;amp; simple code writing.&lt;/p&gt;
&lt;p&gt;Download &lt;a href=&#34;https://www.sublimetext.com/&#34; title=&#34;Sublime text&#34;&gt;Here&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Key Features&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Goto Anything (lightning fast search/shortcuts)&lt;/li&gt;
&lt;li&gt;Command Palette&lt;/li&gt;
&lt;li&gt;Keyboard shortcuts make everything smoother&lt;/li&gt;
&lt;li&gt;Split Editing&lt;/li&gt;
&lt;li&gt;Highly customizable&lt;/li&gt;
&lt;li&gt;Multiple selections&lt;/li&gt;
&lt;li&gt;Distraction free writing mode&lt;/li&gt;
&lt;li&gt;Instant project switch&lt;/li&gt;
&lt;li&gt;Plugin API&lt;/li&gt;
&lt;li&gt;And more&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;final-conclusion&#34;&gt;Final conclusion&lt;/h3&gt;
&lt;p&gt;Yes, there would be new and flashy text and code editors out there and most of the developers will develop and deploy their own text editors and code editors in the future, but these three will be always in my heart and these are what I use. But at the end of the day I use &lt;strong&gt;visual studio code&lt;/strong&gt; for most of projects because of stability and the reliability Microsoft provides with software.&lt;/p&gt;
</description>
</item>
    
    <item>
<title>First Post</title>
<link>https://blog.nushankodikara.com/blog/first-post/</link>
<pubDate>Wed, 08 Jul 2020 06:30:00 +0000</pubDate>
      
      <guid>https://blog.nushankodikara.com/blog/first-post/</guid>
<description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Hello There My Gorgeous friends! From today on, this would be my hobby, blogging about technology and solving your IT Related Anything!&lt;/p&gt;
&lt;h2 id=&#34;what-im-posting&#34;&gt;What I&amp;rsquo;m Posting?&lt;/h2&gt;
&lt;p&gt;As we speak, I&amp;rsquo;m planning to blog about&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Web dev&lt;/li&gt;
&lt;li&gt;PC / Android Software&lt;/li&gt;
&lt;li&gt;New technologies&lt;/li&gt;
&lt;li&gt;Security and Tips&lt;/li&gt;
&lt;li&gt;Coding and Programming&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And so much more on modern technologies.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Stay Tuned With RSS Feed Subscription&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Don&amp;rsquo;t forget to ask me anything through out my Social media links And E-Mail.&lt;/p&gt;
&lt;h2 id=&#34;also&#34;&gt;Also&lt;/h2&gt;
&lt;p&gt;Don&amp;rsquo;t forget! Suggestions are open.&lt;/p&gt;
</description>
</item>
    
  </channel>
</rss>